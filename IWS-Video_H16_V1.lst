0001   0000             ; IWS-Video_H16_V1.0.asm
0002   0000             ; IWS Video Interface
0003   0000             ;
0004   0000             
0005   0000             #define EOW(n8)        .BYTE n8 | $80    ; Sets bit 7 of character
0006   0000             
0007   0000             #INCLUDE    "lib/PC-1500.lib"
0001+  0000              ; PC-1500 library file
0002+  0000             RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
0003+  0000             RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
0004+  0000             PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
0005+  0000             RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
0006+  0000             SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
0007+  0000             SHADOW_RAM_SIZE   = $0600 ; 
0008+  0000             DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
0009+  0000             DISP_BUFF_SIZE    = $0150 ; 
0010+  0000             STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
0011+  0000             STRING_VARS_SIZE  = $01AF ; 
0012+  0000             CPU_STACK         = $7800 ; CPU stack (7800-784F)
0013+  0000             CPU_STACK_SIZE    = $50   ; 
0014+  0000             XCHRINPT_H        = $785B ; Address of exernal character input routine (H)
0015+  0000             XCHRINPT_L        = $785C ; Address of exernal character input routine (L)
0016+  0000             KATAFLAGS         = $785D ; Katakana displayed flags
0017+  0000             KATACHAR          = $785E ; Address of Katakana character codes (H)
0018+  0000             ST_ROM_MOD        = $7860 ; Start of ROM in module (H)
0019+  0000             ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
0020+  0000             ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
0021+  0000             RAM_ST_H          = $7863 ; Start of RAM pointer (H)
0022+  0000             RAM_END_H         = $7864 ; End of RAM pointer (H)
0023+  0000             BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
0024+  0000             BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
0025+  0000             BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
0026+  0000             BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
0027+  0000             BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
0028+  0000             BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
0029+  0000             BEEP_PTR          = $786B ; BEEP and RMT flags
0030+  0000             RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
0031+  0000             RCLTEMPBUFF_SIZE  = $05   ; 
0032+  0000             WAIT_CFG          = $7871 ; WAIT setting
0033+  0000             WAIT_CTR_H        = $7872 ; WAIT time counter (H)
0034+  0000             WAIT_CTR_L        = $7873 ; WAIT time counter (L)
0035+  0000             CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
0036+  0000             CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
0037+  0000             CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
0038+  0000             BEEP_FREQ         = $7878 ; BEEP frequency
0039+  0000             CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
0040+  0000             CURS_BLNK_POS     = $787B ; Position of blink character in display, plus 8
0041+  0000             CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
0042+  0000             BLNKD_CHAR_CODE   = $787D ; Code of character blinked
0043+  0000             CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
0044+  0000             CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
0045+  0000             DISPARAM          = $7880 ; Display Parameter: determines display at READY
0046+  0000             STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
0047+  0000             CURVARADD_H       = $7883 ; Current variable address (H)
0048+  0000             CURVARADD_L       = $7884 ; Current variable address (L)
0049+  0000             CURVARTYPE        = $7885 ; Current variable type
0050+  0000             LASTVARADD_H      = $7886 ; Last variable address (H)
0051+  0000             LASTVARADD_L      = $7887 ; Last variable address (L)
0052+  0000             LASTVARTYPE       = $7888 ; Last variable type
0053+  0000             BREAKPARAM        = $788A ; BREAK flag parameter
0054+  0000             INBUFPTR_L        = $788B ; Input Buffer pointer (L)
0055+  0000             NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
0056+  0000             TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
0057+  0000             TRACE_PARAM       = $788E ; TRACE Parameter
0058+  0000             OUTBUF_PTR        = $788F ; Output Buffer pointer (L)
0059+  0000             FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
0060+  0000             GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
0061+  0000             BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
0062+  0000             BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
0063+  0000             STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
0064+  0000             USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
0065+  0000             USINGM            = $7896 ; USING M integer part
0066+  0000             USING_CHR         = $7897 ; USING & character string
0067+  0000             USINGMD           = $7898 ; USING m decimal part
0068+  0000             VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
0069+  0000             VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
0070+  0000             ERL               = $789B ; ERL, Error code
0071+  0000             CURR_LINE_H       = $789C ; Current line number (H)
0072+  0000             CURR_LINE_L       = $789D ; Current line number (L)
0073+  0000             CURR_TOP_H        = $789E ; Beginning address of current program (H)
0074+  0000             CURR_TOP_L        = $789F ; Beginning address of current program (L)
0075+  0000             PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
0076+  0000             PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
0077+  0000             PREV_LINE_H       = $78A2 ; Previous line number (H)
0078+  0000             PREV_LINE_L       = $78A3 ; Previous line number (L)
0079+  0000             PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
0080+  0000             PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
0081+  0000             SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
0082+  0000             SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
0083+  0000             SRCH_LINE_H       = $78A8 ; Line number found after search (H)
0084+  0000             SRCH_LINE_L       = $78A9 ; Line number found after search (L)
0085+  0000             SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
0086+  0000             SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
0087+  0000             BRK_ADD_H         = $78AC ; Break address (H)
0088+  0000             BRK_ADD_L         = $78AD ; Break address (L)
0089+  0000             BRK_LINE_H        = $78AE ; Break line number (H)
0090+  0000             BRK_LINE_L        = $78AF ; Break line number (L)
0091+  0000             BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
0092+  0000             BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
0093+  0000             ERR_ADD_H         = $78B2 ; Error address (H)
0094+  0000             ERR_ADD_L         = $78B3 ; Error address (L)
0095+  0000             ERR_LINE_H        = $78B4 ; Error line number (H)
0096+  0000             ERR_LINE_L        = $78B5 ; Error line number (L)
0097+  0000             ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
0098+  0000             ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
0099+  0000             ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
0100+  0000             ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
0101+  0000             ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
0102+  0000             ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
0103+  0000             ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
0104+  0000             ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
0105+  0000             DATA_PTR_H        = $78BE ; Pointer for data statement (H)
0106+  0000             DATA_PTR_L        = $78BF ; Pointer for data statement (H)
0107+  0000             FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
0108+  0000             FIXED_VARS_SIZE   = $0110 ; 
0109+  0000             PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
0110+  0000             OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0111+  0000             CLK_BYPASS        = $79D3 ; 55=bypass setting of modulation clock freq, serial output
0112+  0000             KB_BYPASS         = $79D4 ; 55=bypass keyboard scan, obtain input from external device
0113+  0000             UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
0114+  0000             ARX               = $7A00 ; Floating-Point accumulator
0115+  0000             ARX_SIZE          = $08   ; 
0116+  0000             ARZ               = $7A08 ; Scratch register (7A00-7A07)
0117+  0000             ARZ_SIZE          = $08   ; 
0118+  0000             ARY               = $7A10 ; Second operand (7A10-7A17)
0119+  0000             ARY_SIZE          = $08   ; 
0120+  0000             ARU               = $7A18 ; Scratch register (7A18-7A1F)
0121+  0000             ARU_SIZE          = $08   ; 
0122+  0000             ARV               = $7A20 ; Scratch register (7A2-7A27)
0123+  0000             ARV_SIZE          = $08   ; 
0124+  0000             ARW               = $7A28 ; Scratch register (7A28-7A2F)
0125+  0000             ARW_SIZE          = $08   ; 
0126+  0000             ARS               = $7A30 ; Temporary storage register (7A30-7A37)
0127+  0000             ARS_SIZE          = $08   ; 
0128+  0000             B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
0129+  0000             B_STACK_SIZE      = $C8   ; 
0130+  0000             RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
0131+  0000             RND_VAL_SIZE      =       ; S
0132+  0000             KEY_REPEAT        = $7B09 ; Key repeat speed
0133+  0000             APOW_CTR_H        = $7B0A ; Auto power down counter (H)
0134+  0000             APOW_CTR_M        = $7B0B ; Auto power down counter (M)
0135+  0000             APOW_CTR_L        = $7B0C ; Auto power down counter (L)
0136+  0000             CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
0137+  0000             CURS_CTRL         = $7B0E ; Cursor Control Parameter
0138+  0000             KEY_LAST          = $7B0F ; Last pressed key code
0139+  0000             STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
0140+  0000             STR_BUF_SIZE      = $50   ; 
0141+  0000             OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
0142+  0000             OUT_BUF_SIZE      = $50   ; 
0143+  0000             IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
0144+  0000             IN_BUF_SIZE       = $80   ; 
0145+  0000             ST_MAIN_ROM       = $C000 ; Start of PC-1500 ROM, 55
0146+  0000             SA_XREG_2RAM      = $C001 ; Save X-Reg to 78xx. D1 defines low byte xx.
0147+  0000             SAVEVARPTR_ARX    = $C00E ; Save variable pointer. Address from U-Reg, length from AR-X (7A07).
0148+  0000             SAVEVARPTR_A      = $C011 ; Save variable pointer. Address from U-Reg, length from A.
0149+  0000             TRACE_VEC         = $C01D ; Not used (C01C-C01F)
0150+  0000             ST_BAS_TBL        = $C020 ; Start of Basic table
0151+  0000             TOKEN_TBL         = $C054 ; B5: AREAD F1 80:C684
0152+  0000             SM_NEW0           = $C34F ;  'NEW0?' (C350-C354) (Start of system messages)
0153+  0000             SM_NEW0_SIZE      = $05   ; 
0154+  0000             SM_CHECK          = $C355 ;  ':CHECK' (C355-C35B)
0155+  0000             SM_BREAK          = $C35C ;  'BREAK' (C35C-C361)
0156+  0000             SM_IN             = $C362 ;  'IN' (C362-C364)
0157+  0000             SM_IN_SIZE        = $05   ; 
0158+  0000             SM_ERROR          = $C365 ;  'ERROR' (C365-C36A)
0159+  0000             SM_ERROR_SIZE     = $05   ; 
0160+  0000             DEFKEY_TBL        = $C36B ; Occupied DEF key table (C36B-C38A)
0161+  0000             DEFKEY_TBL_SIZE   = $05   ; 
0162+  0000             EDCTRL_TBL        = $C38B ; Address table for editor control characters (C38B-C3A9)
0163+  0000             EDCTRL_TBL_SIZE   = $05   ; 
0164+  0000             FVAL_TBLE         = $C3A8 ; Operator table for formula eval of subs (C3A8-C3FF)  (DE) (D6DF)
0165+  0000             FVAL_TBLE_SIZE    = $05   ; 
0166+  0000             BASIC_INT         = $C400 ; Basic interpreter, Y-Ref points to next char/token
0167+  0000             BCMD_LET          = $C458 ; Basic command LET
0168+  0000             TRCROUTINE        = $C4AF ; Trace Routine
0169+  0000             BCMD_STOP         = $C4B6 ; Basic command STOP
0170+  0000             BCMD_END          = $C50D ; Basic Command END
0171+  0000             BCMD_GOTO         = $C515 ; Basic Command GOTO
0172+  0000             DEFKEY_EVAL       = $C529 ; Evaluate def keys
0173+  0000             BCMD_IF           = $C5B4 ; Basic Command IF
0174+  0000             BCMD_ON           = $C5E0 ; Basic Command ON
0175+  0000             BCMD_GOSUB        = $C64E ; Basic Command GOSUB
0176+  0000             BCMD_REM          = $C676 ; Basic Command REM
0177+  0000             BCMD_USING        = $C67C ; Basic Command USING
0178+  0000             BCMD_DATA         = $C684 ; Basic Command DATA / ARUN / AREAD
0179+  0000             BCMD_TRON         = $C68C ; Basic Command TRON
0180+  0000             BCMD_TROFF        = $C693 ; Basic Command TROFF
0181+  0000             BCMD_DEGREE       = $C697 ; Basic Command DEGREE
0182+  0000             BCMD_RADIAN       = $C6A4 ; Basic Command RADIAN
0183+  0000             BCMD_GRAD         = $C6A8 ; Basic Command GRAD
0184+  0000             BCMD_RETURN       = $C6AC ; Basic Command RETURN
0185+  0000             BCMD_NEXT         = $C704 ; Basic Command NEXT
0186+  0000             BCMD_FOR          = $C711 ; Basic Command FOR
0187+  0000             BCMD_POKE         = $C777 ; Basic Command POKE
0188+  0000             BCMD_POKE#        = $C778 ; Basic Command POKE#
0189+  0000             BCMD_RESTORE      = $C7A2 ; Basic Command RESTORE
0190+  0000             BCMD_READ         = $C7BB ; Basic Command READ
0191+  0000             BCMD_NEW          = $C8A0 ; Basic Command NEW
0192+  0000             BCMD_CLEAR        = $C8F5 ; Basic Command CLEAR
0193+  0000             BCMD_CALL         = $CB63 ; Basic Command CALL
0194+  0000             BCMD_RUN          = $C884 ; Basic Command RUN
0195+  0000             BCMD_CONT         = $C8C7 ; Basic Command CONT
0196+  0000             BCMD_INPUT        = $C8FA ; Basic Command INPUT
0197+  0000             BCMD_LOCK         = $C968 ; Basic Command LOCK
0198+  0000             BCMD_UNLOCK       = $C96A ; Basic Command UNLOCK
0199+  0000             BCMD_LIST         = $C96E ; Basic Command LIST
0200+  0000             BCMD_DIM          = $C988 ; Basic Command DIM
0201+  0000             COLD_START        = $C9E4 ; Editor Cold Start
0202+  0000             BTN_SHCL          = $CA55 ; SHIFT CL (Clear All)
0203+  0000             WARM_START        = $CA58 ; Editor Warm Start
0204+  0000             BUTTON_CL         = $CA64 ; CL Button (Clear LCD )
0205+  0000             EDITOR            = $CA80 ; Editor
0206+  0000             BTN_RCL           = $CB61 ; RCL Button
0207+  0000             RSV_CHNG          = $CB69 ; Change RESERVE level
0208+  0000             BTN_SHMODE        = $CB9C ; SHIFT MODE Button (RESERVE mode)
0209+  0000             BTN_MODE          = $CBA0 ; MODE Button
0210+  0000             BTN_INS           = $CBC7 ; INS Button
0211+  0000             BTN_DEL           = $CBCF ; DEL Button
0212+  0000             BTN_RIGHT         = $CBE4 ; CURSOR RIGHT Button
0213+  0000             PRG_ENTER         = $CC1D ; "@", Programmatic ENTER
0214+  0000             BTN_LRFT          = $CC22 ; CURSOR LEFT Button
0215+  0000             BTN_UP            = $CC38 ; CURSOR UP Button
0216+  0000             BTN_DOWN          = $CC48 ; CURSOR DOWN Button
0217+  0000             BTN_ENTER         = $CCC1 ; ENTER Button
0218+  0000             UNLOCK            = $CD6A ; UNLOCK
0219+  0000             BTN_OFF           = $CD71 ; OFF Button
0220+  0000             ERR1              = $CD89 ; Display ERROR 1, return to editor.
0221+  0000             ERRN              = $CD8B ; Display ERROR N, from UH or do 'ON-ERROR' routine.
0222+  0000             INS2INBUF         = $CDE6 ; INSERT - Insert one character into the Input Buffer.
0223+  0000             CHAR2INBUF        = $CE10 ; Enter characters into the Input Buffer.
0224+  0000             DELFRMINBUF       = $CE38 ; DELETE - Delete one character from the Input Buffer.
0225+  0000             DEFEVAL           = $CE4A ; Evaluate DEF key
0226+  0000             RESKEY_SRCH       = $CEC4 ; Searches for reserve key code in Reserve memory
0227+  0000             TXFR_RSV_KEY      = $CED0 ; Transfers reserve key assignment to Reserve memory.
0228+  0000             PRGLINE_TDI       = $CF27 ; Transfer, delete, insert program line from Input Buffer
0229+  0000             INITSYSADDR       = $CFCC ; Initializes System Addresses, turn off TRACE.
0230+  0000             INBUF_CLRRST      = $D021 ; Clear rest of the input buffer (0D).
0231+  0000             INBUF_CLRINIT     = $D02B ; Clear Input Buffer with '0D', init Input Buffer pointer
0232+  0000             INBUF_INIT        = $D030 ; Clear Input Buffer, Y-Reg points to start of Input Buffer
0233+  0000             INBUF_CLR         = $D034 ; Clears Input buffer with $0D
0234+  0000             SYSMSG            = $D046 ; Send System Messages.
0235+  0000             UL_XREG2YREG      = $D049 ; Transfers UL bytes from X-Reg to Y-Reg
0236+  0000             VARONBSTK         = $D04C ; Find variable on Basic Stack, if not found C = 0.
0237+  0000             POPBSTK           = $D065 ; Pop address from Basic Stack.
0238+  0000             PSHBSTK           = $D071 ; Push U-Reg to Basic Stack
0239+  0000             DELSVARS          = $D080 ; Deletes all standard variables
0240+  0000             DELDVARS          = $D091 ; Deletes dimensioned variables
0241+  0000             DEL_DIM_VARS      = $D09C ; Deletes dimensioned variables if program and variable memory overlap C=1
0242+  0000             BCD_Y2ARX         = $D14F ; Pass BCD number pointed to by Y-Reg to AR-X
0243+  0000             XFRLINE2INBUF     = $D2D0 ; Transfer line pointed to by X-Reg to Input Buffer
0244+  0000             LINESEARCH        = $D2EA ; Searches for line number according to U-Reg from start of program.
0245+  0000             SRCHPRGLINE       = $D2EC ; Searches program line in U-REG from X-REG
0246+  0000             DELU_FROMX        = $D3C4 ; Deletes (U + 1) bytes from X-Reg.
0247+  0000             DEC2HEX           = $D3D5 ; Convert from decimal to hexadecimal.
0248+  0000             BCMD_PEEK         = $D993 ; Basic commands PEEK/PEEK#
0249+  0000             BCMD_NOT          = $D99E ; Basic command NOT
0250+  0000             BCMD_INKY         = $D9AA ; Basic command INKEY$
0251+  0000             BCMD_CHR          = $D9B1 ; Basic command CHR$
0252+  0000             BCMD_STR          = $D9CF ; Basic command STR$
0253+  0000             BCMD_LEN          = $D9D7 ; Basic command LEN / ASC
0254+  0000             ARUINT2ARX        = $D9E7 ; Transfers U-Reg as an integer to AR-X in the format '82 UH UL '.
0255+  0000             BCMD_RLM_STR      = $D9F3 ; Basic commands RIGHT$ / LEFT$ / MID$
0256+  0000             BCMD_STATUS       = $DA44 ; Basic command STATUS
0257+  0000             BCMD_MEM          = $DA5D ; Basic command MEM
0258+  0000             MULT16B           = $DA71 ; 16-Bit Multiplication: X-Reg=Y-Reg*U-Reg.
0259+  0000             TWOSCOMP          = $DAA8 ; Forms two's complement of U-Reg.
0260+  0000             EVAL_USING        = $DAB2 ; Evaluation of USING paramters from Y-Reg
0261+  0000             ISARXBCD          = $DB87 ; Check AR-X for BCD format
0262+  0000             LOAD_NEXT         = $DCD4 ; Load next Token / character
0263+  0000             BCMD_TIME         = $DE82 ; Basic command TIME
0264+  0000             XREG2STRBUF       = $DFA1 ; Inserts string pointed to by X-Reg into string buffer. Jump if overflow.
0265+  0000             STRBUF_OK         = $DFB4 ; Checks if string buffer can hold #chars in Accumulator. No C=1.
0266+  0000             ARX2STRBUF        = $DFC4 ; Loads AR-X with a pointer to the string buffer.
0267+  0000             U_MINUS_X         = $DFE2 ; U-Reg = U-Reg - X-Reg. If overflow occurs C=0 and UH=16
0268+  0000             MEM_IN_UREG       = $DFEE ; Calculates the available memory space (MEM) in U-Reg.
0269+  0000             PRGST2XREG        = $DFF3 ; X-Reg = Program Start Address. U-Reg = STATUS 1-2
0270+  0000             RESET             = $E000 ; Reset-Routine
0271+  0000             IO_INT            = $E153 ; Initializes I/O module with table from E168.
0272+  0000             IO_TBL            = $E168 ; Paramaters for I/O init. (Byte table)
0273+  0000             ISR_HANDLER       = $E171 ; Maskable Interrupt Routine
0274+  0000             NMI_HANDLER       = $E22B ; Non-Maskable Interrupt Routine
0275+  0000             TIMER_ISR         = $E22C ; Timer Interrupt
0276+  0000             PVBANK            = $E234 ; PV banking. Using status of bit 0 in 7900. If 0, PV=1.
0277+  0000             WAITNOKEYS        = $E23D ; Waits until no more keys are pressed.
0278+  0000             WAIT4KB           = $E243 ; Waiting for character input from keyboard. Accumulator=character
0279+  0000             AUTO_OFF          = $E33F ; Auto-Power-Off routine
0280+  0000             ISKEY_1           = $E418 ; Keyboard query. Z=1 if no key pressed.
0281+  0000             ISKEY_0           = $E41A ; Keyboard query. Z=0 if no key pressed.
0282+  0000             KEY2ASCII         = $E42C ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0283+  0000             CHK_BRK           = $E451 ; Checks whether Break was pressed. Yes: Z=0, no Z=1.
0284+  0000             STR_COMP          = $E4A0 ; Compare two strings: pointer in Y-Reg and AR-Y. AR-X=1 is true.
0285+  0000             TOK_TABL_SRCH     = $E4A8 ; Searches for token table below C000. CE-158 C=1, UH-1. CE-150 C=1, UH=2
0286+  0000             BCMD_INPUTNUM     = $E4E7 ; Basic command INPUT#
0287+  0000             BCMD_PRINT        = $E4EB ; Basic command PRINT
0288+  0000             WRITE2CLOCK       = $E52B ; Write to clock  chip.
0289+  0000             TIMEMODE          = $E573 ; Timer mode select according to Accumulator
0290+  0000             ARX2TIME          = $E59A ; Write TIME from AR-X to clock chip
0291+  0000             TIME2ARX          = $E5B4 ; Read TIME from clock chip into AR-X.
0292+  0000             BEEP_ON-OFF       = $E655 ; Beep ON/OFF. Beep on/off pointer 7868 80=1 beep off, 80=0 beep on.
0293+  0000             BCMD_BEEP_STD     = $E669 ; Basic command BEEP - Standard beep.
0294+  0000             BCMD_BEEP         = $E66F ; Basic command BEEP - Duration in X-Reg, Pitch in UL.
0295+  0000             BCMD_PAUSE        = $E6A5 ; Basic command PAUSE
0296+  0000             BCMD_GPRINT       = $E7AC ; Basic command GPRINT
0297+  0000             BCMD_GCURSOR      = $E83E ; Basic command GCURSOR
0298+  0000             BCMD_CURSOR       = $E846 ; Basic command CURSOR
0299+  0000             BCMD_CLS          = $E865 ; Basic command CLS
0300+  0000             BCMD_WAIT         = $E86A ; Basic command WAIT
0301+  0000             TIMEDELAY         = $E88C ; Time delay 15.625 ms * number in U-Reg. BREAK is possible.
0302+  0000             PRGMDISP          = $E8CA ; Display program.
0303+  0000             STATUSCHK         = $E9EB ; Checks display and input status.
0304+  0000             USING_FRMT        = $EA78 ; USING formatting. If error C = 1.
0305+  0000             ARX2ASCII         = $EB40 ; Converts AR-X to ASCII according to USING parameters.
0306+  0000             TRUNCDEC          = $EC2F ; Truncation of the decimal places
0307+  0000             BCMD_DEC9         = $EC3C ; Checks if value in AR-X can be represented in 9 decimal places. If not, C=1.
0308+  0000             X_STROUT          = $EC5C ; Transfers string in X-Reg to output buffer. If error C=1.
0309+  0000             IF_ARX2BCD        = $EC6C ; If AR-X numerical convert to BCD. C=0. If CSI contine w/Distance Address D1.
0310+  0000             ARXBCD2ASCII      = $EC74 ; Converts AR-X from BCD to ASCII and transfers to output buffer.
0311+  0000             XP_STROUT         = $EC82 ; Transmits string X-Reg points to into output buffer. C=1 if buffer full
0312+  0000             CLRNOCURSOR       = $EC9C ; Clears LCD if cursor not allowed and sets the matrix column pointer to 00.
0313+  0000             INIT_CURS         = $ECAE ; Initializes cursor parameters.
0314+  0000             INIT_MTRX         = $ECB2 ; Initializes matrix column pointer (0).
0315+  0000             ARX2OUTBUF        = $ECB7 ; Transfers value in AR-X to output buffer.
0316+  0000             ARX2OUTBUF_F      = $ECD6 ; Tranfer AR-X foramtted to Ouput Buffer
0317+  0000             ARXASCII2OUTBUF   = $ECE3 ; Convert AR-X to ASCII and sent to Output Buffer
0318+  0000             USING_PARAM       = $ECEB ; Determine and transer USING paramaters
0319+  0000             OUTBUF2LCD        = $ECFA ; Output 26 characters in Output Buffer to LCD
0320+  0000             TEXTUREG_A        = $ED00 ; Output of text on LCD. U-Reg=start address; A=length.
0321+  0000             TEXTUREG_XL       = $ED3B ; Outputs text from U-Reg. XL = number of characters
0322+  0000             CHAR2COL          = $ED4D ; Output character at next matrix column
0323+  0000             CHARA2COL         = $ED57 ; Output character in A to next matrix column.
0324+  0000             CHARA2COLX        = $ED5B ; Output character in A to matrix column X-Reg points to.
0325+  0000             A2HEX             = $ED7D ; Convert character in A to HEX nibble
0326+  0000             ASCII2HEX         = $ED95 ; Convert two ASCII characters from X-Reg into HEX
0327+  0000             MTRXNRANGE        = $EDAB ; Checks if matrix pointer still in permissible range 0-155. No, C=1
0328+  0000             MTRXINC           = $EDB1 ; Increase matrix pointer if in permissible range 0-155. No, C=1
0329+  0000             LCDCACHE          = $EDC1 ; Cache LCD display of 7810-7BFF
0330+  0000             BCMD_BFF          = $EDD8 ; Retrieve LCD display of 7610-7BFF
0331+  0000             HEX2COL           = $EDEF ; Output HEX value from A to next matrix column
0332+  0000             GPRNT_A_2LCD      = $EDF6 ; Output of A as a GRPRINT (bit pattern) on LCD 
0333+  0000             MATRIX_PTR2XREG   = $EE1F ; Calculates matrix column address from matrix pointer, to X-Reg.
0334+  0000             MATRIX_A2XREG     = $EE22 ; Calculated matrix column address from A, to X-Reg
0335+  0000             CHAR2ADDR         = $EE48 ; Retrive address in Character Set Table for characters in A
0336+  0000             LCDCLR            = $EE71 ; Clears the LCD display.
0337+  0000             LCDCLRRNG         = $EE78 ; Clears the range from (UH00-UH40).
0338+  0000             SAVELCD2BUF       = $EE80 ; Save LCD to buffer
0339+  0000             BUF2LCD           = $EE99 ; Transfer buffer to LCD
0340+  0000             LCDCHRLEFT        = $EEB0 ; Determines number of empty characters left on LCD, to A.
0341+  0000             BCMD_POINT        = $EECB ; Basic command POINT
0342+  0000             CURSOR_OFF        = $EF00 ; Turns off blinking cursor.
0343+  0000             USING2STK         = $EF05 ; Saves USING parameters on processor stack (7895-7897)
0344+  0000             ARX2STRNG         = $EF1B ; Convert AR-X to string
0345+  0000             STK2USING         = $EF35 ; Get USING parameters from processor stack.
0346+  0000             TXT2LCD           = $EF44 ; Output text on LCD display.
0347+  0000             TXT2LCD_ARY       = $EF5B ; Output text on LCD from AR-Y to 7AXL
0348+  0000             PREPLCDOUT        = $EF67 ; Prepare the LCD output
0349+  0000             OUTBUFCLR         = $EF81 ; Clear output buffer.
0350+  0000             SUBTR             = $EFB6 ; AR-X = AR-X - AR-Y (Subtraction).
0351+  0000             ADDIT             = $EFBA ; AR-X = AR-X + AR-Y (Addition).
0352+  0000             PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
0353+  0000             PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
0354+  0000             PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
0355+  0000             PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
0356+  0000             PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
0357+  0000             PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
0358+  0000             PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
0359+  0000             PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
0360+  0000             PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
0361+  0000             PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
0362+  0000             PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
0363+  0000             PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)
0364+  0000             SQUARE            = $F019 ; AR-X = AR-X * AR-X (Square)
0365+  0000             MULTIPLY          = $F01A ; AR-X = AR-X * AR-Y (Multiplication)
0366+  0000             ADDMANY           = $F067 ; Add multiple ARs to AR-X if proper bit set in A
0367+  0000             RECIPRICAL        = $F080 ; AR-X = 1 /AR- X (Reciprocal)
0368+  0000             DIVISION          = $F084 ; AR-X = AR-X / AR-Y (Division)
0369+  0000             SQR_ROOT          = $F0E9 ; AR-X = SQR (AR-X) (Square Root)
0370+  0000             BCMD_LN           = $F161 ; Basic command LN, AR-X = LN (AR-X)
0371+  0000             BCMD_LOG          = $F165 ; Basic command LOG, AR-X = LOG (AR-X)
0372+  0000             BCMD_EXP          = $F1CB ; Basic command EXP
0373+  0000             EXPONENT          = $F1D4 ; AR-X = 10 ^ AR-X
0374+  0000             BCMD_COS          = $F391 ; Basic command COS
0375+  0000             BCMD_TAN          = $F39E ; Basic command TAN
0376+  0000             BCMD_SIN          = $F3A2 ; Basic command SIN
0377+  0000             BCMD_ACS          = $F492 ; Basic command ACS
0378+  0000             BCMD_ATN          = $F496 ; Basic command ATN
0379+  0000             BCMD_ASN          = $F49A ; Basic command ASN
0380+  0000             BCMD_DEG          = $F531 ; Basic command DEG
0381+  0000             BCMD_DMS          = $F564 ; Basic command DMS
0382+  0000             BCMD_ABS          = $F597 ; Basic command ABS
0383+  0000             BCMD_SGN          = $F590 ; Basic command SGN
0384+  0000             BCMD_PI           = $F5B5 ; Basic command PI (in AR-Y)
0385+  0000             BCMD_INT          = $F5BE ; Basic command INT
0386+  0000             BCMD_RND          = $F5D0 ; Basic command RND
0387+  0000             RANDGEN           = $F5EB ; Generates randon number in AR-X
0388+  0000             ARX_              = $F63C ; Sets digits 11 and 12 in AR-X to 00. Used at end of (5C)
0389+  0000             BCMD_RANDOM       = $F641 ; Basic command RANDOM
0390+  0000             ARX2BCD_ABS       = $F65D ; Converts AR-X into BCD form.
0391+  0000             ARX2BCD           = $F663 ; Converts the result in the AR-X into the correct BCD format.
0392+  0000             XFER_DEC_ARX2ARY  = $F6B4 ; Transfers decimal places from AR-X to AR-Y.
0393+  0000             SIGN_TEST         = $F6E6 ; Push result of sign combination (AR-X and AR-Y) on the stack.
0394+  0000             LDA_SGN_ARX       = $F6FB ; Load A with sign from AR-X, clears signs AR-X.
0395+  0000             XFER_ARY2ARS      = $F701 ; Transfer AR-Y to AR-S
0396+  0000             XFER_ARX2ARS      = $F707 ; Transfer AR-X to AR-S.
0397+  0000             XFER_ARX2ARY      = $F70D ; Transfer AR-X to AR-Y.
0398+  0000             XFER_ARS2ARY      = $F715 ; Transfer AR-S to AR-Y.
0399+  0000             XFER_SM_ARY2ARX   = $F71B ; Transfer sign and mantissa from AR-Y to AR-X.
0400+  0000             XFER_SM_ARZ2ARX   = $F71F ; Transfer sign and mantissa from AR-Z to AR-X.
0401+  0000             XFER_SM_ARY2ARZ   = $F725 ; Transfer sign and mantissa from AR-Y to AR-Z.
0402+  0000             XFER_SM_ARX2ARY   = $F729 ; Transfer sign and mantissa from AR-X to AR-Y
0403+  0000             XFER_SM_ARX2ARZ   = $F72F ; Transfer sign and mantissa from AR-X to AR-Z (7A09 - 7A0F).
0404+  0000             XREG2YREG         = $F733 ; Block shift 7 bytes from X-Reg to Y-Reg.
0405+  0000             XFER_ARS2ARX      = $F737 ; Transfer AR-S to AR-X.
0406+  0000             XFER_ARY2ARX      = $F73D ; Transfer AR-Y to AR-X.
0407+  0000             CLR_SM_ARY        = $F747 ; Clear sign and mantissa of AR-Y.
0408+  0000             CLR_SM_ARZ        = $F74B ; Clear sign and mantissa of AR-Z.
0409+  0000             CLR_SM_ARW        = $F74F ; Clear sign and mantissa of AR-W.
0410+  0000             CLR_ARY           = $F753 ; Clear AR-Y
0411+  0000             CLR_ARX           = $F757 ; Clear AR-X.
0412+  0000             CLR_ARZ           = $F75B ; Clear AR-Z.
0413+  0000             CLR_SM_XREG       = $F75F ; Clear sign and mantissa in AR-X
0414+  0000             CLR_7_XREG        = $F761 ; Clear 7 bytes from X-Reg.
0415+  0000             CLR_N_XREG        = $F763 ; Clear UL + 1 byte from X-Reg.
0416+  0000             ARW_SHR_4BITS     = $F769 ; Shift AR-W one nibble right (/10)
0417+  0000             ARZ_SHR_4BITS     = $F76D ; Shift AR-Z one nibb;e right (/10)
0418+  0000             ARY_SHR_4BITS     = $F771 ; Shift AR-Y one nibble right (/10)
0419+  0000             ARX_SHR_4BITS     = $F775 ; Shift AR-X one nibble right (/10)
0420+  0000             X_REG_SHR_4BITS   = $F777 ; Shift X-Reg one nibble right (/10)
0421+  0000             ARS_SHL_4BITS     = $F78C ; Shift AR-S one nibble left (*10).
0422+  0000             ARW_SHL_4BITS     = $F794 ; Shift AR-W one nibble left (*10).
0423+  0000             ARZ_SHL_4BITS     = $F798 ; Shift AR-Z one nibble left (*10).
0424+  0000             ARX_SHL_4BITS     = $F79C ; Shift AR-X one nibble left (*10).
0425+  0000             RND2ARX           = $F7A7 ; Transfer random number from RND to AR-X.
0426+  0000             SET_HB_XYREGS     = $F7B0 ; Set high bytes in X-Reg and Y-Reg to 7A (to AR register).
0427+  0000             SWAP_AARX_ARY     = $F7B5 ; Swap AR-X with AR-S.
0428+  0000             SWAP_ARX_ARY      = $F7B9 ; Swap AR-X with AR-Y.
0429+  0000             SWAP_BYTES        = $F7BF ; Swap bytes (UL+1)
0430+  0000             ADD_ARU_ARX       = $F7C8 ; AR-X = AR-X + AR-U.
0431+  0000             TOKENIZE_INBUF    = $F957 ; Tokenizer. Convert input buffer to program line.
0432+  0000             VAR_TYPE          = $F97B ; Convert input buffer into tokens and use formula interpreter
0433+  0000             DEC_OPN           = $FA58 ; Decrement the OPN byte in A in 2K steps
0434+  0000             SET_PV            = $FA65 ; Sets PV bit and PV byte according to Carry flag
0435+  0000             TOKEN_CHECK       = $FA74 ; Checks if token table exists, right-shifted HB address in A. No, C=0.
0436+  0000             TOKEN_PROCESS     = $FA89 ; Processes tokens according to data bytes.
0437+  0000             PVBANK_A          = $FB2A ; Performs PV banking according to A (79D0).
0438+  0000             TRACE             = $FB9D ; Trace
0439+  0000             STRXFR            = $FBCB ; Save string to output buffer or output to string buffer
0440+  0000             AUX_CONST         = $FBE9 ; Auxiliary constants for arithmetic routines
0441+  0000             CHARSET           = $FCA0 ; Character set table
0442+  0000             KB_LAYOUT_NORM    = $FE80 ; Keyborad layout (standard function)
0443+  0000             KB_LAYOUT_SH      = $FEC0 ; Keyborad layout (shifted function)
0444+  0000             CALL_VECTORS      = $FF00 ; Table for CALL vectors
0008   0000             #INCLUDE    "lib/CE-158.lib"
0001+  0000              ; CE-158 library file
0002+  0000             OUTSTAT_REG       = $7850 ; CE-158 OUTSTAT value
0003+  0000             CONSOLE_REG       = $7851 ; CE-158 CONSOLE. Number of characters/line. Default=0=unlimited
0004+  0000             CONSOLE2          = $7852 ; CE-158 Console 1 (//)
0005+  0000             CE158_UNDEF1      = $7853 ; CE-158 Undefined
0006+  0000             CE158_UNDEF2      = $7854 ; CE-158 Undefined
0007+  0000             CRLF_REG          = $7855 ; CE-158 EOL Character(s) used i.e. CR/LF. HB for LPT, LB for COM
0008+  0000             ZONE_REG          = $7856 ; CE-158 ZONE
0009+  0000             SETDEV_REG        = $7857 ; CE-158 SETDEV value
0010+  0000             SETCOM_REG        = $7858 ; CE-158 SETCOM
0011+  0000             CE158_7859_UNDEF  = $7859 ; CE-158 Undefined
0012+  0000             CE158_785A_UNDEF  = $785A ; CE-158 Undefined
0013+  0000             CE158_REG_79DD    = $79DD ; Used for BPD command flags
0014+  0000             CE158_REG_79DE    = $79DE ; Unknown use
0015+  0000             CE158_REG_79DF    = $79DF ; Used for CLOAD/CSAVE BUSY annunciator blink counter
0016+  0000             CE158_REG_79FA    = $79FA ; Used by CE-158
0017+  0000             CE158_REG_79FB    = $79FB ; Used by CE-158
0018+  0000             CE158_REG_79FC    = $79FC ; Used by CE-158
0019+  0000             CE158_REG_79FD    = $79FD ; Used by CE-158
0020+  0000             CE158_REG_79FE    = $79FE ; Used by CE-158
0021+  0000             CE158_7B08        = $7B08 ; Used in CE-158 Low Bank
0022+  0000             CE158_DIV_RESET   = $D004 ; CE158_DIVIDER_RESET (ME1)
0023+  0000             CE158_UREG_OUTP   = $D005 ; CE158_U_REG_OUTPUT  (ME1)
0024+  0000             CE158_SER_XFR     = $D006 ; CE158_SERIAL_XFR  (ME1)
0025+  0000             CE158_FREG_LDIV   = $D007 ; CE158_F_REG_LD/DIV  (ME1)
0026+  0000             CE158_PRT_C       = $D008 ; CE158_PRT_C  (ME1)
0027+  0000             CE158_G_REG       = $D009 ; CE158_G_REG  (ME1)
0028+  0000             CE158_MSK_REG     = $D00A ; CE158_MSK_REG  (ME1)
0029+  0000             CE158_IF_REG      = $D00B ; CE158_IF_REG  (ME1)
0030+  0000             CE158_PRT_A_DIR   = $D00C ; CE158_PRT_A_DIR  (ME1)
0031+  0000             CE158_PRT_B_DIR   = $D00D ; CE158_PRT_B_DIR  (ME1)
0032+  0000             CE158_PRT_A       = $D00E ; CE158_PRT_A  (ME1)
0033+  0000             CE158_PRT_B       = $D00F ; CE158_PRT_B  (ME1)
0034+  0000             CE158_UART_DATAW  = $D200 ; UART_DATA_W
0035+  0000             CE158_UART_REGW   = $D201 ; UART_REG_W
0036+  0000             CE158_UART_DATAR  = $D202 ; UART_DATA_R
0037+  0000             CE158_UART_REGR   = $D203 ; UART_REG_R
0038+  0000             CE-158_IR_PING    = $DC00 ; PC-1500 pings this address every ISR cycle (does nothing)
0039+  0000             CE158_IR_REG      = $DE00 ; Interrupt ID register, Bit 7 0 = INT, 1 = No INT.
0009   0000             ;#INCLUDE    "lib/CE-158N.lib"
0010   0000             #INCLUDE    "lib/CE-150.lib"
0001+  0000              ; CE-150 library file
0002+  0000             USER_CTRX_H       = $79E0 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (H)
0003+  0000             USER_CTRX_L       = $79E1 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (L)
0004+  0000             USER_CTRY_H       = $79E2 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (H)
0005+  0000             USER_CTRY_L       = $79E3 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (L)
0006+  0000             SCIS_CTRY_H       = $79E4 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (H)
0007+  0000             SCIS_CTRY_L       = $79E5 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (L)
0008+  0000             ABS_POSX          = $79E6 ; CE-150, ABSOLUTE POSITION X (X dir absolute point counter)
0009+  0000             SCIS_EXTY_H       = $79E7 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (H)
0010+  0000             SCIS_EXTY_L       = $79E8 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (L)
0011+  0000             PEN_UPDOWN        = $79E9 ; CE-150, Pen UP/DOWN
0012+  0000             LINE_TYPE         = $79EA ; CE-150, LINE TYPE (0 to 9), GRAPH mode
0013+  0000             DOT_LINE_CTR      = $79EB ; CE-150, Dotted line counter
0014+  0000             CURR_PEN          = $79EC ; CE-150, Current Pen position: 00=up, 01=down
0015+  0000             XMTR_HLD_CTR      = $79ED ; CE-150, X-motor hold counter
0016+  0000             MTR_PHASE         = $79EE ; CE-150, Motor Phase: stored in Port C
0017+  0000             YMTR_HLD_CTR      = $79EF ; CE-150, Y-Motor hold counter
0018+  0000             PRNT_MODE         = $79F0 ; CE-150, Print Mode: 00=TEXT, FF=GRAPH
0019+  0000             PRNT_DISABLE      = $79F1 ; CE-150, Printer disable
0020+  0000             PRNT_ROTATE       = $79F2 ; CE-150, ROTATE setting (0 to 3)
0021+  0000             PRNT_COLOR        = $79F3 ; CE-150, COLOR setting (0 to 3)
0022+  0000             PRNT_CSIZE        = $79F4 ; CE-150, CSIZE setting (0 to 3)
0023+  0000             PRNT_LLPARAM      = $79F5 ; CE-150, LPRINT/LLIST Parameter
0024+  0000             PRNT_TEMPM        = $79F6 ; CE-150, LINE=dir. param. LLIST=determine LF. COLOR=Pen location.
0025+  0000             PRNT_DTYPE        = $79F7 ; CE-150, Type of data LRPINTed: 00=numeric, FF=character string
0026+  0000             PRNT_TEMPP        = $79F8 ; CE-150, Temp storage of Pen location during paper feed
0027+  0000             PRNT_PWRINT       = $79F9 ; CE-150, Flag indicating power up/interrupt in progress
0028+  0000             PRNT_VEC          = $A000 ; CE-150 Character vectors (A000-A28A)
0029+  0000             PRNT_VEC_SIZE     = $028B ; 
0030+  0000             MGP1_150          = $A28B ; Start of MGP 1 program block
0031+  0000             COLDES            = $A519 ; CE-150 Color Designation
0032+  0000             MOTOFF            = $A769 ; CE-150 Printer motor OFF
0033+  0000             PRINT_150         = $A781 ; CE-150 Print ASCII character (no LF)
0034+  0000             MOTDRV            = $A8DD ; CE-150 Motor Drive, move pen
0035+  0000             LFEED             = $A951 ; CE-150 Line Feed
0036+  0000             NLFEED            = $AA04 ; CE-150 send #n line feeds to printer
0037+  0000             PENUPDOWN         = $AAE3 ; CE-150 Pen Up/Down
0038+  0000             GRPHPREP          = $ABEF ; CE-150 Switch from tect to graphics mode
0039+  0000             TEXT              = $ACA6 ; CE-150 TEXT
0040+  0000             TEXTPREP          = $ACD3 ; CE-150 Text mode preperation
0041+  0000             GRAPH             = $ACD3 ; CE-150 GRAPH
0042+  0000             CE150_MSK_REG     = $B00A ; (ME1)
0043+  0000             CE150_IF_REG      = $B00B ; (ME1)
0044+  0000             CE150_PRT_A_DIR   = $B00C ; (ME1)
0045+  0000             CE150_PRT_B_DIR   = $B00D ; (ME1)
0046+  0000             CE150_PRT_A       = $B00E ; (ME1)
0047+  0000             CE150_PRT_B       = $B00F ; (ME1)
0048+  0000             SORGN             = $B153 ; CE-150 SORGN
0049+  0000             ROTATE            = $B15A ; CE-150 ROTATE
0050+  0000             COLOR             = $B16A ; CE-150 COLOR
0051+  0000             CSIZE             = $B180 ; CE-150 CSIZE
0052+  0000             GLCURSOR          = $B191 ; CE-150 GLCURSOR
0053+  0000             LF                = $B1B4 ; CE-150 LF
0054+  0000             LINE              = $B222 ; CE-150 LINE
0055+  0000             RLINE             = $B224 ; CE-150 RLINE
0056+  0000             LPRINT_150        = $B2EC ; CE-150 LPRINT
0057+  0000             LLIST_150         = $B754 ; CE-150 LLIST
0058+  0000             CMT_PNAME         = $B800 ; CMT Periph name (B800-B809), 55 01 43 4D 54 0D 0D 0D 0D 0D, U CMT /CR
0059+  0000             SBRA4             = $B888 ; SBR A4 Start of program block CMT 2
0060+  0000             SBRA8             = $B88B ; SBR A8
0061+  0000             SBRAA             = $B88E ; SBR AA
0062+  0000             SBRAE             = $B891 ; SBR AE
0063+  0000             SBRB0             = $B894 ; SBR B0
0064+  0000             SBRB2             = $B897 ; SBR B2
0065+  0000             SBRB4             = $B89A ; SBR B4
0066+  0000             SBRB6             = $B89D ; SBR B6
0067+  0000             SBRB8             = $B8A0 ; SBR B8
0068+  0000             PCJUMP01          = $B8A3 ; Direct PC load from &E524
0069+  0000             CSAVE_150         = $B8A6 ; CE-150 CSAVE
0070+  0000             CLOAD_150         = $B8F9 ; CE-150 CLOAD
0071+  0000             MERGE_150         = $B994 ; CE-150 MERGE
0072+  0000             CHAIN_150         = $BB6A ; CE-150 CHAIN
0073+  0000             HEADERCREATE      = $BBD6 ; CE-150 Write tape synchronisation header
0074+  0000             TERMCMTIO         = $BBF5 ; CE-150 Finalisation of tape I/O control
0075+  0000             HEADERIO          = $BCE8 ; CE-150 Read tape synchronisation feader / Searh for filename
0076+  0000             FILETRSF          = $BD3C ; CE-150 Read / Write file to tape
0077+  0000             SAVEONECHR        = $BDCC ; CE-150 Send a character to tape
0078+  0000             LOADONECHR        = $BDF0 ; CE-150 Read a character from tape
0079+  0000             RMT               = $BEF9 ; CE-150 RMT
0080+  0000             REMOTEON          = $BF11 ; CE-150 Remote ON
0081+  0000             REMOTEOFF         = $BF43 ; CE-150 Remote OFF
0011   0000             #INCLUDE    "lib/PC-1500_Macros.lib"
0001+  0000             ; PC-1500 Macros
0002+  0000             ;------------------------------------------------------------------------------------------------------------
0003+  0000             ; Assembly macros used to encode arguments for lh5801 'macros' that take arguments inline after CALL
0004+  0000             
0005+  0000             #define EQU .EQU
0006+  0000             .MSFIRST
0007+  0000             
0008+  0000             COMMA:      EQU $2C                         ; ',' used for macros
0009+  0000             CR:         EQU $0D                         ; '/CR' used for macros
0010+  0000             DASH:       EQU $2D                         ; '-' used for macros
0011+  0000             EQUALS:     EQU $3D                         ; '-' used for macros
0012+  0000             HASH:       EQU $23                         ; '#' used for macros
0013+  0000             SEMI:       EQU $3B                         ; ';' used for macros
0014+  0000             QUOTE:      EQU $22                         ; '-' used for macros
0015+  0000             DOLLAR:     EQU $24                         ; '#' used for macros
0016+  0000             PERCENT:    EQU $25                         ; ';' used for macros
0017+  0000             
0018+  0000             
0019+  0000             TOK_OFF:    EQU $F19E                       ; OFF   command token
0020+  0000             TOK_ON:     EQU $F19C                       ; ON    command token
0021+  0000             TOK_TAB:    EQU $F0BB                       ; TAB   command token
0022+  0000             TOK_USING:  EQU $F085                       ; USING command token
0023+  0000             
0024+  0000             
0025+  0000             #define ABRF(n8)        .BYTE n8 - $ - 1    ; calculate forward branch
0026+  0000             #define ABYT(n8)        .BYTE n8            ; use byte verbatium
0027+  0000             #define ABYTL(n16)      .BYTE n16 & $FF     ; use byte verbatium
0028+  0000             #define ACHR(ch)        .BYTE ch            ; character
0029+  0000             #define AWRD(n16)       .WORD n16           ; use word value verbatum
0030+  0000             #define CNIB(n81,n82)   .BYTE ((n81 & $F0) | (n82 & $0F))   ; calculates control nibble
0031+  0000             #define HB(n16)         (n16 >> 8)          ; Return HB of 16bit value
0032+  0000             #define LB(n16)         (n16 & $FF)         ; Return HB of 16bit value
0033+  0000             #define HBO(n16,n8)     ((n16 + n8) >> 8)   ; Return HB of 16bit value
0034+  0000             #define LBO(n16,n8)     ((n16 + n8) & $FF)  ; Return HB of 16bit value
0035+  0000             
0036+  0000             ; CE-158 related
0037+  0000             #define HIGH_BANK       SPU \ SPV           ; Switch to High Bank
0038+  0000             #define LOW_BANK        RPU \ SPV           ; Switch to High Bank
0039+  0000             #define SETCOM_M        LDI A,$F9 \ STA (SETCOM_REG)    ; SETDEV to 2400,8,N,1
0040+  0000             #define SETDEV_M(n8)    LDI A,n8 \ STA (SETDEV_REG)     ; SETCOM to device passed
0041+  0000             #define SETOPN_M(n8)    LDI A,n8 \ STA (OPN)            ; Set OPN to n8 table
0042+  0000             
0043+  0000             KI:                 EQU $01                     ;
0044+  0000             DO:                 EQU $02                     ;
0045+  0000             PO:                 EQU $04                     ;
0046+  0000             CI:                 EQU $08                     ;
0047+  0000             CO:                 EQU $10                     ;
0048+  0000             U1:                 EQU $20                     ; U1, use UART 1 (Bit5=0=UART0, Bit5=1=UART1)
0049+  0000             PN:                 EQU $40                     ; PN, LPT port to input
0050+  0000             BP:                 EQU $80                     ; BP, enable BDP mode with U0
0051+  0000             
0052+  0000             #define ADDRCHK(add,location)        #if ($ > add)    ; check address
0053+  0000             #DEFCONT                     \!over_run
0054+  0000             #DEFCONT                     \.ECHO location
0055+  0000             #DEFCONT                     \.ECHO " address over run by "
0056+  0000             #DEFCONT                     \.ECHO ($ - add)
0057+  0000             #DEFCONT                     \.ECHO " bytes\r\n"
0058+  0000             #DEFCONT                     \#endif
0012   0000             
0013   0000             ; IWS Videointerface RAM map
0014   0000             COLORRAM = $6000 ; $6000~$67FF ME1
0015   0000             GRAPHRAM = $6800 ; $6800~$67FF ME1
0016   0000             VIDEORAM = $7000 ; $7000-$77FF ME1
0017   0000             CRTCTRL  = $7800 ; $7800-$7801 ME1
0018   0000             NOTUSED  = $7802 ; $7802~$7FFF ME1
0019   0000             KYREPEAT = $79D5 ; Key repeat flag
0020   0000             
0021   8000             .ORG $8000
0022   8000             
0023   8000             ;------------------------------------------------------------------------------------------------------------
0024   8000             ; BASIC Command Table 8000
0025   8000             ;------------------------------------------------------------------------------------------------------------
0026   8000             ;% B_TBL_8000 START
0027   8000             B_TBL_8000:
0028   8000 55              .BYTE  $55                                          ; Marker that BASIC Table follows 
0029   8001             
0030   8001             B_TBL_8000_TNUM:
0031   8001 05              .BYTE  $05                                          ; Table number
0032   8002             
0033   8002             B_TBL_8000_NAME:
0034   8002 43 52 54 0D     .TEXT  "CRT\r" \ .BYTE $9A,$9A,$9A,$9A              ; Table name
0034   8006 9A 9A 9A 9A 
0035   800A             
0036   800A             B_TBL_8000_INIT:
0037   800A BA 8D C1        JMP     TBL_INIT                                    ; $8DC1 - Table initilization vector
0038   800D             
0039   800D             B_TBL_8000_INPUT_NUM:
0040   800D BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C5 - Table INPUT# vector
0041   8010             
0042   8010             B_TBL_8000_PRINT_NUM:
0043   8010 BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C9 - Table PRINT# vector
0044   8013             
0045   8013             B_TBL_8000_JMPS:
0046   8013 9A 9A 9A 9A     .BYTE  $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A      ; Unused jumps 
0046   8017 9A 9A 9A 9A 
0046   801B 9A 9A 
0047   801D             
0048   801D             B_TBL_8000_TRACE:
0049   801D 93 50 FF        .BYTE $93,$50,$FF                                   ; Unusual
0050   8020             
0051   8020             B_TBL_8000_A_KW:
0052   8020 00 00           .WORD $0000                                         ;
0053   8022             
0054   8022             B_TBL_8000_B_KW:
0055   8022 80 56           .WORD LET_B                                         ; $8056
0056   8024             
0057   8024             B_TBL_8000_C_KW:
0058   8024 80 61           .WORD LET_C                                         ; $8061
0059   8026             
0060   8026             B_TBL_8000_D_KW:
0061   8026 80 95           .WORD LET_D                                         ; $8095
0062   8028             
0063   8028             B_TBL_8000_E_KW:
0064   8028 80 A5           .WORD LET_E                                         ; $80A5
0065   802A             
0066   802A             B_TBL_8000_F_KW:
0067   802A 00 00           .WORD $0000                                         ;
0068   802C             
0069   802C             B_TBL_8000_G_KW:
0070   802C 80 BE           .WORD LET_G                                         ; $80BE
0071   802E             
0072   802E             B_TBL_8000_H_KW:
0073   802E 80 E0           .WORD LET_H                                         ; $80E0
0074   8030             
0075   8030             B_TBL_8000_I_KW:
0076   8030 81 02           .WORD LET_I                                         ; $8102
0077   8032             
0078   8032             B_TBL_8000_J_KW:
0079   8032 00 00           .WORD $0000                                         ; 
0080   8034             
0081   8034             B_TBL_8000_K_KW:
0082   8034 81 0C           .WORD LET_K                                         ; $810C
0083   8036             
0084   8036             B_TBL_8000_L_KW:
0085   8036 81 14           .WORD LET_L                                         ; $8114
0086   8038             
0087   8038             B_TBL_8000_M_KW:
0088   8038 81 26           .WORD LET_M                                         ; $8126
0089   803A             
0090   803A             B_TBL_8000_N_KW:
0091   803A 00 00           .WORD $0000                                         ; 
0092   803C             
0093   803C             B_TBL_8000_O_KW:
0094   803C 00 00           .WORD $0000                                         ; 
0095   803E             
0096   803E             B_TBL_8000_P_KW:
0097   803E 81 3B           .WORD LET_P                                         ; $813B
0098   8040             
0099   8040             B_TBL_8000_Q_KW:
0100   8040 00 00           .WORD $0000                                         ; 
0101   8042             
0102   8042             B_TBL_8000_R_KW:
0103   8042 81 45           .WORD LET_R                                         ; $8145
0104   8044             
0105   8044             B_TBL_8000_S_KW:
0106   8044 81 5B           .WORD LET_S                                         ; $815B
0107   8046             
0108   8046             B_TBL_8000_T_KW:
0109   8046 81 6E           .WORD LET_T                                         ; $816E
0110   8048             
0111   8048             B_TBL_8000_U_KW:
0112   8048 00 00           .WORD $0000                                         ; 
0113   804A             
0114   804A             B_TBL_8000_V_KW:
0115   804A 81 78           .WORD LET_V                                         ; $8178
0116   804C             
0117   804C             B_TBL_8000_W_KW:
0118   804C 00 00           .WORD $0000                                         ; 
0119   804E             
0120   804E             B_TBL_8000_X_KW:
0121   804E 00 00           .WORD $0000                                         ; 
0122   8050             
0123   8050             B_TBL_8000_Y_KW:
0124   8050 00 00           .WORD $0000                                         ; 
0125   8052             
0126   8052             B_TBL_8000_Z_KW:
0127   8052 00 00           .WORD $0000                                         ; 
0128   8054             
0129   8054             B_TBL_8000_CMD_LST:     ;Token LB < 80 command is function, else is proceedure
0130   8054             ;Ctrl nibble    Ctrl nib calc            Name              Token  Vector
0131   8054             LET_B:  EQU ($ + 2) ; First keyword starting with 'B'. LET_B = Address of 'A' in BACKGR
0132   8054             CN1:    EQU $D6 \ CNIB($96,CN1)     \ .TEXT "BACKGR"    \ .WORD $F0DE, $9023        ; $8054
0132   8054 96          
0132   8055 42 41 43 4B 
0132   8059 47 52 
0132   805B F0 DE 90 23 
0133   805F             
0134   805F             LET_C:  EQU ($ + 2) ; First keyword starting with 'C'. LET_C = Address of 'L' in CLS
0135   805F             CN2:    EQU $C3 \ CNIB(CN1,CN2)     \ .TEXT "CLS"       \ .WORD $F088, $8974        ; $805F
0135   805F D3          
0135   8060 43 4C 53    
0135   8063 F0 88 89 74 
0136   8067             CN3:    EQU $A5 \ CNIB(CN2,CN3)     \ .TEXT "CHAIN"     \ .WORD $F0B2, $92DC        ; $8067
0136   8067 C5          
0136   8068 43 48 41 49 
0136   806C 4E 
0136   806D F0 B2 92 DC 
0137   8071             CN4:    EQU $C6 \ CNIB(CN3,CN4)     \ .TEXT "COLORV"    \ .WORD $F0EB, $914F        ; $8071
0137   8071 A6          
0137   8072 43 4F 4C 4F 
0137   8076 52 56 
0137   8078 F0 EB 91 4F 
0138   807C             CN5:    EQU $C7 \ CNIB(CN4,CN5)     \ .TEXT "CONSOLE"   \ .WORD $F0B1, $89B5        ; $807C
0138   807C C7          
0138   807D 43 4F 4E 53 
0138   8081 4F 4C 45 
0138   8084 F0 B1 89 B5 
0139   8088             CN6:    EQU $D6 \ CNIB(CN5,CN6)     \ .TEXT "CURSOR"    \ .WORD $F084, $8A49        ; $8088
0139   8088 C6          
0139   8089 43 55 52 53 
0139   808D 4F 52 
0139   808F F0 84 8A 49 
0140   8093             
0141   8093             LET_D:  EQU ($ + 2) ; First keyword starting with 'D'. LET_D = Address of 'EI' in DIR
0142   8093             CN7:    EQU $C3 \ CNIB(CN6,CN7)     \ .TEXT "DIR"       \ .WORD $F0E0, $92CA        ; $8093
0142   8093 D3          
0142   8094 44 49 52    
0142   8097 F0 E0 92 CA 
0143   809B             CN8:    EQU $53 \ CNIB(CN7,CN8)     \ .TEXT "DEC"       \ .WORD $F070, $914C        ; $809B
0143   809B C3          
0143   809C 44 45 43    
0143   809F F0 70 91 4C 
0144   80A3             
0145   80A3             LET_E:  EQU ($ + 2) ; First keyword starting with 'E'. LET_E = Address of 'D' in EDIT
0146   80A3             CN9:    EQU $C4 \ CNIB(CN8,CN9)     \ .TEXT "EDIT"      \ .WORD $F0C7, $914F        ; $80A3
0146   80A3 54          
0146   80A4 45 44 49 54 
0146   80A8 F0 C7 91 4F 
0147   80AC             CN10:   EQU $C3 \ CNIB(CN9,CN10)    \ .TEXT "ERL"       \ .WORD $F053, $9088        ; $80AC
0147   80AC C3          
0147   80AD 45 52 4C    
0147   80B0 F0 53 90 88 
0148   80B4             CN11:   EQU $D3 \ CNIB(CN10,CN11)   \ .TEXT "ERN"       \ .WORD $F052, $9082        ; $80B4
0148   80B4 C3          
0148   80B5 45 52 4E    
0148   80B8 F0 52 90 82 
0149   80BC             
0150   80BC             LET_G:  EQU ($ + 2) ; First keyword starting with 'G'. LET_G = Address of 'C' in GCLS
0151   80BC             CN12:   EQU $C4 \ CNIB(CN11,CN12)   \ .TEXT "GCLS"      \ .WORD $F0E1, $9107        ; $80BC
0151   80BC D4          
0151   80BD 47 43 4C 53 
0151   80C1 F0 E1 91 07 
0152   80C5             CN13:   EQU $C8 \ CNIB(CN12,CN13)   \ .TEXT "GVCURSOR"  \ .WORD $F0E8, $914F        ; $80C5
0152   80C5 C8          
0152   80C6 47 56 43 55 
0152   80CA 52 53 4F 52 
0152   80CE F0 E8 91 4F 
0153   80D2             CN14:   EQU $D7 \ CNIB(CN13,CN14)   \ .TEXT "GVPRINT"   \ .WORD $F0E9, $914F        ; $80D2
0153   80D2 C7          
0153   80D3 47 56 50 52 
0153   80D7 49 4E 54 
0153   80DA F0 E9 91 4F 
0154   80DE             
0155   80DE             LET_H:  EQU ($ + 2) ; First keyword starting with 'H'. LET_H = Address of 'C' in HCURSOR
0156   80DE             CN15:   EQU $C7 \ CNIB(CN14,CN15)   \ .TEXT "HCURSOR"   \ .WORD $F054, $8EFD        ; $80DE
0156   80DE D7          
0156   80DF 48 43 55 52 
0156   80E3 53 4F 52 
0156   80E6 F0 54 8E FD 
0157   80EA             CN16:   EQU $C8 \ CNIB(CN15,CN16)   \ .TEXT "HPCURSOR"  \ .WORD $F055, $8F04        ; $80EA
0157   80EA C8          
0157   80EB 48 50 43 55 
0157   80EF 52 53 4F 52 
0157   80F3 F0 55 8F 04 
0158   80F7             CN17:   EQU $B4 \ CNIB(CN16,CN17)   \ .TEXT "HEX$"      \ .WORD $F071, $8981        ; $80F7
0158   80F7 C4          
0158   80F8 48 45 58 24 
0158   80FC F0 71 89 81 
0159   8100             
0160   8100             LET_I:  EQU ($ + 2) ; First keyword starting with 'I'. LET_I = Address of 'N' in INPUT
0161   8100             CN18:   EQU $D5 \ CNIB(CN17,CN18)   \ .TEXT "INPUT"     \ .WORD $F091, $8C89        ; $8100
0161   8100 B5          
0161   8101 49 4E 50 55 
0161   8105 54 
0161   8106 F0 91 8C 89 
0162   810A             
0163   810A             LET_K:  EQU ($ + 2) ; First keyword starting with 'K'. LET_K = Address of 'E' in KEY
0164   810A             CN19:   EQU $D3 \ CNIB(CN18,CN19)   \ .TEXT "KEY"       \ .WORD $F0E2, $9308        ; $810A
0164   810A D3          
0164   810B 4B 45 59    
0164   810E F0 E2 93 08 
0165   8112             
0166   8112             LET_L:  EQU ($ + 2) ; First keyword starting with 'L'. LET_L = Address of 'I' in LIST
0167   8112             CN20:   EQU $C4 \ CNIB(CN19,CN20)   \ .TEXT "LIST"      \ .WORD $F090, $8F16        ; $8112
0167   8112 D4          
0167   8113 4C 49 53 54 
0167   8117 F0 90 8F 16 
0168   811B             CN21:   EQU $D4 \ CNIB(CN20,CN21)   \ .TEXT "LOAD"      \ .WORD $F080, $9244        ; $811B
0168   811B C4          
0168   811C 4C 4F 41 44 
0168   8120 F0 80 92 44 
0169   8124             
0170   8124             LET_M:  EQU ($ + 2) ; First keyword starting with 'M'. LET_M = Address of 'O' in MONITOR
0171   8124             CN22:   EQU $C7 \ CNIB(CN21,CN22)   \ .TEXT "MONITOR"   \ .WORD $F0E4, $8EE1        ; $8124
0171   8124 D7          
0171   8125 4D 4F 4E 49 
0171   8129 54 4F 52 
0171   812C F0 E4 8E E1 
0172   8130             CN23:   EQU $D4 \ CNIB(CN22,CN23)   \ .TEXT "MODE"      \ .WORD $F0DF, $91D3        ; $8130
0172   8130 C4          
0172   8131 4D 4F 44 45 
0172   8135 F0 DF 91 D3 
0173   8139             
0174   8139             LET_P:  EQU ($ + 2) ; First keyword starting with 'P'. LET_P = Address of 'R' in PRINT
0175   8139             CN24:   EQU $D5 \ CNIB(CN23,CN24)   \ .TEXT "PRINT"     \ .WORD $F097, $91A7        ; $8139
0175   8139 D5          
0175   813A 50 52 49 4E 
0175   813E 54 
0175   813F F0 97 91 A7 
0176   8143             
0177   8143             LET_R:  EQU ($ + 2) ; First keyword starting with 'R'. LET_R = Address of 'E' in REPKEY
0178   8143             CN25:   EQU $C6 \ CNIB(CN24,CN25)   \ .TEXT "REPKEY"    \ .WORD $F0C3, $90F1        ; $8143
0178   8143 D6          
0178   8144 52 45 50 4B 
0178   8148 45 59 
0178   814A F0 C3 90 F1 
0179   814E             CN26:   EQU $D6 \ CNIB(CN25,CN26)   \ .TEXT "REPROG"    \ .WORD $F0C5, $914F        ; $814E
0179   814E C6          
0179   814F 52 45 50 52 
0179   8153 4F 47 
0179   8155 F0 C5 91 4F 
0180   8159             
0181   8159             LET_S:  EQU ($ + 2) ; First keyword starting with 'S'. LET_S = Address of 'A' in SAVE
0182   8159             CN27:   EQU $C4 \ CNIB(CN26,CN27)   \ .TEXT "SAVE"      \ .WORD $F081, $9234        ; $8159
0182   8159 D4          
0182   815A 53 41 56 45 
0182   815E F0 81 92 34 
0183   8162             CN28:   EQU $D5 \ CNIB(CN27,CN28)   \ .TEXT "SLEEP"     \ .WORD $F0E7, $90AA        ; $8162
0183   8162 C5          
0183   8163 53 4C 45 45 
0183   8167 50 
0183   8168 F0 E7 90 AA 
0184   816C             
0185   816C             LET_T:  EQU ($ + 2) ; First keyword starting with 'T'. LET_T = Address of 'E' in TESTV
0186   816C             CN29:   EQU $D5 \ CNIB(CN28,CN29)   \ .TEXT "TESTV"     \ .WORD $F0EA, $914F        ; $816C
0186   816C D5          
0186   816D 54 45 53 54 
0186   8171 56 
0186   8172 F0 EA 91 4F 
0187   8176             
0188   8176             LET_V:  EQU ($ + 2) ; First keyword starting with 'V'. LET_V = Address of 'E' in VERIFYQ
0189   8176             CN30:   EQU $C7 \ CNIB(CN29,CN30)   \ .TEXT "VERIFYQ"   \ .WORD $F083, $92D9        ; $8176
0189   8176 D7          
0189   8177 56 45 52 49 
0189   817B 46 59 51 
0189   817E F0 83 92 D9 
0190   8182             CN31:   EQU $C7 \ CNIB(CN30,CN31)   \ .TEXT "VCURSOR"   \ .WORD $F056, $8EE4        ; $8182
0190   8182 C7          
0190   8183 56 43 55 52 
0190   8187 53 4F 52 
0190   818A F0 56 8E E4 
0191   818E             CN32:   EQU $C8 \ CNIB(CN31,CN32)   \ .TEXT "VPCURSOR"  \ .WORD $F050, $8EEB        ; $818E
0191   818E C8          
0191   818F 56 50 43 55 
0191   8193 52 53 4F 52 
0191   8197 F0 50 8E EB 
0192   819B             
0193   819B             CN33:  EQU $D0 \ .BYTE CN33
0193   819B D0          
0194   819C             
0195   819C             B_TBL_8000_END:
0196   819C             ;% B_TBL_8000 END
0197   819C             
0198   819C             
0199   819C             FILLER: ; $819C
0200   819C 00 38           .BYTE $00,$38
0201   819E             
0202   819E             ;------------------------------------------------------------------------------------------------------------
0203   819E             ; $81DE XCHR_INPUT - External Character Input Routine
0204   819E             ; Called from: BR $826F, $827C, LIST:$8F8F
0205   819E             ; Arguments: 
0206   819E             ; Outputs: 
0207   819E             ; RegMod: 
0208   819E             ;------------------------------------------------------------------------------------------------------------
0209   819E             ;% LB_XCHR_INPUT START
0210   819E             XCHR_INPUT:
0211   819E FD 98           PSH  Y                          ; 
0212   81A0 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9
0213   81A4 B7 01           CPI  A,$01                      ; 
0214   81A6 89 0A           BZR  BR_81B2                    ; A <> $01
0215   81A8 B5 40           LDI  A,$40                      ; Set OPEN to $40 
0216   81AA AE 79 D1        STA  (OPN)                      ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0217   81AD FD EB 77 D9     ORI  #(VIDEORAM + $07D9),$02    ; $77D9 - Set Bit 1
0217   81B1 02 
0218   81B2             
0219   81B2             BR_81B2: ; BR $81A6
0220   81B2 E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4 - Turn off keyboard bypass
0221   81B6 14              LDA  YL                         ; 
0222   81B7 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4
0223   81BB A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
0224   81BE B7 02           CPI  A,$02                      ; Bit 1: Program waits for Enter after a print command
0225   81C0 8B 6D           BZS  BR_822F                    ; A == $02
0226   81C2             
0227   81C2 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0228   81C6 B7 19           CPI  A,$19                      ; 
0229   81C8 89 05           BZR  BR_81CF                    ; A <> $19
0230   81CA             
0231   81CA BE 8C 57        SJP  (JMP_8C57)                 ; $8C57
0232   81CD 83 60           BCS  BR_822F                    ; Branch if JMP_8C57 returns fail (Carry set)
0233   81CF             
0234   81CF             BR_81CF: ; BR $81C8
0235   81CF BE 88 EB        SJP  (JMP_88EB)                 ; $88EB
0236   81D2 B7 19           CPI  A,$19                      ; 
0237   81D4 81 03           BCR  BR_81D9                    ; A < $19
0238   81D6 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0239   81D9             
0240   81D9             BR_81D9: ; BR $81D4
0241   81D9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3 
0242   81DD B7 09           CPI  A,$09                      ; 
0243   81DF 89 08           BZR  BR_81E9                    ; A <> $09
0244   81E1 BE 89 29        SJP  (JMP_8929)                 ; $8929
0245   81E4 81 49           BCR  BR_822F                    ; JMP_8929 returned success (Carry reset)
0246   81E6 BE 84 66        SJP  (JMP_8466)                  ; $8466
0247   81E9             
0248   81E9             BR_81E9: ; BR $81DF
0249   81E9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0250   81ED B7 0D           CPI  A,$0D                      ; 
0251   81EF 89 03           BZR  BR_81F4                    ; A <> $0D
0252   81F1 BE 87 CC        SJP  (JMP_87CC)                 ; $87CC
0253   81F4             
0254   81F4             BR_81F4: ; BR $81EF
0255   81F4 BE 88 EB        SJP  (JMP_88EB)                 ; $88EB
0256   81F7 B7 19           CPI  A,$19                      ; 
0257   81F9 81 03           BCR  BR_81FE                    ; A < $19
0258   81FB BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0259   81FE             
0260   81FE             BR_81FE: ; BR $81F9
0261   81FE FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0262   8202 18              STA  YH                         ; 
0263   8203 5A 01           LDI  YL,$01                     ; 
0264   8205 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0265   8209 B7 01           CPI  A,$01                      ; 
0266   820B 89 08           BZR  BR_8215                    ; A <> $01
0267   820D A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
0268   8210 18              STA  YH                         ; 
0269   8211 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
0270   8214 1A              STA  YL                         ; 
0271   8215             
0272   8215             BR_8215: ; BR $820B
0273   8215 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0274   8218 FD 18           LDX  Y                          ; 
0275   821A 58 7B           LDI  YH,HB(IN_BUF)              ; $7B
0276   821C 5A B0           LDI  YL,LB(IN_BUF)              ; $B0
0277   821E FD E9 77 D6     ANI  #(VIDEORAM + $07D6),$00    ; $77D6
0277   8222 00 
0278   8223 BE 85 2C        SJP  (JMP_852C)                 ; $852C
0279   8226 BE 86 63        SJP  (JMP_8663)                 ; $8663
0280   8229 BE 84 56        SJP  (JMP_8456)                 ; $8456
0281   822C BE 87 21        SJP  (JMP_8721)                 ; $8721
0282   822F             
0283   822F             BR_822F: ; BR $81C0, $81CD, $81E4
0284   822F E9 7B 0A 00     ANI  (APOW_CTR_H),$00           ; Auto power down counter (H)
0285   8233 E9 7B 0B 00     ANI  (APOW_CTR_M),$00           ; Auto power down counter (M)
0286   8237 E9 7B 0C 00     ANI  (APOW_CTR_L),$00           ; Auto power down counter (L)
0287   823B BE 91 50        SJP  (KEYRAM)                 ; $9150
0288   823E BE 90 DE        SJP  (KEY_REPEAT_ON)                 ; $90DE
0289   8241 BE 89 63        SJP  (CRTC_CSR_STRT20)          ; $8963 CRTC - Cursor start raster register
0290   8244 FD C8           PSH  A                          ; 
0291   8246 A5 76 4E        LDA  (DISP_BUFF + $4E)          ; 
0292   8249 BB F7           ORI  A,$F7                      ; 
0293   824B B7 FF           CPI  A,$FF                      ; 
0294   824D 8B 03           BZS  BR_8252                    ; A == $FF
0295   824F BA 82 71        JMP  BR_8271                    ; $8271
0296   8252             
0297   8252             BR_8252: ; BR $824D
0298   8252 FD 88           PSH  X                          ; Save register modified by KEY2ACII
0299   8254 FD 98           PSH  Y                          ; 
0300   8256 FD A8           PSH  U                          ; 
0301   8258 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0302   825B FD 2A           POP  U                          ; Restore saved registers
0303   825D FD 1A           POP  Y                          ; 
0304   825F FD 0A           POP  X                          ; 
0305   8261 B7 09           CPI  A,$09                      ; 
0306   8263 89 0C           BZR  BR_8271                    ; A <> $$09
0307   8265 EB 76 4E 04     ORI  (DISP_BUFF + $4E),$04      ; 
0308   8269 E9 76 4E F7     ANI  (DISP_BUFF + $4E),$F7      ; 
0309   826D FD 8A           POP  A                          ; 
0310   826F 9E D3           BCH  XCHR_INPUT                 ; $819E
0311   8271             
0312   8271             BR_8271: ; BR $824F, $8263
0313   8271 FD 8A           POP  A                          ; 
0314   8273 B7 1A           CPI  A,$1A                      ; 
0315   8275 89 07           BZR  BR_827E                    ; A <> $1A
0316   8277 BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
0317   827A FD 1A           POP  Y                          ; 
0318   827C 9E E0           BCH  XCHR_INPUT                 ; $819E
0319   827E             
0320   827E             BR_827E: ; BR $8275
0321   827E B7 0B           CPI  A,$0B                      ; 
0322   8280 89 17           BZR  BR_8299                    ; A <> $0B
0323   8282 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
0324   8286 B7 28           CPI  A,$28                      ; 
0325   8288 89 0D           BZR  BR_8297                    ; A <> $28
0326   828A FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0327   828E B7 03           CPI  A,$03                      ; 
0328   8290 81 05           BCR  BR_8297                    ; A < $03
0329   8292 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0329   8296 FF 
0330   8297             
0331   8297             BR_8297: ; BR $8288, $8290
0332   8297 B5 0B           LDI  A,$0B                      ; 
0333   8299             
0334   8299             BR_8299: ; BR $8280
0335   8299 B7 0B           CPI  A,$0B                      ; 
0336   829B 89 4D           BZR  BR_82EA                    ; A <> $0B
0337   829D FD C8           PSH  A                          ; 
0338   829F BE 86 E4        SJP  (JMP_86E4)                 ; $86E4
0339   82A2 83 05           BCS  BR_82A9                    ; JMP_86E4 returned failure (Carry set)
0340   82A4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0340   82A8 01 
0341   82A9             
0342   82A9             BR_82A9: ; BR $82A2
0343   82A9 FD 8A           POP  A                          ; 
0344   82AB FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF
0344   82AF 01 
0345   82B0 B5 0A           LDI  A,$0A                      ; 
0346   82B2 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor Start Raster
0347   82B6 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
0348   82BA FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0349   82BE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0349   82C2 FF 
0350   82C3 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0351   82C7 B7 00           CPI  A,$00                      ; 
0352   82C9 89 08           BZR  BR_82D3                    ; A <> $00
0353   82CB BE 91 89        SJP  (JMP_9189)                 ; $9189
0354   82CE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0354   82D2 01 
0355   82D3             
0356   82D3             BR_82D3: ; BR $82C9
0357   82D3 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9
0358   82D7 B7 99           CPI  A,$99                      ; 
0359   82D9 89 0B           BZR  BR_82E6                    ; A <> $99
0360   82DB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0360   82DF 01 
0361   82E0 B5 02           LDI  A,$02                      ; 
0362   82E2 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; $77D9
0363   82E6             
0364   82E6             BR_82E6: ; BR $82D9
0365   82E6 B5 0B           LDI  A,$0B                      ; 
0366   82E8 8E D1           BCH  BR_83BB                    ; $83BB
0367   82EA             
0368   82EA             BR_82EA: ; BR $829B
0369   82EA B7 0A           CPI  A,$0A                      ; 
0370   82EC 89 29           BZR  BR_8317                    ; A <> $0A
0371   82EE FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
0372   82F2 B7 28           CPI  A,$28                      ; 
0373   82F4 89 1F           BZR  BR_8315                    ; A <> $28
0374   82F6 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0375   82FA B7 17           CPI  A,$17                      ; 
0376   82FC 81 12           BCR  BR_8310                    ; A < $17
0377   82FE BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0378   8301 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0378   8305 FF 
0379   8306 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0379   830A FF 
0380   830B FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0380   830F FF 
0381   8310             
0382   8310             BR_8310: ; BR $82FC
0383   8310 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0383   8314 01 
0384   8315             
0385   8315             BR_8315: ; BR $82F4
0386   8315 B5 0A           LDI  A,$0A                      ; 
0387   8317             
0388   8317             BR_8317: ; BR $82EC
0389   8317 B7 0A           CPI  A,$0A                      ; 
0390   8319 89 13           BZR  BR_832E                    ; A <> $0A
0391   831B FD C8           PSH  A                          ; 
0392   831D BE 86 FA        SJP  (JMP_86FA)                 ; $86FA
0393   8320 83 05           BCS  BR_8327                    ; JMP_86FA returned failure (Carry set)
0394   8322 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0394   8326 FF 
0395   8327             
0396   8327             BR_8327: ; BR $8320
0397   8327 FD 8A           POP  A                          ; 
0398   8329 FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF
0398   832D 01 
0399   832E             
0400   832E             BR_832E: ; BR $8319
0401   832E B7 0C           CPI  A,$0C                      ; 
0402   8330 89 11           BZR  BR_8343                    ; A <> $0C
0403   8332 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF
0403   8336 01 
0404   8337 8B 0A           BZS  BR_8343                    ; A == $
0405   8339 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
0405   833D 00 
0406   833E FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0406   8342 FF 
0407   8343             
0408   8343             BR_8343: ; BR $8330, $8337
0409   8343 B7 08           CPI  A,$08                      ; 
0410   8345 89 11           BZR  BR_8358                    ; A <> $08
0411   8347 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF 
0411   834B 01 
0412   834C 8B 0A           BZS  BR_8358                    ; Bit 0 of #$77DF was set
0413   834E FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; Clear $77DF
0413   8352 00 
0414   8353 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0414   8357 FF 
0415   8358             
0416   8358             BR_8358: ; BR $8345, $834C
0417   8358 B7 0E           CPI  A,$0E                      ; 
0418   835A 89 05           BZR  BR_8361                    ; A <> $0E
0419   835C FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ; $77D8
0419   8360 00 
0420   8361             
0421   8361             BR_8361: ; BR $835A
0422   8361 B7 1F           CPI  A,$1F                      ; 
0423   8363 89 02           BZR  BR_8367                    ; A <> $1F
0424   8365 8E 04           BCH  BR_836B                    ; $836B
0425   8367             
0426   8367             BR_8367: ; BR $8363
0427   8367 B7 1E           CPI  A,$1E                      ; 
0428   8369 89 09           BZR  BR_8374                    ; A <> $1E
0429   836B             
0430   836B             BR_836B: ; BR $8365
0431   836B FD C8           PSH  A                          ; 
0432   836D BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
0433   8370 FD 8A           POP  A                          ; 
0434   8372 8E 47           BCH  BR_83BB                    ; $83BB
0435   8374             
0436   8374             BR_8374: ; BR $8369
0437   8374 B7 0E           CPI  A,$0E                      ; 
0438   8376 83 09           BCS  BR_8381                    ; A >= $0E
0439   8378 B7 0A           CPI  A,$0A                      ; 
0440   837A 81 05           BCR  BR_8381                    ; A < $0A
0441   837C BE 83 C6        SJP  (JMP_83C6)                 ; $83C6
0442   837F 8E 3A           BCH  BR_83BB                    ; $83BB
0443   8381             
0444   8381             BR_8381: ; BR $8376,$837A
0445   8381 1A              STA  YL                         ; 
0446   8382 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0447   8386 B7 0D           CPI  A,$0D                      ; 
0448   8388 89 03           BZR  BR_838D                    ; A <> $0D
0449   838A BE 84 2D        SJP  (JMP_842D)                 ; $842D
0450   838D             
0451   838D             BR_838D: ; BR $8388
0452   838D FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0453   8391 B7 0A           CPI  A,$0A                      ; 
0454   8393 89 03           BZR  BR_8398                    ; A <> $0A
0455   8395 BE 84 3B        SJP  (JMP_843B)                 ; $843B
0456   8398             
0457   8398             BR_8398: ; BR $8393
0458   8398 B7 0B           CPI  A,$0B                      ; 
0459   839A 89 03           BZR  BR_839F                    ; A <> $0B
0460   839C BE 84 3B        SJP  (JMP_843B)                 ; $843B
0461   839F                 
0462   839F             BR_839F:   
0463   839F 14              LDA  YL                         ; 
0464   83A0 E9 7B 0E FD     ANI  (CURS_CTRL),$FD            ; 
0465   83A4 FD C8           PSH  A                          ; 
0466   83A6 B5 55           LDI  A,$55                      ; 
0467   83A8 FD A7 77 E2     CPA  #(VIDEORAM + $07E2)        ; $77E2
0468   83AC 89 0B           BZR  BR_83B9                    ; A <> $77E2
0469   83AE FD 88           PSH  X                          ; 
0470   83B0 FD A8           PSH  U                          ; 
0471   83B2 BE E6 69        SJP  (BCMD_BEEP_STD)            ; 
0472   83B5 FD 2A           POP  U                          ; 
0473   83B7 FD 0A           POP  X                          ; 
0474   83B9             
0475   83B9             BR_83B9: ; BR $83AC
0476   83B9 FD 8A           POP  A                          ; 
0477   83BB             
0478   83BB             BR_83BB: ; BR $82E8,$8372,$837F
0479   83BB FD 1A           POP  Y                          ;
0480   83BD FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
0481   83C1 EB 79 D4 55     ORI  (KB_BYPASS),$55            ; Set KB bypass
0482   83C5 9A              RTN                             ; Done
0483   83C6             ;% LB_xxxx_INPUT END
0484   83C6             ;------------------------------------------------------------------------------------------------------------
0485   83C6             
0486   83C6             
0487   83C6             
0488   83C6             ;------------------------------------------------------------------------------------------------------------
0489   83C6             ; $83C6- xxxx - 
0490   83C6             ; Called from: $837C
0491   83C6             ; Arguments: A
0492   83C6             ; Outputs: 
0493   83C6             ; RegMod: A, YL
0494   83C6             ;------------------------------------------------------------------------------------------------------------
0495   83C6             ;% LB_xxxx START
0496   83C6             JMP_83C6:
0497   83C6 1A              STA  YL                         ; 
0498   83C7 B5 3E           LDI  A,$3E                      ; '>'
0499   83C9 A7 7B B0        CPA  (IN_BUF)                   ; $7BB0
0500   83CC 8B 49           BZS  BR_8417                    ; $3E == IN_BUF
0501   83CE B5 0D           LDI  A,$0D                      ; '/CR'
0502   83D0 FD A7 77 D3     CPA  #(VIDEORAM + $07D3)        ; $77D3
0503   83D4 89 0F           BZR  BR_83E5                    ; $0D <> ($77D3)
0504   83D6 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
0505   83DA B7 50           CPI  A,$50                      ; 'P'
0506   83DC 8B 12           BZS  BR_83F0                    ; A == $50
0507   83DE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0507   83E2 01 
0508   83E3 8E 32           BCH  BR_8417                    ; $8417
0509   83E5                 
0510   83E5             BR_83E5:   
0511   83E5 16              CPA  YL                         ; A == #(VIDEORAM + $07D3) $77D3, YL == original A
0512   83E6 8B 31           BZS  BR_8419                    ; A == YL
0513   83E8 5E 08           CPI  YL,$08                     ; 
0514   83EA 8B 33           BZS  BR_841F                    ; YL == $08
0515   83EC 5E 0C           CPI  YL,$0C                     ; 
0516   83EE 8B 2F           BZS  BR_841F                    ; YL == $3C
0517   83F0             
0518   83F0             BR_83F0: ; BR $83DC,$841D,$8425,$8428,$844D,$8454
0519   83F0 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row, (pp) = (pp) + n (ME1)
0519   83F4 01 
0520   83F5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
0521   83F9 B7 28           CPI  A,$28                      ; 
0522   83FB 89 1A           BZR  BR_8417                    ; A <> $28
0523   83FD FD 98           PSH  Y                          ; 
0524   83FF FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0525   8403 DF              DEC  A                          ; 
0526   8404 18              STA  YH                         ;
0527   8405 5A 28           LDI  YL,$28                     ;
0528   8407 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0529   840A FD 15           LDA  #(Y)                       ;
0530   840C FD 1A           POP  Y                          ;
0531   840E B7 0E           CPI  A,$0E                      ; 
0532   8410 81 05           BCR  BR_8417                    ; A < $0E
0533   8412 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0533   8416 01 
0534   8417             
0535   8417             BR_8417: ; BR $83CC,$83E3,$83FB,$8410,$842B,$8442,$844B,$8452
0536   8417 14              LDA  YL                         ;
0537   8418 9A              RTN                             ; Done
0538   8419             
0539   8419             BR_8419: ; BR $83E6
0540   8419 5E 0D           CPI  YL,$0D                     ;
0541   841B 8B 02           BZS  BR_841F                    ; YL == $0D
0542   841D 9E 2F           BCH  BR_83F0                    ; $83F0
0543   841F             
0544   841F             BR_841F: ; BR $841B
0545   841F FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0546   8423 B7 0A           CPI  A,$0A                      ; 
0547   8425 9B 37           BZS  BR_83F0                    ; A == $0A
0548   8427 B7 0B           CPI  A,$0B                      ; 
0549   8429 9B 3B           BZS  BR_83F0                    ; A == $0B
0550   842B 9E 16           BCH  BR_8417                    ; $8417
0551   842D             
0552   842D             JMP_842D: ; BR $838A
0553   842D B5 3E           LDI  A,$3E                      ; '>'
0554   842F A7 7B B0        CPA  (IN_BUF)                   ; $7BB0
0555   8432 89 01           BZR  BR_8435                    ; A == $3E <> (IN_BUF)
0556   8434 9A              RTN                             ; Done
0557   8435             
0558   8435             BR_8435: ; BR $8432
0559   8435 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0559   8439 01 
0560   843A 9A              RTN                             ; Done
0561   843B             ;% LB_xxxx END
0562   843B             ;------------------------------------------------------------------------------------------------------------
0563   843B             
0564   843B             
0565   843B             
0566   843B             ;------------------------------------------------------------------------------------------------------------
0567   843B             ; $843B- xxxx - 
0568   843B             ; Called from: $8395,$839C
0569   843B             ; Arguments: 
0570   843B             ; Outputs: 
0571   843B             ; RegMod: 
0572   843B             ;------------------------------------------------------------------------------------------------------------
0573   843B             ;% LB_xxxx START
0574   843B             JMP_843B:
0575   843B A5 76 4F        LDA  (DISP_BUFF + $4F)          ; $764F
0576   843E B9 20           ANI  A,$20                      ; A = A & n
0577   8440 B7 20           CPI  A,$20                      ; 
0578   8442 99 2D           BZR  BR_8417                    ; Bit 5 of $764F was set
0579   8444 5E 0A           CPI  YL,$0A                     ; 
0580   8446 89 07           BZR  BR_844F                    ; YL <> $0A
0581   8448 BE 86 FA        SJP  (JMP_86FA)                 ; $86FA
0582   844B 91 36           BCR  BR_8417                    ; $8417
0583   844D 9E 5F           BCH  BR_83F0                    ; $83F0
0584   844F             
0585   844F             BR_844F:  ; BR $8446
0586   844F BE 86 E4        SJP  (JMP_86E4)                 ; $86E4
0587   8452 91 3D           BCR  BR_8417                    ; $8417
0588   8454 9E 66           BCH  BR_83F0                    ; $83F0
0589   8456             
0590   8456             JMP_8456: ; BR $8229
0591   8456 A5 7B B0        LDA  (IN_BUF)                   ; 
0592   8459 B7 3E           CPI  A,$3E                      ; 
0593   845B 8B 01           BZS  BR_845E                    ; A <> $3E
0594   845D 9A              RTN                             ; Done
0595   845E             
0596   845E             BR_845E:  ; BR $845B
0597   845E A5 78 7B        LDA  (CURS_BLNK_POS)            ; $787B - Position of blink character in display, plus 8
0598   8461 B7 09           CPI  A,$09                      ; 
0599   8463 81 01           BCR  JMP_8466                    ; A < $09
0600   8465 9A              RTN                             ; Done
0601   8466             ;% LB_XCHR_INPUT END
0602   8466             ;------------------------------------------------------------------------------------------------------------
0603   8466             
0604   8466             
0605   8466             
0606   8466             ;------------------------------------------------------------------------------------------------------------
0607   8466             ; $84366- xxxx - 
0608   8466             ; Called from: $8395,$839C
0609   8466             ; Arguments: 
0610   8466             ; Outputs: 
0611   8466             ; RegMod: Y
0612   8466             ;------------------------------------------------------------------------------------------------------------
0613   8466             ;% LB_xxxx START
0614   8466             JMP_8466: ; BR $81E6,$8463,$8949
0615   8466 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0616   846A 18              STA  YH                         ; 
0617   846B 5A 01           LDI  YL,$01                     ; 
0618   846D BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0619   8470             
0620   8470 FD 88           PSH  X                          ; 
0621   8472 48 8E           LDI  XH,HB(CONFIG_TBL + $24)    ; $8EB3 In mystery table
0622   8474 4A B3           LDI  XL,LB((CONFIG_TBL) + $24)  ; ($5255)
0623   8476 68 0D           LDI  UH,$0D                     ; 
0624   8478 B5 40           LDI  A,$40                      ; 
0625   847A A9 76 4F        AND  (DISP_BUFF + $4F)          ; $764F 
0626   847D B7 40           CPI  A,$40                      ; Bit 6 set
0627   847F 89 13           BZR  BR_8494                    ; A <> $40
0628   8481             
0629   8481 FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; FLAGS = (pp) & n (ME1)
0629   8485 01 
0630   8486 83 05           BCS  BR_848D                    ; $848D
0631   8488 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0631   848C 01 
0632   848D             
0633   848D             BR_848D: ; BR $8486
0634   848D FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0634   8491 00 
0635   8492 8E 27           BCH  BR_84BB                    ; $84BB
0636   8494             
0637   8494             BR_8494: ; BR $847F
0638   8494 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0638   8498 00 
0639   8499 B5 20           LDI  A,$20                      ; 
0640   849B A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0641   849E B7 20           CPI  A,$20                      ; Bit 5 set?
0642   84A0 8B 19           BZS  BR_84BB                    ; $84BB
0643   84A2             
0644   84A2 B5 10           LDI  A,$10                      ; 
0645   84A4 A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0646   84A7 B7 10           CPI  A,$10                      ; Bit 4 set?
0647   84A9 89 29           BZR  BR_84D4                    ; $84D4
0648   84AB             
0649   84AB B5 06           LDI  A,$06                      ; 
0650   84AD FD CA           ADR  X                          ; X = X + A + Carry
0651   84AF 6A 0D           LDI  UL,$0D                     ; 
0652   84B1 BE 88 FD        SJP  (JMP_88FD)                 ; Checks bits set in (DISP_BUFF + $4E) $764E
0653   84B4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0653   84B8 01 
0654   84B9 8E 0A           BCH  BR_84C5                    ; $84C5
0655   84BB             
0656   84BB             BR_84BB:  ; BR $8492,$84A0
0657   84BB B7 20           CPI  A,$20                      ; 
0658   84BD 89 04           BZR  BR_84C3                    ; $84C3
0659   84BF B5 03           LDI  A,$03                      ; 
0660   84C1 FD CA           ADR  X                          ; X = X + A + Carry
0661   84C3             
0662   84C3             BR_84C3: ; BR $84BD
0663   84C3 6A 02           LDI  UL,$02                     ; 
0664   84C5             
0665   84C5             BR_84C5: ; BR $84B9
0666   84C5 B5 3E           LDI  A,$3E                      ; 
0667   84C7 FD 1E           STA  #(Y)                       ; 
0668   84C9 54              INC  Y                          ; 
0669   84CA BE 8D 64        SJP  (CPY_X2Y)                  ; $8D64 - Copies UL bytes from X to Y
0670   84CD BE 89 63        SJP  (CRTC_CSR_STRT20)            ; $8963 - CRTC Cursor start raster
0671   84D0 54              INC  Y                          ; 
0672   84D1 A4              LDA  UH                         ; 
0673   84D2 FD 1E           STA  #(Y)                       ; 
0674   84D4             
0675   84D4             BR_84D4: ; BR $84A9
0676   84D4 FD 0A           POP  X                          ;
0677   84D6 9A              RTN                             ; Done
0678   84D7             ;% LB_XCHR_INPUT END
0679   84D7             ;------------------------------------------------------------------------------------------------------------
0680   84D7             
0681   84D7             
0682   84D7             
0683   84D7             ;------------------------------------------------------------------------------------------------------------
0684   84D7             ; $84D7- xxxx - Block copies video RAM?
0685   84D7             ; Called from: 
0686   84D7             ; Arguments: A,YL
0687   84D7             ; Outputs: 
0688   84D7             ; RegMod: X,Y
0689   84D7             ;------------------------------------------------------------------------------------------------------------
0690   84D7             ;% LB_xxxx START
0691   84D7             JMP_84D7: ; BR $819D6,$81FB,$82FE,$875F,$87C8,$8890,$8BA7,$8BEA
0692   84D7 1A              STA  YL
0693   84D8 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0694   84DC B7 28           CPI  A,$28                      ; 
0695   84DE 8B 06           BZS  BR_84E6                    ; If A == $28, 40 col mode?
0696   84E0             
0697   84E0 5E 19           CPI  YL,$19                     ; 
0698   84E2 89 02           BZR  BR_84E6                    ; If A <> $19, 25th line
0699   84E4             
0700   84E4 14              LDA  YL                         ; 
0701   84E5 9A              RTN                             ; Done
0702   84E6             
0703   84E6             BR_84E6: ; BR $84DE,$84E2
0704   84E6 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM $7000
0705   84E9 FD 18           LDX  Y                          ; X = Y
0706   84EB FD CA           ADR  X                          ; X = X + A + Carry 
0707   84ED B7 28           CPI  A,$28                      ; Column 40
0708   84EF 89 0C           BZR  BR_84FD                    ; If A <> $28
0709   84F1             
0710   84F1 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0711   84F5 B7 19           CPI  A,$19                      ; Line 25
0712   84F7 8B 04           BZS  BR_84FD                    ; If A == $19
0713   84F9             
0714   84F9 B5 28           LDI  A,$28                      ; 
0715   84FB FD CA           ADR  X                          ; X = X + A + Carry
0716   84FD             
0717   84FD             BR_84FD: ; BR $84EF,$84F7
0718   84FD 68 07           LDI  UH,$07                     ; Loop counter
0719   84FF 6A 80           LDI  UL,$80                     ; U = $0780
0720   8501             
0721   8501             BR_8501: ; BR $8507,$850B
0722   8501 FD 05           LDA  #(X)                       ; 
0723   8503 FD 1E           STA  #(Y)                       ; 
0724   8505 44              INC  X                          ; 
0725   8506 54              INC  Y                          ; 
0726   8507 88 08           LOP  UL,BR_8501                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
0727   8509             
0728   8509 FD 62           DEC  UH                         ; 
0729   850B 93 0C           BCS  BR_8501                    ; Loop back if not zero
0730   850D                 
0731   850D B5 00           LDI  A,$00                      ; 
0732   850F 6A 4F           LDI  UL,$4F                     ; 
0733   8511             
0734   8511             BR_8511: ; BR $8514
0735   8511 FD 1E           STA  #(Y)                       ; 
0736   8513 54              INC  Y                          ;
0737   8514 88 05           LOP  UL,BR_8511                 ; $8511
0738   8516             
0739   8516 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0740   851A B7 28           CPI  A,$28                      ; 
0741   851C 89 04           BZR  BR_8522                    ; A <> $28
0742   851E             
0743   851E B5 18           LDI  A,$18                      ; 
0744   8520 8E 02           BCH  BR_8524                    ; $8524
0745   8522             
0746   8522             BR_8522: ; BR $851c
0747   8522 B5 19           LDI  A,$19                      ; 
0748   8524             
0749   8524             BR_8524: ; BR $8520
0750   8524 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0751   8528 AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
0752   852B 9A              RTN                             ; Done
0753   852C             ;% LB_xxxx END
0754   852C             ;------------------------------------------------------------------------------------------------------------
0755   852C             
0756   852C             
0757   852C             
0758   852C             ;------------------------------------------------------------------------------------------------------------
0759   852C             ; $825C xxxx - 
0760   852C             ; Called from: $8223
0761   852C             ; Arguments: 
0762   852C             ; Outputs: 
0763   852C             ; RegMod: 
0764   852C             ;------------------------------------------------------------------------------------------------------------
0765   852C             ;% LB_xxxx START
0766   852C             JMP_852C: 
0767   852C 68 00           LDI  UH,$00                     ; U == $004F
0768   852E 6A 4F           LDI  UL,$4F                     ; 
0769   8530 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ; Clear $77D7
0769   8534 00 
0770   8535             
0771   8535             BR_8535: ; BR $85B3,$8600
0772   8535 BE 88 54        SJP  (JMP_8854)                 ; $8854
0773   8538 14              LDA  YL                         ; 
0774   8539 FD A7 77 D4     CPA  #(VIDEORAM + $07D4)        ; $77D4
0775   853D 89 17           BZR  BR_8556                    ; A <> ($77D4)
0776   853F FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D5
0777   8543 B7 00           CPI  A,$00                      ; 
0778   8545 89 0F           BZR  BR_8556                    ; A == $00
0779   8547 84              LDA  XH                         ; 
0780   8548 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4
0781   854C 04              LDA  XL                         ; 
0782   854D FD AE 77 D5     STA  #(VIDEORAM + $07D5)        ; $77D5
0783   8551 FD EB 77 D6     ORI  #(VIDEORAM + $07D6),$01    ; $77D6
0783   8555 01 
0784   8556             
0785   8556             BR_8556: ; BR $853D,$8545
0786   8556 FD A8           PSH  U                          ; 
0787   8558 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
0788   8559 81 60           BCR  BR_85BB                    ; $85BB
0789   855B FD 98           PSH  Y                          ; 
0790   855D FD 88           PSH  X                          ; 
0791   855F 58 7B           LDI  YH,HB(RND_VAL)             ; $7B
0792   8561 5A 00           LDI  YL,LB(RND_VAL)             ; $00
0793   8563 FD 98           PSH  Y                          ; 
0794   8565 CD 1C           VMJ  ($1C) \ ABYT($02)          ; (1C) Processes tokens corresponding to data bytes
0794   8567 02          
0795   8568 BE 86 56        SJP  (BR_8656)                  ; $8656
0796   856B FD 0A           POP  X                          ; 
0797   856D 59 00           ANI  (Y),$00                    ; 
0798   856F B7 00           CPI  A,$00                      ; 
0799   8571 89 03           BZR  BR_8576                    ; A <> $00
0800   8573 B5 FE           LDI  A,$FE                      ; 
0801   8575 0E              STA  (X)                        ; 
0802   8576             
0803   8576             BR_8576: ; BR $8571
0804   8576 14              LDA  YL                         ; 
0805   8577 2A              STA  UL                         ; 
0806   8578 FD 1A           POP  Y                          ; 
0807   857A             
0808   857A             BR_857A: ; BR $85A4
0809   857A 45              LIN  X                          ; 
0810   857B FD 1E           STA  #(Y)                       ; 
0811   857D 54              INC  Y                          ; 
0812   857E FD C8           PSH  A                          ; 
0813   8580 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0814   8584 B7 01           CPI  A,$01                      ;
0815   8586 8B 04           BZS  BR_858C                    ; A == $01
0816   8588 FD 8A           POP  A                          ; 
0817   858A 8E 09           BCH  BR_8595                    ; $8595
0818   858C             
0819   858C             BR_858C: ; BR $8586
0820   858C FD 8A           POP  A                          ; 
0821   858E B7 0D           CPI  A,$0D                      ; 
0822   8590 89 03           BZR  BR_8595                    ; A <> $0D
0823   8592 F9              REC                             ; 
0824   8593 8E 21           BCH  BR_85B6                    ; $85B6
0825   8595             
0826   8595             BR_8595: ; BR $858A,$8590
0827   8595 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0827   8599 01 
0828   859A BE 87 E7        SJP  (JMP_87E7)                 ; $87E7
0829   859D 83 17           BCS  BR_85B6                    ; JMP_87E7 rerturned failer (Carry set)
0830   859F B7 FF           CPI  A,$FF                      ; 
0831   85A1 89 01           BZR  BR_85A4                    ; A <> $FF
0832   85A3 56              DEC  Y                          ; 
0833   85A4             
0834   85A4             BR_85A4: ; BR $85A1
0835   85A4 88 2C           LOP  UL,BR_857A                 ; $857A
0836   85A6 FD 62           DEC  UH                         ; 
0837   85A8 FD 62           DEC  UH                         ; 
0838   85AA A4              LDA  UH                         ; 
0839   85AB FD 18           LDX  Y                          ; 
0840   85AD FD 1A           POP  Y                          ; 
0841   85AF FD 2A           POP  U                          ; 
0842   85B1 DD              INC  A                          ; 
0843   85B2 2A              STA  UL                         ; 
0844   85B3 88 80           LOP  UL,BR_8535                 ; $8535
0845   85B5 9A              RTN                             ; Done
0846   85B6             
0847   85B6             BR_85B6: ; BR $8593,$859D
0848   85B6 FD 1A           POP  Y                          ; 
0849   85B8 FD 2A           POP  U                          ; 
0850   85BA 9A              RTN                             ; Done
0851   85BB             
0852   85BB             BR_85BB: ; BR $8559
0853   85BB FD 2A           POP  U                          ; 
0854   85BD 6E 4B           CPI  UL,$4B                     ;
0855   85BF 81 03           BCR  BR_85C4                    ; UL < $4B
0856   85C1 BE 86 04        SJP  (BR_8604)                  ; $8604
0857   85C4             
0858   85C4             BR_85C4: ; BR $85BF
0859   85C4 FD 0E           STA  #(X)                       ; 
0860   85C6 44              INC  X                          ; 
0861   85C7 FD C8           PSH  A                          ; 
0862   85C9 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0863   85CD B7 01           CPI  A,$01                      ; 
0864   85CF 8B 04           BZS  BR_85D5                    ; A == $01
0865   85D1 FD 8A           POP  A                          ; 
0866   85D3 8E 1B           BCH  BR_85F0                    ; $85F0
0867   85D5             
0868   85D5             BR_85D5: ; BR $85CF
0869   85D5 FD 8A           POP  A                          ; 
0870   85D7 B7 0D           CPI  A,$0D                      ; 
0871   85D9 89 15           BZR  BR_85F0                    ; A <> $0D
0872   85DB FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0873   85DF B7 18           CPI  A,$18                      ; 
0874   85E1 8B 06           BZS  BR_85E9                    ; A == $18
0875   85E3 46              DEC  X                          ; 
0876   85E4 46              DEC  X                          ; 
0877   85E5 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF
0878   85E8 9A              RTN                             ; Done
0879   85E9             
0880   85E9             BR_85E9: ; BR $85E1
0881   85E9 FD 05           LDA  #(X)                       ; 
0882   85EB B7 0E           CPI  A,$0E                      ; 
0883   85ED 83 01           BCS  BR_85F0                    ; A >= $0E
0884   85EF 9A              RTN                             ; Done
0885   85F0             
0886   85F0             BR_85F0: ; BR $85D3,$85D9
0887   85F0 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0887   85F4 01 
0888   85F5 BE 87 E7        SJP  (JMP_87E7)                 ; $87E7
0889   85F8 81 01           BCR  BR_85FB                    ; JMP_87E7 returned success (Carry clear)
0890   85FA 9A              RTN                             ; Done
0891   85FB             
0892   85FB             BR_85FB: ; BR $85F8
0893   85FB B7 FF           CPI  A,$FF                      ; 
0894   85FD 89 01           BZR  BR_8600                    ; A <> $FF
0895   85FF 46              DEC  X                          ; 
0896   8600             
0897   8600             BR_8600: ; BR $85FD
0898   8600 88 CD           LOP  UL,BR_8535                 ; $8535
0899   8602 F9              REC                             ; 
0900   8603 9A              RTN                             ; Done
0901   8604             ;% LB_xxxx END
0902   8604             ;------------------------------------------------------------------------------------------------------------
0903   8604             
0904   8604             
0905   8604             
0906   8604             ;------------------------------------------------------------------------------------------------------------
0907   8604             ; $86E4 - xxxx - 
0908   8604             ; Called from: BR $829F,$844F
0909   8604             ; Arguments: UH, UL, A
0910   8604             ; Outputs: 
0911   8604             ; RegMod: UH
0912   8604             ;------------------------------------------------------------------------------------------------------------
0913   8604             ;% LB_xxxx START
0914   8604             BR_8604: ; BR $85C1
0915   8604 6C FF           CPI  UH,$FF                     ; 
0916   8606 89 01           BZR  BR_8609                    ; UH <> $FF
0917   8608 9A              RTN                             ; Done
0918   8609             
0919   8609             BR_8609: ; BR $8606
0920   8609 B7 3A           CPI  A,$3A                      ; 
0921   860B 81 03           BCR  BR_8610                    ; A < $3A
0922   860D             
0923   860D             BR_860D: ; BR $8612,$861F,$862A
0924   860D 68 FF           LDI  UH,$FF                     ; 
0925   860F 9A              RTN                             ; Done
0926   8610             
0927   8610             BR_8610: ; BR $860B
0928   8610 B7 30           CPI  A,$30                      ; 
0929   8612 91 07           BCR  BR_860D                    ; A < $30
0930   8614 FD C8           PSH  A                          ; 
0931   8616 B5 40           LDI  A,$40                      ; Bit 6: The display program shows from (Y-Reg)
0932   8618 A7 78 80        CPA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
0933   861B 89 04           BZR  BR_8621                    ; A <> DISPARAM
0934   861D FD 8A           POP  A                          ; 
0935   861F 9E 14           BCH  BR_860D                    ; $860D
0936   8621             
0937   8621             BR_8621: ; BR $861B
0938   8621 B5 20           LDI  A,$20                      ; Bit 5: Result from AR-X is displayed
0939   8623 A7 78 80        CPA  (DISPARAM)                 ; Display Parameter: determines display at READY
0940   8626 89 04           BZR  BR_862C                    ; DISPARAM <> $20
0941   8628 FD 8A           POP  A                          ; 
0942   862A 9E 1F           BCH  BR_860D                    ; $860D
0943   862C             
0944   862C             BR_862C: ; BR $8626
0945   862C B5 50           LDI  A,$50                      ; 
0946   862E FB              SEC                             ; Set Carry Flag
0947   862F 20              SBC  UL                         ; A = A - UL. Subtract with Carry
0948   8630 FD A8           PSH  U                          ; 
0949   8632 68 7A           LDI  UH,HB(ARZ)                 ; $7A
0950   8634 6A 08           LDI  UL,LB(ARZ)                 ; $08
0951   8636 FD EA           ADR  U                          ; A = A - UL. Subtract with Carry
0952   8638 25              LDA  (U)                        ; 
0953   8639 FD 2A           POP  U                          ; 
0954   863B B7 3A           CPI  A,$3A                      ; 
0955   863D 8B 07           BZS  BR_8646                    ; A <> $3A
0956   863F B7 20           CPI  A,$20                      ; 
0957   8641 8B 03           BZS  BR_8646                    ; A <> $20
0958   8643 FD 8A           POP  A                          ; 
0959   8645 9A              RTN                             ; Done
0960   8646             
0961   8646             BR_8646: ; BR $863D,$8641
0962   8646 28              STA  UH                         ; 
0963   8647 FD 8A           POP  A                          ; 
0964   8649 FD 0E           STA  #(X)                       ; 
0965   864B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0965   864F 01 
0966   8650 44              INC  X                          ; 
0967   8651 62              DEC  UL                         ; 
0968   8652 A4              LDA  UH                         ; 
0969   8653 68 FF           LDI  UH,$FF                     ; 
0970   8655 9A              RTN                             ; Done
0971   8656             
0972   8656             BR_8656:
0973   8656 FD 48           LDX  S                          ; 
0974   8658 FD C8           PSH  A                          ; 
0975   865A B5 0A           LDI  A,$0A                      ; 
0976   865C FD CA           ADR  X                          ; 
0977   865E 05              LDA  (X)                        ; 
0978   865F 28              STA  UH                         ; 
0979   8660 FD 8A           POP  A                          ; 
0980   8662 9A              RTN                             ; Done
0981   8663             
0982   8663             JMP_8663: ; BR $8226
0983   8663 A5 78 80        LDA  (DISPARAM)                 ; Display Parameter: determines display at READY
0984   8666 B7 80           CPI  A,$80                      ; Bit 7: Error message is in the display
0985   8668 89 03           BZR  BR_866D                    ; $866D
0986   866A BA 89 63        JMP  CRTC_CSR_STRT20              ; $8963 CRTC - Cursor start raster
0987   866D             
0988   866D             BR_866D: ; BR $8668
0989   866D B7 A0           CPI  A,$A0                      ; Bit 7: Error message is in the display, Bit 5: Result from AR-X is displayed
0990   866F 89 03           BZR  BR_8674                    ; A <> $A0
0991   8671 BA 89 63        JMP  CRTC_CSR_STRT20              ; $8963 CRTC - Cursor start raster
0992   8674             
0993   8674             BR_8674: ; BR $866F
0994   8674 B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. A system message or a reserve text is shown in the display
0995   8676 89 03           BZR  BR_867B                    ; A <> $01
0996   8678 BA 89 63        JMP  CRTC_CSR_STRT20              ; $8963 CRTC - Cursor start raster
0997   867B             
0998   867B             
0999   867B             BR_867B: ; BR $8676
1000   867B FD A5 77 D4     LDA  #(VIDEORAM + $07D4)        ; $77D4
1001   867F 18              STA  YH                         ; 
1002   8680 FD A5 77 D5     LDA  #(VIDEORAM + $07D5)        ; $77D5
1003   8684 1A              STA  YL                         ; 
1004   8685 B5 0E           LDI  A,$0E                      ; 
1005   8687 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor H (horizontal)
1006   868B 94              LDA  YH                         ; 
1007   868C FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1008   8690 B5 0F           LDI  A,$0F                      ; 
1009   8692 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor L (vertical)
1010   8696 14              LDA  YL                         ; 
1011   8697 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1012   869B FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
1013   869F FD 88           PSH  X                          ; 
1014   86A1 FD C8           PSH  A                          ; 
1015   86A3 48 8E           LDI  XH,$8E                     ; CONFIG_TBL: ; 8E8F
1016   86A5 4A A1           LDI  XL,$A1                     ; 
1017   86A7 B5 1C           LDI  A,$1C                      ; 
1018   86A9 FD CA           ADR  X                          ; X = X + A + Carry
1019   86AB ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
1020   86AF 8B 05           BZS  BR_86B6                    ; $86B6
1021   86B1 FD EB 77 DA     ORI  #(VIDEORAM + $07DA),$40    ; $77DA
1021   86B5 40 
1022   86B6             
1023   86B6             BR_86B6: ; BR $8668
1024   86B6 ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
1025   86BA 89 05           BZR  BR_86C1                    ; $86C1
1026   86BC FD E9 77 DA     ANI  #(VIDEORAM + $07DA),$BF    ; $77DA
1026   86C0 BF 
1027   86C1             
1028   86C1             BR_86C1: ; BR $86BA
1029   86C1 B5 0A           LDI  A,$0A                      ; 
1030   86C3 FD AE 78 00     STA  #(CRTCTRL)                 ; Cusor Raster Start
1031   86C7 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
1032   86CB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1033   86CF B5 0B           LDI  A,$0B                      ; 
1034   86D1 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor End Raster
1035   86D5 FD A5 77 DB     LDA  #(VIDEORAM + $07DB)        ; $77DB
1036   86D9 B9 1F           ANI  A,$1F                      ; 
1037   86DB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1038   86DF FD 8A           POP  A                          ; 
1039   86E1 FD 0A           POP  X                          ; 
1040   86E3 9A              RTN                             ; Done
1041   86E4             ;% LB_xxxx END
1042   86E4             ;------------------------------------------------------------------------------------------------------------
1043   86E4             
1044   86E4             
1045   86E4             
1046   86E4             ;------------------------------------------------------------------------------------------------------------
1047   86E4             ; $86E4 - xxxx - Finds start of program?
1048   86E4             ; Called from: BR $829F,$844F
1049   86E4             ; Arguments: 
1050   86E4             ; Outputs: 
1051   86E4             ; RegMod: 
1052   86E4             ;------------------------------------------------------------------------------------------------------------
1053   86E4             ;% LB_xxxx START
1054   86E4             JMP_86E4: 
1055   86E4 A5 78 65        LDA  (BASPRG_ST_H)              ; Start of Basic program in RAM (H)
1056   86E7 A7 78 A6        CPA  (SRCH_ADD_H)               ; Address of linefound during search (H)
1057   86EA 8B 02           BZS  BR_86EE                    ; If A == SRCH_ADD_H
1058   86EC FB              SEC                             ; 
1059   86ED 9A              RTN                             ; Done
1060   86EE             
1061   86EE             BR_86EE: ; BR $86EA
1062   86EE A5 78 66        LDA  (BASPRG_ST_L)              ; Start of Basic program in RAM (L)
1063   86F1 A7 78 A7        CPA  (SRCH_ADD_L)               ; Address of linefound during search (L)
1064   86F4 8B 02           BZS  BR_86F8                    ; If A == SRCH_ADD_L
1065   86F6 FB              SEC                             ; Carry set indicates no match
1066   86F7 9A              RTN                             ; Done
1067   86F8             
1068   86F8             BR_86F8: ; BR $86F4
1069   86F8 F9              REC                             ; Carry clear indicates match
1070   86F9 9A              RTN                             ; Done
1071   86FA             ;% LB_xxxx END
1072   86FA             ;------------------------------------------------------------------------------------------------------------
1073   86FA             
1074   86FA             
1075   86FA             
1076   86FA             ;------------------------------------------------------------------------------------------------------------
1077   86FA             ; $86FA xxxx - 
1078   86FA             ; Called from: 
1079   86FA             ; Arguments: 
1080   86FA             ; Outputs: 
1081   86FA             ; RegMod: A
1082   86FA             ;------------------------------------------------------------------------------------------------------------
1083   86FA             ;% LB_xxxx START
1084   86FA             JMP_86FA: ; BR $831D,$8448
1085   86FA FD 88           PSH  X                          ; 
1086   86FC A5 78 A6        LDA  (SRCH_ADD_H)               ; Address of line found during search (H)
1087   86FF 08              STA  XH                         ; 
1088   8700 A5 78 A7        LDA  (SRCH_ADD_L)               ; Address of line found during search (L)
1089   8703 0A              STA  XL                         ; 
1090   8704 44              INC  X                          ; 
1091   8705 44              INC  X                          ; 
1092   8706 45              LIN  X                          ; A = (X) then INC X
1093   8707 FD CA           ADR  X                          ; X = X + A + Carry
1094   8709 A5 78 67        LDA  (BASPRG_END_H)             ; End of Basic program in RAM (H)
1095   870C 86              CPA  XH                         ; Is search at end of program HB??
1096   870D 8B 04           BZS  BR_8713                    ; A == XH
1097   870F FD 0A           POP  X                          ; 
1098   8711 FB              SEC                             ; Failure
1099   8712 9A              RTN                             ; Done
1100   8713             
1101   8713             BR_8713: ; BR $870D
1102   8713 A5 78 68        LDA  (BASPRG_END_L)             ; End of Basic program in RAM (L)
1103   8716 06              CPA  XL                         ; Is search at end of program LB??
1104   8717 8B 04           BZS  BR_871D                    ; A == XL
1105   8719 FD 0A           POP  X                          ; 
1106   871B FB              SEC                             ; 
1107   871C 9A              RTN                             ; Done
1108   871D             
1109   871D             BR_871D: ; BR $8717
1110   871D FD 0A           POP  X                          ; 
1111   871F F9              REC                             ; 
1112   8720 9A              RTN                             ; Done
1113   8721             ;% LB_xxxx END
1114   8721             ;------------------------------------------------------------------------------------------------------------
1115   8721             
1116   8721             
1117   8721             
1118   8721             ;------------------------------------------------------------------------------------------------------------
1119   8721             ; xxxx
1120   8721             ; Called from: 
1121   8721             ; Arguments: 
1122   8721             ; Outputs: 
1123   8721             ; RegMod: 
1124   8721             ;------------------------------------------------------------------------------------------------------------
1125   8721             ;% LB_xxxx START
1126   8721             JMP_8721: ; BR $822C
1127   8721 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1128   8724 FD C8           PSH  A                          ; 
1129   8726 B7 20           CPI  A,$20                      ; Bit 5: Result from AR-X is displayed
1130   8728 8B 28           BZS  BR_8752                    ; A == $20
1131   872A B7 80           CPI  A,$80                      ; Bit 7: Error message is in the display
1132   872C 8B 24           BZS  BR_8752                    ; A == $80
1133   872E B7 A0           CPI  A,$A0                      ; Bit 7: Error message is in the display, Bit 5: Result from AR-X is displayed
1134   8730 8B 20           BZS  BR_8752                    ; A == $A0
1135   8732 B7 01           CPI  A,$01                      ; Bit 1: Program waits for Enter after a print command
1136   8734 8B 1C           BZS  BR_8752                    ; A == $01
1137   8736 FD 8A           POP  A                          ; 
1138   8738 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
1139   873C B7 0D           CPI  A,$0D                      ; 
1140   873E 8B 01           BZS  BR_8741                    ; A == $0D
1141   8740 9A              RTN                             ; Done
1142   8741             
1143   8741             BR_8741: ; BR $873E
1144   8741 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1145   8745 B7 28           CPI  A,$28                      ; 
1146   8747 8B 01           BZS  BR_874A                    ; A == $28
1147   8749 9A              RTN                             ; Done
1148   874A             
1149   874A             BR_874A: ; BR $8747
1150   874A A5 7B D7        LDA  (IN_BUF + $27)             ; 
1151   874D B7 0D           CPI  A,$0D                      ; CR?
1152   874F 89 6A           BZR  BR_87BB                    ; A <> $0D
1153   8751 9A              RTN                             ; Done
1154   8752             
1155   8752             BR_8752: ; BR $8728,$872C,$8730,$8734
1156   8752 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row, (pp) = (pp) + n (ME0)
1156   8756 01 
1157   8757 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1158   875B B7 19           CPI  A,$19                      ; 
1159   875D 81 03           BCR  BR_8762                    ; A < $19
1160   875F BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1161   8762             
1162   8762             BR_8762: ; BR $875D
1163   8762 BE 87 D4        SJP  (JMP_87D4)                 ; $87D4
1164   8765 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1165   8769 18              STA  YH                         ; 
1166   876A 5A 01           LDI  YL,$01                     ; 
1167   876C BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1168   876F 6A 4F           LDI  UL,$4F                     ; 
1169   8771 FD 8A           POP  A                          ; 
1170   8773 B7 20           CPI  A,$20                      ; 
1171   8775 89 06           BZR  BR_877D                    ; $877D
1172   8777 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
1173   8779 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
1174   877B 8E 0C           BCH  BR_8789                    ; $8789
1175   877D             
1176   877D             BR_877D: ; BR $8775
1177   877D 48 7A           LDI  XH,$7A                     ; ARZ?
1178   877F 4A 10           LDI  XL,$10                     ; 
1179   8781 6A 19           LDI  UL,$19                     ; Loop counter?
1180   8783 B5 0D           LDI  A,$0D                      ; 
1181   8785 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
1182   8789             
1183   8789             BR_8789: ; BR $877B
1184   8789 68 00           LDI  UH,$00                     ; 
1185   878B             
1186   878B             BR_878B: ; BR $
1187   878B 45              LIN  X                          ; 
1188   878C B7 00           CPI  A,$00                      ; 
1189   878E 8B 0D           BZS  BR_879D                    ; A == $00
1190   8790 6C 02           CPI  UH,$02                     ; 
1191   8792 8B 09           BZS  BR_879D                    ; A == $02
1192   8794 68 01           LDI  UH,$01                     ; 
1193   8796 FD 1E           STA  #(Y)                       ; 
1194   8798 54              INC  Y                          ; 
1195   8799             
1196   8799             BR_8799: ; BR $8799
1197   8799 88 10           LOP  UL,BR_878B                 ; $878B
1198   879B 8E 08           BCH  BR_87A5                    ; $87A5
1199   879D             
1200   879D             BR_879D: ; BR $878E,$8792
1201   879D 6C 01           CPI  UH,$01                     ; 
1202   879F 89 02           BZR  BR_87A3                    ; A <> $01
1203   87A1 FD 60           INC  UH                         ;
1204   87A3             
1205   87A3             BR_87A3: ; BR $879F
1206   87A3 9E 0C           BCH  BR_8799                    ; $8799
1207   87A5             
1208   87A5             BR_87A5: ; BR $879B
1209   87A5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1210   87A9 B7 28           CPI  A,$28                      ;
1211   87AB 8B 01           BZS  BR_87AE                    ; A == $28
1212   87AD 9A              RTN                             ; Done
1213   87AE             
1214   87AE             BR_87AE: ; BR $87AB
1215   87AE 4C 7B           CPI  XH,$7B                     ; 
1216   87B0 8B 01           BZS  BR_87B3                    ; XH == $7B
1217   87B2 9A              RTN                             ; Done
1218   87B3             
1219   87B3             BR_87B3: ; BR $87B0                 
1220   87B3 A5 7B 87        LDA  (OUT_BUF + $27)            ; 
1221   87B6 B7 00           CPI  A,$00                      ; 
1222   87B8 89 01           BZR  BR_87BB                    ; A <> $00
1223   87BA 9A              RTN                             ; Done
1224   87BB             
1225   87BB             BR_87BB: ; BR $874F,$87B8,$8791,$87E5
1226   87BB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - inc text row
1226   87BF 01 
1227   87C0 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1228   87C4 B7 19           CPI  A,$19                      ; 
1229   87C6 81 03           BCR  BR_87CB                    ; A < $19
1230   87C8 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1231   87CB             
1232   87CB             BR_87CB: ; BR $87C6
1233   87CB 9A              RTN                             ; Done
1234   87CC             
1235   87CC             
1236   87CC             JMP_87CC: ; BR $81F1
1237   87CC A5 7B B0        LDA  (IN_BUF)                   ; 
1238   87CF B7 3E           CPI  A,$3E                      ; 
1239   87D1 9B 18           BZS  BR_87BB                    ; A == $3E
1240   87D3 9A              RTN                             ; Done
1241   87D4             
1242   87D4             JMP_87D4: ; BR $8762
1243   87D4 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1244   87D8 B7 28           CPI  A,$28                      ; 
1245   87DA 8B 01           BZS  BR_87DD                    ; A == $28
1246   87DC 9A              RTN                             ; Done
1247   87DD             
1248   87DD             BR_87DD: ; BR $87DA
1249   87DD A5 7B D8        LDA  (IN_BUF + $28)             ; 
1250   87E0 B7 0D           CPI  A,$0D                      ; 
1251   87E2 89 01           BZR  BR_87E5                    ; A <> $0D
1252   87E4 9A              RTN                             ; Done
1253   87E5             
1254   87E5             BR_87E5: ; BR $87E2
1255   87E5 9E 2C           BCH  BR_87BB                    ; $87BB
1256   87E7             ;% LB_xxxx END
1257   87E7             ;------------------------------------------------------------------------------------------------------------
1258   87E7             
1259   87E7             
1260   87E7             
1261   87E7             ;------------------------------------------------------------------------------------------------------------
1262   87E7             ; $87E7 xxxx - 
1263   87E7             ; Called from: 
1264   87E7             ; Arguments: 
1265   87E7             ; Outputs: 
1266   87E7             ; RegMod: 
1267   87E7             ;------------------------------------------------------------------------------------------------------------
1268   87E7             ;% LB_xxxx START
1269   87E7             JMP_87E7: ; BR $859A,$85F5
1270   87E7 FD A5 77 D7     LDA  #(VIDEORAM + $07D7)        ; $77D7
1271   87EB B7 50           CPI  A,$50                      ; 
1272   87ED 83 01           BCS  BR_87F0                    ; A >= $50
1273   87EF 9A              RTN                             ; Done
1274   87F0             
1275   87F0             BR_87F0: ; BR $87ED
1276   87F0 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1277   87F3 B7 50           CPI  A,$50                      ; Bit 6: The display program shows from (Y-Reg), 
1278   87F5 8B 06           BZS  BR_87FD                    ; If A == $50
1279   87F7 B7 54           CPI  A,$54                      ; Bit 4: Program line is displayed
1280   87F9 8B 02           BZS  BR_87FD                    ; If A == $54
1281   87FB FB              SEC                             ; 
1282   87FC 9A              RTN                             ; Done
1283   87FD             
1284   87FD             BR_87FD: ; BR $87F5,$87F9
1285   87FD FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D6
1286   8801 B7 01           CPI  A,$01                      ; 
1287   8803             
1288   8803             BR_8803: ; BR $91C1
1289   8803 89 02           BZR  BR_8807                    ; If A <> $01
1290   8805 FB              SEC                             ; 
1291   8806 9A              RTN                             ; Done
1292   8807             
1293   8807             BR_8807: ; BR $8803
1294   8807 FD 88           PSH  X                          ; 
1295   8809 FD 98           PSH  Y                          ; 
1296   880B FD A8           PSH  U                          ; 
1297   880D FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1298   8811 18              STA  YH                         ; 
1299   8812 5A 01           LDI  YL,$01                     ; 
1300   8814 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1301   8818 B7 01           CPI  A,$01                      ; 
1302   881A 89 08           BZR  BR_8824                    ; If A <> $01
1303   881C A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1304   881F 18              STA  YH                         ; 
1305   8820 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
1306   8823 1A              STA  YL                         ; 
1307   8824             
1308   8824             BR_8824: ; BR $881A
1309   8824 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1310   8827 48 7B           LDI  XH,HB(IN_BUF)              ; $7B
1311   8829 4A B0           LDI  XL,LB(IN_BUF)              ; $B0
1312   882B 6A 4F           LDI  UL,$4F                     ; 
1313   882D                 
1314   882D             BR_882D:   
1315   882D 45              LIN  X                          ; 
1316   882E 54              INC  Y                          ; 
1317   882F B7 30           CPI  A,$30                      ; 
1318   8831 81 06           BCR  BR_8839                    ; If A < $30
1319   8833 B7 3A           CPI  A,$3A                      ; 
1320   8835 83 02           BCS  BR_8839                    ; If A >= $3A
1321   8837 88 0C           LOP  UL,BR_882D                 ; 
1322   8839             
1323   8839             BR_8839: ; BR $8331,$8335
1324   8839 FD 18           LDX  Y                          ; 
1325   883B 54              INC  Y                          ; 
1326   883C 62              DEC  UL                         ; 
1327   883D             
1328   883D             BR_883D: ; BR $8843
1329   883D FD 15           LDA  #(Y)                       ; 
1330   883F 54              INC  Y                          ; 
1331   8840 FD 0E           STA  #(X)                       ; 
1332   8842 44              INC  X                          ; 
1333   8843 88 08           LOP  UL,BR_883D                 ; $883D
1334   8845 FD 2A           POP  U                          ; 
1335   8847 FD 1A           POP  Y                          ; 
1336   8849 FD 0A           POP  X                          ; 
1337   884B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$FF    ; $77
1337   884F FF 
1338   8850 B5 FF           LDI  A,$FF                      ; 
1339   8852 F9              REC                             ; 
1340   8853 9A              RTN                             ; Done
1341   8854             ;% LB_xxxx END
1342   8854             ;------------------------------------------------------------------------------------------------------------
1343   8854             
1344   8854             
1345   8854             
1346   8854             ;------------------------------------------------------------------------------------------------------------
1347   8854             ; $8854 xxxx - 
1348   8854             ; Called from: 
1349   8854             ; Arguments: 
1350   8854             ; Outputs: 
1351   8854             ; RegMod: 
1352   8854             ;------------------------------------------------------------------------------------------------------------
1353   8854             ;% LB_xxxx START
1354   8854             JMP_8854: ; BR $8835
1355   8854 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1356   8858 B7 01           CPI  A,$01                      ; 
1357   885A 8B 01           BZS  BR_885D                    ; If A == $01
1358   885C 9A              RTN                             ; Done
1359   885D             
1360   885D             BR_885D: ; BR $885A
1361   885D A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1362   8860 B7 16           CPI  A,$16                      ; 
1363   8862 83 01           BCS  BR_8865                    ; If A >= $16
1364   8864 9A              RTN                             ; Done
1365   8865             
1366   8865             BR_8865: ; BR $8862
1367   8865 FD 98           PSH  Y                          ; 
1368   8867 FD A8           PSH  U                          ; 
1369   8869 FD 88           PSH  X                          ; 
1370   886B 04              LDA  XL                         ; 
1371   886C FB              SEC                             ; 
1372   886D A1 70 01        SBC  (SHADOW_RAM + $01)         ; $7001
1373   8870 0A              STA  XL                         ; 
1374   8871 84              LDA  XH                         ; 
1375   8872 A1 70 00        SBC  (SHADOW_RAM)               ; $7000
1376   8875 08              STA  XH                         ; 
1377   8876 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1378   887A B7 50           CPI  A,$50                      ; 
1379   887C 89 08           BZR  BR_8886                    ; If A <> $50
1380   887E 4C 07           CPI  XH,$07                     ; 
1381   8880 89 02           BZR  BR_8884                    ; If A <> $50
1382   8882 4E D0           CPI  XL,$D0                     ; 
1383   8884             
1384   8884             BR_8884: ; BR $8880
1385   8884 8E 06           BCH  BR_888C                    ; $888C
1386   8886             
1387   8886             BR_8886: ; BR $887C
1388   8886 4C 03           CPI  XH,$03                     ;
1389   8888 89 02           BZR  BR_888C                    ; If A <> $03
1390   888A 4E E8           CPI  XL,$E8                     ;
1391   888C             
1392   888C             BR_888C: ; BR $8884,$8888
1393   888C 81 20           BCR  BR_88AE                    ; $88AE
1394   888E B5 1A           LDI  A,$1A                      ; 
1395   8890 BE 84 D7        SJP  (JMP_84D7)                 ; Block copies video RAM?
1396   8893             
1397   8893 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E DISPLAY BUFFER, Y cursor position
1398   8896 18              STA  YH                         ;
1399   8897 5A 01           LDI  YL,$01                     ;
1400   8899 BE 8D 6B        SJP  (JMP_8D6B)                 ; Not sure, twiddles Y
1401   889C             
1402   889C FD 0A           POP  X                          ; 
1403   889E FD 98           PSH  Y                          ; 
1404   88A0 BE 88 B5        SJP  (JMP_88B5)                 ; Sets #$77D2, $774E to $FF??
1405   88A3             
1406   88A3 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1407   88A7 B7 50           CPI  A,$50                      ;
1408   88A9 8B 03           BZS  BR_88AE                    ; If A == $50
1409   88AB BE 88 B5        SJP  (JMP_88B5)                 ; Sets #$77D2, $774E to $FF??
1410   88AE             
1411   88AE             BR_88AE: ; BR $888C,$88A9
1412   88AE FD 0A           POP  X                          ; 
1413   88B0 FD 2A           POP  U                          ; 
1414   88B2 FD 1A           POP  Y                          ; 
1415   88B4 9A              RTN                             ; Done
1416   88B5             ;% LB_xxxx END
1417   88B5             ;------------------------------------------------------------------------------------------------------------
1418   88B5             
1419   88B5             
1420   88B5             
1421   88B5             ;------------------------------------------------------------------------------------------------------------
1422   88B5             ; $88B5 xxxx - Sets $77D2 (ME1) and $774E (ME0) to $FF
1423   88B5             ; Called from: $88A0,$88AB
1424   88B5             ; Arguments: 
1425   88B5             ; Outputs: 
1426   88B5             ; RegMod: 
1427   88B5             ;------------------------------------------------------------------------------------------------------------
1428   88B5             ;% LB_xxxx START
1429   88B5             JMP_88B5: 
1430   88B5 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row, (pp) = (pp) + n (ME1) 
1430   88B9 FF 
1431   88BA EF 77 4E FF     ADI  (STRING_VARS + $FE),$FF    ; $774E in DISPLAY BUFFER, Y cursor position, (pp) = (pp) + n (ME0)
1432   88BE 9A              RTN                             ; Done
1433   88BF             ;% LB_xxxx END
1434   88BF             ;------------------------------------------------------------------------------------------------------------
1435   88BF             
1436   88BF             
1437   88BF             
1438   88BF             ;------------------------------------------------------------------------------------------------------------
1439   88BF             ; $88BF xxxx
1440   88BF             ; Called from: $85E5,$8C17
1441   88BF             ; Arguments: 
1442   88BF             ; Outputs: 
1443   88BF             ; RegMod: 
1444   88BF             ;------------------------------------------------------------------------------------------------------------
1445   88BF             ;% LB_xxxx START
1446   88BF             JMP_88BF: 
1447   88BF 04              LDA  XL                         ; 
1448   88C0 FB              SEC                             ; 
1449   88C1 A1 70 01        SBC  (SHADOW_RAM + $01)         ; $7001
1450   88C4 0A              STA  XL                         ; 
1451   88C5 84              LDA  XH                         ; 
1452   88C6 A1 70 00        SBC  (SHADOW_RAM)               ; $7000
1453   88C9 08              STA  XH                         ; 
1454   88CA 6A 01           LDI  UL,$01                     ; 
1455   88CC             
1456   88CC             BR_88CC: ; BR $88E3
1457   88CC 60              INC  UL                         ; 
1458   88CD FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1459   88D1 4C 00           CPI  XH,$00                     ; 
1460   88D3 89 05           BZR  BR_88DA                    ; If A <> $00
1461   88D5 06              CPA  XL                         ; 
1462   88D6 8B 02           BZS  BR_88DA                    ; If A == XL
1463   88D8 83 0B           BCS  BR_88E5                    ; If A >= XL
1464   88DA             
1465   88DA             BR_88DA: ; BR $88D3,$88D6
1466   88DA 28              STA  UH                         ; 
1467   88DB 04              LDA  XL                         ; 
1468   88DC FB              SEC                             ; 
1469   88DD A0              SBC  UH                         ; 
1470   88DE 0A              STA  XL                         ; 
1471   88DF 84              LDA  XH                         ; 
1472   88E0 B1 00           SBI  A,$00                      ;
1473   88E2 08              STA  XH                         ; 
1474   88E3 9E 19           BCH  BR_88CC                    ; $88CC
1475   88E5             
1476   88E5             BR_88E5: ; BR $88D8
1477   88E5 24              LDA  UL
1478   88E6 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1479   88EA 9A              RTN                             ; Done
1480   88EB             ;% LB_xxxx END
1481   88EB             ;------------------------------------------------------------------------------------------------------------
1482   88EB             
1483   88EB             
1484   88EB             
1485   88EB             ;------------------------------------------------------------------------------------------------------------
1486   88EB             ; xxxx
1487   88EB             ; Called from: 
1488   88EB             ; Arguments: 
1489   88EB             ; Outputs: A
1490   88EB             ; RegMod: A
1491   88EB             ;------------------------------------------------------------------------------------------------------------
1492   88EB             ;% LB_xxxx START
1493   88EB             JMP_88EB: ; BR $81CF,$81F4
1494   88EB FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1495   88EF B7 01           CPI  A,$01                      ; 
1496   88F1 89 05           BZR  BR_88F8                    ; If A == $01
1497   88F3             
1498   88F3 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E  DISPLAY BUFFER, Y cursor position
1499   88F6 8E 04           BCH  BR_88FC                    ; $88FC
1500   88F8             
1501   88F8             BR_88F8: ; BR $88F1
1502   88F8 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1503   88FC             
1504   88FC             BR_88FC: ; BR $88F6
1505   88FC 9A              RTN                             ; Done
1506   88FD             ;% LB_xxxx END
1507   88FD             ;------------------------------------------------------------------------------------------------------------
1508   88FD             
1509   88FD             
1510   88FD             
1511   88FD             ;------------------------------------------------------------------------------------------------------------
1512   88FD             ; xxxx
1513   88FD             ; Called from: 
1514   88FD             ; Arguments: 
1515   88FD             ; Outputs: 
1516   88FD             ; RegMod: UH, A
1517   88FD             ;------------------------------------------------------------------------------------------------------------
1518   88FD             ;% LB_xxxx START
1519   88FD             JMP_88FD: ; BR $84B1
1520   88FD 68 33           LDI  UH,$33                     ; 
1521   88FF B5 10           LDI  A,$10                      ; 
1522   8901 A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1523   8904 B7 10           CPI  A,$10                      ; Was Bit 4 set
1524   8906 89 01           BZR  BR_8909                    ; If A <> $10
1525   8908 9A              RTN                             ; 
1526   8909             
1527   8909             BR_8909: ; BR $8906
1528   8909 FD 62           DEC  UH                         ; UH == $32
1529   890B B5 20           LDI  A,$20                      ; 
1530   890D A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1531   8910 B7 20           CPI  A,$20                      ; Was bit 5 set
1532   8912 89 01           BZR  BR_8915                    ; If A <> $20
1533   8914 9A              RTN                             ; 
1534   8915             
1535   8915             BR_8915: ; BR $8912
1536   8915 FD 62           DEC  UH                         ; UH == $31
1537   8917 B5 40           LDI  A,$40                      ; 
1538   8919 A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1539   891C B7 40           CPI  A,$40                      ; Was Bit 6 set
1540   891E 89 06           BZR  BR_8926                    ; If A <> $40
1541   8920 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF - Clear
1541   8924 00 
1542   8925 9A              RTN                             ; 
1543   8926             
1544   8926             BR_8926: ; BR $891E
1545   8926 68 0D           LDI  UH,$0D                     ; 
1546   8928 9A              RTN                             ; 
1547   8929             ;% LB_xxxx END
1548   8929             ;------------------------------------------------------------------------------------------------------------
1549   8929             
1550   8929             
1551   8929             
1552   8929             ;------------------------------------------------------------------------------------------------------------
1553   8929             ; $8929 xxxx - 
1554   8929             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1555   8929             ; Arguments: 
1556   8929             ; Outputs: 
1557   8929             ; RegMod: 
1558   8929             ;------------------------------------------------------------------------------------------------------------
1559   8929             ;% LB_xxxx START
1560   8929             JMP_8929: ; BR $81E1
1561   8929 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
1561   892D 00 
1562   892E A5 76 4F        LDA  (DISP_BUFF + $4F)          ; 
1563   8931 BF 10           BII  A,$10                      ; 
1564   8933 8B 19           BZS  BR_894E                    ; If Bit 6 of A was not set
1565   8935 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1566   8938 B9 01           ANI  A,$01                      ; 
1567   893A B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. 
1568   893C                                                 ; A system message or a reserve text is shown in the display.
1569   893C 8B 02           BZS  BR_8940                    ; If A == $01
1570   893E FB              SEC                             ; Failure ? 
1571   893F 9A              RTN                             ; Done
1572   8940             
1573   8940             BR_8940: ; BR $893C
1574   8940 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1575   8943 B9 01           ANI  A,$01                      ; 
1576   8945 B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. 
1577   8947                                                 ; A system message or a reserve text is shown in the display.
1578   8947 89 05           BZR  BR_894E                    ; If A <> $01
1579   8949 BE 84 66        SJP  (JMP_8466)                 ; $8466 ??
1580   894C F9              REC                             ; Success?
1581   894D 9A              RTN                             ; Done
1582   894E             
1583   894E             BR_894E: ; BR $8933,$8947
1584   894E A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1585   8951 B9 01           ANI  A,$01                      ; 
1586   8953 B7 00           CPI  A,$00                      ; Nothing but Bit 0 was set
1587   8955 89 02           BZR  BR_8959                    ; If A <> $00
1588   8957 FB              SEC                             ;  
1589   8958 9A              RTN                             ; Done
1590   8959             
1591   8959             BR_8959:
1592   8959 BE 8C 57        SJP  (JMP_8C57)                 ; $8C57
1593   895C FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
1593   8960 FF 
1594   8961 F9              REC                             ; 
1595   8962 9A              RTN                             ; Done
1596   8963             ;% LB_xxxx END
1597   8963             ;------------------------------------------------------------------------------------------------------------
1598   8963             
1599   8963             
1600   8963             
1601   8963             ;------------------------------------------------------------------------------------------------------------
1602   8963             ; $8963 CRTC_CSR_STRT20 - CRTC - Cursor start raster register
1603   8963             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1604   8963             ; Arguments: 
1605   8963             ; Outputs: 
1606   8963             ; RegMod: 
1607   8963             ;------------------------------------------------------------------------------------------------------------
1608   8963             ;% LB_CRTC_CSR_STRT20 START
1609   8963             CRTC_CSR_STRT20:
1610   8963 FD C8           PSH  A                          ; 
1611   8965 B5 0A           LDI  A,$0A                      ; CRTC - Cursor start raster register
1612   8967 FD AE 78 00     STA  #(CRTCTRL)                 ; &7800
1613   896B B5 20           LDI  A,$20                      ;
1614   896D FD AE 78 01     STA  #(CRTCTRL + $01)           ; $7801
1615   8971 FD 8A           POP  A                          ; 
1616   8973 9A              RTN                             ; 
1617   8974             ;% LB_CRTC_CSR_STRT20 START
1618   8974             ;------------------------------------------------------------------------------------------------------------
1619   8974             
1620   8974             
1621   8974             
1622   8974             ;------------------------------------------------------------------------------------------------------------
1623   8974             ; $8974 CLS - 
1624   8974             ; Called from: CONSOLE:$8A05,$8A25,$8A36,$8A44 
1625   8974             ; Arguments: 
1626   8974             ; Outputs: 
1627   8974             ; RegMod: 
1628   8974             ;------------------------------------------------------------------------------------------------------------
1629   8974             ;% LB_CLS START
1630   8974             CLS: 
1631   8974 FD 98           PSH  Y                          ; 
1632   8976 BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
1633   8979 FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
1633   897D 00 
1634   897E FD 1A           POP  Y                          ; 
1635   8980 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1636   8981             ;% LB_CLS END
1637   8981             ;------------------------------------------------------------------------------------------------------------
1638   8981             
1639   8981             
1640   8981             
1641   8981             ;------------------------------------------------------------------------------------------------------------
1642   8981             ; $8981 HEXSTR (HEX$) - Convert int to hex string
1643   8981             ; Called from: 
1644   8981             ; Arguments: A, AR-X
1645   8981             ; Outputs: 
1646   8981             ; RegMod: 
1647   8981             ;------------------------------------------------------------------------------------------------------------
1648   8981             ;% LB_HEXSTR START
1649   8981             HEXSTR:
1650   8981 BE DF B4        SJP  (STRBUF_OK)                ; $DFB4 Checks if string buffer can hold #chars in A. No C=1.
1651   8984 D0              VEJ  (D0) \ 
1651   8985             
1652   8985 00                  ABYT($00) \ ABRF(BR_89A0)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range D1 (65535), if exceeded branch
1652   8986 19          
1653   8987 6C 00           CPI  UH,$00                     ; 
1654   8989 8B 04           BZS  BR_898F                    ; UH == $00
1655   898B             
1656   898B A4              LDA  UH                         ; 
1657   898C BE 89 A1        SJP  (NIBBLE_2STR)              ; Convert UH to string
1658   898F             
1659   898F             BR_898F:
1660   898F 24              LDA  UL                         ; 
1661   8990 BE 89 A1        SJP  (NIBBLE_2STR)              ; Convert UL to string
1662   8993 6A 04           LDI  UL,$04                     ; 
1663   8995 6C 00           CPI  UH,$00                     ; 
1664   8997 89 02           BZR  BR_899B                    ; UH == $00
1665   8999 6A 02           LDI  UL,$02                     ; 
1666   899B             
1667   899B             BR_899B:
1668   899B BE DF C5        SJP  (ARX2STRBUF+1)             ; $DFC5
1669   899E 68 00           LDI  UH,$00                     ; 
1670   89A0             
1671   89A0             BR_89A0: 
1672   89A0 9A              RTN                             ; Done
1673   89A1             ;% LB_HEXSTR END
1674   89A1             ;------------------------------------------------------------------------------------------------------------
1675   89A1             
1676   89A1             
1677   89A1             
1678   89A1             ;------------------------------------------------------------------------------------------------------------
1679   89A1             ; $89A1 NIBBLE_2STR - Convert Nibble to hex string
1680   89A1             ; Called from: 
1681   89A1             ; Arguments: 
1682   89A1             ; Outputs: 
1683   89A1             ; RegMod: 
1684   89A1             ;------------------------------------------------------------------------------------------------------------
1685   89A1             ;% LB_NIBBLE_2STR START
1686   89A1             NIBBLE_2STR: 
1687   89A1 FD C8           PSH  A                          ; 
1688   89A3 F1              AEX                             ; Accumulator High nibble & low nibble swapped
1689   89A4 BE 89 A9        SJP  (BR_89A9)                  ; $89A9
1690   89A7 FD 8A           POP  A                          ; 
1691   89A9             
1692   89A9             BR_89A9:
1693   89A9 B9 0F           ANI  A,$0F                      ; 
1694   89AB BB 30           ORI  A,$30                      ; 
1695   89AD B7 3A           CPI  A,$3A                      ;
1696   89AF 81 02           BCR  BR_89B3                    ; A >= 3A
1697   89B1 B3 06           ADI  A,$06                      ; 
1698   89B3             
1699   89B3             BR_89B3: 
1700   89B3 51              SIN  Y                          ; (Y) = A. Then Y = Y + 1
1701   89B4 9A              RTN                             ;
1702   89B5             ;% LB_NIBBLE_2STR END
1703   89B5             ;------------------------------------------------------------------------------------------------------------
1704   89B5             
1705   89B5             
1706   89B5             
1707   89B5             ;------------------------------------------------------------------------------------------------------------
1708   89B5             ; $89B5 CONSOLE - Sets 40 or 80 column mode
1709   89B5             ; USAGE: 'CONSOLE 40', 'CONSOLE 80'
1710   89B5             ; Called from 
1711   89B5             ; Arguments: Y
1712   89B5             ; Outputs: 
1713   89B5             ; RegMod: 
1714   89B5             ;------------------------------------------------------------------------------------------------------------
1715   89B5             ;% LB_CONSOLE START
1716   89B5             CONSOLE:
1717   89B5 15              LDA  (Y)                        ; 
1718   89B6 B7 49           CPI  A,$49                      ; 
1719   89B8 89 0A           BZR  BR_89C4                    ; A <> $49 'I'
1720   89BA FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$02    ; $77F4
1720   89BE 02 
1721   89BF BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1722   89C2 54              INC  Y                          ;
1723   89C3 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1724   89C4             
1725   89C4             BR_89C4:
1726   89C4 B7 4E           CPI  A,$4E                      ; 
1727   89C6 89 0A           BZR  BR_89D2                    ; A <> $4E 'N'
1728   89C8 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$05    ; $77F4
1728   89CC 05 
1729   89CD BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1730   89D0 54              INC  Y                          ; 
1731   89D1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1732   89D2             
1733   89D2             BR_89D2:
1734   89D2 DE              VEJ  (DE) \ ABRF(BR_8A48)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1734   89D3 74          
1735   89D4 D0              VEJ  (D0) \ 
1735   89D5             
1736   89D5 06                  ABYT($06) \ ABRF(BR_8A48)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range check D1 (32767), if exceeded branch
1736   89D6 71          
1737   89D7 24              LDA  UL                         ; 
1738   89D8 B7 01           CPI  A,$01                      ; 
1739   89DA 89 09           BZR  BR_89E5                    ; A <> $01
1740   89DC FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$03    ; $77F4
1740   89E0 03 
1741   89E1 BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1742   89E4 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1743   89E5             
1744   89E5             BR_89E5:
1745   89E5 B7 02           CPI  A,$02                      ; 
1746   89E7 89 09           BZR  BR_89F2                    ; A <> $02
1747   89E9 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$04    ; $77F4
1747   89ED 04 
1748   89EE BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1749   89F1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1750   89F2             
1751   89F2             BR_89F2:
1752   89F2 B7 00           CPI  A,$00                      ; 
1753   89F4 89 11           BZR  BR_8A07                    ; A <> $07
1754   89F6 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$00    ; $77F4
1754   89FA 00 
1755   89FB BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1756   89FE 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8E
1757   8A00 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; $A1
1758   8A02 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8
1759   8A05 9E 93           BCH  CLS                        ; 
1760   8A07             
1761   8A07             BR_8A07:
1762   8A07 24              LDA  UL                         ; 
1763   8A08 B7 50           CPI  A,$50                      ; 
1764   8A0A 8B 1B           BZS  BR_8A27                    ; A <> $50
1765   8A0C B7 28           CPI  A,$28                      ; 
1766   8A0E 89 36           BZR  BR_8A46                    ; A <> $28
1767   8A10 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$01    ; $77F4
1767   8A14 01 
1768   8A15 BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1769   8A18 48 8E           LDI  XH,HB(CONFIG_TBL)          ; $8E  
1770   8A1A 4A 8F           LDI  XL,LB(CONFIG_TBL)          ; $8F
1771   8A1C BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8
1772   8A1F B5 28           LDI  A,$28                      ; 
1773   8A21 FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1774   8A25 9E B3           BCH  CLS                        ; 
1775   8A27             
1776   8A27             BR_8A27:
1777   8A27 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$06    ; $77F4
1777   8A2B 06 
1778   8A2C BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)           
1779   8A2F 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8E
1780   8A31 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; $A1 
1781   8A33 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8
1782   8A36 9E C4           BCH  CLS                        ; 
1783   8A38             
1784   8A38             
1785   8A38             JMP_8A38:
1786   8A38 FD A5 77 F4     LDA  #(VIDEORAM + $07F4)        ; $77F4
1787   8A3C FD AE D4 00     STA  #($D400)                   ; ***
1788   8A40 9A              RTN                             ; 
1789   8A41             
1790   8A41             
1791   8A41             ;$8A41: 
1792   8A41 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8 Dead code?
1793   8A44 9E D2           BCH  CLS                        ;       Dead code?
1794   8A46             
1795   8A46             BR_8A46: ; BR $8A0E
1796   8A46 68 13           LDI  UH,$13                     ; 
1797   8A48             
1798   8A48             BR_8A48:
1799   8A48 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
1800   8A49             ;% LB_CONSOLE END
1801   8A49             ;------------------------------------------------------------------------------------------------------------
1802   8A49             
1803   8A49             
1804   8A49             
1805   8A49             ;------------------------------------------------------------------------------------------------------------
1806   8A49             ; CURSOR - Positions cursor on sreen
1807   8A49             ; Usage: CURSOR Num.Exp 1, Num.Exp 2
1808   8A49             ; Called from: 
1809   8A49             ; Arguments: Num.Exp_1 Specifies horizontal position (value:0-79 80col, 0-39 40col)
1810   8A49             ;            Num.Exp_2 Specified vertical position 
1811   8A49             ; Outputs: 
1812   8A49             ; RegMod: 
1813   8A49             ;------------------------------------------------------------------------------------------------------------
1814   8A49             ;% LB_CURSOR START
1815   8A49             CURSOR:
1816   8A49 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1816   8A4A 3F          
1817   8A4B D0              VEJ  (D0) \ 
1817   8A4C             
1818   8A4C 0C                  ABYT($0C) \ ABRF(BR_8A8A)   ; (D0) Convert AR-X to Int, load in U-Reg. If range of D1 (80d) exceeded branch
1818   8A4D 3C          
1819   8A4E FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1820   8A52 DF              DEC  A                          ; 
1821   8A53 26              CPA  UL                         ; U = X position?
1822   8A54 81 03           BCR  BR_8A59                    ; A < UL Error exit
1823   8A56 BA 8A 5D        JMP  JMP_8A5D                   ; $8A5D
1824   8A59             
1825   8A59             BR_8A59:
1826   8A59 68 13           LDI  UH,$13                     ; 
1827   8A5B 8E 2D           BCH  BR_8A8A                    ; $8A8A
1828   8A5D             
1829   8A5D             JMP_8A5D:
1830   8A5D 24              LDA  UL                         ; 
1831   8A5E DD              INC  A                          ; 
1832   8A5F FD C8           PSH  A                          ; Save new X position?
1833   8A61 C2              VEJ  (C2) \ 
1833   8A62             
1834   8A62 2C                  ACHR($2C) \ ABRF(BR_8A75)   ; Checks for $2C char. ',' (commma) If (not) found, branch to BR_8A75
1834   8A63 11          
1835   8A64 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1835   8A65 24          
1836   8A66 D0              VEJ  (D0) \ 
1836   8A67             
1837   8A67 10                  ABYT($10) \ ABRF(BR_8A88)   ; (D0) Convert AR-X to Integer & load in U-Reg. If > 25d branch
1837   8A68 1F          
1838   8A69 24              LDA  UL                         ; UL = Y position?
1839   8A6A DD              INC  A                          ; 
1840   8A6B 2A              STA  UL                         ; 
1841   8A6C B7 1A           CPI  A,$1A                      ; 
1842   8A6E 89 03           BZR  BR_8A73                    ; A <> $1A
1843   8A70 68 13           LDI  UH,$13                     ; Error #19
1844   8A72 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
1845   8A73             
1846   8A73             BR_8A73:
1847   8A73 8E 09           BCH  BR_8A7E                    ; $8A7E
1848   8A75             
1849   8A75             BR_8A75:
1850   8A75 56              DEC  Y                          ; 
1851   8A76 FD C8           PSH  A                          ; 
1852   8A78 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1853   8A7B 2A              STA  UL                         ; 
1854   8A7C FD 8A           POP  A                          ; 
1855   8A7E             
1856   8A7E             BR_8A7E:
1857   8A7E 24              LDA  UL                         ; 
1858   8A7F AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1859   8A82 FD 8A           POP  A                          ; 
1860   8A84 AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
1861   8A87 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1862   8A88             
1863   8A88             BR_8A88:
1864   8A88 FD 8A           POP  A                          ; 
1865   8A8A             
1866   8A8A             BR_8A8A:
1867   8A8A E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
1868   8A8B             ;% LB_CURSOR END
1869   8A8B             ;------------------------------------------------------------------------------------------------------------
1870   8A8B             
1871   8A8B             
1872   8A8B             
1873   8A8B             ;------------------------------------------------------------------------------------------------------------
1874   8A8B             ; $8A8B xxxx - Something to do with PRINT USING?
1875   8A8B             ; Called from: PRINT:$91B8
1876   8A8B             ; Arguments: 
1877   8A8B             ; Outputs: 
1878   8A8B             ; RegMod: 
1879   8A8B             ;------------------------------------------------------------------------------------------------------------
1880   8A8B             ;% LB_xxxx START
1881   8A8B             JMP_8A8B:
1882   8A8B B5 60           LDI  A,$60                      ; 
1883   8A8D AE 78 8F        STA  (OUTBUF_PTR)               ; $788F Pointer into OUT_BUF
1884   8A90 BE 8C 4A        SJP  (CRTC_CSR_STRT10)          ; $8C4A - Set Cursor Start Raster register to $10
1885   8A93             
1886   8A93 FD EB 77 F3     ORI  #(VIDEORAM + $07F3),$01    ; $77F3 Set Bit 0
1886   8A97 01 
1887   8A98 BE 89 63        SJP  (CRTC_CSR_STRT20)          ; $8963 - Set Cursor Start Raster register to $20
1888   8A9B B5 00           LDI  A,$00                      ; 
1889   8A9D 6A 4F           LDI  UL,$4F                     ; 
1890   8A9F 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B X=$7B60 start of OUT_BUF
1891   8AA1 4A 60           LDI  XL,LB(OUT_BUF)             ; $60 
1892   8AA3             
1893   8AA3             BR_8AA3:
1894   8AA3 41              SIN  X                          ; (X) = A. Then X = X + 1 . Zero out OUT_BUF
1895   8AA4 88 03           LOP  UL,BR_8AA3                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
1896   8AA6             
1897   8AA6             BR_8AA6:
1898   8AA6 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
1899   8AA7 6C F0           CPI  UH,$F0                     ; 
1900   8AA9 89 02           BZR  BR_8AAD                    ; UH <> $F0
1901   8AAB 6E 85           CPI  UL,$85                     ; $F085 is USING token
1902   8AAD             
1903   8AAD             BR_8AAD:
1904   8AAD 8B 03           BZS  BR_8AB2                    ; UL == $85, is USING token
1905   8AAF C6              VEJ  (C6)                       ; (C6) Correct program pointer if token not USING
1906   8AB0 8E 04           BCH  BR_8AB6                    ; $8AB6
1907   8AB2             
1908   8AB2             BR_8AB2:
1909   8AB2 CD 9A           VMJ  ($9A)                      ; (9A) Determines and transmits USING parameters
1910   8AB4 C3 E0           VCS  ($E0)                      ; (E0) Gives an error message if UH is not "00".
1911   8AB6             
1912   8AB6             BR_8AB6:
1913   8AB6 15              LDA  (Y)                        ; Continues here if not USING token
1914   8AB7 B7 0D           CPI  A,$0D                      ; 
1915   8AB9 8B E3           BZS  BR_8B9E                    ; A == $0D
1916   8ABB             
1917   8ABB             BR_8ABB:
1918   8ABB 15              LDA  (Y)                        ; 
1919   8ABC B7 3A           CPI  A,$3A                      ; 
1920   8ABE 8B DE           BZS  BR_8B9E                    ; A == $3A
1921   8AC0 CD 2E           VMJ  ($2E) \ ABRF(BR_8AC5)      ; Calculates expression result to AR-X. Branch on error
1921   8AC2 02          
1922   8AC3 8E 03           BCH  BR_8AC8                    ; $8AC8
1923   8AC5             
1924   8AC5             BR_8AC5:
1925   8AC5 BA 8C 38        JMP  JMP_8C38                   ; Exit path
1926   8AC8             
1927   8AC8             BR_8AC8:
1928   8AC8 A5 7A 04        LDA  (ARX + $04)                ; 
1929   8ACB B7 C1           CPI  A,$C1                      ; 
1930   8ACD 8B 58           BZS  BR_8B27                    ; A == $C1
1931   8ACF B7 D0           CPI  A,$D0                      ; 
1932   8AD1 8B 54           BZS  BR_8B27                    ; A == $D0
1933   8AD3 A5 78 95        LDA  (USINGF)                   ; 
1934   8AD6 B7 00           CPI  A,$00                      ; 
1935   8AD8 89 1D           BZR  BR_8AF7                    ; A <> $00
1936   8ADA B5 10           LDI  A,$10                      ; 
1937   8ADC AE 78 94        STA  (STR_BUF_PTR_L)            ; 
1938   8ADF FD 98           PSH  Y                          ; 
1939   8AE1 BE D9 CF        SJP  (BCMD_STR)                 ; 
1940   8AE4 FD 1A           POP  Y                          ; 
1941   8AE6 6C 00           CPI  UH,$00                     ; 
1942   8AE8 99 25           BZR  BR_8AC5                    ; A <> $00
1943   8AEA A5 7A 01        LDA  (ARX + $01)                ; 
1944   8AED B7 00           CPI  A,$00                      ; 
1945   8AEF 89 04           BZR  BR_8AF5                    ; A <> $00
1946   8AF1 EF 78 8F 01     ADI  (OUTBUF_PTR),$01           ; $788F (pp) = (pp) + n (ME1)
1947   8AF5             
1948   8AF5             BR_8AF5:
1949   8AF5 8E 30           BCH  BR_8B27                    ; $8B27
1950   8AF7             
1951   8AF7             BR_8AF7:
1952   8AF7 FD 98           PSH  Y                          ; -1 hack as target calc 1 off
1953   8AF9 D2              VEJ  (D2) \                     ; If AR-X contains an integer value, convert it with (10) (DD2D) according to D2.  
1953   8AFA             
1954   8AFA 00                  ABRF(BR_8AFC-1) \ ABYT($80) ; If AR-X contains CSI, continue with Distance Address according to D1.
1954   8AFB 80          
1955   8AFC             
1956   8AFC             BR_8AFC:
1957   8AFC CD 96           VMJ  ($96)                      ; Format AR-X with Using and transfer to Output buffer
1958   8AFE 14              LDA  YL                         ; 
1959   8AFF F9              REC                             ; 
1960   8B00 00              SBC  XL                         ; 
1961   8B01 2A              STA  UL                         ; 
1962   8B02             
1963   8B02             BR_8B02:
1964   8B02 45              LIN  X                          ; A = (X) then INC X
1965   8B03 B7 20           CPI  A,$20                      ; 
1966   8B05 89 05           BZR  BR_8B0C                    ; A <> $20
1967   8B07 88 07           LOP  UL,BR_8B02                 ; $8B02
1968   8B09 68 01           LDI  UH,$01                     ;
1969   8B0B E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
1970   8B0C             
1971   8B0C             BR_8B0C:
1972   8B0C 46              DEC  X                          ; 
1973   8B0D A5 7A 01        LDA  (ARX + $01)                ; 
1974   8B10 B7 80           CPI  A,$80                      ; 
1975   8B12 8B 01           BZS  BR_8B15                    ;A == $80
1976   8B14 46              DEC  X                          ; 
1977   8B15             
1978   8B15             BR_8B15:
1979   8B15 14              LDA  YL                         ; 
1980   8B16 FB              SEC                             ; 
1981   8B17 DD              INC  A                          ; 
1982   8B18 00              SBC  XL                         ; 
1983   8B19 DD              INC  A                          ; 
1984   8B1A 2A              STA  UL                         ; 
1985   8B1B 58 7A           LDI  YH,HB(ARX)                 ; $7A
1986   8B1D 5A 05           LDI  YL,LB(ARX+5)               ; $05
1987   8B1F 84              LDA  XH                         ; 
1988   8B20 51              SIN  Y                          ; 
1989   8B21 04              LDA  XL                         ; 
1990   8B22 51              SIN  Y                          ; 
1991   8B23 24              LDA  UL                         ; 
1992   8B24 1E              STA  (Y)                        ; 
1993   8B25 FD 1A           POP  Y                          ; 
1994   8B27             
1995   8B27             BR_8B27:
1996   8B27 FD 98           PSH  Y                          ; 
1997   8B29 DC              VEJ  (DC)                       ; (DC) Load CSI from AR-X to X-Reg
1998   8B2A A5 78 97        LDA  (USING_CHR)                ; 
1999   8B2D B7 00           CPI  A,$00                      ; 
2000   8B2F 89 04           BZR  BR_8B35                    ; A <> $00
2001   8B31             
2002   8B31             BR_8B31:
2003   8B31 FD C8           PSH  A                          ; 
2004   8B33 8E 1D           BCH  BR_8B52                    ; $8B52
2005   8B35             
2006   8B35             BR_8B35:
2007   8B35 FD C8           PSH  A                          ; 
2008   8B37 A5 7A 04        LDA  (ARX + $04)                ; 
2009   8B3A B7 D0           CPI  A,$D0                      ; 
2010   8B3C 8B 06           BZS  BR_8B44                    ; A == $D0
2011   8B3E FD 8A           POP  A                          ; 
2012   8B40 B5 00           LDI  A,$00                      ; 
2013   8B42 9E 13           BCH  BR_8B31                    ; $8B31
2014   8B44             
2015   8B44             BR_8B44:
2016   8B44 FD 8A           POP  A                          ; 
2017   8B46 26              CPA  UL                         ; 
2018   8B47 83 05           BCS  BR_8B4E                    ; $8B4E
2019   8B49 2A              STA  UL                         ; 
2020   8B4A B5 00           LDI  A,$00                      ; 
2021   8B4C 9E 1D           BCH  BR_8B31                    ; $8B31
2022   8B4E             
2023   8B4E             BR_8B4E:
2024   8B4E FB              SEC                             ; 
2025   8B4F 20              SBC  UL                         ; 
2026   8B50 FD C8           PSH  A                          ; 
2027   8B52             
2028   8B52             BR_8B52:
2029   8B52 CD 94           VMJ  ($94)                      ; (94) Transfers string whose address is in the X-Reg to the output buffer (*VMJ diss is wrong)
2030   8B54 FD 8A           POP  A                          ; 
2031   8B56 B7 00           CPI  A,$00                      ; 
2032   8B58 8B 0F           BZS  BR_8B69                    ; A == $00
2033   8B5A 2A              STA  UL                         ; 
2034   8B5B B5 20           LDI  A,$20                      ; 
2035   8B5D 62              DEC  UL                         ; 
2036   8B5E 6E 50           CPI  UL,$50                     ; 
2037   8B60 83 07           BCS  BR_8B69                    ; UL >= $50
2038   8B62             
2039   8B62             BR_8B62:
2040   8B62 5E B0           CPI  YL,$B0                     ; 
2041   8B64 83 03           BCS  BR_8B69                    ; YL == $B0
2042   8B66 51              SIN  Y                          ; 
2043   8B67 88 07           LOP  UL,BR_8B62                 ; $8B62
2044   8B69             
2045   8B69             BR_8B69:
2046   8B69 14              LDA  YL                         ; 
2047   8B6A AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
2048   8B6D FD 1A           POP  Y                          ;
2049   8B6F 55              LIN  Y                          ; A = (Y) then INC Y
2050   8B70 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
2051   8B74 B7 3B           CPI  A,$3B                      ; 
2052   8B76 9B D2           BZS  BR_8AA6                    ; A <> $3B
2053   8B78 B7 2C           CPI  A,$2C                      ; 
2054   8B7A 89 15           BZR  BR_8B91                    ; $8B91
2055   8B7C B5 11           LDI  A,$11                      ; 
2056   8B7E FB              SEC                             ; 
2057   8B7F A1 7A 07        SBC  (ARX + $07)                ; 
2058   8B82 B7 11           CPI  A,$11                      ; 
2059   8B84 81 02           BCR  BR_8B88                    ; A < $11
2060   8B86 B5 01           LDI  A,$01                      ; 
2061   8B88             
2062   8B88             BR_8B88:
2063   8B88 F9              REC                             ; 
2064   8B89 A3 78 8F        ADC  (OUTBUF_PTR)               ; $788F
2065   8B8C AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
2066   8B8F 9E D6           BCH  BR_8ABB                    ; $8ABB
2067   8B91             
2068   8B91             BR_8B91:
2069   8B91 56              DEC  Y                          ; 
2070   8B92 B7 3A           CPI  A,$3A                      ; 
2071   8B94 8B 08           BZS  BR_8B9E                    ; A <> $3A
2072   8B96 B7 0D           CPI  A,$0D                      ; 
2073   8B98 8B 04           BZS  BR_8B9E                    ; A <> $0D
2074   8B9A 68 01           LDI  UH,$01                     ; 
2075   8B9C 8E 9A           BCH  JMP_8C38                   ; $8C38
2076   8B9E             
2077   8B9E             BR_8B9E:
2078   8B9E FD 98           PSH  Y                          ; 
2079   8BA0 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2080   8BA3 B7 19           CPI  A,$19                      ; 
2081   8BA5 81 03           BCR  BR_8BAA                    ; A < $19
2082   8BA7 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
2083   8BAA             
2084   8BAA             BR_8BAA:
2085   8BAA 18              STA  YH                         ; 
2086   8BAB A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2087   8BAE 1A              STA  YL                         ; 
2088   8BAF BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2089   8BB2 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
2090   8BB4 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
2091   8BB6 A5 78 8F        LDA  (OUTBUF_PTR)               ; $788F 
2092   8BB9 F9              REC                             ; 
2093   8BBA B1 60           SBI  A,$60                      ; 
2094   8BBC 83 01           BCS  BR_8BBF                    ; $8BBF
2095   8BBE DD              INC  A                          ; 
2096   8BBF             
2097   8BBF             BR_8BBF:
2098   8BBF 2A              STA  UL                         ; 
2099   8BC0             
2100   8BC0             BR_8BC0:
2101   8BC0 45              LIN  X                          ; 
2102   8BC1 FD 1E           STA  #(Y)                       ; 
2103   8BC3 54              INC  Y                          ; 
2104   8BC4 EF 77 4F 01     ADI  (STRING_VARS + $FF),$01    ; $774F in DISPLAY BUFFER, X cursor position
2105   8BC8 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2106   8BCB FD A7 77 D1     CPA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
2107   8BCF 81 2B           BCR  BR_8BFC                    ; $8BFC
2108   8BD1 8B 29           BZS  BR_8BFC                    ; $8BFC
2109   8BD3 E9 77 4F 01     ANI  (STRING_VARS + $FF),$01    ; $774F in DISPLAY BUFFER, X cursor position
2110   8BD7 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2111   8BDB A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2112   8BDE B7 1A           CPI  A,$1A                      ; 
2113   8BE0 81 1A           BCR  BR_8BFC                    ; $8BFC
2114   8BE2 6E 00           CPI  UL,$00                     ; 
2115   8BE4 8B 16           BZS  BR_8BFC                    ; $8BFC
2116   8BE6 FD 88           PSH  X                          ; 
2117   8BE8 FD A8           PSH  U                          ; 
2118   8BEA BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
2119   8BED A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2120   8BF0 18              STA  YH                         ; 
2121   8BF1 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2122   8BF4 1A              STA  YL                         ; 
2123   8BF5 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2124   8BF8 FD 2A           POP  U                          ; 
2125   8BFA FD 0A           POP  X                          ; 
2126   8BFC             
2127   8BFC             BR_8BFC:
2128   8BFC 88 3E           LOP  UL,BR_8BC0                 ; $8BC0
2129   8BFE FD 18           LDX  Y                          ; 
2130   8C00 46              DEC  X                          ; 
2131   8C01 FD 1A           POP  Y                          ; 
2132   8C03 56              DEC  Y                          ; 
2133   8C04 55              LIN  Y                          ; A = (Y) then INC Y
2134   8C05 B7 3B           CPI  A,$3B                      ; 
2135   8C07 8B 0E           BZS  BR_8C17                    ; $8C17
2136   8C09 B5 01           LDI  A,$01                      ; 
2137   8C0B A7 77 4F        CPA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2138   8C0E 8B 07           BZS  BR_8C17                    ; $8C17
2139   8C10 AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2140   8C13 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2141   8C17             
2142   8C17             BR_8C17:
2143   8C17 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF
2144   8C1A 68 00           LDI  UH,$00                     ; 
2145   8C1C FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
2145   8C20 00 
2146   8C21 D8              VEJ  (D8)                       ; 
2147   8C22 89 05           BZR  BR_8C29                    ; $8C29
2148   8C24 B5 03           LDI  A,$03                      ; 
2149   8C26 AE 78 71        STA  (WAIT_CFG)                 ; 
2150   8C29             
2151   8C29             BR_8C29:
2152   8C29 A5 78 71        LDA  (WAIT_CFG)                 ; 
2153   8C2C B7 02           CPI  A,$02                      ; 
2154   8C2E 8B 0F           BZS  BR_8C3F                    ; $8C3F
2155   8C30 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2156   8C33 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2157   8C37 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2158   8C38             
2159   8C38             JMP_8C38:
2160   8C38 B5 0D           LDI  A,$0D                      ; 
2161   8C3A FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
2162   8C3E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2163   8C3F             
2164   8C3F             BR_8C3F:
2165   8C3F A5 78 72        LDA  (WAIT_CTR_H)               ;
2166   8C42 28              STA  UH                         ; 
2167   8C43 A5 78 73        LDA  (WAIT_CTR_L)               ; 
2168   8C46 2A              STA  UL                         ; 
2169   8C47 CD AC           VMJ  ($AC)                      ; Time delay 15.625ms * number from U-Reg. BREAK is possible.
2170   8C49 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2171   8C4A             ;% LB_xxxx END
2172   8C4A             ;------------------------------------------------------------------------------------------------------------
2173   8C4A             
2174   8C4A             
2175   8C4A             
2176   8C4A             ;------------------------------------------------------------------------------------------------------------
2177   8C4A             ; $8C4A CRTC_CSR_STRT10 - Set Cursor Start Raster register to $10
2178   8C4A             ; Called from: JMP_8A8B:$8A90
2179   8C4A             ; Arguments: 
2180   8C4A             ; Outputs: 
2181   8C4A             ; RegMod: 
2182   8C4A             ;------------------------------------------------------------------------------------------------------------
2183   8C4A             ;% LB_CRTC_CSR_STRT10 START
2184   8C4A             CRTC_CSR_STRT10:
2185   8C4A B5 0A           LDI  A,$0A                      ; 0000 1010b
2186   8C4C FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor Start Raster
2187   8C50 B5 10           LDI  A,$10                      ;
2188   8C52 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 0001 0000b
2189   8C56 9A              RTN                             ; Done
2190   8C57             ;% LB_CRTC_CSR_STRT10 START
2191   8C57             ;------------------------------------------------------------------------------------------------------------
2192   8C57             
2193   8C57             
2194   8C57             
2195   8C57             ;------------------------------------------------------------------------------------------------------------
2196   8C57             ; $8C57 xxxx - 
2197   8C57             ; Called from: 
2198   8C57             ; Arguments: 
2199   8C57             ; Outputs: 
2200   8C57             ; RegMod: 
2201   8C57             ;------------------------------------------------------------------------------------------------------------
2202   8C57             ;% LB_xxxx START
2203   8C57             JMP_8C57:
2204   8C57 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
2205   8C5A B9 01           ANI  A,$01                      ; Clear all but Bit 0 
2206   8C5C B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. 
2207   8C5E                                                 ; A system message or a reserve text is shown in the display.
2208   8C5E 8B 02           BZS  BR_8C62                    ; Bit 0 was set, branch
2209   8C60 F9              REC                             ; Reset Carry
2210   8C61 9A              RTN                             ; Done
2211   8C62             
2212   8C62             BR_8C62:
2213   8C62 CD 38           VMJ  ($38)                      ; Find reserve memory start address + 8, stores in X-Reg. 
2214   8C64                                                 ; Sets C=0 if the 2nd reserve memory area is occupied
2215   8C64 68 02           LDI  UH,$02                     ; 
2216   8C66 6A 19           LDI  UL,$19                     ; U = $0219
2217   8C68 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2218   8C6C 18              STA  YH                         ; 
2219   8C6D 5A 01           LDI  YL,$01                     ; 
2220   8C6F BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - no idea
2221   8C72             
2222   8C72             BR_8C72:
2223   8C72 BE 8D 64        SJP  (CPY_X2Y)                  ; $8D64 - Copies UL bytes from X to Y
2224   8C75 FD 62           DEC  UH                         ; 
2225   8C77 83 07           BCS  BR_8C80                    ; $8C80
2226   8C79 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
2226   8C7D 01 
2227   8C7E FB              SEC                             ; Set Carry == failure?
2228   8C7F 9A              RTN                             ; Done
2229   8C80             
2230   8C80             BR_8C80:
2231   8C80 B5 20           LDI  A,$20                      ; 
2232   8C82 FD 1E           STA  #(Y)                       ; 
2233   8C84 54              INC  Y                          ; 
2234   8C85 6A 19           LDI  UL,$19                     ; 
2235   8C87 9E 17           BCH  BR_8C72                    ; $8C72
2236   8C89             ;% LB_xxxx END
2237   8C89             ;------------------------------------------------------------------------------------------------------------
2238   8C89             
2239   8C89             
2240   8C89             
2241   8C89             ;------------------------------------------------------------------------------------------------------------
2242   8C89             ; INPUT - Input numercal vaiable, text variable, text constant
2243   8C89             ; Called from: 
2244   8C89             ; Arguments: String;Var
2245   8C89             ; Outputs: 
2246   8C89             ; RegMod: 
2247   8C89             ;------------------------------------------------------------------------------------------------------------
2248   8C89             ;% LB_INPUT START
2249   8C89             INPUT:
2250   8C89 C2              VEJ  (C2) \ 
2250   8C8A             
2251   8C8A 23                  ACHR($23) \ ABRF(BR_8C8F)   ; Checks for $23 char. If not equal branch.
2251   8C8B 03          
2252   8C8C BA C8 FD        JMP  BCMD_CLEAR+8               ; $C8FD
2253   8C8F             
2254   8C8F             BR_8C8F:
2255   8C8F D8              VEJ  (D8)                       ; (D8) Check if program running. If so: Z=0.
2256   8C90 89 03           BZR  BR_8C95                    ; Z <> 0 so program is not running
2257   8C92 68 1A           LDI  UH,$1A                     ; Error 26: Error occurs when command cannot be executed in current mode 
2258   8C94 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2259   8C95             
2260   8C95             BR_8C95:
2261   8C95 C6              VEJ  (C6)                       ; (C6) Correct program pointer
2262   8C96 BE D0 34        SJP  (INBUF_CLR)                ; 
2263   8C99 C2              VEJ  (C2) \ 
2263   8C9A             
2264   8C9A 22                  ACHR($22) \ ABRF(BR_8CFB)   ; Checks for $22 (quote) char. If not found branch.
2264   8C9B 5F          
2265   8C9C CD 0C           VMJ  ($0C)                      ; (0C) Gets the length of a string
2266   8C9E FD 98           PSH  Y                          ; Y-Reg contains end marker address. 
2267   8CA0                                                 ; X-Reg contains the address of the 1st byte of the string. 
2268   8CA0                                                 ; AR-X contains "D0", address, length in 7A04 ff..
2269   8CA0 5A B0           LDI  YL,LB(IN_BUF)              ; $B0
2270   8CA2 58 7B           LDI  YH,HB(IN_BUF)              ; $7B
2271   8CA4 FD C8           PSH  A                          ; 
2272   8CA6 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2273   8CA9 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2274   8CAD FD 8A           POP  A                          ; 
2275   8CAF EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position, (pp) = (pp) + n (ME0)
2276   8CB3 A5 7A 07        LDA  (ARX + $07)                ; 
2277   8CB6 2A              STA  UL                         ; 
2278   8CB7 BE D0 49        SJP  (UL_XREG2YREG)             ; 
2279   8CBA 14              LDA  YL                         ; 
2280   8CBB AE 78 8B        STA  (INBUFPTR_L)               ; 
2281   8CBE FD 1A           POP  Y                          ; 
2282   8CC0 C2              VEJ  (C2) \ 
2282   8CC1             
2283   8CC1 3B                  ACHR($3B) \ ABRF(BR_8CC7)   ;  Checks for $3B char. If not found branch.
2283   8CC2 04          
2284   8CC3 B5 40           LDI  A,$40                      ; 
2285   8CC5 8E 0A           BCH  BR_8CD1                    ; 
2286   8CC7             
2287   8CC7             BR_8CC7:
2288   8CC7 C4              VEJ  (C4) \ 
2288   8CC8             
2289   8CC8 2C                  ACHR($2C) \ ABRF(BR_8D15)   ; Checks for $2C character in U-Reg . Branch if not found.
2289   8CC9 4B          
2290   8CCA             
2291   8CCA             BR_8CCA:
2292   8CCA B5 B0           LDI  A,$B0                      ; 
2293   8CCC AE 78 8B        STA  (INBUFPTR_L)               ; 
2294   8CCF B5 00           LDI  A,$00                      ; 
2295   8CD1             
2296   8CD1             BR_8CD1:
2297   8CD1 AE 78 80        STA  (DISPARAM)                 ; $7880 - Reset Display Parameter: determines display at READY
2298   8CD4 CE              VEJ  (CE) \ 
2298   8CD5             
2299   8CD5 58                  ABYT($58) \ ABRF($8D05)     ; Retrieves the address of the variable whose name is pointed to by Y-Reg
2299   8CD6 2E          
2300   8CD7 F6              VEJ  (F6) \ AWRD(LASTVARADD_H)  ; Stores U-Reg from the address represented by D1 D2.
2300   8CD8 78 86       
2301   8CDA 44              INC  X                          ; 
2302   8CDB A5 7A 07        LDA  (ARX + $07)                ; 
2303   8CDE 0E              STA  (X)                        ; 
2304   8CDF D4              VEJ  (D4) \ ABYT($A0)           ; Transfers pointers for the current processing status of the program in memory:
2304   8CE0 A0          
2305   8CE1                                                 ; A0=program, AC=Break, B2=Error
2306   8CE1 D4              VEJ  (D4) \ ABYT($AC)           ; Transfers pointers for the current processing status of the program in memory: 
2306   8CE2 AC          
2307   8CE3                                                 ; A0=program, AC=Break, B2=Error
2308   8CE3 BE EF 67        SJP  (PREPLCDOUT)               ; 
2309   8CE6 68 20           LDI  UH,$20                     ; 
2310   8CE8 C3 E0           VCS  ($E0)                      ; Gives an error message if UH is not "00".
2311   8CEA EB 78 8A 50     ORI  (BREAKPARAM),$50           ; 
2312   8CEE A5 78 8B        LDA  (INBUFPTR_L)               ; 
2313   8CF1 1A              STA  YL                         ; 
2314   8CF2 58 7B           LDI  YH,$7B                     ; 
2315   8CF4 E9 7B 0E 9F     ANI  (CURS_CTRL),$9F            ; 
2316   8CF8 BA 8D 18        JMP  JMP_8D18                   ; $8D18
2317   8CFB             
2318   8CFB             BR_8CFB:
2319   8CFB FD C8           PSH  A                          ; 
2320   8CFD A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2321   8D00 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2322   8D04 FD 8A           POP  A                          ; 
2323   8D06 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2324   8D0A C6              VEJ  (C6)                       ; (C6) Correct program pointer
2325   8D0B B5 3F           LDI  A,$3F                      ; 
2326   8D0D AE 7B B0        STA  (IN_BUF)                   ; 
2327   8D10 9E 48           BCH  BR_8CCA                    ; $8CCA
2328   8D12 68 07           LDI  UH,$07                     ; 
2329   8D14 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2330   8D15             
2331   8D15             BR_8D15:
2332   8D15 BA C9 E3        JMP  BCMD_DIM + $5B             ; $C9E3 
2333   8D18             
2334   8D18             JMP_8D18:
2335   8D18 BE E8 CA        SJP  (PRGMDISP)                 ; 
2336   8D1B E9 78 9D 00     ANI  (CURR_LINE_L),$00          ; (pp) = (pp) & n (ME0)
2337   8D1F E9 78 9C 00     ANI  (CURR_LINE_H),$00          ; 
2338   8D23 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ; 
2339   8D27 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; 
2340   8D2A BE E2 43        SJP  (WAIT4KB)                  ; 
2341   8D2D FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; 
2341   8D31 01 
2342   8D32 89 05           BZR  BR_8D39                    ; 
2343   8D34 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
2343   8D38 FF 
2344   8D39             
2345   8D39             BR_8D39:
2346   8D39 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; 
2346   8D3D 00 
2347   8D3E BA CA 92        JMP  $CA92                      ; $CA92 ***EDITOR + $12 
2348   8D41             
2349   8D41             
2350   8D41             
2351   8D41             ;------------------------------------------------------------------------------------------------------------
2352   8D41             ; $8D41 CLR_VID_RAM - Clears video RAM? 
2353   8D41             ; Called from: 
2354   8D41             ; Arguments: 
2355   8D41             ; Outputs: 
2356   8D41             ; RegMod: 
2357   8D41             ;------------------------------------------------------------------------------------------------------------
2358   8D41             ;% LB_CLR_VID_RAM START
2359   8D41             CLR_VID_RAM:
2360   8D41 68 07           LDI  UH,$07                     ; 
2361   8D43 6A CF           LDI  UL,$CF                     ; U == $07CF
2362   8D45 B5 00           LDI  A,$00                      ; 
2363   8D47 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2364   8D4A             
2365   8D4A             BR_8D4A:
2366   8D4A BE 8D 5E        SJP  (CLR_VIDRAMPAGE)           ; Clear video RAM page
2367   8D4D             
2368   8D4D FD 62           DEC  UH                         ; U == $07CE
2369   8D4F 93 07           BCS  BR_8D4A                    ; $8D4A
2370   8D51             
2371   8D51 B5 01           LDI  A,$01                      ; 
2372   8D53 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2373   8D57 AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2374   8D5A AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2375   8D5D 9A              RTN                             ; Done
2376   8D5E             ;% LB_CLR_VID_RAM END   
2377   8D5E             ;------------------------------------------------------------------------------------------------------------
2378   8D5E             
2379   8D5E             
2380   8D5E             
2381   8D5E             ;------------------------------------------------------------------------------------------------------------
2382   8D5E             ; $8D5E CLR_VIDRAMPAGE - Clear Video RAM page
2383   8D5E             ; Called from: 
2384   8D5E             ; Arguments: 
2385   8D5E             ; Outputs: 
2386   8D5E             ; RegMod: 
2387   8D5E             ;------------------------------------------------------------------------------------------------------------
2388   8D5E             ;% LB_CLR_VIDRAM START
2389   8D5E             CLR_VIDRAMPAGE:
2390   8D5E FD 1E           STA  #(Y)                       ; 
2391   8D60 54              INC  Y                          ; 
2392   8D61 88 05           LOP  UL,CLR_VIDRAMPAGE          ; $8D5E
2393   8D63 9A              RTN                             ; Done
2394   8D64             ;% LB_xxxx END   
2395   8D64             ;------------------------------------------------------------------------------------------------------------
2396   8D64             
2397   8D64             
2398   8D64             
2399   8D64             ;------------------------------------------------------------------------------------------------------------
2400   8D64             ; $8D64 CPY_X2Y - Copies UL bytes from X to Y
2401   8D64             ; Called from: 
2402   8D64             ; Arguments: X,Y,UL
2403   8D64             ; Outputs: 
2404   8D64             ; RegMod: X,Y,UL
2405   8D64             ;------------------------------------------------------------------------------------------------------------
2406   8D64             ;% LB_CPY_X2Y START
2407   8D64             CPY_X2Y:
2408   8D64 45              LIN  X                          ; A = (X) then INC X
2409   8D65 FD 1E           STA  #(Y)                       ; 
2410   8D67 54              INC  Y                          ; 
2411   8D68 88 06           LOP  UL,CPY_X2Y                ; $8D64
2412   8D6A 9A              RTN                             ; Done
2413   8D6B             ;% LB_CPY_X2Y END   
2414   8D6B             ;------------------------------------------------------------------------------------------------------------
2415   8D6B             
2416   8D6B             
2417   8D6B             
2418   8D6B             ;------------------------------------------------------------------------------------------------------------
2419   8D6B             ; $8D6B xxxx 
2420   8D6B             ; Called from: 
2421   8D6B             ; Arguments: Y
2422   8D6B             ; Outputs: 
2423   8D6B             ; RegMod: Y
2424   8D6B             ;------------------------------------------------------------------------------------------------------------
2425   8D6B             ;% LB_xxxx START
2426   8D6B             JMP_8D6B:
2427   8D6B FD C8           PSH  A                          ; 
2428   8D6D FD 88           PSH  X                          ; 
2429   8D6F FD A8           PSH  U                          ; Save registers
2430   8D71 FD 18           LDX  Y                          ; 
2431   8D73 FD 42           DEC  XH                         ; 
2432   8D75 42              DEC  XL                         ; 
2433   8D76 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM #$7000
2434   8D79             
2435   8D79 14              LDA  YL                         ; Subract $50 from Y == $6FB0 (graphics RAM)
2436   8D7A FB              SEC                             ; Set Carry Flag
2437   8D7B B1 50           SBI  A,$50                      ; A = A - N
2438   8D7D 1A              STA  YL                         ; 
2439   8D7E 94              LDA  YH                         ; 
2440   8D7F B1 00           SBI  A,$00                      ; A = A - N
2441   8D81 18              STA  YH                         ; 
2442   8D82             
2443   8D82 4C 19           CPI  XH,$19                     ; 
2444   8D84 83 1D           BCS  BR_8DA3                    ; XH >= $19
2445   8D86 4E 50           CPI  XL,$50                     ; 
2446   8D88 83 19           BCS  BR_8DA3                    ; XL >= $40
2447   8D8A             
2448   8D8A 84              LDA  XH                         ; 
2449   8D8B 2A              STA  UL                         ; 
2450   8D8C FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
2451   8D90 B7 28           CPI  A,$28                      ; 
2452   8D92 89 01           BZR  BR_8D95                    ; A <> $28
2453   8D94 60              INC  UL                         ; 
2454   8D95             
2455   8D95             BR_8D95:
2456   8D95 FD DA           ADR  Y                          ; Y = Y + A + Carry
2457   8D97 88 04           LOP  UL,BR_8D95                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
2458   8D99             
2459   8D99 04              LDA  XL                         ; 
2460   8D9A FD DA           ADR  Y                          ; Y = Y + A + Carry
2461   8D9C             
2462   8D9C             BR_89DC:
2463   8D9C FD 2A           POP  U                          ; 
2464   8D9E FD 0A           POP  X                          ; 
2465   8DA0 FD 8A           POP  A                          ; 
2466   8DA2 9A              RTN                             ; Done
2467   8DA3             
2468   8DA3             BR_8DA3:
2469   8DA3 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2470   8DA6 9E 0C           BCH  BR_89DC                    ; $8D9C
2471   8DA8             ;% LB_xxxx END
2472   8DA8             ;------------------------------------------------------------------------------------------------------------
2473   8DA8             
2474   8DA8             
2475   8DA8             
2476   8DA8             ;------------------------------------------------------------------------------------------------------------
2477   8DA8             ; $8DA8 - CRTC_INIT: Called by table init vector
2478   8DA8             ; Called from 
2479   8DA8             ; Arguments: 
2480   8DA8             ; Outputs: 
2481   8DA8             ; RegMod: 
2482   8DA8             ;------------------------------------------------------------------------------------------------------------
2483   8DA8             ;% LB_CRTC_INIT START
2484   8DA8             CRTC_INIT:
2485   8DA8 68 00           LDI  UH,$00                     ; X = $8EA1 from INIT, loop from $8EA1 to $8EB2
2486   8DAA 6A 11           LDI  UL,$11                     ; U = $0011
2487   8DAC             
2488   8DAC             BR_8DAC:
2489   8DAC A4              LDA  UH                         ; $74,$50,$5C,$35,$1C,$00,$19,$1A,$00,$0A,$68,$00,$70,$00,$00,$00,$00,$00
2490   8DAD FD AE 78 00     STA  #(CRTCTRL)                 ; $7800 - Register select mode?
2491   8DB1 45              LIN  X                          ; A = (X) then INC X. Copies from CONFIG_TBL to CRTC registers
2492   8DB2 FD AE 78 01     STA  #(CRTCTRL + $01)           ; $7801 - Write to register
2493   8DB6 FD 60           INC  UH                         ; 
2494   8DB8 88 0E           LOP  UL,BR_8DAC                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
2495   8DBA B5 50           LDI  A,$50                      ; 
2496   8DBC FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
2497   8DC0 9A              RTN                             ; 
2498   8DC1             ;% LB_CRTC_INIT END
2499   8DC1             ;------------------------------------------------------------------------------------------------------------
2500   8DC1             
2501   8DC1             
2502   8DC1             
2503   8DC1             ;------------------------------------------------------------------------------------------------------------
2504   8DC1             ; $8DC1 - TBL_INIT: Called by table init vector
2505   8DC1             ; Called from 
2506   8DC1             ; Arguments: 
2507   8DC1             ; Outputs: 
2508   8DC1             ; RegMod: 
2509   8DC1             ;------------------------------------------------------------------------------------------------------------
2510   8DC1             ;% LB_TBL_INIT START
2511   8DC1             TBL_INIT: ; 
2512   8DC1 FD 88           PSH  X                          ; Save registers
2513   8DC3 FD 98           PSH  Y                          ; 
2514   8DC5 FD A8           PSH  U                          ; 
2515   8DC7 A5 E2 B7        LDA  (WAIT4KB + $74)            ; $E2B7 = $F4 (A01 ROM), $CC (A03/4 ROM)
2516   8DCA B7 CC           CPI  A,$CC                      ; Is this ROM A03/4?
2517   8DCC 89 02           BZR  BR_8DD0                    ; If A <> $CC, i.e. A01 ROM
2518   8DCE 8E 33           BCH  BR_8E03                    ; If A = $CC
2519   8DD0             
2520   8DD0             BR_8DD0:                            ; A01 ROM Init
2521   8DD0 4A 1A           LDI  XL,$1A                     ; Length of text                    
2522   8DD2 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info 
2523   8DD4 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2524   8DD6 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2525   8DD9 BE E6 69        SJP  (BCMD_BEEP_STD)            ; Emit standard beep
2526   8DDC 8E 0C           BCH  BR_8DEA                    ;
2527   8DDE             
2528   8DDE             BR_8DDE:
2529   8DDE 4A 1A           LDI  XL,$1A                     ; Length of text
2530   8DE0 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info
2531   8DE2 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2532   8DE4 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2533   8DE7 BE E6 69        SJP  (BCMD_BEEP_STD)            ; Emit standard beep
2534   8DEA             
2535   8DEA             BR_8DEA:
2536   8DEA BE E2 43        SJP  (WAIT4KB)                  ; Waiting for character input from keyboard. Accumulator=character
2537   8DED B7 0E           CPI  A,$0E                      ; $0E is not a key
2538   8DEF 8B 03           BZS  BR_8DF4                    ; If A==$0E
2539   8DF1 BA 8D F8        JMP  BR_8DF8                    ; If A<>$0E
2540   8DF4             
2541   8DF4             BR_8DF4:
2542   8DF4 91 18           BCR  BR_8DDE                    ; If A<$0E loop back to character output, don't think this will ever be true
2543   8DF6 8E 02           BCH  BR_8DFA                    ; To exit
2544   8DF8             
2545   8DF8             BR_8DF8:
2546   8DF8 93 1C           BCS  BR_8DDE                    ; If A>$0E loop back to character output
2547   8DFA             
2548   8DFA             BR_8DFA:
2549   8DFA FD 2A           POP  U                          ; restore registers
2550   8DFC FD 1A           POP  Y                          ; 
2551   8DFE FD 0A           POP  X                          ; 
2552   8E00 BA 92 D6        JMP  JMP_92D6                   ; Exit where output error $1B from UH
2553   8E03             
2554   8E03             
2555   8E03             BR_8E03:                            ; ROM A03/4 Init path
2556   8E03 B5 00           LDI  A,$00                      ;
2557   8E05 AE 78 5D        STA  (KATAFLAGS)                ; Turn off Katakana mode?
2558   8E08 FD AE D4 00     STA  #($D400)                   ; Some HW register on IWS board?
2559   8E0C FD AE 77 F4     STA  #(VIDEORAM + $07F4)        ; $77F4
2560   8E10 BE 8D 41        SJP  (CLR_VID_RAM)              ; Clears video RAM and some set up
2561   8E13             
2562   8E13 B5 0F           LDI  A,$0F                      ;
2563   8E15 BE 90 6A        SJP  (COLOR_FILL)               ; $906A Fills screen with color $0F
2564   8E18             
2565   8E18 B5 00           LDI  A,$00                      ;
2566   8E1A BE 91 1A        SJP  (CLR_GRPH_RAM)             ; Clears some unknown RAM at #$3000
2567   8E1D             
2568   8E1D B5 55           LDI  A,$55                      ; 
2569   8E1F AE 79 D5        STA  (KYREPEAT)                 ; $79D5 Key repeat flag
2570   8E22 B5 01           LDI  A,$01                      ; 
2571   8E24 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2572   8E28 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8EA1
2573   8E2A 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; 
2574   8E2C BE 8D A8        SJP  (CRTC_INIT)                ; Initializes CRTC
2575   8E2F             
2576   8E2F B5 80           LDI  A,$80                      ; 
2577   8E31 FD AE 77 DA     STA  #(VIDEORAM + $07DA)        ; $77DA
2578   8E35 B5 07           LDI  A,$07                      ; 
2579   8E37 FD AE 77 DB     STA  #(VIDEORAM + $07DB)        ; $77DB
2580   8E3B             
2581   8E3B E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4 
2582   8E3F B5 81           LDI  A,HB(XCHR_INPUT)           ; $81 - Address of exernal character input routine (H)
2583   8E41 AE 78 5B        STA  (XCHRINPT_H)               ; $785B - External character input vector (H)
2584   8E44 B5 9E           LDI  A,LB(XCHR_INPUT)           ; $9E - Address of exernal character input routine (L)
2585   8E46 AE 78 5C        STA  (XCHRINPT_L)               ; $785C - External character input vector (L)
2586   8E49             
2587   8E49 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ; $77D7
2587   8E4D 00 
2588   8E4E FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ; $77D8
2588   8E52 00 
2589   8E53             
2590   8E53 B5 55           LDI  A,$55                      ;
2591   8E55 AE 79 D4        STA  (KB_BYPASS) ; $79D4        ; Enable KB bypass
2592   8E58 FD 2A           POP  U                          ; restore registers
2593   8E5A FD 1A           POP  Y                          ; 
2594   8E5C FD 0A           POP  X                          ; 
2595   8E5E 9A              RTN                             ; Done
2596   8E5F             ;% LB_TBL_INIT END
2597   8E5F             ;------------------------------------------------------------------------------------------------------------
2598   8E5F             
2599   8E5F             
2600   8E5F             
2601   8E5F             ;------------------------------------------------------------------------------------------------------------
2602   8E5F             ; $8E5F - Y2_VIDRAM: Reset Y to point to Video RAM -> $7000
2603   8E5F             ; Called from: $84E6, $8D47, $8D76, $8DA3, $8E5F, $8E86
2604   8E5F             ; Arguments: 
2605   8E5F             ; Outputs: 
2606   8E5F             ; RegMod: 
2607   8E5F             ;------------------------------------------------------------------------------------------------------------
2608   8E5F             ;% LB_Y2_VIDRAM START
2609   8E5F             Y2_VIDRAM: 
2610   8E5F 58 70           LDI  YH,HB(VIDEORAM)            ; $70  - video RAM
2611   8E61 5A 00           LDI  YL,LB(VIDEORAM)            ; $00 
2612   8E63 9A              RTN
2613   8E64             ;% LB_Y2_VIDRAM END
2614   8E64             ;------------------------------------------------------------------------------------------------------------
2615   8E64             
2616   8E64             
2617   8E64             
2618   8E64             ;------------------------------------------------------------------------------------------------------------
2619   8E64             ; $8E64 - CL_SCR
2620   8E64             ; Called from 
2621   8E64             ; Arguments: 
2622   8E64             ; Outputs: 
2623   8E64             ; RegMod: 
2624   8E64             ;------------------------------------------------------------------------------------------------------------
2625   8E64             ;% LB_CL_SCR START
2626   8E64             CL_SCR:
2627   8E64 FD 98           PSH  Y                          ; 
2628   8E66 BE 8E 86        SJP  (VID2CLR)                 ; $8E86
2629   8E69 B5 00           LDI  A,$00                      ;
2630   8E6B 8E 0B           BCH  BR_8E78                    ; $8E78
2631   8E6D             
2632   8E6D             BR_8E6B:                            ; Dead code?
2633   8E6D FD 98           PSH  Y                          ;
2634   8E6F BE 8E 86        SJP  (VID2CLR)                 ; $8E86
2635   8E72 F9              REC                             ; 
2636   8E73 B3 08           ADI  A,$08                      ; 
2637   8E75 18              STA  YH                         ; 
2638   8E76 B5 F0           LDI  A,$F0                      ; 
2639   8E78             
2640   8E78             BR_8E78:
2641   8E78 68 07           LDI  UH,$07                     ; Size of Video RAM?
2642   8E7A 6A FF           LDI  UL,$FF                     ; U == $07FF
2643   8E7C             
2644   8E7C             BR_8E7C:
2645   8E7C BE 8D 5E        SJP  (CLR_VIDRAMPAGE)                  ; $8D5E
2646   8E7F FD 62           DEC  UH                         ; 
2647   8E81 93 07           BCS  BR_8E7C                    ; $8E7C
2648   8E83 FD 1A           POP  Y                          ;
2649   8E85 9A              RTN                             ;
2650   8E86             ;% LB_CL_SCR END
2651   8E86             ;------------------------------------------------------------------------------------------------------------
2652   8E86             
2653   8E86             
2654   8E86             
2655   8E86             ;------------------------------------------------------------------------------------------------------------
2656   8E86             ; 8E86 - Sets Color RAM address based on video RAM?
2657   8E86             ; Called from: CL_SCR:$8E66, CL_SCR:$8E6F
2658   8E86             ; Arguments: 
2659   8E86             ; Outputs: 
2660   8E86             ; RegMod: 
2661   8E86             ;------------------------------------------------------------------------------------------------------------
2662   8E86             ;% LB_VID2CLR START
2663   8E86             VID2CLR:
2664   8E86 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2665   8E89 94              LDA  YH                         ; A = $70
2666   8E8A F1              AEX                             ; A = $07, High nibble & low nibble swapped
2667   8E8B DF              DEC  A                          ; A = $06
2668   8E8C F1              AEX                             ; A = $60, Accumulator High nibble & low nibble swapped
2669   8E8D 18              STA  YH                         ; Y = $6000, Color RAM
2670   8E8E 9A              RTN                             ; Done
2671   8E8F             ;% LB_VID2CLR END
2672   8E8F             ;------------------------------------------------------------------------------------------------------------
2673   8E8F             
2674   8E8F             
2675   8E8F             
2676   8E8F             ;------------------------------------------------------------------------------------------------------------
2677   8E8F             ; $8E8F ~ $8EEA - Pair of bytes ,address?
2678   8E8F             ; Called from: JMP_843B:$8472, JMP_843B:$8474, BR_8604:$86A3, BR_8604:$86A5, TBL_INIT:$8E28, TBL_INIT:$8E2A
2679   8E8F             ; Arguments: 
2680   8E8F             ; Outputs: 
2681   8E8F             ; RegMod: 
2682   8E8F             ;------------------------------------------------------------------------------------------------------------
2683   8E8F             ;% LB_xxxx START
2684   8E8F             CONFIG_TBL: ; 8E8F
2685   8E8F 3B 28 30 74     .BYTE  $3B,$28,$30,$74,$1C,$00,$19,$1A
2685   8E93 1C 00 19 1A 
2686   8E97 00 0A 68 00     .BYTE  $00,$0A,$68,$00,$70,$00,$00,$00
2686   8E9B 70 00 00 00 
2687   8E9F 00 00 74 50     .BYTE  $00,$00,$74,$50,$5C,$35,$1C,$00
2687   8EA3 5C 35 1C 00 
2688   8EA7 19 1A 00 0A     .BYTE  $19,$1A,$00,$0A,$68,$00,$70,$00
2688   8EAB 68 00 70 00 
2689   8EAF 00 00 00 00     .BYTE  $00,$00,$00,$00,$52,$55,$4E,$50
2689   8EB3 52 55 4E 50 
2690   8EB7 52 4F 52 45     .BYTE  $52,$4F,$52,$45,$53,$45,$52,$56
2690   8EBB 53 45 52 56 
2691   8EBF 45 20 45 42     .BYTE  $45,$20,$45,$42,$45,$4E,$45,$3A
2691   8EC3 45 4E 45 3A 
2692   8EC7 28 43 29 20     .BYTE  $28,$43,$29,$20,$62,$79,$20,$49
2692   8ECB 62 79 20 49 
2693   8ECF 6E 67 2E 42     .BYTE  $6E,$67,$2E,$42,$75,$65,$72,$6F
2693   8ED3 75 65 72 6F 
2694   8ED7 20 57 2E 53     .BYTE  $20,$57,$2E,$53,$70,$65,$69,$64
2694   8EDB 70 65 69 64 
2695   8EDF 65 6C           .BYTE  $65,$6C
2696   8EE1             ;% LB_xxxx END
2697   8EE1             ;------------------------------------------------------------------------------------------------------------
2698   8EE1             
2699   8EE1             
2700   8EE1             
2701   8EE1             ;------------------------------------------------------------------------------------------------------------
2702   8EE1             ; $8EE1 - MONITOR
2703   8EE1             ; Called from 
2704   8EE1             ; Arguments: 
2705   8EE1             ; Outputs: 
2706   8EE1             ; RegMod: 
2707   8EE1             ;------------------------------------------------------------------------------------------------------------
2708   8EE1             ;% LB_MONITOR START
2709   8EE1             MONITOR:
2710   8EE1 BA 92 D6        JMP JMP_92D6                    ; $92D6
2711   8EE4             ;% LB_MONITOR END
2712   8EE4             ;------------------------------------------------------------------------------------------------------------
2713   8EE4             
2714   8EE4             
2715   8EE4             
2716   8EE4             ;------------------------------------------------------------------------------------------------------------
2717   8EE4             ; $8EE4 VCURSOR - This function specifies the current vertical cursor position
2718   8EE4             ; Called from 
2719   8EE4             ; Arguments: 
2720   8EE4             ; Outputs: 
2721   8EE4             ; RegMod: 
2722   8EE4             ;------------------------------------------------------------------------------------------------------------
2723   8EE4             ;% LB_VCURSOR START
2724   8EE4             VCURSOR:
2725   8EE4 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position 
2726   8EE7 DF              DEC  A                          ; 
2727   8EE8 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2728   8EEB             ;% LB_VCURSOR END
2729   8EEB             ;------------------------------------------------------------------------------------------------------------
2730   8EEB             
2731   8EEB             
2732   8EEB             
2733   8EEB             ;------------------------------------------------------------------------------------------------------------
2734   8EEB             ; $8EEB VPCURSOR - Specifies the vertical light pen cursor position.
2735   8EEB             ; Called from: 
2736   8EEB             ; Arguments: 
2737   8EEB             ; Outputs: 
2738   8EEB             ; RegMod: 
2739   8EEB             ;------------------------------------------------------------------------------------------------------------
2740   8EEB             ;% LB_VPCURSOR START
2741   8EEB             VPCURSOR: ; 
2742   8EEB B5 10           LDI  A,$10                      ; 
2743   8EED FD AE 78 00     STA  #(CRTCTRL)                 ; #$7800 Light Pen H(V) register
2744   8EF1 FD A5 78 01     LDA  #(CRTCTRL + $01)           ; #$7801
2745   8EF5 FD AE 77 F6     STA  #(VIDEORAM + $07F6)        ; #$77F6 Light pen vertical cursor position?
2746   8EF9 DF              DEC  A                          ; 
2747   8EFA BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2748   8EFD             ;% LB_VPCURSOR END
2749   8EFD             ;------------------------------------------------------------------------------------------------------------
2750   8EFD             
2751   8EFD             
2752   8EFD             
2753   8EFD             ;------------------------------------------------------------------------------------------------------------
2754   8EFD             ; $8EFD - HCURSOR: This function specifies the current horizontal cursor position
2755   8EFD             ; Usage: CURSOR HCURSOR*+ 10,0
2756   8EFD             ; Called from: 
2757   8EFD             ; Arguments:  
2758   8EFD             ; Outputs: 
2759   8EFD             ; RegMod: 
2760   8EFD             ;------------------------------------------------------------------------------------------------------------
2761   8EFD             ;% LB_HCURSOR START
2762   8EFD             HCURSOR:
2763   8EFD A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2764   8F00 DF              DEC  A                          ; 
2765   8F01 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2766   8F04             ;% LB_HCURSOR END
2767   8F04             ;------------------------------------------------------------------------------------------------------------
2768   8F04             
2769   8F04             
2770   8F04             
2771   8F04             ;------------------------------------------------------------------------------------------------------------
2772   8F04             ; $8F04 - HPCURSOR: Specifies the horizontal light pen cursor position
2773   8F04             ; Called from 
2774   8F04             ; Arguments: 
2775   8F04             ; Outputs: A, XL, Y
2776   8F04             ; RegMod: 
2777   8F04             ;------------------------------------------------------------------------------------------------------------
2778   8F04             ;% LB_HPCURSOR START
2779   8F04             HPCURSOR:
2780   8F04 00              SBC  XL                         ; A = A - XL. Subtract with Carry
2781   8F05 11              SBC  (Y)                        ; A = A - (Y). Subtract with Carry  (ME0)    
2782   8F06 FD AE 78 00     STA  #(CRTCTRL)                 ; #$7800
2783   8F0A FD A5 78 01     LDA  #(CRTCTRL + $01)           ; #$7801
2784   8F0E FD AE 77 F5     STA  #(VIDEORAM + $07F5)        ; #$77F5 Light pen horizontal cursor position
2785   8F12 DF              DEC  A                          ;
2786   8F13 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2787   8F16             ;% LB_HPCURSOR END
2788   8F16             ;------------------------------------------------------------------------------------------------------------
2789   8F16             
2790   8F16             
2791   8F16             
2792   8F16             ;------------------------------------------------------------------------------------------------------------
2793   8F16             ; $8F16 LIST - 
2794   8F16             ; USAGE: 
2795   8F16             ; Called from: 
2796   8F16             ; Arguments: 
2797   8F16             ; Outputs: 
2798   8F16             ; RegMod: 
2799   8F16             ;------------------------------------------------------------------------------------------------------------
2800   8F16             ;% LB_LIST START
2801   8F16             LIST:
2802   8F16 A5 76 4F        LDA  (DISP_BUFF + $4F)          ; $764F
2803   8F19 B9 07           ANI  A,$07                      ; 
2804   8F1B BB 20           ORI  A,$20                      ; 
2805   8F1D AE 76 4F        STA  (DISP_BUFF + $4F)          ; 
2806   8F20 15              LDA  (Y)                        ; 
2807   8F21 B7 0D           CPI  A,$0D                      ; CR = EOL
2808   8F23 89 02           BZR  BR_8F27                    ; A = $0D
2809   8F25 8E 1F           BCH  JMP_8F46                   ; A <> $0D
2810   8F27             
2811   8F27             BR_8F27:
2812   8F27 B7 50           CPI  A,$50                      ; 
2813   8F29 89 08           BZR  BR_8F33                    ; A = $$50
2814   8F2B 54              INC  Y                          ; 
2815   8F2C 15              LDA  (Y)                        ; 
2816   8F2D B7 0D           CPI  A,$0D                      ; 
2817   8F2F 89 02           BZR  BR_8F33                    ; A = $0D
2818   8F31 8E 21           BCH  BR_8F54                    ; A <> $0D
2819   8F33             
2820   8F33             BR_8F33:
2821   8F33 B7 56           CPI  A,$56                      ; 
2822   8F35 89 09           BZR  BR_8F40                    ; A = $56
2823   8F37 54              INC  Y                          ; 
2824   8F38 15              LDA  (Y)                        ; 
2825   8F39 B7 0D           CPI  A,$0D                      ;
2826   8F3B 89 03           BZR  BR_8F40                    ; A = $0D
2827   8F3D BA 92 D6        JMP  JMP_92D6                   ; A <> $0D
2828   8F40             
2829   8F40             BR_8F40:
2830   8F40 BA C9 6F        JMP  BCMD_LIST + 1              ; $C96F
2831   8F43             ;% LB_LIST START
2832   8F43             ;------------------------------------------------------------------------------------------------------------
2833   8F43             
2834   8F43             
2835   8F43             
2836   8F43             ;------------------------------------------------------------------------------------------------------------
2837   8F43             ; $8F43 - JMP_8F43: 
2838   8F43             ; Called from 
2839   8F43             ; Arguments: 
2840   8F43             ; Outputs: 
2841   8F43             ; RegMod: 
2842   8F43             ;------------------------------------------------------------------------------------------------------------
2843   8F43             ;% LB_JMP_8F43 START
2844   8F43             JMP_8F43: ; VLISTALL
2845   8F43 BA 80 00        JMP  B_TBL_8000                 ; $8000
2846   8F46             ;% LB_JMP_8F43 END
2847   8F46             ;------------------------------------------------------------------------------------------------------------
2848   8F46             
2849   8F46             
2850   8F46             
2851   8F46             ;------------------------------------------------------------------------------------------------------------
2852   8F46             ; $8F46 - xxxx: 
2853   8F46             ; Called from LIST:$8F25
2854   8F46             ; Arguments: 
2855   8F46             ; Outputs: 
2856   8F46             ; RegMod: 
2857   8F46             ;------------------------------------------------------------------------------------------------------------
2858   8F46             ;% LB_xxxx START
2859   8F46             JMP_8F46:
2860   8F46 BE 90 8E        SJP  (JMP_908E)                 ; $908E
2861   8F49 CC              VEJ  (CC) \ ABYTL(ROM_ST_H)     ; $7861 (CC) Loads X-Reg with address from memory
2861   8F4A 61          
2862   8F4B B5 FF           LDI  A,$FF                      ; 
2863   8F4D 86              CPA  XH                         ; 
2864   8F4E 89 04           BZR  BR_8F54                    ; $8F54
2865   8F50 CC              VEJ  (CC) \ ABYTL(BASPRG_ST_H)  ; $7865 (CC) Loads X-Reg with address from memory
2865   8F51 65          
2866   8F52 8E 02           BCH  BR_8F56                    ; $8F56
2867   8F54             
2868   8F54             BR_8F54:
2869   8F54 CC              VEJ  (CC) \ ABYTL(BASPRG_EDT_H) ; $7869 (CC) Loads X-Reg with address from memory
2869   8F55 69          
2870   8F56             
2871   8F56             BR_8F56:
2872   8F56 05              LDA  (X)                        ; 
2873   8F57 B7 FF           CPI  A,$FF                      ; 
2874   8F59 89 01           BZR  BR_8F5C                    ; $8F5C
2875   8F5B E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2876   8F5C             
2877   8F5C             BR_8F5C:
2878   8F5C B5 55           LDI  A,$55                      ; 
2879   8F5E FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; $77D9
2880   8F62 A5 78 71        LDA  (WAIT_CFG)                 ; WAIT setting
2881   8F65 B7 00           CPI  A,$00                      ; 
2882   8F67 89 0D           BZR  BR_8F76                    ; $8F76
2883   8F69 B5 02           LDI  A,$02                      ; 
2884   8F6B AE 78 71        STA  (WAIT_CFG)                 ; WAIT setting
2885   8F6E B5 00           LDI  A,$00                      ; 
2886   8F70 AE 78 72        STA  (WAIT_CTR_H)               ; WAIT time counter (H)
2887   8F73 AE 78 73        STA  (WAIT_CTR_L)               ; WAIT time counter (L)
2888   8F76             
2889   8F76             BR_8F76:
2890   8F76 B5 03           LDI  A,$03                      ; 
2891   8F78 FD CA           ADR  X                          ; 
2892   8F7A CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
2892   8F7B A6          
2893   8F7C             
2894   8F7C             BR_8F7C:
2895   8F7C 46              DEC  X                          ; 
2896   8F7D 46              DEC  X                          ; 
2897   8F7E BE D2 D0        SJP  (XFRLINE2INBUF)            ; $D2D0
2898   8F81 B5 14           LDI  A,$14                      ; Bit 0: The input buffer was temporarily stored. A system message or a reserve text is shown in the display.
2899   8F83                                                 ; Bit 6: The display program shows from (Y-Reg)
2900   8F83 AE 78 80        STA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
2901   8F86 BE E8 CA        SJP  (PRGMDISP)                 ; 
2902   8F89 B5 02           LDI  A,$02                      ; 
2903   8F8B FD AE F0 0B     STA  #(PC1500_IF_REG)           ; 
2904   8F8F BE 81 9E        SJP  (XCHR_INPUT)               ; $819E
2905   8F92 F4              VEJ  (F4) \ AWRD(WAIT_CTR_H)    ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
2905   8F93 78 72       
2906   8F95             
2907   8F95             BR_8F95:
2908   8F95 FD A8           PSH  U                          ; 
2909   8F97             
2910   8F97             BR_8F97:
2911   8F97 38              NOP                             ;
2912   8F98 38              NOP                             ;
2913   8F99 88 04           LOP  UL,BR_8F97                 ; $8F97
2914   8F9B FD 2A           POP  U                          ;
2915   8F9D 88 0A           LOP  UL,BR_8F95                 ; $8F95
2916   8F9F 6C 00           CPI  UH,$00                     ; 
2917   8FA1 8B 04           BZS  BR_8FA7                    ; $8FA7
2918   8FA3 FD 62           DEC  UH                         ; 
2919   8FA5 9E 12           BCH  BR_8F95                    ; $8F95
2920   8FA7             
2921   8FA7             BR_8FA7:
2922   8FA7 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
2923   8FAA B7 20           CPI  A,$20                      ; Space
2924   8FAC 89 02           BZR  BR_8FB0                    ; $8FB0
2925   8FAE 9E 09           BCH  BR_8FA7                    ; $8FA7
2926   8FB0             
2927   8FB0             BR_8FB0:
2928   8FB0 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
2929   8FB3 B7 0B           CPI  A,$0B                      ; Down arrow
2930   8FB5 89 08           BZR  BR_8FBF                    ; $8FBF
2931   8FB7 B5 99           LDI  A,$99                      ; 
2932   8FB9 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2933   8FBD 8E 51           BCH  BR_9010                    ; $9010
2934   8FBF             
2935   8FBF             BR_8FBF:
2936   8FBF FD A5 F0 0A     LDA  #(PC1500_MSK_REG)          ; 
2937   8FC3 B9 20           ANI  A,$20                      ; 
2938   8FC5 B7 20           CPI  A,$20                      ; 
2939   8FC7 89 0E           BZR  BR_8FD7                    ; $8FD7
2940   8FC9 B5 00           LDI  A,$00                      ; 
2941   8FCB AE 78 B5        STA  (ERR_LINE_L)               ; 
2942   8FCE FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; 
2942   8FD2 00 
2943   8FD3 BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
2944   8FD6 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2945   8FD7             
2946   8FD7             BR_8FD7:
2947   8FD7 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2948   8FDB DD              INC  A                          ; 
2949   8FDC FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2950   8FE0 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6 (CC) Loads X-Reg with address from memory
2950   8FE1 A6          
2951   8FE2 44              INC  X                          ; 
2952   8FE3 44              INC  X                          ; 
2953   8FE4 05              LDA  (X)                        ; 
2954   8FE5 FD CA           ADR  X                          ; 
2955   8FE7 44              INC  X                          ; 
2956   8FE8 47              LDE  X                          ; 
2957   8FE9 B7 FF           CPI  A,$FF                      ; 
2958   8FEB 89 02           BZR  BR_8FEF                    ; $8FEF
2959   8FED 8E 21           BCH  BR_9010                    ; $9010
2960   8FEF             
2961   8FEF             BR_8FEF:
2962   8FEF CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6 $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
2962   8FF0 A6          
2963   8FF1 B5 04           LDI  A,$04                      ; 
2964   8FF3 FD CA           ADR  X                          ; 
2965   8FF5 FD 5A           STX  Y                          ; 
2966   8FF7 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; 
2967   8FFB B7 55           CPI  A,$55                      ; 
2968   8FFD 89 0F           BZR  BR_900E                    ; $900E
2969   8FFF B5 00           LDI  A,$00                      ; 
2970   9001 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2971   9005 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2972   9009 DF              DEC  A                          ; 
2973   900A FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2974   900E              
2975   900E             BR_900E:
2976   900E 9E 94           BCH  BR_8F7C                    ; $8F7C
2977   9010             
2978   9010             BR_9010:
2979   9010 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6 (CC) Loads X-Reg with address from memory
2979   9011 A6          
2980   9012 B5 04           LDI  A,$04                      ; 
2981   9014 FD CA           ADR  X                          ; 
2982   9016 FD 5A           STX  Y                          ; 
2983   9018 CA              VEJ  (CA) \ ABYTL(ERR_ADD_H)    ; $78B2 $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
2983   9019 B2          
2984   901A B5 01           LDI  A,$01                      ; 
2985   901C AE 78 B5        STA  (ERR_LINE_L)               ; 
2986   901F BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
2987   9022 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2988   9023             ;% LB_LIST END
2989   9023             ;------------------------------------------------------------------------------------------------------------
2990   9023             
2991   9023             
2992   9023             
2993   9023             ;------------------------------------------------------------------------------------------------------------
2994   9023             ; $9023 BACKGR - Changes background color
2995   9023             ; Usage: BACKGR BG color,Chr color 
2996   9023             ; Called from 
2997   9023             ; Arguments: Color parameters: 0=Black 1=Blue 2=Green 3=Healing blue 4-Red 5=Violet 6=Yellow 7:white
2998   9023             ; Outputs: 
2999   9023             ; RegMod: 
3000   9023             ;------------------------------------------------------------------------------------------------------------
3001   9023             ;% LB_BACKGR START
3002   9023             BACKGR:
3003   9023 DE              VEJ  (DE) \ ABRF(BR_9081)       ; (DE) Calculate formula Y-Reg points to, save result in AR-X. 
3003   9024 5C          
3004   9025                                                 ; Branch on error
3005   9025 D0              VEJ  (D0) \                     ; First argument
3005   9026             
3006   9026 10                   ABYT($10) \ ABRF(BR_9081)  ; (D0) Convert AR-X to Int save to U-Reg. D1 range check (25), if exceeded branch
3006   9027 59          
3007   9028 B7 10           CPI  A,$10                      ;
3008   902A 81 03           BCR  BR_902F                    ; If A < $10
3009   902C 68 13           LDI  UH,$13                     ; 
3010   902E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3011   902F             
3012   902F             BR_902F:
3013   902F 24              LDA  UL                         ; U result of VEJ(D0) above
3014   9030 F1              AEX                             ; Accumulator High nibble & low nibble swapped
3015   9031 FD AE 77 DD     STA  #(VIDEORAM + $7DD)         ; $77DD
3016   9035 C0              VEJ  (C0)                       ; (C0) Load next character / token to U-Reg
3017   9036 6E 0D           CPI  UL,$0D                     ; 
3018   9038 89 0B           BZR  BR_9045                    ; A <> $0D then we check for second argument
3019   903A             
3020   903A FD A5 77 DD     LDA  #(VIDEORAM + $7DD)         ; $77DD
3021   903E B7 0A           CPI  A,$0A                      ; Not sure why the CPI ORI combo accomplish
3022   9040 BB 0F           ORI  A,$0F                      ; 
3023   9042 2A              STA  UL                         ; 
3024   9043 8E 20           BCH  BR_9065                    ; $9065
3025   9045             
3026   9045             BR_9045:
3027   9045 B7 2C           CPI  A,$2C                      ; 
3028   9047 89 1B           BZR  BR_9064                    ; A <> $2C
3029   9049 DE              VEJ  (DE) \ ABRF(BR_9081)       ; (DE) Calculate formula Y-Reg points to, save result in AR-X. Branch on error
3029   904A 36          
3030   904B D0              VEJ  (D0) \ 
3030   904C             
3031   904C 10                  ABYT($10) \ ABRF(BR_9081)   ; (D0) Convert AR-X to Integer save to U-Reg. D1 range check, if exceeded branch
3031   904D 33          
3032   904E B7 10           CPI  A,$10                      ; 
3033   9050 81 03           BCR  BR_9055                    ; A < $10
3034   9052 68 13           LDI  UH,$13                     ; 
3035   9054 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3036   9055             
3037   9055             BR_9055:
3038   9055 FD AE 77 DE     STA  #(VIDEORAM + $07DE)        ; $77DE Character color
3039   9059 FD AB 77 DD     ORA  #(VIDEORAM + $07DD)        ; $77DD Background color
3040   905D 2A              STA  UL                         ; 
3041   905E FD AE 77 DC     STA  #(VIDEORAM + $07DC)        ; $77DC
3042   9062 8E 01           BCH  BR_9065                    ; $9065
3043   9064             
3044   9064             BR_9064:
3045   9064 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3046   9065             
3047   9065             BR_9065:
3048   9065 24              LDA  UL                         ;
3049   9066 BE 90 6A        SJP  (COLOR_FILL)               ; $906A
3050   9069 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3051   906A             ;------------------------------------------------------------------------------------------------------------
3052   906A             
3053   906A             
3054   906A             
3055   906A             ;------------------------------------------------------------------------------------------------------------
3056   906A             ; $906A COLOR_FILL - Fills Color RAM with value passed in A
3057   906A             ; Called from: TBL_INIT:8E15, BACKGR:9066
3058   906A             ; Arguments: A, color to fill
3059   906A             ; Outputs: 
3060   906A             ; RegMod: 
3061   906A             ;------------------------------------------------------------------------------------------------------------
3062   906A             ;% LB_COLOR_FILL START
3063   906A             COLOR_FILL:
3064   906A 48 60           LDI  XH,$60                     ; IWS $6000~$67FF color RAM
3065   906C 4A 00           LDI  XL,$00                     ; 
3066   906E 68 07           LDI  UH,$07                     ; Loop counter
3067   9070 6A D0           LDI  UL,$D0                     ; $6000~$67D0
3068   9072             
3069   9072             BR_9072:
3070   9072 FD 0E           STA  #(X)                       ; Store color in A to Color RAM
3071   9074 44              INC  X                          ; Inc address pointer
3072   9075 66              DEC  U                          ; Dec counter
3073   9076 6C 00           CPI  UH,$00                     ; 
3074   9078 89 05           BZR  BR_907F                    ; If UH <> $00. HB of count
3075   907A 6E 00           CPI  UL,$00                     ; 
3076   907C 89 01           BZR  BR_907F                    ; If UL <> $00. LB of count
3077   907E 9A              RTN                             ; Done
3078   907F             
3079   907F             BR_907F:
3080   907F 9E 0F           BCH  BR_9072                    ; $9072
3081   9081             
3082   9081             BR_9081:
3083   9081 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3084   9082             ;% LB_COLOR_FILL END
3085   9082             ;------------------------------------------------------------------------------------------------------------
3086   9082             
3087   9082             
3088   9082             
3089   9082             ;------------------------------------------------------------------------------------------------------------
3090   9082             ; $9082 ERN - function, returns the error number that occurred last
3091   9082             ; Usage: ERN
3092   9082             ; Called from: 
3093   9082             ; Arguments: 
3094   9082             ; Outputs: 
3095   9082             ; RegMod: A
3096   9082             ;------------------------------------------------------------------------------------------------------------
3097   9082             ;% LB_ERN START
3098   9082             ERN:
3099   9082 A5 78 9B        LDA  (ERL)                      ;
3100   9085 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
3101   9088             ;% LB_ERN END
3102   9088             ;------------------------------------------------------------------------------------------------------------
3103   9088             
3104   9088             
3105   9088             
3106   9088             ;------------------------------------------------------------------------------------------------------------
3107   9088             ; $9088 - ERL: function, returns the line number in which the last error occurred
3108   9088             ; Usage: ERL
3109   9088             ; Called from: 
3110   9088             ; Arguments: 
3111   9088             ; Outputs: 
3112   9088             ; RegMod: 
3113   9088             ;------------------------------------------------------------------------------------------------------------
3114   9088             ;% LB_ERL START
3115   9088             IWS_ERL:
3116   9088 F4              VEJ  (F4) \ AWRD(ERR_LINE_H)    ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3116   9089 78 B4       
3117   908B BA DA 6C        JMP  BCMD_MEM + $0F             ; $DA6C
3118   908E             ;% LB_ERL END
3119   908E             ;------------------------------------------------------------------------------------------------------------
3120   908E             
3121   908E             
3122   908E             
3123   908E             ;------------------------------------------------------------------------------------------------------------
3124   908E             ; $908E xxxx - Jumps to start of program IN ROM or RAM?
3125   908E             ; Called from 
3126   908E             ; Arguments: 
3127   908E             ; Outputs: 
3128   908E             ; RegMod: 
3129   908E             ;------------------------------------------------------------------------------------------------------------
3130   908E             ;% LB_xxxx START
3131   908E             JMP_908E:
3132   908E A5 78 60        LDA  (ST_ROM_MOD)               ; $7860 - Start of ROM in module (H)
3133   9091 08              STA  XH                         ; 
3134   9092 B7 FF           CPI  A,$FF                      ; 
3135   9094 89 04           BZR  BR_909A                    ; Branch if A <> $FF, i.e. ROM module present.
3136   9096 A5 78 63        LDA  (RAM_ST_H)                 ; $7863 - Start of RAM pointer (H)
3137   9099 08              STA  XH                         ; 
3138   909A             
3139   909A             BR_909A:
3140   909A 4A 00           LDI  XL,$00                     ; XH is either HB or start of RAM or ROM
3141   909C 05              LDA  (X)                        ; A = (X)  (ME0)
3142   909D B7 55           CPI  A,$55                      ; Looking for start of BASIC table?
3143   909F 89 08           BZR  BR_90A9                    ; Branch if A <> $55
3144   90A1 4A 07           LDI  XL,$07                     ; 
3145   90A3 05              LDA  (X)                        ; A = (X)  (ME0)
3146   90A4 B7 00           CPI  A,$00                      ; 
3147   90A6 89 01           BZR  BR_90A9                    ; Branch if A <> $00
3148   90A8 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3149   90A9             
3150   90A9             BR_90A9:
3151   90A9 9A              RTN                             ; Done
3152   90AA             ;% LB_xxxx END
3153   90AA             ;------------------------------------------------------------------------------------------------------------
3154   90AA             
3155   90AA             
3156   90AA             
3157   90AA             ;------------------------------------------------------------------------------------------------------------
3158   90AA             ; $90AA SLEEP - Turns off computer without initializing the printer when turning it back on.
3159   90AA             ; Called from: 
3160   90AA             ; Arguments: YH
3161   90AA             ; Outputs: 
3162   90AA             ; RegMod: A
3163   90AA             ;------------------------------------------------------------------------------------------------------------
3164   90AA             ;% LB_SLEEP START
3165   90AA             SLEEP:
3166   90AA 94              LDA  YH                         ;
3167   90AB B7 7B           CPI  A,$7B                      ;
3168   90AD 8B 04           BZS  BR_90B3                    ; A == $7B, skip sleep if YH = $7B. Why?
3169   90AF BE E3 3F        SJP  (AUTO_OFF)                 ; Power down
3170   90B2 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3171   90B3             
3172   90B3             BR_90B3: 
3173   90B3 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; Load stack pointer
3174   90B6 BE CF CC        SJP  (INITSYSADDR)              ; ($CFCC) Init Sys Addr, turn off trace
3175   90B9 BE D0 2B        SJP  (INBUF_CLRINIT)            ; $D02B Clear IN_BUF w/$0D
3176   90BC B5 3E           LDI  A,$3E                      ; 
3177   90BE 1E              STA  (Y)                        ; Store A in address pointed to by Y
3178   90BF E9 78 8A EF     ANI  (BREAKPARAM),$EF           ; Clears Bit 4 (pp) = (pp) & n (ME0)
3179   90C3 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ; Clears Bit 0
3180   90C7 B5 00           LDI  A,$00                      ; Reset Display Parameter
3181   90C9 AE 78 80        STA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
3182   90CC AE 78 9C        STA  (CURR_LINE_H)              ; Current line number (H)
3183   90CF AE 78 9D        STA  (CURR_LINE_L)              ; Current line number (L)
3184   90D2 BE E8 CA        SJP  (PRGMDISP)                 ; Display program.
3185   90D5 48 CA           LDI  XH,HB(EDITOR+$12)          ; $CA Sets address to return to?
3186   90D7 4A 92           LDI  XL,LB(EDITOR+$12)          ; $92
3187   90D9 FD 88           PSH  X                          ;
3188   90DB BA E3 3F        JMP  AUTO_OFF                   ; $E33F
3189   90DE             ;% LB_SLEEP END
3190   90DE             ;------------------------------------------------------------------------------------------------------------
3191   90DE             
3192   90DE             
3193   90DE             
3194   90DE             ;------------------------------------------------------------------------------------------------------------
3195   90DE             ; $90DE KEY_REPEAT_ON - If keyboard bypass set repeat key flag?
3196   90DE             ; Called from: XCHR_INPUT:$823E
3197   90DE             ; Arguments: 
3198   90DE             ; Outputs: 
3199   90DE             ; RegMod: 
3200   90DE             ;------------------------------------------------------------------------------------------------------------
3201   90DE             ;% LB_KEY_REPEAT_ON START
3202   90DE             KEY_REPEAT_ON:
3203   90DE FD C8           PSH  A                          ; 
3204   90E0 A5 79 D5        LDA  (KYREPEAT)                 ; Key repeat flag
3205   90E3 B7 55           CPI  A,$55                      ; Check for $55 bypass flag
3206   90E5 89 07           BZR  BR_90EE                    ; A <> $55 . If not, skip
3207   90E7 FD 8A           POP  A                          ; If repeat turned on
3208   90E9 EB 7B 0E 40     ORI  (CURS_CTRL),$40            ; $7B0E - Cursor Control Parameter, sets key repeat flag
3209   90ED 9A              RTN                             ;
3210   90EE             
3211   90EE             BR_90EE:
3212   90EE FD 8A           POP  A                          ; 
3213   90F0 9A              RTN                             ; Done
3214   90F1             ;% LB_KEY_REPEAT_ON END
3215   90F1             ;------------------------------------------------------------------------------------------------------------
3216   90F1             
3217   90F1             
3218   90F1             
3219   90F1             ;------------------------------------------------------------------------------------------------------------
3220   90F1             ; $90F1 REPKEY - Autorepeat of the keyboard is turned on or off.
3221   90F1             ; Called from:
3222   90F1             ; Arguments: ON, OFF
3223   90F1             ; Outputs: 
3224   90F1             ; RegMod: 
3225   90F1             ;------------------------------------------------------------------------------------------------------------
3226   90F1             ;% LB_REPKEY START
3227   90F1             REPKEY:
3228   90F1 C2              VEJ  (C2) \ 
3228   90F2             
3229   90F2 F1 9C               AWRD($F19C) \ ABRF(BR_90FB) ; Checks for 'ON' token. If not found, branch. BCMD_LOG ($F165+?) \ $90FB
3229   90F4 06          
3230   90F5 B5 55           LDI  A,$55                      ; 
3231   90F7             
3232   90F7             BR_90F7:
3233   90F7 AE 79 D5        STA  (KYREPEAT)                 ; $79D5 Key repeat flag
3234   90FA E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3235   90FB             
3236   90FB             BR_90FB:
3237   90FB 56              DEC  Y                          ;
3238   90FC 56              DEC  Y                          ;
3239   90FD C2              VEJ  (C2) \ 
3239   90FE             
3240   90FE F1 9E               AWRD($F19E) \ ABRF(BR_9105) ; Checks for 'OFF" token. If not found branch. DIVISION ($F084) \ $9105
3240   9100 04          
3241   9101 B5 00           LDI  A,$00                      ;
3242   9103 9E 0E           BCH  BR_90F7                    ; $90F7
3243   9105             
3244   9105             BR_9105:
3245   9105 54              INC  Y                          ; 
3246   9106 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3247   9107             ;% LB_REPKEY END
3248   9107             ;------------------------------------------------------------------------------------------------------------
3249   9107             
3250   9107             
3251   9107             
3252   9107             ;------------------------------------------------------------------------------------------------------------
3253   9107             ; GCLS - Display custom graphics character on whole screen. You can define your own characters from 
3254   9107             ;        address &5000. A character is represented by a dot matrix of 10x8 dots.
3255   9107             ; Usage: GCLS Num.Exp
3256   9107             ; Called from: 
3257   9107             ; Arguments: Num.Exp (graphics layer)
3258   9107             ; Outputs: 
3259   9107             ; RegMod: 
3260   9107             ;------------------------------------------------------------------------------------------------------------
3261   9107             ;% LB_GCLS START
3262   9107             GCLS:
3263   9107 15              LDA  (Y)                        ;
3264   9108 B7 0D           CPI  A,$0D                      ; 
3265   910A 89 04           BZR  BR_9110                    ; A <> $0D
3266   910C B5 00           LDI  A,$00                      ; 
3267   910E 8E 06           BCH  BR_9116                    ; $9116
3268   9110             
3269   9110             BR_9110:
3270   9110 DE              VEJ  (DE) \ ABRF(BR_914B)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3270   9111 39          
3271   9112 D0              VEJ  (D0) \ 
3271   9113             
3272   9113 10                  ABYT($10) \ ABRF(BR_914B)   ; (D0) Convert AR-X to Int & load in U-Reg. Range check by D1 (25), if exceeded branch
3272   9114 36          
3273   9115 24              LDA  UL                         ;
3274   9116             
3275   9116             BR_9116:
3276   9116 BE 91 1A        SJP  (CLR_GRPH_RAM)             ; $911A
3277   9119 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3278   911A             ;% LB_GCLS END
3279   911A             ;------------------------------------------------------------------------------------------------------------
3280   911A             
3281   911A             
3282   911A             
3283   911A             ;------------------------------------------------------------------------------------------------------------
3284   911A             ; $911A CLR_GRPH_RAM - Clears Graphics RAM
3285   911A             ; Called from: 
3286   911A             ; Arguments: 
3287   911A             ; Outputs: 
3288   911A             ; RegMod: 
3289   911A             ;------------------------------------------------------------------------------------------------------------
3290   911A             ;% LB_CLR_GRPH_RAM START
3291   911A             CLR_GRPH_RAM:
3292   911A B5 55           LDI  A,$55                      ; 
3293   911C FD AE 30 00     STA  #($3000)                   ; *** Check for graphics RAM
3294   9120 FD A7 30 00     CPA  #($3000)                   ; ***
3295   9124 89 08           BZR  BR_912E                    ; If A <> $55 then #($3000) does not exist. Option?
3296   9126 68 07           LDI  UH,$07                     ; Next 4 lines don't seem to do anything
3297   9128 6A D0           LDI  UL,$D0                     ; Loop counter
3298   912A 48 68           LDI  XH,HB(GRAPHRAM)            ; $68 - HB Graphics RAM
3299   912C 4A 00           LDI  XL,LB(GRAPHRAM)            ; $00 - LB Graphics RAM
3300   912E             
3301   912E             BR_912E:
3302   912E B5 00           LDI  A,$00                      ; 
3303   9130 FD AE 30 00     STA  #($3000)                   ; ***
3304   9134 68 3E           LDI  UH,$3E                     ; Why set U,X again after just set above?
3305   9136 6A 81           LDI  UL,$81                     ; U = $3E81
3306   9138 48 30           LDI  XH,$30                     ; X = $3000
3307   913A 4A 00           LDI  XL,$00                     ; 
3308   913C             
3309   913C             BR_913C:
3310   913C FD 0E           STA  #(X)                       ; Zeros out some RAM?? Graphics RAM mirrored at ME1 $3000?
3311   913E 44              INC  X                          ;
3312   913F 66              DEC  U                          ; 
3313   9140 6C 00           CPI  UH,$00                     ;
3314   9142 89 05           BZR  BR_9149                    ; UH <> $00
3315   9144 6E 00           CPI  UL,$00                     ; 
3316   9146 89 01           BZR  BR_9149                    ; UL <> $00
3317   9148 9A              RTN                             ; Done
3318   9149             
3319   9149             BR_9149:
3320   9149 9E 0F           BCH  BR_913C                    ; $913C
3321   914B             
3322   914B             BR_914B:
3323   914B E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3324   914C             ;% LB_CLR_GRPH_RAM END
3325   914C             ;------------------------------------------------------------------------------------------------------------
3326   914C             
3327   914C             
3328   914C             
3329   914C             ;------------------------------------------------------------------------------------------------------------
3330   914C             ; $914C DEC - 
3331   914C             ; Called from 
3332   914C             ; Arguments: 
3333   914C             ; Outputs: 
3334   914C             ; RegMod: 
3335   914C             ;------------------------------------------------------------------------------------------------------------
3336   914C             ;% LB_DEC START
3337   914C             DEC:
3338   914C BA 92 D6        JMP  JMP_92D6                   ; Jumps to an exit
3339   914F             ;% LB_END 
3340   914F             ;------------------------------------------------------------------------------------------------------------
3341   914F             
3342   914F             
3343   914F             
3344   914F             ;------------------------------------------------------------------------------------------------------------
3345   914F             ; $914F GVCURSOR, GVPRINT, COLORV, EDIT, REPROG, TESTV, ***DOES NOTHING!
3346   914F             ; GVPRINT prints your defined characters at a specific position on the screen.
3347   914F             ; GVPRINT &6A00,4,1 From address &6A00, 4 characters are written that were defined at &5010
3348   914F             ; Called from: 
3349   914F             ; Arguments: 
3350   914F             ; Outputs: 
3351   914F             ; RegMod: 
3352   914F             ;------------------------------------------------------------------------------------------------------------
3353   914F             ;% LB_GVCURSOR START
3354   914F             GVCURSOR:
3355   914F E2              VEJ  (E2)                       ; (E2) - Return to BASIC interpreter: Y-Reg points to command or line end
3356   9150             ;% LB_GVCURSOR END
3357   9150             ;------------------------------------------------------------------------------------------------------------
3358   9150             
3359   9150             
3360   9150             
3361   9150             ;------------------------------------------------------------------------------------------------------------
3362   9150             ; $9150 KEYRAM - 
3363   9150             ; Called from: XCHR_INPUT:$823B
3364   9150             ; Arguments: 
3365   9150             ; Outputs: 
3366   9150             ; RegMod: 
3367   9150             ;------------------------------------------------------------------------------------------------------------
3368   9150             ;% LB_KEYRAM START
3369   9150             KEYRAM:
3370   9150 A5 79 D6        LDA  ($79D6)                    ; *** unused section of PC-1500 used as flag for?
3371   9153 B7 55           CPI  A,$55                      ; *** another mystery bypass
3372   9155 89 02           BZR  BR_9159                    ; A <> $55
3373   9157 8E 1D           BCH  BR_9176                    ; $9176
3374   9159             
3375   9159             BR_9159:
3376   9159 B5 BE           LDI  A,$BE                      ; POKES 'SJP $E267' into CE-158 registers to use as jump vector in ME0
3377   915B                                                 ; $E267 - Entering a Character Using the Keyboard 
3378   915B AE 78 50        STA  (OUTSTAT_REG)              ; $7851 CE-158 OUTSTAT value (handshaking)
3379   915E B5 E2           LDI  A,$E2                      ; $E267 in WAIT4KB ($E243)
3380   9160 AE 78 51        STA  (CONSOLE_REG)              ; $7851 CE-158 OUTSTAT value (handshaking)
3381   9163 B5 67           LDI  A,$67                      ; 
3382   9165 AE 78 52        STA  (CONSOLE2)                 ; $7852 CE-158 Console 1 (//)
3383   9168             
3384   9168             BR_9168:
3385   9168 B5 9A           LDI  A,$9A                      ; POKEs 'RTN' in two addresses. 
3386   916A AE 78 53        STA  (CE158_UNDEF1)             ; $7853
3387   916D B5 9A           LDI  A,$9A                      ;
3388   916F AE 78 54        STA  (CE158_UNDEF2)             ; $7854
3389   9172 BE 78 50        SJP  (OUTSTAT_REG)              ; Calss the code just poked in
3390   9175 9A              RTN                             ; Done
3391   9176             
3392   9176             BR_9176:
3393   9176 B5 BE           LDI  A,$BE                      ; POKEs 'SJP something' 
3394   9178 AE 78 50        STA  (OUTSTAT_REG)              ; 
3395   917B A5 78 56        LDA  (ZONE_REG)                 ; $7856
3396   917E AE 78 51        STA  (CONSOLE_REG)              ; $7851
3397   9181 A5 78 57        LDA  (SETDEV_REG)               ; $7857
3398   9184 AE 78 52        STA  (CONSOLE2)                 ; $7852
3399   9187 9E 21           BCH  BR_9168                    ; $9168
3400   9189             ;% LB_KEYRAM END
3401   9189             ;------------------------------------------------------------------------------------------------------------
3402   9189             
3403   9189             
3404   9189             
3405   9189             ;------------------------------------------------------------------------------------------------------------
3406   9189             ; $9189 xxxx - Scroll screen?
3407   9189             ; Called from 
3408   9189             ; Arguments: 
3409   9189             ; Outputs: 
3410   9189             ; RegMod: 
3411   9189             ;------------------------------------------------------------------------------------------------------------
3412   9189             ;% LB_xxxx START
3413   9189             JMP_9189:
3414   9189 48 77           LDI  XH,HB(VIDEORAM + $77F)     ; $777F IWS Video RAM area
3415   918B 4A 7F           LDI  XL,LB(VIDEORAM + $77F)     ; 
3416   918D 58 77           LDI  YH,HB(VIDEORAM + $7CF)     ; $77CF IWS Video RAM area
3417   918F 5A CF           LDI  YL,LB(VIDEORAM + $7CF)     ; 
3418   9191 68 07           LDI  UH,$07                     ; Loop counter?
3419   9193 6A 80           LDI  UL,$80                     ; U == $0780
3420   9195             
3421   9195             BR_9195:
3422   9195 FD 05           LDA  #(X)                       ; Moves block of video RAM
3423   9197 FD 1E           STA  #(Y)                       ; 
3424   9199 46              DEC  X                          ; 
3425   919A 56              DEC  Y                          ; 
3426   919B 66              DEC  U                          ; 
3427   919C 6C 00           CPI  UH,$00                     ; 
3428   919E 89 05           BZR  BR_91A5                    ; $91A5
3429   91A0 6E 00           CPI  UL,$00                     ; 
3430   91A2 89 01           BZR  BR_91A5                    ; $91A5
3431   91A4 9A              RTN                             ; 
3432   91A5             
3433   91A5             BR_91A5:
3434   91A5 9E 12           BCH  BR_9195                    ; $9195
3435   91A7             ;% LB_xxxx END
3436   91A7             ;------------------------------------------------------------------------------------------------------------
3437   91A7             
3438   91A7             
3439   91A7             
3440   91A7             ;------------------------------------------------------------------------------------------------------------
3441   91A7             ; $91A7 PRINT - Sharp Syntax
3442   91A7             ; Called from 
3443   91A7             ; Arguments: 
3444   91A7             ; Outputs: 
3445   91A7             ; RegMod: 
3446   91A7             ;------------------------------------------------------------------------------------------------------------
3447   91A7             ;% LB_PRINT START
3448   91A7             PRINT:
3449   91A7 C2              VEJ  (C2) \ 
3449   91A8             
3450   91A8 23                  ACHR($23) \ ABRF(BR_91B1)   ; Checks for '#' $23 char. If not found branch.
3450   91A9 07          
3451   91AA C2              VEJ  (C2) \ 
3451   91AB             
3452   91AB 2D                  ACHR($2D) \ ABRF(BR_91BB)   ; Checks for '-' $2D char. If not found branch.
3452   91AC 0E          
3453   91AD C6              VEJ  (C6)                       ; (C6) Correct program pointer
3454   91AE BA E4 EE        JMP  BCMD_PRINT + $03           ; $E4EE 
3455   91B1             
3456   91B1             BR_91B1:
3457   91B1 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3458   91B2 D8              VEJ  (D8)                       ; (D8) Checks calculator mode
3459   91B3 89 03           BZR  BR_91B8                    ; Z <> $00 so program is not running
3460   91B5 BA E4 EB        JMP  BCMD_PRINT                 ; $E4EB
3461   91B8             
3462   91B8             BR_91B8:
3463   91B8 BA 8A 8B        JMP  JMP_8A8B                   ; Something to do with PRINT USING?
3464   91BB             
3465   91BB             BR_91BB:
3466   91BB C6              VEJ  (C6)                       ; (C6) Correct program pointer
3467   91BC DE              VEJ  (DE) \ ABRF(BR_91D2)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3467   91BD 14          
3468   91BE D0              VEJ  (D0) \ 
3468   91BF             
3469   91BF 80                  ABYT($80) \ ABRF(BR_91D2)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range check by D1, if exceeded branch
3469   91C0 11          
3470   91C1 F4              VEJ  (F4) \ AWRD(BR_8803)       ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3470   91C2 88 03       
3471   91C4 6C 44           CPI  UH,$44                     ; 
3472   91C6 89 07           BZR  BR_91CF                    ; $91CF
3473   91C8 6E 49           CPI  UL,$49                     ; 
3474   91CA 89 03           BZR  BR_91CF                    ; $91CF
3475   91CC BA 88 F7        JMP  $88F7                      ; ***bug? seems to jump to middle of line
3476   91CF             
3477   91CF             BR_91CF:
3478   91CF 68 1B           LDI  UH,$1B                     ; 
3479   91D1 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3480   91D2             
3481   91D2             BR_91D2:
3482   91D2 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3483   91D3             ;% LB_PRINT END
3484   91D3             ;------------------------------------------------------------------------------------------------------------
3485   91D3             
3486   91D3             
3487   91D3             
3488   91D3             ;------------------------------------------------------------------------------------------------------------
3489   91D3             ; $91D3 MODE - module box MB4, MB8, turns corresponding module on and off.
3490   91D3             ; Called from: 
3491   91D3             ; Arguments: (Param.),  (Param.) M1, M2, Mn
3492   91D3             ; Outputs: 
3493   91D3             ; RegMod: 
3494   91D3             ;------------------------------------------------------------------------------------------------------------
3495   91D3             ;% LB_MODE START
3496   91D3             MODE:
3497   91D3 FD E9 77 E0     ANI  #(VIDEORAM + $07E0),$00    ; $77E0
3497   91D7 00 
3498   91D8             
3499   91D8             BR_91D8:
3500   91D8 C2              VEJ  (C2) \ 
3500   91D9             
3501   91D9 4D                  ACHR($4D) \ ABRF(BR_9219)   ; Checks for $4D 'M' char. If found, a branch.
3501   91DA 3E          
3502   91DB BE 91 EF        SJP  (BR_91EF)                  ; $91EF
3503   91DE 15              LDA  (Y)                        ; 
3504   91DF B7 2C           CPI  A,$2C                      ; 
3505   91E1 89 03           BZR  BR_91E6                    ; A <> $2C
3506   91E3 54              INC  Y                          ; 
3507   91E4 9E 0E           BCH  BR_91D8                    ; $91D8
3508   91E6             
3509   91E6             BR_91E6:
3510   91E6 FD A5 77 E0     LDA  #(VIDEORAM + $07E0)        ; 
3511   91EA FD AE D8 00     STA  #($D800)                   ; ***IWS??
3512   91EE E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3513   91EF             
3514   91EF             
3515   91EF             ;  Embedded subroutine START
3516   91EF             BR_91EF:
3517   91EF DE              VEJ  (DE) \ ABRF(BR_9218)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X., if error branch
3517   91F0 27          
3518   91F1 D0              VEJ  (D0) \ 
3518   91F2             
3519   91F2 10                  ABYT($10) \ ABRF(BR_9218)   ; (D0) Convert AR-X to Integer & load in U-Reg. Area check by D1, if exceeded branch
3519   91F3 24          
3520   91F4 6C 01           CPI  UH,$01                     ; 
3521   91F6 81 03           BCR  BR_91FB                    ; UH < $01
3522   91F8 68 13           LDI  UH,$13                     ; 
3523   91FA E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3524   91FB             
3525   91FB             BR_91FB:
3526   91FB 6E 09           CPI  UL,$09                     ; 
3527   91FD 89 03           BZR  BR_9202                    ; UL <> $09
3528   91FF 68 13           LDI  UH,$13                     ; 
3529   9201 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3530   9202             
3531   9202             BR_9202: 
3532   9202 6E 00           CPI  UL,$00                     ; 
3533   9204 89 02           BZR  BR_9208                    ; UL <> $00
3534   9206 6A 09           LDI  UL,$09                     ; 
3535   9208             
3536   9208             BR_9208:
3537   9208 62              DEC  UL                         ; 
3538   9209 B5 00           LDI  A,$00                      ; 
3539   920B FB              SEC                             ; 
3540   920C             
3541   920C             BR_920C:
3542   920C DB              ROL                             ; 
3543   920D 88 03           LOP  UL,BR_920C                 ; $920C
3544   920F FD AB 77 E0     ORA  #(VIDEORAM + $07E0)        ; $77E0
3545   9213 FD AE 77 E0     STA  #(VIDEORAM + $07E0)        ; 
3546   9217 9A              RTN
3547   9218             
3548   9218             BR_9218:
3549   9218 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3550   9219             ; Embedded subroutine END
3551   9219             
3552   9219             
3553   9219             BR_9219:
3554   9219 56              DEC  Y                          ; 
3555   921A 15              LDA  (Y)                        ; 
3556   921B CD 04           VMJ  ($04) \ ABRF(BR_921F)      ; (04) Checks whether end of command sequence or end of line
3556   921D 01          
3557   921E E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3558   921F             
3559   921F             BR_921F:
3560   921F B7 22           CPI  A,$22                      ; 
3561   9221 89 02           BZR  BR_9225                    ; A <> $22
3562   9223 9E 4D           BCH  BR_91D8                    ; $91D8
3563   9225             
3564   9225             BR_9225:
3565   9225 C2              VEJ  (C2) \ 
3565   9226             
3566   9226 53                  ACHR($53) \ ABRF(BR_9232)   ; Checks for $53 char. If found, a branch.
3566   9227 0A          
3567   9228 DE              VEJ  (DE) \ ABRF($9233)         ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3567   9229 09          
3568   922A D0              VEJ  (D0) \ 
3568   922B             
3569   922B 08                  ABYT($08) \ ABRF(BR_9233)   ; (D0) Convert AR-X to Integer & load in U-Reg. Area check by D1, if exceeded branch
3569   922C 06          
3570   922D 24              LDA  UL                         ; 
3571   922E FD CC           ATP                             ; 
3572   9230 9E 5A           BCH  BR_91D8                    ; $91D8
3573   9232             
3574   9232             BR_9232:
3575   9232 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3576   9233             
3577   9233             BR_9233:
3578   9233 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3579   9234             ;% LB_MODE END
3580   9234             ;------------------------------------------------------------------------------------------------------------
3581   9234             
3582   9234             
3583   9234             
3584   9234             ;------------------------------------------------------------------------------------------------------------
3585   9234             ; $9234 SAVE - SAVE file, data
3586   9234             ; Called from: 
3587   9234             ; Arguments: C, CM, Q, QM
3588   9234             ; Outputs: 
3589   9234             ; RegMod: 
3590   9234             ;------------------------------------------------------------------------------------------------------------
3591   9234             ;% LB_SAVE START
3592   9234             SAVE:
3593   9234 15              LDA  (Y)                        ; A = (Y) ME0
3594   9235 54              INC  Y                          ; INC Y
3595   9236 CD 34           VMJ  ($34) \ ABYT($04) \        ; (34) Syntax check and multiple branching
3595   9238 04          
3595   9239             
3596   9239 43                  ABYT($43) \ ABRF(BR_9277) \ ; If A==$43 'C' branch to BR_9277
3596   923A 3C          
3596   923B             
3597   923B 46                  ABYT($46) \ ABRF(BR_9287) \ ; If A==$46 'F' branch to BR_9287
3597   923C 4A          
3597   923D             
3598   923D 51                  ABYT($51) \ ABRF(BR_9297) \ ; If A==$51 'Q' branch to BR_9297
3598   923E 58          
3598   923F             
3599   923F 44                  ABYT($44) \ ABRF(BR_929A) \ ; If A==$44 'D' branch to BR_929A
3599   9240 59          
3599   9241             
3600   9241 52                  ABYT($52) \ ABRF(BR_92B2)   ; If A==$52 'R' branch to BR_92B2
3600   9242 6F          
3601   9243 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3602   9244             ;% LB_SAVE END
3603   9244             ;------------------------------------------------------------------------------------------------------------
3604   9244             
3605   9244             
3606   9244             
3607   9244             ;------------------------------------------------------------------------------------------------------------
3608   9244             ; $9244 LOAD - Load file or data
3609   9244             ; Called from:
3610   9244             ; Arguments: C or CM, or Q or QM
3611   9244             ; Outputs: 
3612   9244             ; RegMod: 
3613   9244             ;------------------------------------------------------------------------------------------------------------
3614   9244             ;% LB_LOAD START
3615   9244             LOAD:
3616   9244 15               LDA  (Y)                       ; A = (Y) then INC Y
3617   9245 54               INC  Y                         ; INC Y
3618   9246 CD 34            VMJ  ($34) \ ABYT($04) \       ; (34) Syntax check and multiple branching
3618   9248 04          
3618   9249             
3619   9249 43                  ABYT($43) \ ABRF(BR_9254) \ ; If A==$43 'C' branch to BR_9254
3619   924A 09          
3619   924B             
3620   924B 46                  ABYT($46) \ ABRF(BR_9264) \ ; If A==$46 'F' branch to BR_9264
3620   924C 17          
3620   924D             
3621   924D 51                  ABYT($51) \ ABRF(BR_9274) \ ; If A==$51 'Q' branch to BR_9274 
3621   924E 25          
3621   924F             
3622   924F 44                  ABYT($44) \ ABRF(BR_92A6) \ ; If A==$44 'D' branch to BR_92A6
3622   9250 55          
3622   9251             
3623   9251 52                  ABYT($52) \ ABRF(BR_92BE)   ; If A==$52 'R' branch to BR_92BE
3623   9252 6B          
3624   9253 E4               VEJ  (E4)                      ; (E4) Output Error 1 and return to the editor
3625   9254             
3626   9254             BR_9254:
3627   9254 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX ***CMT_PNAME $B800 CMT Periph name
3627   9255 B8 02       
3628   9257 6C 43           CPI  UH,$43                     ; 
3629   9259 89 07           BZR  BR_9262                    ; UH <> $43 'C'
3630   925B 6E 4D           CPI  UL,$4D                     ; 
3631   925D 89 03           BZR  BR_9262                    ; UL <> $4D 'M'
3632   925F BA B8 F9        JMP  CLOAD_150                  ; $B8F9 
3633   9262             
3634   9262             BR_9262:
3635   9262 8E 72           BCH  JMP_92D6                   ; $92D6
3636   9264             
3637   9264             BR_9264:
3638   9264 F4              VEJ  (F4) \ AWRD($A805)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX *** PRINT_150 $A781
3638   9265 A8 05       
3639   9267 6C 4C           CPI  UH,$4C                     ;
3640   9269 89 07           BZR  BR_9272                    ; UH <> $4C L'
3641   926B 6E 32           CPI  UL,$32                     ;
3642   926D 89 03           BZR  BR_9272                    ; UL <> $32 '2'
3643   926F BA AD BB        JMP  GRAPH + $E8                ; $ADBB (CE150)
3644   9272             
3645   9272             BR_9272:
3646   9272 8E 62           BCH  JMP_92D6                   ; $92D6
3647   9274             
3648   9274             BR_9274:
3649   9274 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3650   9277             ;% LB_LOAD END
3651   9277             ;------------------------------------------------------------------------------------------------------------
3652   9277             
3653   9277             
3654   9277             
3655   9277             
3656   9277             ;------------------------------------------------------------------------------------------------------------
3657   9277             ; $9277 xxxx - 
3658   9277             ; Called from:
3659   9277             ; Arguments: 
3660   9277             ; Outputs: 
3661   9277             ; RegMod: 
3662   9277             ;------------------------------------------------------------------------------------------------------------
3663   9277             ;% LB_xxxx START
3664   9277             BR_9277:
3665   9277 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX ***CMT Perips name $B800
3665   9278 B8 02       
3666   927A 6C 43           CPI  UH,$43                     ; 
3667   927C 89 07           BZR  BR_9285                    ; If UH <> $43 'C'
3668   927E 6E 4D           CPI  UL,$4D                     ; 
3669   9280 89 03           BZR  BR_9285                    ; If UL <> $4D 'M'
3670   9282 BA B8 A6        JMP  CSAVE_150                  ; $B8A6
3671   9285             
3672   9285             BR_9285:
3673   9285 8E 4F           BCH  JMP_92D6                   ; $92D6
3674   9287             ;% LB_xxxx END
3675   9287             ;------------------------------------------------------------------------------------------------------------
3676   9287             
3677   9287             
3678   9287             
3679   9287             ;------------------------------------------------------------------------------------------------------------
3680   9287             ; $9287 xxxx - CE-150 related
3681   9287             ; Called from:
3682   9287             ; Arguments: 
3683   9287             ; Outputs: 
3684   9287             ; RegMod: 
3685   9287             ;------------------------------------------------------------------------------------------------------------
3686   9287             ;% LB_xxxx START
3687   9287             BR_9287:
3688   9287 F4              VEJ  (F4) \ AWRD($A805)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX *** PRINT_150 $A781
3688   9288 A8 05       
3689   928A 6C 4C           CPI  UH,$4C                     ; 
3690   928C 89 07           BZR  BR_9295                    ; If UH <> $4C 'L'
3691   928E 6E 32           CPI  UL,$32                     ;
3692   9290 89 03           BZR  BR_9295                    ; If UL <> $ '2'
3693   9292 BA AB 8F        JMP  PENUPDOWN + $AC            ; $AB8F CE150 
3694   9295             
3695   9295             BR_9295:
3696   9295 8E 3F           BCH  JMP_92D6                   ; $92D6
3697   9297             
3698   9297             BR_9297:
3699   9297 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3700   929A             ;% LB_xxxx END
3701   929A             ;------------------------------------------------------------------------------------------------------------
3702   929A             
3703   929A             
3704   929A             
3705   929A             ;------------------------------------------------------------------------------------------------------------
3706   929A             ; $929A xxxx - CE-150 related
3707   929A             ; Called from:
3708   929A             ; Arguments: 
3709   929A             ; Outputs: 
3710   929A             ; RegMod: 
3711   929A             ;------------------------------------------------------------------------------------------------------------
3712   929A             ;% LB_xxxx START
3713   929A             BR_929A:
3714   929A F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3714   929B A8 03       
3715   929D 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3716   929F 89 03           BZR  BR_92A4                    ; UH <> $44 'D'
3717   92A1 BA A8 F4        JMP  MOTDRV + $17               ; $A8F4 CE150 
3718   92A4             
3719   92A4             BR_92A4:
3720   92A4 8E 30           BCH  JMP_92D6                   ; $92D6
3721   92A6             ;% LB_xxxx END
3722   92A6             ;------------------------------------------------------------------------------------------------------------
3723   92A6             
3724   92A6             
3725   92A6             
3726   92A6             ;------------------------------------------------------------------------------------------------------------
3727   92A6             ; $92A6 xxxx - CE-150 related
3728   92A6             ; Called from:
3729   92A6             ; Arguments: 
3730   92A6             ; Outputs: 
3731   92A6             ; RegMod: 
3732   92A6             ;------------------------------------------------------------------------------------------------------------
3733   92A6             ;% LB_xxxx START
3734   92A6             BR_92A6:
3735   92A6 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3735   92A7 A8 03       
3736   92A9 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3737   92AB 89 03           BZR  BR_92B0                    ; If A <> $44 'D'
3738   92AD BA A8 F1        JMP PRINT_150 + $170            ; $A8F1 CE150
3739   92B0             
3740   92B0             BR_92B0:
3741   92B0 8E 24           BCH  JMP_92D6                   ; $92D6
3742   92B2             ;% LB_xxxx END
3743   92B2             ;------------------------------------------------------------------------------------------------------------
3744   92B2             
3745   92B2             
3746   92B2             
3747   92B2             ;------------------------------------------------------------------------------------------------------------
3748   92B2             ; $92B2 xxxx - CE-150 related
3749   92B2             ; Called from:
3750   92B2             ; Arguments: 
3751   92B2             ; Outputs: 
3752   92B2             ; RegMod: 
3753   92B2             ;------------------------------------------------------------------------------------------------------------
3754   92B2             ;% LB_xxxx START
3755   92B2             BR_92B2:
3756   92B2 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3756   92B3 A8 03       
3757   92B5 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3758   92B7 89 03           BZR  BR_92BC                    ; If A <> $44 'D'
3759   92B9 BA A8 EE        JMP  MOTDRV + $11               ; $A8EE CE150
3760   92BC             
3761   92BC             BR_92BC:
3762   92BC 8E 18           BCH  JMP_92D6                   ; $92D6
3763   92BE             ;% LB_xxxx END
3764   92BE             ;------------------------------------------------------------------------------------------------------------
3765   92BE             
3766   92BE             
3767   92BE             
3768   92BE             ;------------------------------------------------------------------------------------------------------------
3769   92BE             ; $92BE xxxx - CE-150 related
3770   92BE             ; Called from:
3771   92BE             ; Arguments: 
3772   92BE             ; Outputs: 
3773   92BE             ; RegMod: 
3774   92BE             ;------------------------------------------------------------------------------------------------------------
3775   92BE             ;% LB_xxxx START
3776   92BE             BR_92BE:
3777   92BE F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3777   92BF A8 03       
3778   92C1 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3779   92C3 89 03           BZR  BR_92C8                    ; If A <> $44 'D'
3780   92C5 BA A8 EB        JMP  MOTDRV + $0E               ; $A8EB CE150
3781   92C8             
3782   92C8             BR_92C8:
3783   92C8 8E 0C           BCH  JMP_92D6                   ; $92D6
3784   92CA F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3784   92CB A8 03       
3785   92CD 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3786   92CF 89 03           BZR  BR_92D4                    ; If A <> $44 'D'
3787   92D1 BA A8 E8        JMP  MOTDRV + $0B               ; $A8E8 CE150
3788   92D4             
3789   92D4             BR_92D4:
3790   92D4                 ;BCH  JMP_92D6 ; $92D6
3791   92D4 9E 00           .BYTE $9E,$00                   ; asessembler calcualtes  wrong direction on 0 lenght branch
3792   92D6             ;% LB_xxxx END
3793   92D6             ;------------------------------------------------------------------------------------------------------------
3794   92D6             
3795   92D6             
3796   92D6             
3797   92D6             ;------------------------------------------------------------------------------------------------------------
3798   92D6             ; $92BE xxxx - 
3799   92D6             ; Called from:
3800   92D6             ; Arguments: 
3801   92D6             ; Outputs: 
3802   92D6             ; RegMod: 
3803   92D6             ;------------------------------------------------------------------------------------------------------------
3804   92D6             ;% LB_xxxx START
3805   92D6             JMP_92D6:
3806   92D6 68 1B           LDI  UH,$1B                     ; 
3807   92D8 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3808   92D9             ;% LB_xxxx END
3809   92D9             ;------------------------------------------------------------------------------------------------------------
3810   92D9             
3811   92D9             
3812   92D9             
3813   92D9             ;------------------------------------------------------------------------------------------------------------
3814   92D9             ; $92D9 VERIFYQ - Compares cassette with memory
3815   92D9             ; Called from:
3816   92D9             ; Arguments: (expression)
3817   92D9             ; Outputs: 
3818   92D9             ; RegMod: 
3819   92D9             ;------------------------------------------------------------------------------------------------------------
3820   92D9             ;% LB_VERIFYQ START
3821   92D9             VERIFYQ:
3822   92D9 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3823   92DC             ;% LB_VERIFYQ END
3824   92DC             ;------------------------------------------------------------------------------------------------------------
3825   92DC             
3826   92DC             
3827   92DC             
3828   92DC             ;------------------------------------------------------------------------------------------------------------
3829   92DC             ; $92DC CHAIN - 
3830   92DC             ; Called from 
3831   92DC             ; Arguments: 
3832   92DC             ; Outputs: 
3833   92DC             ; RegMod: 
3834   92DC             ;------------------------------------------------------------------------------------------------------------
3835   92DC             ;% LB_CHAIN START
3836   92DC             CHAIN:
3837   92DC 55              LIN  Y                          ; A = (Y) then INC Y
3838   92DD CD 34           VMJ  ($34) \ ABYT($01) \        ; (34) Syntax check and multiple branching
3838   92DF 01          
3838   92E0             
3839   92E0 43                  ABYT($43) \ ABRF(BR_92F5) \ ; If A==$43 'C' branch to BR_92F5
3839   92E1 13          
3839   92E2             
3840   92E2 51                  ABYT($51) \ ABRF(BR_9305)   ; If A==$51 'Q' branch to BR_9305
3840   92E3 21          
3841   92E4 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3841   92E5 B8 02       
3842   92E7 6C 43           CPI  UH,$43                     ; 
3843   92E9 89 08           BZR  BR_92F3                    ; If UH <> $43
3844   92EB 6E 4D           CPI  UL,$4D                     ; 
3845   92ED 89 04           BZR  BR_92F3                    ; If UL <> $4D
3846   92EF 56              DEC  Y                          ; 
3847   92F0 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
3848   92F3             
3849   92F3             BR_92F3:
3850   92F3 9E 1F           BCH  JMP_92D6                   ; $92D6
3851   92F5             
3852   92F5             BR_92F5:
3853   92F5 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX ***CMT Periph name $B800
3853   92F6 B8 02       
3854   92F8 6C 43           CPI  UH,$43                     ;
3855   92FA 89 07           BZR  BR_9303                    ; If UH <> $43
3856   92FC 6E 4D           CPI  UL,$4D                     ;
3857   92FE 89 03           BZR  BR_9303                    ; If UH <> $4D
3858   9300 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
3859   9303             
3860   9303             BR_9303:
3861   9303 9E 2F           BCH  JMP_92D6                   ; $92D6
3862   9305             
3863   9305             BR_9305:
3864   9305 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3865   9308             ;% LB_CHAIN END
3866   9308             ;------------------------------------------------------------------------------------------------------------
3867   9308             
3868   9308             
3869   9308             
3870   9308             ;------------------------------------------------------------------------------------------------------------
3871   9308             ; KEY - Allows you to switch on a keyboard e.g. CE-153 or an optional large keyboard
3872   9308             ; KEY BEEP - Turn keep beep on or off
3873   9308             ; Usage: KEY ON(OFF) or KEY BEEP ON(OFF)
3874   9308             ; Called from:
3875   9308             ; Arguments: 
3876   9308             ; Outputs: 
3877   9308             ; RegMod: 
3878   9308             ;------------------------------------------------------------------------------------------------------------
3879   9308             ;% LB_KEY START
3880   9308             KEY:
3881   9308 C2              VEJ  (C2) \ 
3881   9309             
3882   9309 F1 82               AWRD($F182) \ ABRF(BR_9323) ; Checks for 'BEEP' token. If found, a branch.
3882   930B 17          
3883   930C C2              VEJ  (C2) \ 
3883   930D             
3884   930D F1 9C               AWRD($F19C) \ ABRF(BR_9317) ; Checks for 'ON' token. If found, a branch.
3884   930F 07          
3885   9310 B5 55           LDI  A,$55                      ; Set a mode flag?
3886   9312 FD AE 77 E2     STA  #(VIDEORAM + $07E2)        ; $77E2 
3887   9316 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3888   9317             
3889   9317             BR_9317:
3890   9317 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3891   9318 C2              VEJ  (C2) \ 
3891   9319             
3892   9319 F1 9E               AWRD($F19E) \ ABRF(BR_9322) ; Checks for 'OFF' token. If found, a branch.
3892   931B 06          
3893   931C FD E9 77 E2     ANI  #(VIDEORAM + $07E2),$00    ;
3893   9320 00 
3894   9321 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3895   9322             
3896   9322             BR_9322:
3897   9322 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3898   9323             
3899   9323             BR_9323:
3900   9323 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3901   9324 C2              VEJ  (C2) \ 
3901   9325             
3902   9325 F1 9C               AWRD($F19C) \ ABRF(BR_9339) ; Checks for 'ON' token. If found, a branch.
3902   9327 11          
3903   9328 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3903   9329 A8 03       
3904   932B 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3905   932D 89 07           BZR  BR_9336                    ; If UH <> $44 'D'
3906   932F 6E 49           CPI  UL,$49                     ;
3907   9331 89 03           BZR  BR_9336                    ; If UL <> $49 'I'
3908   9333 BA A8 FD        JMP  MOTDRV + $20               ; $A8FD
3909   9336             
3910   9336             BR_9336:
3911   9336 68 1B           LDI  UH,$1B                     ; 
3912   9338 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3913   9339             
3914   9339             BR_9339:
3915   9339 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3916   933A C2              VEJ  (C2) \ 
3916   933B             
3917   933B F1 9E               AWRD($F19E) \ ABRF(BR_934F) ; Checks for 'OFF' token. If found, a branch.
3917   933D 11          
3918   933E F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3918   933F A8 03       
3919   9341 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3920   9343 89 07           BZR  BR_934C                    ; If UH <> $44 'D'
3921   9345 6E 49           CPI  UL,$49                     ; 
3922   9347 89 03           BZR  BR_934C                    ; If UL <> $49 'I'
3923   9349 BA A8 FA        JMP  MOTDRV + $1D               ; $A8FA
3924   934C             
3925   934C             BR_934C: 
3926   934C 68 1B           LDI  UH,$1B                     ; 
3927   934E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3928   934F             
3929   934F             BR_934F:
3930   934F E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3931   9350 FD C8           PSH  A                          ; 
3932   9352 FD A5 77 F0     LDA  #(VIDEORAM + $07F0)        ; $77F0
3933   9356 B7 55           CPI  A,$55                      ; 
3934   9358 89 0E           BZR  BR_9368                    ; A <> $55
3935   935A FD A5 77 F1     LDA  #(VIDEORAM + $07F1)        ; 
3936   935E 08              STA  XH                         ; 
3937   935F FD A5 77 F2     LDA  #(VIDEORAM + $07F2)        ; 
3938   9363 0A              STA  XL                         ; 
3939   9364 FD 8A           POP  A                          ; 
3940   9366 FD 5E           STX  P                          ; Store X to Program Counter. a.k.a. JUMP
3941   9368             
3942   9368             BR_9368:
3943   9368 FD 8A           POP  A                          ; 
3944   936A BA C4 AF        JMP  TRCROUTINE                 ; $C4AF
3945   936D             ;% LB_KEY END
3946   936D             ;------------------------------------------------------------------------------------------------------------
3947   936D             
3948   936D             
3949   936D             
3950   936D             ;------------------------------------------------------------------------------------------------------------
3951   936D             ; $936D-$9394 - IWS Splash screen text
3952   936D             ;------------------------------------------------------------------------------------------------------------
3953   936D             ;% LB_IWS_SPLASH START
3954   936D             IWS_SPLASH:
3955   936D 54 45 4C 2E     .TEXT  "TEL. 071"
3955   9371 20 30 37 31 
3956   9375 36 31 2F 37     .TEXT  "61/79021"
3956   9379 39 30 32 31 
3957   937D 20 61 6E 72     .TEXT  " anrufen"
3957   9381 75 66 65 6E 
3958   9385 20 21 48 4F     .TEXT  " !HO V.1"
3958   9389 20 56 2E 31 
3959   938D 2E 30 20 38     .TEXT  ".0 859  "
3959   9391 35 39 20 20 
3960   9395             ;% LB_IWS_SPLASH END
3961   9395             ;------------------------------------------------------------------------------------------------------------
3962   9395             
3963   9395             
3964   9395             
3965   9395             ;------------------------------------------------------------------------------------------------------------
3966   9395             ; $9395 - $93FF Filler
3967   9395             ;------------------------------------------------------------------------------------------------------------
3968   9395             ;% LB_IWS_xxxx START
3969   9395             FILLER_9395: ;$9395
3970   9395 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3970   9399 00 00 00 00 
3971   939D 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3971   93A1 00 00 00 00 
3972   93A5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3972   93A9 00 00 00 00 
3973   93AD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3973   93B1 00 00 00 00 
3974   93B5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3974   93B9 00 00 00 00 
3975   93BD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3975   93C1 00 00 00 00 
3976   93C5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3976   93C9 00 00 00 00 
3977   93CD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3977   93D1 00 00 00 00 
3978   93D5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3978   93D9 00 00 00 00 
3979   93DD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3979   93E1 00 00 00 00 
3980   93E5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3980   93E9 00 00 00 00 
3981   93ED 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3981   93F1 00 00 00 00 
3982   93F5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3982   93F9 00 00 00 00 
3983   93FD 00 00 00        .BYTE  $00,$00,$00
3984   9400             ;% LB_IWS_xxxx END
3985   9400             ;------------------------------------------------------------------------------------------------------------
3986   9400             
3987   9400             
3988   9400             ;------------------------------------------------------------------------------------------------------------
3989   9400             ; $9400 TXTADDR_TBL - Not sure what it is used for
3990   9400             ; last character of name has bit 7 set. Use macro EOW to accomplish this.
3991   9400             ; $9400 - $9F80
3992   9400             ;------------------------------------------------------------------------------------------------------------
3993   9400             ;% LB_TXTADDR_TBL START
3994   9400             TXTADDR_TBL:
3995   9400             ;         NAME              BIT 7 SET      ADDRESS
3996   9400 56 4C 49 53     .TEXT "VLIS"         \  EOW('T')  \  .WORD $8000
3996   9404 D4          
3996   9405 80 00       
3997   9407 4F 50 4E 43     .TEXT "OPNCR"        \  EOW('T')  \  .WORD $0040
3997   940B 52 
3997   940C D4          
3997   940D 00 40       
3998   940F 54 45 53 54     .TEXT "TESTEN"       \  EOW('D')  \  .WORD $0004
3998   9413 45 4E 
3998   9415 C4          
3998   9416 00 04       
3999   9418 43 48 41 4E     .TEXT "CHANGETOKE"   \  EOW('N')  \  .WORD $001C
3999   941C 47 45 54 4F 
3999   9420 4B 45 
3999   9422 CE          
3999   9423 00 1C       
4000   9425 53 45 41 52     .TEXT "SEARCHENTE"   \  EOW('R')  \  .WORD $0020
4000   9429 43 48 45 4E 
4000   942D 54 45 
4000   942F D2          
4000   9430 00 20       
4001   9432 4D 41 4B 45     .TEXT "MAKEPARAME"   \  EOW('T')  \  .WORD $002E
4001   9436 50 41 52 41 
4001   943A 4D 45 
4001   943C D4          
4001   943D 00 2E       
4002   943F 4D 45 48 52     .TEXT "MEHRFACHVE"   \  EOW('R')  \  .WORD $0034
4002   9443 46 41 43 48 
4002   9447 56 45 
4002   9449 D2          
4002   944A 00 34       
4003   944C 4C 44 58 52     .TEXT "LDXRESERVE"   \  EOW('S')  \  .WORD $0038
4003   9450 45 53 45 52 
4003   9454 56 45 
4003   9456 D3          
4003   9457 00 38       
4004   9459 52 53 48 49     .TEXT "RSHIFT7BY"    \  EOW('T')  \  .WORD $0074
4004   945D 46 54 37 42 
4004   9461 59 
4004   9462 D4          
4004   9463 00 74       
4005   9465 4D 4F 56 45     .TEXT "MOVESTROUT"   \  EOW('P')  \  .WORD $0094
4005   9469 53 54 52 4F 
4005   946D 55 54 
4005   946F D0          
4005   9470 00 94       
4006   9472 44 49 53 50     .TEXT "DISPLAYTEX"   \  EOW('T')  \  .WORD $0092
4006   9476 4C 41 59 54 
4006   947A 45 58 
4006   947C D4          
4006   947D 00 92       
4007   947F 4D 41 4B 45     .TEXT "MAKEUSIN"     \  EOW('G')  \  .WORD $0096
4007   9483 55 53 49 4E 
4007   9487 C7          
4007   9488 00 96       
4008   948A 57 41 52 54     .TEXT "WARTEULAN"    \  EOW('G')  \  .WORD $00AC
4008   948E 45 55 4C 41 
4008   9492 4E 
4008   9493 C7          
4008   9494 00 AC       
4009   9496 4C 44 55 5A     .TEXT "LDUZEICHE"    \  EOW('N')  \  .WORD $00C0
4009   949A 45 49 43 48 
4009   949E 45 
4009   949F CE          
4009   94A0 00 C0       
4010   94A2 54 45 53 54     .TEXT "TESTTOKZE"    \  EOW('I')  \  .WORD $00C2
4010   94A6 54 4F 4B 5A 
4010   94AA 45 
4010   94AB C9          
4010   94AC 00 C2       
4011   94AE 54 45 53 54     .TEXT "TESTUTOKZ"    \  EOW('E')  \  .WORD $00C4
4011   94B2 55 54 4F 4B 
4011   94B6 5A 
4011   94B7 C5          
4011   94B8 00 C4       
4012   94BA 44 45 43 59     .TEXT "DECYTOKZE"    \  EOW('I')  \  .WORD $00C6
4012   94BE 54 4F 4B 5A 
4012   94C2 45 
4012   94C3 C9          
4012   94C4 00 C6       
4013   94C6 4E 4F 45 4E     .TEXT "NOENDTES"     \  EOW('T')  \  .WORD $00C8
4013   94CA 44 54 45 53 
4013   94CE D4          
4013   94CF 00 C8       
4014   94D1 4C 41 44 45     .TEXT "LADE78NN"     \  EOW('X')  \  .WORD $00CA
4014   94D5 37 38 4E 4E 
4014   94D9 D8          
4014   94DA 00 CA       
4015   94DC 4C 41 44 45     .TEXT "LADEXAUS7"    \  EOW('8')  \  .WORD $00CC
4015   94E0 58 41 55 53 
4015   94E4 37 
4015   94E5 B8          
4015   94E6 00 CC       
4016   94E8 41 52 49 54     .TEXT "ARITMETI"     \  EOW('K')  \  .WORD $00D0
4016   94EC 4D 45 54 49 
4016   94F0 CB          
4016   94F1 00 D0       
4017   94F3 54 45 53 54     .TEXT "TESTSTRNU"    \  EOW('M')  \  .WORD $00D2
4017   94F7 53 54 52 4E 
4017   94FB 55 
4017   94FC CD          
4017   94FD 00 D2       
4018   94FF 54 45 53 54     .TEXT "TESTBASICRU"  \  EOW('N')  \  .WORD $00D8
4018   9503 42 41 53 49 
4018   9507 43 52 55 
4018   950A CE          
4018   950B 00 D8       
4019   950D 53 54 52 49     .TEXT "STRINGINF"    \  EOW('O')  \  .WORD $00DC
4019   9511 4E 47 49 4E 
4019   9515 46 
4019   9516 CF          
4019   9517 00 DC       
4020   9519 41 55 53 44     .TEXT "AUSDRUC"      \  EOW('K')  \  .WORD $00DE
4020   951D 52 55 43 
4020   9520 CB          
4020   9521 00 DE       
4021   9523 45 52 52 4F     .TEXT "ERRO"         \  EOW('R')  \  .WORD $00E0
4021   9527 D2          
4021   9528 00 E0       
4022   952A 49 4E 54 45     .TEXT "INTERPRETE"   \  EOW('R')  \  .WORD $00E2
4022   952E 52 50 52 45 
4022   9532 54 45 
4022   9534 D2          
4022   9535 00 E2       
4023   9537 45 52 52 4F     .TEXT "ERROR"        \  EOW('1')  \  .WORD $00E4
4023   953B 52 
4023   953C B1          
4023   953D 00 E4       
4024   953F 43 4C 45 41     .TEXT "CLEARLC"      \  EOW('D')  \  .WORD $00F2
4024   9543 52 4C 43 
4024   9546 C4          
4024   9547 00 F2       
4025   9549 4C 41 44 45     .TEXT "LADEUAUSNNN"  \  EOW('N')  \  .WORD $00F4
4025   954D 55 41 55 53 
4025   9551 4E 4E 4E 
4025   9554 CE          
4025   9555 00 F4       
4026   9557 54 45 53 54     .TEXT "TESTKE"       \  EOW('Y')  \  .WORD $E42C
4026   955B 4B 45 
4026   955D D9          
4026   955E E4 2C       
4027   9560 53 54 4F 52     .TEXT "STORESTRIN"   \  EOW('G')  \  .WORD $DFB4
4027   9564 45 53 54 52 
4027   9568 49 4E 
4027   956A C7          
4027   956B DF B4       
4028   956D 53 54 4F 52     .TEXT "STOREINDST"   \  EOW('R')  \  .WORD $DFC5
4028   9571 45 49 4E 44 
4028   9575 53 54 
4028   9577 D2          
4028   9578 DF C5       
4029   957A 46 41 52 42     .TEXT "FARBRA"       \  EOW('M')  \  .WORD $6000
4029   957E 52 41 
4029   9580 CD          
4029   9581 60 00       
4030   9583 47 52 41 50     .TEXT "GRAPHIKRA"    \  EOW('M')  \  .WORD $3000
4030   9587 48 49 4B 52 
4030   958B 41 
4030   958C CD          
4030   958D 30 00       
4031   958F 56 49 44 45     .TEXT "VIDEORA"      \  EOW('M')  \  .WORD $7000
4031   9593 4F 52 41 
4031   9596 CD          
4031   9597 70 00       
4032   9599 56 49 44 45     .TEXT "VIDEOPROZE"   \  EOW('S')  \  .WORD $7800
4032   959D 4F 50 52 4F 
4032   95A1 5A 45 
4032   95A3 D3          
4032   95A4 78 00       
4033   95A6 42 41 53 49     .TEXT "BASICEND"     \  EOW('H')  \  .WORD $7867
4033   95AA 43 45 4E 44 
4033   95AE C8          
4033   95AF 78 67       
4034   95B1 42 41 53 49     .TEXT "BASICEND"     \  EOW('L')  \  .WORD $7868
4034   95B5 43 45 4E 44 
4034   95B9 CC          
4034   95BA 78 68       
4035   95BC 42 41 53 49     .TEXT "BASICANF"     \  EOW('H')  \  .WORD $7865
4035   95C0 43 41 4E 46 
4035   95C4 C8          
4035   95C5 78 65       
4036   95C7 42 41 53 49     .TEXT "BASICANF"     \  EOW('L')  \  .WORD $7866
4036   95CB 43 41 4E 46 
4036   95CF CC          
4036   95D0 78 66       
4037   95D2 53 54 41 54     .TEXT "STATUS"       \  EOW('H')  \  .WORD $764E
4037   95D6 55 53 
4037   95D8 C8          
4037   95D9 76 4E       
4038   95DB 53 54 41 54     .TEXT "STATUS"       \  EOW('L')  \  .WORD $764F
4038   95DF 55 53 
4038   95E1 CC          
4038   95E2 76 4F       
4039   95E4 49 4E 50 55     .TEXT "INPUTBUFFE"   \  EOW('R')  \  .WORD $7BB0
4039   95E8 54 42 55 46 
4039   95EC 46 45 
4039   95EE D2          
4039   95EF 7B B0       
4040   95F1 54 41 53 54     .TEXT "TASTUMLEI"    \  EOW('T')  \  .WORD $79D4
4040   95F5 55 4D 4C 45 
4040   95F9 49 
4040   95FA D4          
4040   95FB 79 D4       
4041   95FD 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('H')  \  .WORD $785B
4041   9601 55 4D 50 4F 
4041   9605 49 
4041   9606 C8          
4041   9607 78 5B       
4042   9609 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('L')  \  .WORD $785C
4042   960D 55 4D 50 4F 
4042   9611 49 
4042   9612 CC          
4042   9613 78 5C       
4043   9615 57 41 49 54     .TEXT "WAITY"        \  EOW('N')  \  .WORD $7871
4043   9619 59 
4043   961A CE          
4043   961B 78 71       
4044   961D 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('H')  \  .WORD $7872
4044   9621 43 4F 55 4E 
4044   9625 54 
4044   9626 C8          
4044   9627 78 72       
4045   9629 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('L')  \  .WORD $7873
4045   962D 43 4F 55 4E 
4045   9631 54 
4045   9632 CC          
4045   9633 78 73       
4046   9635 42 4C 49 4E     .TEXT "BLINKFLA"     \  EOW('G')  \  .WORD $787C
4046   9639 4B 46 4C 41 
4046   963D C7          
4046   963E 78 7C       
4047   9640 4F 55 54 50     .TEXT "OUTPBUFFP"    \  EOW('O')  \  .WORD $788F
4047   9644 42 55 46 46 
4047   9648 50 
4047   9649 CF          
4047   964A 78 8F       
4048   964C 53 54 52 49     .TEXT "STRIBUFFP"    \  EOW('O')  \  .WORD $7894
4048   9650 42 55 46 46 
4048   9654 50 
4048   9655 CF          
4048   9656 78 94       
4049   9658 55 53 49 4E     .TEXT "USINGFORMA"   \  EOW('T')  \  .WORD $7895
4049   965C 47 46 4F 52 
4049   9660 4D 41 
4049   9662 D4          
4049   9663 78 95       
4050   9665 55 53 49 4E     .TEXT "USINGLAEN"    \  EOW('G')  \  .WORD $7896
4050   9669 47 4C 41 45 
4050   966D 4E 
4050   966E C7          
4050   966F 78 96       
4051   9671 55 53 49 4E     .TEXT "USINGSTRIN"   \  EOW('G')  \  .WORD $7897
4051   9675 47 53 54 52 
4051   9679 49 4E 
4051   967B C7          
4051   967C 78 97       
4052   967E 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('H')  \  .WORD $78A6
4052   9682 43 48 41 44 
4052   9686 52 
4052   9687 C8          
4052   9688 78 A6       
4053   968A 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('L')  \  .WORD $78A7
4053   968E 43 48 41 44 
4053   9692 52 
4053   9693 CC          
4053   9694 78 A7       
4054   9696 4D 4F 44 55     .TEXT "MODULS"       \  EOW('W')  \  .WORD $D800
4054   969A 4C 53 
4054   969C D7          
4054   969D D8 00       
4055   969F 4D 4F 44 55     .TEXT "MODU"         \  EOW('L')  \  .WORD $77E0
4055   96A3 CC          
4055   96A4 77 E0       
4056   96A6 4B 45 59 42     .TEXT "KEYBEE"       \  EOW('P')  \  .WORD $77E2
4056   96AA 45 45 
4056   96AC D0          
4056   96AD 77 E2       
4057   96AF 4C 52 45 43     .TEXT "LREC"         \  EOW('L')  \  .WORD $77D1
4057   96B3 CC          
4057   96B4 77 D1       
4058   96B6 55 50           .TEXT "UP"           \  EOW('L')  \  .WORD $77D2
4058   96B8 CC          
4058   96B9 77 D2       
4059   96BB 49 4E           .TEXT "IN"           \  EOW('P')  \  .WORD $77D3
4059   96BD D0          
4059   96BE 77 D3       
4060   96C0 43 55 52        .TEXT "CUR"          \  EOW('H')  \  .WORD $77D4
4060   96C3 C8          
4060   96C4 77 D4       
4061   96C6 43 55 52        .TEXT "CUR"          \  EOW('L')  \  .WORD $77D5
4061   96C9 CC          
4061   96CA 77 D5       
4062   96CC 43 55 52 50     .TEXT "CURP"         \  EOW('1')  \  .WORD $77D6
4062   96D0 B1          
4062   96D1 77 D6       
4063   96D3 4D 4F 4D 45     .TEXT "MOMENTVCU"    \  EOW('R')  \  .WORD $774E
4063   96D7 4E 54 56 43 
4063   96DB 55 
4063   96DC D2          
4063   96DD 77 4E       
4064   96DF 4D 4F 4D 45     .TEXT "MOMENTHCU"    \  EOW('R')  \  .WORD $774F
4064   96E3 4E 54 48 43 
4064   96E7 55 
4064   96E8 D2          
4064   96E9 77 4F       
4065   96EB 4B 4F 4D        .TEXT "KOM"          \  EOW('P')  \  .WORD $77D7
4065   96EE D0          
4065   96EF 77 D7       
4066   96F1 49 4E 50        .TEXT "INP"          \  EOW('P')  \  .WORD $77D8
4066   96F4 D0          
4066   96F5 77 D8       
4067   96F7 56 41 52 49     .TEXT "VARIABL"      \  EOW('E')  \  .WORD $77D9
4067   96FB 41 42 4C 
4067   96FE C5          
4067   96FF 77 D9       
4068   9701 43 55 52 53     .TEXT "CURSORAR"     \  EOW('T')  \  .WORD $77DA
4068   9705 4F 52 41 52 
4068   9709 D4          
4068   970A 77 DA       
4069   970C 43 55 52 53     .TEXT "CURSORART"    \  EOW('L')  \  .WORD $77DB
4069   9710 4F 52 41 52 
4069   9714 54 
4069   9715 CC          
4069   9716 77 DB       
4070   9718 46 41 52 42     .TEXT "FARB"         \  EOW('E')  \  .WORD $77DC
4070   971C C5          
4070   971D 77 DC       
4071   971F 48 49 4E 54     .TEXT "HINTERG"      \  EOW('R')  \  .WORD $77DD
4071   9723 45 52 47 
4071   9726 D2          
4071   9727 77 DD       
4072   9729 5A 45 49 43     .TEXT "ZEICHFARB"    \  EOW('E')  \  .WORD $77DE
4072   972D 48 46 41 52 
4072   9731 42 
4072   9732 C5          
4072   9733 77 DE       
4073   9735 56 41 52        .TEXT "VAR"          \  EOW('2')  \  .WORD $77DF
4073   9738 B2          
4073   9739 77 DF       
4074   973B 55 53 52 54     .TEXT "USRT"         \  EOW('R')  \  .WORD $77F0
4074   973F D2          
4074   9740 77 F0       
4075   9742 55 53 52 54     .TEXT "USRTR"        \  EOW('1')  \  .WORD $77F1
4075   9746 52 
4075   9747 B1          
4075   9748 77 F1       
4076   974A 55 53 52 54     .TEXT "USRTR"        \  EOW('2')  \  .WORD $77F2
4076   974E 52 
4076   974F B2          
4076   9750 77 F2       
4077   9752 50 52 49 4E     .TEXT "PRINTFLA"     \  EOW('G')  \  .WORD $77F3
4077   9756 54 46 4C 41 
4077   975A C7          
4077   975B 77 F3       
4078   975D 49 4E 46 4F     .TEXT "INFOR"        \  EOW('M')  \  .WORD $77F4
4078   9761 52 
4078   9762 CD          
4078   9763 77 F4       
4079   9765 49 4E 50 46     .TEXT "INPFLA"       \  EOW('G')  \  .WORD $77E1
4079   9769 4C 41 
4079   976B C7          
4079   976C 77 E1       
4080   976E 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('1')  \  .WORD $F0DD
4080   9772 4E 30 
4080   9774 B1          
4080   9775 F0 DD       
4081   9777 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('2')  \  .WORD $F0DE
4081   977B 4E 30 
4081   977D B2          
4081   977E F0 DE       
4082   9780 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('3')  \  .WORD $F0DF
4082   9784 4E 30 
4082   9786 B3          
4082   9787 F0 DF       
4083   9789 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('4')  \  .WORD $F088
4083   978D 4E 30 
4083   978F B4          
4083   9790 F0 88       
4084   9792 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('5')  \  .WORD $F0EB
4084   9796 4E 30 
4084   9798 B5          
4084   9799 F0 EB       
4085   979B 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('6')  \  .WORD $F0B1
4085   979F 4E 30 
4085   97A1 B6          
4085   97A2 F0 B1       
4086   97A4 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('7')  \  .WORD $F084
4086   97A8 4E 30 
4086   97AA B7          
4086   97AB F0 84       
4087   97AD 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('8')  \  .WORD $F0E0
4087   97B1 4E 30 
4087   97B3 B8          
4087   97B4 F0 E0       
4088   97B6 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('9')  \  .WORD $F070
4088   97BA 4E 30 
4088   97BC B9          
4088   97BD F0 70       
4089   97BF 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('0')  \  .WORD $F0C7
4089   97C3 4E 31 
4089   97C5 B0          
4089   97C6 F0 C7       
4090   97C8 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('1')  \  .WORD $F053
4090   97CC 4E 31 
4090   97CE B1          
4090   97CF F0 53       
4091   97D1 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('2')  \  .WORD $F052
4091   97D5 4E 31 
4091   97D7 B2          
4091   97D8 F0 52       
4092   97DA 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('3')  \  .WORD $F0E1
4092   97DE 4E 31 
4092   97E0 B3          
4092   97E1 F0 E1       
4093   97E3 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('4')  \  .WORD $F0E8
4093   97E7 4E 31 
4093   97E9 B4          
4093   97EA F0 E8       
4094   97EC 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('5')  \  .WORD $F0E9
4094   97F0 4E 31 
4094   97F2 B5          
4094   97F3 F0 E9       
4095   97F5 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('6')  \  .WORD $F054
4095   97F9 4E 31 
4095   97FB B6          
4095   97FC F0 54       
4096   97FE 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('7')  \  .WORD $F055
4096   9802 4E 31 
4096   9804 B7          
4096   9805 F0 55       
4097   9807 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('8')  \  .WORD $F071
4097   980B 4E 31 
4097   980D B8          
4097   980E F0 71       
4098   9810 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('9')  \  .WORD $F091
4098   9814 4E 31 
4098   9816 B9          
4098   9817 F0 91       
4099   9819 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('0')  \  .WORD $F0E2
4099   981D 4E 32 
4099   981F B0          
4099   9820 F0 E2       
4100   9822 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('1')  \  .WORD $F0B2
4100   9826 4E 32 
4100   9828 B1          
4100   9829 F0 B2       
4101   982B 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('2')  \  .WORD $F090
4101   982F 4E 32 
4101   9831 B2          
4101   9832 F0 90       
4102   9834 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('3')  \  .WORD $F080
4102   9838 4E 32 
4102   983A B3          
4102   983B F0 80       
4103   983D 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('4')  \  .WORD $F0E4
4103   9841 4E 32 
4103   9843 B4          
4103   9844 F0 E4       
4104   9846 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('5')  \  .WORD $F097
4104   984A 4E 32 
4104   984C B5          
4104   984D F0 97       
4105   984F 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('6')  \  .WORD $F0C3
4105   9853 4E 32 
4105   9855 B6          
4105   9856 F0 C3       
4106   9858 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('7')  \  .WORD $F0C5
4106   985C 4E 32 
4106   985E B7          
4106   985F F0 C5       
4107   9861 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('8')  \  .WORD $F081
4107   9865 4E 32 
4107   9867 B8          
4107   9868 F0 81       
4108   986A 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('9')  \  .WORD $F0E7
4108   986E 4E 32 
4108   9870 B9          
4108   9871 F0 E7       
4109   9873 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('0')  \  .WORD $F0EA
4109   9877 4E 33 
4109   9879 B0          
4109   987A F0 EA       
4110   987C 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('1')  \  .WORD $F056
4110   9880 4E 33 
4110   9882 B1          
4110   9883 F0 56       
4111   9885 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('2')  \  .WORD $F050
4111   9889 4E 33 
4111   988B B2          
4111   988C F0 50       
4112   988E 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('3')  \  .WORD $F083
4112   9892 4E 33 
4112   9894 B3          
4112   9895 F0 83       
4113   9897 54              .TEXT "T"            \  EOW('B')  \  .WORD $8055
4113   9898 C2          
4113   9899 80 55       
4114   989B 54              .TEXT "T"            \  EOW('C')  \  .WORD $8060
4114   989C C3          
4114   989D 80 60       
4115   989F 54              .TEXT "T"            \  EOW('D')  \  .WORD $8094
4115   98A0 C4          
4115   98A1 80 94       
4116   98A3 54              .TEXT "T"            \  EOW('E')  \  .WORD $80A4
4116   98A4 C5          
4116   98A5 80 A4       
4117   98A7 54              .TEXT "T"            \  EOW('G')  \  .WORD $80BD
4117   98A8 C7          
4117   98A9 80 BD       
4118   98AB 54              .TEXT "T"            \  EOW('H')  \  .WORD $80DF
4118   98AC C8          
4118   98AD 80 DF       
4119   98AF 54              .TEXT "T"            \  EOW('I')  \  .WORD $8101
4119   98B0 C9          
4119   98B1 81 01       
4120   98B3 54              .TEXT "T"            \  EOW('K')  \  .WORD $810B
4120   98B4 CB          
4120   98B5 81 0B       
4121   98B7 54              .TEXT "T"            \  EOW('L')  \  .WORD $8113
4121   98B8 CC          
4121   98B9 81 13       
4122   98BB 54              .TEXT "T"            \  EOW('M')  \  .WORD $8125
4122   98BC CD          
4122   98BD 81 25       
4123   98BF 54              .TEXT "T"            \  EOW('P')  \  .WORD $813A
4123   98C0 D0          
4123   98C1 81 3A       
4124   98C3 54              .TEXT "T"            \  EOW('R')  \  .WORD $8144
4124   98C4 D2          
4124   98C5 81 44       
4125   98C7 54              .TEXT "T"            \  EOW('S')  \  .WORD $815A
4125   98C8 D3          
4125   98C9 81 5A       
4126   98CB 54              .TEXT "T"            \  EOW('T')  \  .WORD $816D
4126   98CC D4          
4126   98CD 81 6D       
4127   98CF 54              .TEXT "T"            \  EOW('V')  \  .WORD $8177
4127   98D0 D6          
4127   98D1 81 77       
4128   98D3 41 4E 46 41     .TEXT "ANFAN"        \  EOW('G')  \  .WORD $819E
4128   98D7 4E 
4128   98D8 C7          
4128   98D9 81 9E       
4129   98DB 41 4E 46        .TEXT "ANF"          \  EOW('1')  \  .WORD $81F4
4129   98DE B1          
4129   98DF 81 F4       
4130   98E1 4B 45           .TEXT "KE"           \  EOW('Y')  \  .WORD $822F
4130   98E3 D9          
4130   98E4 82 2F       
4131   98E6 4D 4F 44 45     .TEXT "MODE"         \  EOW('T')  \  .WORD $836B
4131   98EA D4          
4131   98EB 83 6B       
4132   98ED 41 4C 54 45     .TEXT "ALTE"         \  EOW('R')  \  .WORD $8381
4132   98F1 D2          
4132   98F2 83 81       
4133   98F4 42 41 53 49     .TEXT "BASI"         \  EOW('C')  \  .WORD $83BB
4133   98F8 C3          
4133   98F9 83 BB       
4134   98FB 4E 45 58 54     .TEXT "NEXT"         \  EOW('L')  \  .WORD $83C6
4134   98FF CC          
4134   9900 83 C6       
4135   9902 4E 45 58 54     .TEXT "NEXT"         \  EOW('0')  \  .WORD $83F0
4135   9906 B0          
4135   9907 83 F0       
4136   9909 4E 45 58 54     .TEXT "NEXT"         \  EOW('E')  \  .WORD $8417
4136   990D C5          
4136   990E 84 17       
4137   9910 45 4E 54 45     .TEXT "ENTE"         \  EOW('R')  \  .WORD $8419
4137   9914 D2          
4137   9915 84 19       
4138   9917 4E 45 58 54     .TEXT "NEXT"         \  EOW('C')  \  .WORD $841F
4138   991B C3          
4138   991C 84 1F       
4139   991E 4E 45 58 54     .TEXT "NEXT"         \  EOW('D')  \  .WORD $842D
4139   9922 C4          
4139   9923 84 2D       
4140   9925 4E 45 58 54     .TEXT "NEXT"         \  EOW('2')  \  .WORD $843B
4140   9929 B2          
4140   992A 84 3B       
4141   992C 4D 4F 44 55     .TEXT "MODU"         \  EOW('S')  \  .WORD $8456
4141   9930 D3          
4141   9931 84 56       
4142   9933 4D 4F 44        .TEXT "MOD"          \  EOW('1')  \  .WORD $8466
4142   9936 B1          
4142   9937 84 66       
4143   9939 52 50 4D 4F     .TEXT "RPMOD"        \  EOW('E')  \  .WORD $84BB
4143   993D 44 
4143   993E C5          
4143   993F 84 BB       
4144   9941 4D 4F 44        .TEXT "MOD"          \  EOW('C')  \  .WORD $84C5
4144   9944 C3          
4144   9945 84 C5       
4145   9947 4D 4F 44 45     .TEXT "MODEN"        \  EOW('D')  \  .WORD $84D4
4145   994B 4E 
4145   994C C4          
4145   994D 84 D4       
4146   994F 53 43 52 4F     .TEXT "SCROL"        \  EOW('L')  \  .WORD $84D7
4146   9953 4C 
4146   9954 CC          
4146   9955 84 D7       
4147   9957 53 43 52        .TEXT "SCR"          \  EOW('1')  \  .WORD $84E6
4147   995A B1          
4147   995B 84 E6       
4148   995D 53 43 52        .TEXT "SCR"          \  EOW('2')  \  .WORD $84FD
4148   9960 B2          
4148   9961 84 FD       
4149   9963 53 43 52 4F     .TEXT "SCROL"        \  EOW('1')  \  .WORD $8501
4149   9967 4C 
4149   9968 B1          
4149   9969 85 01       
4150   996B 53 43 52 4F     .TEXT "SCRO"         \  EOW('2')  \  .WORD $8511
4150   996F B2          
4150   9970 85 11       
4151   9972 53 43 52 45     .TEXT "SCREN"        \  EOW('D')  \  .WORD $8524
4151   9976 4E 
4151   9977 C4          
4151   9978 85 24       
4152   997A 44 45 43 4F     .TEXT "DECOD"        \  EOW('E')  \  .WORD $852C
4152   997E 44 
4152   997F C5          
4152   9980 85 2C       
4153   9982 44 45 43 4F     .TEXT "DECOD"        \  EOW('1')  \  .WORD $8535
4153   9986 44 
4153   9987 B1          
4153   9988 85 35       
4154   998A 44 45 43 4F     .TEXT "DECOD1"       \  EOW('A')  \  .WORD $8556
4154   998E 44 31 
4154   9990 C1          
4154   9991 85 56       
4155   9993 44 45 43 4F     .TEXT "DECOD"        \  EOW('2')  \  .WORD $8576
4155   9997 44 
4155   9998 B2          
4155   9999 85 76       
4156   999B 44 45 43 4F     .TEXT "DECOD"        \  EOW('3')  \  .WORD $857A
4156   999F 44 
4156   99A0 B3          
4156   99A1 85 7A       
4157   99A3 44 43 44        .TEXT "DCD"          \  EOW('3')  \  .WORD $8595
4157   99A6 B3          
4157   99A7 85 95       
4158   99A9 54 52 55 4E     .TEXT "TRUN"         \  EOW('K')  \  .WORD $85B6
4158   99AD CB          
4158   99AE 85 B6       
4159   99B0 4E 4F 43 4F     .TEXT "NOCOD"        \  EOW('E')  \  .WORD $85BB
4159   99B4 44 
4159   99B5 C5          
4159   99B6 85 BB       
4160   99B8 4E 43           .TEXT "NC"           \  EOW('D')  \  .WORD $85F0
4160   99BA C4          
4160   99BB 85 F0       
4161   99BD 54 52 45 4E     .TEXT "TREN"         \  EOW('N')  \  .WORD $8604
4161   99C1 CE          
4161   99C2 86 04       
4162   99C4 54 52 45 4E     .TEXT "TRENRE"       \  EOW('T')  \  .WORD $860D
4162   99C8 52 45 
4162   99CA D4          
4162   99CB 86 0D       
4163   99CD 54 52 45 4E     .TEXT "TREN"         \  EOW('E')  \  .WORD $8643
4163   99D1 C5          
4163   99D2 86 43       
4164   99D4 54 52 45 4E     .TEXT "TREN"         \  EOW('1')  \  .WORD $8646
4164   99D8 B1          
4164   99D9 86 46       
4165   99DB 54 52 55 4E     .TEXT "TRUN"         \  EOW('C')  \  .WORD $8656
4165   99DF C3          
4165   99E0 86 56       
4166   99E2 43 55 52 53     .TEXT "CURSO"        \  EOW('R')  \  .WORD $8663
4166   99E6 4F 
4166   99E7 D2          
4166   99E8 86 63       
4167   99EA 54 4F           .TEXT "TO"           \  EOW('F')  \  .WORD $86E4
4167   99EC C6          
4167   99ED 86 E4       
4168   99EF 45 4F           .TEXT "EO"           \  EOW('F')  \  .WORD $86FA
4168   99F1 C6          
4168   99F2 86 FA       
4169   99F4 4F 42           .TEXT "OB"           \  EOW('F')  \  .WORD $8721
4169   99F6 C6          
4169   99F7 87 21       
4170   99F9 4F 55 42 46     .TEXT "OUBF"         \  EOW('1')  \  .WORD $8752
4170   99FD B1          
4170   99FE 87 52       
4171   9A00 4F 55 42 46     .TEXT "OUBF"         \  EOW('0')  \  .WORD $878B
4171   9A04 B0          
4171   9A05 87 8B       
4172   9A07 4F 55 42 46     .TEXT "OUBF"         \  EOW('2')  \  .WORD $8799
4172   9A0B B2          
4172   9A0C 87 99       
4173   9A0E 4F 55 42 46     .TEXT "OUBF"         \  EOW('3')  \  .WORD $879D
4173   9A12 B3          
4173   9A13 87 9D       
4174   9A15 4F 55 42 46     .TEXT "OUBF"         \  EOW('4')  \  .WORD $87A5
4174   9A19 B4          
4174   9A1A 87 A5       
4175   9A1C 4F 42 46        .TEXT "OBF"          \  EOW('5')  \  .WORD $87BB
4175   9A1F B5          
4175   9A20 87 BB       
4176   9A22 53 54 45        .TEXT "STE"          \  EOW('P')  \  .WORD $87CC
4176   9A25 D0          
4176   9A26 87 CC       
4177   9A28 4C 45 4E 47     .TEXT "LENGT"        \  EOW('H')  \  .WORD $87D4
4177   9A2C 54 
4177   9A2D C8          
4177   9A2E 87 D4       
4178   9A30 4F 56 45 52     .TEXT "OVERF"        \  EOW('L')  \  .WORD $87E7
4178   9A34 46 
4178   9A35 CC          
4178   9A36 87 E7       
4179   9A38 4F 56 46 4C     .TEXT "OVFL"         \  EOW('0')  \  .WORD $87FD
4179   9A3C B0          
4179   9A3D 87 FD       
4180   9A3F 4F 56 46        .TEXT "OVF"          \  EOW('0')  \  .WORD $882D
4180   9A42 B0          
4180   9A43 88 2D       
4181   9A45 4F 56 46        .TEXT "OVF"          \  EOW('1')  \  .WORD $8839
4181   9A48 B1          
4181   9A49 88 39       
4182   9A4B 4F 56 46        .TEXT "OVF"          \  EOW('2')  \  .WORD $883D
4182   9A4E B2          
4182   9A4F 88 3D       
4183   9A51 4F 55 54 53     .TEXT "OUTSC"        \  EOW('R')  \  .WORD $8854
4183   9A55 43 
4183   9A56 D2          
4183   9A57 88 54       
4184   9A59 4F 55 54 53     .TEXT "OUTSC"        \  EOW('1')  \  .WORD $885D
4184   9A5D 43 
4184   9A5E B1          
4184   9A5F 88 5D       
4185   9A61 4F 55 54 53     .TEXT "OUTSC"        \  EOW('2')  \  .WORD $8865
4185   9A65 43 
4185   9A66 B2          
4185   9A67 88 65       
4186   9A69 4F 55 54 53     .TEXT "OUTSC"        \  EOW('E')  \  .WORD $88AE
4186   9A6D 43 
4186   9A6E C5          
4186   9A6F 88 AE       
4187   9A71 44 43 55        .TEXT "DCU"          \  EOW('V')  \  .WORD $88B5
4187   9A74 D6          
4187   9A75 88 B5       
4188   9A77 4F 42 54 55     .TEXT "OBTUP"        \  EOW('L')  \  .WORD $88BF
4188   9A7B 50 
4188   9A7C CC          
4188   9A7D 88 BF       
4189   9A7F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('0')  \  .WORD $88CC
4189   9A83 50 
4189   9A84 B0          
4189   9A85 88 CC       
4190   9A87 4F 42 54 55     .TEXT "OBTUP"        \  EOW('1')  \  .WORD $88DA
4190   9A8B 50 
4190   9A8C B1          
4190   9A8D 88 DA       
4191   9A8F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('E')  \  .WORD $88E5
4191   9A93 50 
4191   9A94 C5          
4191   9A95 88 E5       
4192   9A97 55 4F           .TEXT "UO"           \  EOW('V')  \  .WORD $88EB
4192   9A99 D6          
4192   9A9A 88 EB       
4193   9A9C 52 50 4C 41     .TEXT "RPLAN"        \  EOW('E')  \  .WORD $88FD
4193   9AA0 4E 
4193   9AA1 C5          
4193   9AA2 88 FD       
4194   9AA4 52 45 53 4D     .TEXT "RESMO"        \  EOW('D')  \  .WORD $8929
4194   9AA8 4F 
4194   9AA9 C4          
4194   9AAA 89 29       
4195   9AAC 52 53 4D        .TEXT "RSM"          \  EOW('0')  \  .WORD $8940
4195   9AAF B0          
4195   9AB0 89 40       
4196   9AB2 52 53 4D        .TEXT "RSM"          \  EOW('1')  \  .WORD $894E
4196   9AB5 B1          
4196   9AB6 89 4E       
4197   9AB8 43 55 52 4F     .TEXT "CUROF"        \  EOW('F')  \  .WORD $8963
4197   9ABC 46 
4197   9ABD C6          
4197   9ABE 89 63       
4198   9AC0 56 43 4C        .TEXT "VCL"          \  EOW('S')  \  .WORD $8974
4198   9AC3 D3          
4198   9AC4 89 74       
4199   9AC6 48 45           .TEXT "HE"           \  EOW('X')  \  .WORD $8981
4199   9AC8 D8          
4199   9AC9 89 81       
4200   9ACB 56 48           .TEXT "VH"           \  EOW('1')  \  .WORD $898F
4200   9ACD B1          
4200   9ACE 89 8F       
4201   9AD0 56 48 41 53     .TEXT "VHAS"         \  EOW('C')  \  .WORD $89A1
4201   9AD4 C3          
4201   9AD5 89 A1       
4202   9AD7 56 48 41 53     .TEXT "VHAS"         \  EOW('1')  \  .WORD $89A9
4202   9ADB B1          
4202   9ADC 89 A9       
4203   9ADE 56 48 41 53     .TEXT "VHAS"         \  EOW('2')  \  .WORD $89B3
4203   9AE2 B2          
4203   9AE3 89 B3       
4204   9AE5 43 4F 4E 53     .TEXT "CONSOL"       \  EOW('E')  \  .WORD $89B5
4204   9AE9 4F 4C 
4204   9AEB C5          
4204   9AEC 89 B5       
4205   9AEE 56 53 49 5A     .TEXT "VSIZ"         \  EOW('1')  \  .WORD $8A27
4205   9AF2 B1          
4205   9AF3 8A 27       
4206   9AF5 44 49           .TEXT "DI"           \  EOW('P')  \  .WORD $8A38
4206   9AF7 D0          
4206   9AF8 8A 38       
4207   9AFA 56 53 49 5A     .TEXT "VSIZ"         \  EOW('F')  \  .WORD $8A46
4207   9AFE C6          
4207   9AFF 8A 46       
4208   9B01 56 53 49 5A     .TEXT "VSIZF"        \  EOW('A')  \  .WORD $8A48
4208   9B05 46 
4208   9B06 C1          
4208   9B07 8A 48       
4209   9B09 56 43 55 52     .TEXT "VCUR"         \  EOW('S')  \  .WORD $8A49
4209   9B0D D3          
4209   9B0E 8A 49       
4210   9B10 43 55 52 53     .TEXT "CURS1"        \  EOW('W')  \  .WORD $8A75
4210   9B14 31 
4210   9B15 D7          
4210   9B16 8A 75       
4211   9B18 43 55 52 53     .TEXT "CURS2"        \  EOW('W')  \  .WORD $8A7E
4211   9B1C 32 
4211   9B1D D7          
4211   9B1E 8A 7E       
4212   9B20 45 52 52 43     .TEXT "ERRCU"        \  EOW('R')  \  .WORD $8A88
4212   9B24 55 
4212   9B25 D2          
4212   9B26 8A 88       
4213   9B28 45 52 52 43     .TEXT "ERRCURSO"     \  EOW('R')  \  .WORD $8A8A
4213   9B2C 55 52 53 4F 
4213   9B30 D2          
4213   9B31 8A 8A       
4214   9B33 56 50 52 49     .TEXT "VPRIN"        \  EOW('T')  \  .WORD $8A8B
4214   9B37 4E 
4214   9B38 D4          
4214   9B39 8A 8B       
4215   9B3B 43 4C 4F        .TEXT "CLO"          \  EOW('B')  \  .WORD $8AA3
4215   9B3E C2          
4215   9B3F 8A A3       
4216   9B41 56 50 41        .TEXT "VPA"          \  EOW('N')  \  .WORD $8AA6
4216   9B44 CE          
4216   9B45 8A A6       
4217   9B47 56 50 41 4E     .TEXT "VPAN"         \  EOW('0')  \  .WORD $8AB6
4217   9B4B B0          
4217   9B4C 8A B6       
4218   9B4E 56 50 52        .TEXT "VPR"          \  EOW('0')  \  .WORD $8ABB
4218   9B51 B0          
4218   9B52 8A BB       
4219   9B54 50 52 46        .TEXT "PRF"          \  EOW('0')  \  .WORD $8AC5
4219   9B57 B0          
4219   9B58 8A C5       
4220   9B5A 56 50 52        .TEXT "VPR"          \  EOW('1')  \  .WORD $8AC8
4220   9B5D B1          
4220   9B5E 8A C8       
4221   9B60 55 53 49 4E     .TEXT "USIN"         \  EOW('G')  \  .WORD $8AF7
4221   9B64 C7          
4221   9B65 8A F7       
4222   9B67 55 53           .TEXT "US"           \  EOW('1')  \  .WORD $8B02
4222   9B69 B1          
4222   9B6A 8B 02       
4223   9B6C 55 53           .TEXT "US"           \  EOW('2')  \  .WORD $8B0C
4223   9B6E B2          
4223   9B6F 8B 0C       
4224   9B71 50 52 41 53     .TEXT "PRAS"         \  EOW('C')  \  .WORD $8B27
4224   9B75 C3          
4224   9B76 8B 27       
4225   9B78 50 52 53 43     .TEXT "PRSC"         \  EOW('0')  \  .WORD $8B31
4225   9B7C B0          
4225   9B7D 8B 31       
4226   9B7F 50 52 53 43     .TEXT "PRSC"         \  EOW('1')  \  .WORD $8B52
4226   9B83 B1          
4226   9B84 8B 52       
4227   9B86 50 52 53 43     .TEXT "PRSC"         \  EOW('2')  \  .WORD $8B62
4227   9B8A B2          
4227   9B8B 8B 62       
4228   9B8D 50 52 53 43     .TEXT "PRSC"         \  EOW('3')  \  .WORD $8B69
4228   9B91 B3          
4228   9B92 8B 69       
4229   9B94 56 50 52        .TEXT "VPR"          \  EOW('2')  \  .WORD $8B91
4229   9B97 B2          
4229   9B98 8B 91       
4230   9B9A 4F 55 54 42     .TEXT "OUTBU"        \  EOW('F')  \  .WORD $8B9E
4230   9B9E 55 
4230   9B9F C6          
4230   9BA0 8B 9E       
4231   9BA2 4F 42 46        .TEXT "OBF"          \  EOW('0')  \  .WORD $8BC0
4231   9BA5 B0          
4231   9BA6 8B C0       
4232   9BA8 4F 42 46        .TEXT "OBF"          \  EOW('1')  \  .WORD $8BFC
4232   9BAB B1          
4232   9BAC 8B FC       
4233   9BAE 50 52 54 45     .TEXT "PRTEN"        \  EOW('D')  \  .WORD $8C17
4233   9BB2 4E 
4233   9BB3 C4          
4233   9BB4 8C 17       
4234   9BB6 50 52 46 45     .TEXT "PRFEH"        \  EOW('L')  \  .WORD $8C38
4234   9BBA 48 
4234   9BBB CC          
4234   9BBC 8C 38       
4235   9BBE 57 41 49        .TEXT "WAI"          \  EOW('T')  \  .WORD $8C3F
4235   9BC1 D4          
4235   9BC2 8C 3F       
4236   9BC4 4E 4F 56        .TEXT "NOV"          \  EOW('C')  \  .WORD $8C4A
4236   9BC7 C3          
4236   9BC8 8C 4A       
4237   9BCA 4B 4F 4D        .TEXT "KOM"          \  EOW('L')  \  .WORD $8C57
4237   9BCD CC          
4237   9BCE 8C 57       
4238   9BD0 4B 4F 4D 4C     .TEXT "KOML"         \  EOW('1')  \  .WORD $8C72
4238   9BD4 B1          
4238   9BD5 8C 72       
4239   9BD7 49 4E 50 55     .TEXT "INPU"         \  EOW('T')  \  .WORD $8C89
4239   9BDB D4          
4239   9BDC 8C 89       
4240   9BDE 58 49 4E 50     .TEXT "XINP"         \  EOW('1')  \  .WORD $8C8F
4240   9BE2 B1          
4240   9BE3 8C 8F       
4241   9BE5 58 49 4E 50     .TEXT "XINP"         \  EOW('3')  \  .WORD $8CC7
4241   9BE9 B3          
4241   9BEA 8C C7       
4242   9BEC 58 49 4E 50     .TEXT "XINP"         \  EOW('6')  \  .WORD $8CCA
4242   9BF0 B6          
4242   9BF1 8C CA       
4243   9BF3 58 49 4E 50     .TEXT "XINP"         \  EOW('4')  \  .WORD $8CD1
4243   9BF7 B4          
4243   9BF8 8C D1       
4244   9BFA 58 49 4E 50     .TEXT "XINP"         \  EOW('2')  \  .WORD $8CFB
4244   9BFE B2          
4244   9BFF 8C FB       
4245   9C01 58 49 4E 50     .TEXT "XINP"         \  EOW('5')  \  .WORD $8D15
4245   9C05 B5          
4245   9C06 8D 15       
4246   9C08 45 44 49 54     .TEXT "EDITO"        \  EOW('R')  \  .WORD $8D18
4246   9C0C 4F 
4246   9C0D D2          
4246   9C0E 8D 18       
4247   9C10 43 4C 45 41     .TEXT "CLEARSC"      \  EOW('R')  \  .WORD $8D41
4247   9C14 52 53 43 
4247   9C17 D2          
4247   9C18 8D 41       
4248   9C1A 43 4C           .TEXT "CL"           \  EOW('1')  \  .WORD $8D4A
4248   9C1C B1          
4248   9C1D 8D 4A       
4249   9C1F 57 52 49 54     .TEXT "WRITE"        \  EOW('1')  \  .WORD $8D5E
4249   9C23 45 
4249   9C24 B1          
4249   9C25 8D 5E       
4250   9C27 57 52 49 54     .TEXT "WRITE"        \  EOW('2')  \  .WORD $8D64
4250   9C2B 45 
4250   9C2C B2          
4250   9C2D 8D 64       
4251   9C2F 4F 42 54 41     .TEXT "OBTAI"        \  EOW('N')  \  .WORD $8D6B
4251   9C33 49 
4251   9C34 CE          
4251   9C35 8D 6B       
4252   9C37 4F 42 54        .TEXT "OBT"          \  EOW('1')  \  .WORD $8D95
4252   9C3A B1          
4252   9C3B 8D 95       
4253   9C3D 4F 42 54        .TEXT "OBT"          \  EOW('2')  \  .WORD $8D99
4253   9C40 B2          
4253   9C41 8D 99       
4254   9C43 4F 42 54 45     .TEXT "OBTEN"        \  EOW('D')  \  .WORD $8D9C
4254   9C47 4E 
4254   9C48 C4          
4254   9C49 8D 9C       
4255   9C4B 4F 42 54        .TEXT "OBT"          \  EOW('F')  \  .WORD $8DA3
4255   9C4E C6          
4255   9C4F 8D A3       
4256   9C51 49 4E 49 54     .TEXT "INITIA"       \  EOW('L')  \  .WORD $8DA8
4256   9C55 49 41 
4256   9C57 CC          
4256   9C58 8D A8       
4257   9C5A 49 4E 49 54     .TEXT "INITIA"       \  EOW('1')  \  .WORD $8DAC
4257   9C5E 49 41 
4257   9C60 B1          
4257   9C61 8D AC       
4258   9C63 46 49 52 53     .TEXT "FIRS"         \  EOW('T')  \  .WORD $8DC1
4258   9C67 D4          
4258   9C68 8D C1       
4259   9C6A 57 41 52 54     .TEXT "WARTE"        \  EOW('V')  \  .WORD $8DD0
4259   9C6E 45 
4259   9C6F D6          
4259   9C70 8D D0       
4260   9C72 41 4E           .TEXT "AN"           \  EOW('Z')  \  .WORD $8DDE
4260   9C74 DA          
4260   9C75 8D DE       
4261   9C77 54 41           .TEXT "TA"           \  EOW('S')  \  .WORD $8DEA
4261   9C79 D3          
4261   9C7A 8D EA       
4262   9C7C 46 49 52 53     .TEXT "FIRST"        \  EOW('1')  \  .WORD $8E03
4262   9C80 54 
4262   9C81 B1          
4262   9C82 8E 03       
4263   9C84 53 54 52 54     .TEXT "STRTA"        \  EOW('D')  \  .WORD $8E5F
4263   9C88 41 
4263   9C89 C4          
4263   9C8A 8E 5F       
4264   9C8C 43 4C 53        .TEXT "CLS"          \  EOW('0')  \  .WORD $8E64
4264   9C8F B0          
4264   9C90 8E 64       
4265   9C92 43 4C 53        .TEXT "CLS"          \  EOW('1')  \  .WORD $8E6D
4265   9C95 B1          
4265   9C96 8E 6D       
4266   9C98 43 4C 53        .TEXT "CLS"          \  EOW('A')  \  .WORD $8E78
4266   9C9B C1          
4266   9C9C 8E 78       
4267   9C9E 43 4C 53 41     .TEXT "CLSA"         \  EOW('0')  \  .WORD $8E7C
4267   9CA2 B0          
4267   9CA3 8E 7C       
4268   9CA5 53 54 4F        .TEXT "STO"          \  EOW('R')  \  .WORD $8E86
4268   9CA8 D2          
4268   9CA9 8E 86       
4269   9CAB 44 41 54        .TEXT "DAT"          \  EOW('1')  \  .WORD $8E8F
4269   9CAE B1          
4269   9CAF 8E 8F       
4270   9CB1 44 41 54        .TEXT "DAT"          \  EOW('2')  \  .WORD $8EA1
4270   9CB4 B2          
4270   9CB5 8E A1       
4271   9CB7 4D 4F 44        .TEXT "MOD"          \  EOW('T')  \  .WORD $8EB3
4271   9CBA D4          
4271   9CBB 8E B3       
4272   9CBD 54 58 54        .TEXT "TXT"          \  EOW('5')  \  .WORD $8EC7
4272   9CC0 B5          
4272   9CC1 8E C7       
4273   9CC3 4D 4F 4E 49     .TEXT "MONITO"       \  EOW('R')  \  .WORD $8EE1
4273   9CC7 54 4F 
4273   9CC9 D2          
4273   9CCA 8E E1       
4274   9CCC 56 43 55 52     .TEXT "VCURSO"       \  EOW('R')  \  .WORD $8EE4
4274   9CD0 53 4F 
4274   9CD2 D2          
4274   9CD3 8E E4       
4275   9CD5 56 50 43 55     .TEXT "VPCURSO"      \  EOW('R')  \  .WORD $8EEB
4275   9CD9 52 53 4F 
4275   9CDC D2          
4275   9CDD 8E EB       
4276   9CDF 48 43 55 52     .TEXT "HCURSO"       \  EOW('R')  \  .WORD $8EFD
4276   9CE3 53 4F 
4276   9CE5 D2          
4276   9CE6 8E FD       
4277   9CE8 48 50 43 55     .TEXT "HPCURSO"      \  EOW('R')  \  .WORD $8F04
4277   9CEC 52 53 4F 
4277   9CEF D2          
4277   9CF0 8F 04       
4278   9CF2 4C 49 53        .TEXT "LIS"          \  EOW('T')  \  .WORD $8F16
4278   9CF5 D4          
4278   9CF6 8F 16       
4279   9CF8 56 4C 49 53     .TEXT "VLISTAL"      \  EOW('L')  \  .WORD $8F43
4279   9CFC 54 41 4C 
4279   9CFF CC          
4279   9D00 8F 43       
4280   9D02 4C 49 53 54     .TEXT "LISTAL"       \  EOW('L')  \  .WORD $8F46
4280   9D06 41 4C 
4280   9D08 CC          
4280   9D09 8F 46       
4281   9D0B 50 4C 49 53     .TEXT "PLISTAL"      \  EOW('L')  \  .WORD $8F54
4281   9D0F 54 41 4C 
4281   9D12 CC          
4281   9D13 8F 54       
4282   9D15 4C 49 53 54     .TEXT "LISTCR"       \  EOW('T')  \  .WORD $8F56
4282   9D19 43 52 
4282   9D1B D4          
4282   9D1C 8F 56       
4283   9D1E 4C 49 53 54     .TEXT "LISTSCROL"    \  EOW('L')  \  .WORD $8F76
4283   9D22 53 43 52 4F 
4283   9D26 4C 
4283   9D27 CC          
4283   9D28 8F 76       
4284   9D2A 4C 49 53 54     .TEXT "LISTLABE"     \  EOW('L')  \  .WORD $8F7C
4284   9D2E 4C 41 42 45 
4284   9D32 CC          
4284   9D33 8F 7C       
4285   9D35 48 4F 4C 44     .TEXT "HOLD"         \  EOW('1')  \  .WORD $8F95
4285   9D39 B1          
4285   9D3A 8F 95       
4286   9D3C 48 4F 4C 44     .TEXT "HOLD"         \  EOW('2')  \  .WORD $8F97
4286   9D40 B2          
4286   9D41 8F 97       
4287   9D43 57 41 52 54     .TEXT "WART"         \  EOW('E')  \  .WORD $8FA7
4287   9D47 C5          
4287   9D48 8F A7       
4288   9D4A 4C 49 53 54     .TEXT "LISTEDI"      \  EOW('T')  \  .WORD $9010
4288   9D4E 45 44 49 
4288   9D51 D4          
4288   9D52 90 10       
4289   9D54 42 41 43 4B     .TEXT "BACKG"        \  EOW('R')  \  .WORD $9023
4289   9D58 47 
4289   9D59 D2          
4289   9D5A 90 23       
4290   9D5C 42 41 43 4B     .TEXT "BACKGRS"      \  EOW('T')  \  .WORD $9065
4290   9D60 47 52 53 
4290   9D63 D4          
4290   9D64 90 65       
4291   9D66 42 41 43 4B     .TEXT "BACKGRB"      \  EOW('E')  \  .WORD $906A
4291   9D6A 47 52 42 
4291   9D6D C5          
4291   9D6E 90 6A       
4292   9D70 42 41 43 4B     .TEXT "BACKGRLADE"   \  EOW('N')  \  .WORD $9072
4292   9D74 47 52 4C 41 
4292   9D78 44 45 
4292   9D7A CE          
4292   9D7B 90 72       
4293   9D7D 45 52 52 42     .TEXT "ERRBACKG"     \  EOW('R')  \  .WORD $9081
4293   9D81 41 43 4B 47 
4293   9D85 D2          
4293   9D86 90 81       
4294   9D88 45 52           .TEXT "ER"           \  EOW('N')  \  .WORD $9082
4294   9D8A CE          
4294   9D8B 90 82       
4295   9D8D 45 52           .TEXT "ER"           \  EOW('L')  \  .WORD $9088
4295   9D8F CC          
4295   9D90 90 88       
4296   9D92 53 43 48 55     .TEXT "SCHUT"        \  EOW('Z')  \  .WORD $908E
4296   9D96 54 
4296   9D97 DA          
4296   9D98 90 8E       
4297   9D9A 53 4C 45 45     .TEXT "SLEE"         \  EOW('P')  \  .WORD $90AA
4297   9D9E D0          
4297   9D9F 90 AA       
4298   9DA1 52 45 50 5A     .TEXT "REPZE"        \  EOW('I')  \  .WORD $90DE
4298   9DA5 45 
4298   9DA6 C9          
4298   9DA7 90 DE       
4299   9DA9 52 45 50 4B     .TEXT "REPKE"        \  EOW('Y')  \  .WORD $90F1
4299   9DAD 45 
4299   9DAE D9          
4299   9DAF 90 F1       
4300   9DB1 4C 44 52 45     .TEXT "LDRE"         \  EOW('P')  \  .WORD $90F7
4300   9DB5 D0          
4300   9DB6 90 F7       
4301   9DB8 52 45 50 4F     .TEXT "REPOF"        \  EOW('F')  \  .WORD $90FB
4301   9DBC 46 
4301   9DBD C6          
4301   9DBE 90 FB       
4302   9DC0 45 52 52 52     .TEXT "ERRRE"        \  EOW('P')  \  .WORD $9105
4302   9DC4 45 
4302   9DC5 D0          
4302   9DC6 91 05       
4303   9DC8 47 43 4C        .TEXT "GCL"          \  EOW('S')  \  .WORD $9107
4303   9DCB D3          
4303   9DCC 91 07       
4304   9DCE 43 4C 45 41     .TEXT "CLEARG"       \  EOW('R')  \  .WORD $9116
4304   9DD2 52 47 
4304   9DD4 D2          
4304   9DD5 91 16       
4305   9DD7 43 4C 52 47     .TEXT "CLRGRAP"      \  EOW('H')  \  .WORD $911A
4305   9DDB 52 41 50 
4305   9DDE C8          
4305   9DDF 91 1A       
4306   9DE1 43 4C 52 47     .TEXT "CLRGS"        \  EOW('T')  \  .WORD $913C
4306   9DE5 53 
4306   9DE6 D4          
4306   9DE7 91 3C       
4307   9DE9 45 52 52 47     .TEXT "ERRGCL"       \  EOW('S')  \  .WORD $914B
4307   9DED 43 4C 
4307   9DEF D3          
4307   9DF0 91 4B       
4308   9DF2 44 45           .TEXT "DE"           \  EOW('Z')  \  .WORD $914C
4308   9DF4 DA          
4308   9DF5 91 4C       
4309   9DF7 54 45 53        .TEXT "TES"          \  EOW('T')  \  .WORD $914F
4309   9DFA D4          
4309   9DFB 91 4F       
4310   9DFD 43 4F 4C 4F     .TEXT "COLO"         \  EOW('R')  \  .WORD $914F
4310   9E01 D2          
4310   9E02 91 4F       
4311   9E04 45 44 49        .TEXT "EDI"          \  EOW('T')  \  .WORD $914F
4311   9E07 D4          
4311   9E08 91 4F       
4312   9E0A 47 43 55 52     .TEXT "GCURSO"       \  EOW('R')  \  .WORD $914F
4312   9E0E 53 4F 
4312   9E10 D2          
4312   9E11 91 4F       
4313   9E13 47 50 52 49     .TEXT "GPRIN"        \  EOW('T')  \  .WORD $914F
4313   9E17 4E 
4313   9E18 D4          
4313   9E19 91 4F       
4314   9E1B 52 45 50 52     .TEXT "REPRO"        \  EOW('G')  \  .WORD $914F
4314   9E1F 4F 
4314   9E20 C7          
4314   9E21 91 4F       
4315   9E23 4B 45 59 52     .TEXT "KEYRA"        \  EOW('M')  \  .WORD $9150
4315   9E27 41 
4315   9E28 CD          
4315   9E29 91 50       
4316   9E2B 53 45 54 50     .TEXT "SETP"         \  EOW('V')  \  .WORD $9168
4316   9E2F D6          
4316   9E30 91 68       
4317   9E32 4B 45 59 42     .TEXT "KEYBOUMLEI"   \  EOW('T')  \  .WORD $9176
4317   9E36 4F 55 4D 4C 
4317   9E3A 45 49 
4317   9E3C D4          
4317   9E3D 91 76       
4318   9E3F 53 43 52 4F     .TEXT "SCROLLMINU"   \  EOW('S')  \  .WORD $9189
4318   9E43 4C 4C 4D 49 
4318   9E47 4E 55 
4318   9E49 D3          
4318   9E4A 91 89       
4319   9E4C 43 4F 50        .TEXT "COP"          \  EOW('Y')  \  .WORD $9195
4319   9E4F D9          
4319   9E50 91 95       
4320   9E52 50 52 49 4E     .TEXT "PRIN"         \  EOW('T')  \  .WORD $91A7
4320   9E56 D4          
4320   9E57 91 A7       
4321   9E59 50 52 49 4E     .TEXT "PRINTNOKREU"  \  EOW('Z')  \  .WORD $91B1
4321   9E5D 54 4E 4F 4B 
4321   9E61 52 45 55 
4321   9E64 DA          
4321   9E65 91 B1       
4322   9E67 50 52 49 4E     .TEXT "PRINTDIS"     \  EOW('K')  \  .WORD $91BB
4322   9E6B 54 44 49 53 
4322   9E6F CB          
4322   9E70 91 BB       
4323   9E72 45 52 52 50     .TEXT "ERRPRK"       \  EOW('R')  \  .WORD $91D2
4323   9E76 52 4B 
4323   9E78 D2          
4323   9E79 91 D2       
4324   9E7B 4D 4F 44        .TEXT "MOD"          \  EOW('E')  \  .WORD $91D3
4324   9E7E C5          
4324   9E7F 91 D3       
4325   9E81 4D 4F 44 45     .TEXT "MODEC"        \  EOW('L')  \  .WORD $91D8
4325   9E85 43 
4325   9E86 CC          
4325   9E87 91 D8       
4326   9E89 53 55 42 4D     .TEXT "SUBM"         \  EOW('O')  \  .WORD $91EF
4326   9E8D CF          
4326   9E8E 91 EF       
4327   9E90 4D 4F 44 55     .TEXT "MODULBI"      \  EOW('T')  \  .WORD $920C
4327   9E94 4C 42 49 
4327   9E97 D4          
4327   9E98 92 0C       
4328   9E9A 4D 45 52        .TEXT "MER"          \  EOW('R')  \  .WORD $9218
4328   9E9D D2          
4328   9E9E 92 18       
4329   9EA0 53 50 45 45     .TEXT "SPEEDS"       \  EOW('W')  \  .WORD $9219
4329   9EA4 44 53 
4329   9EA6 D7          
4329   9EA7 92 19       
4330   9EA9 53 50 45 45     .TEXT "SPEED"        \  EOW('2')  \  .WORD $921F
4330   9EAD 44 
4330   9EAE B2          
4330   9EAF 92 1F       
4331   9EB1 53 45 52        .TEXT "SER"          \  EOW('R')  \  .WORD $9232
4331   9EB4 D2          
4331   9EB5 92 32       
4332   9EB7 53 45 52 52     .TEXT "SERR"         \  EOW('2')  \  .WORD $9233
4332   9EBB B2          
4332   9EBC 92 33       
4333   9EBE 53 41 56        .TEXT "SAV"          \  EOW('E')  \  .WORD $9234
4333   9EC1 C5          
4333   9EC2 92 34       
4334   9EC4 4C 4F 41        .TEXT "LOA"          \  EOW('D')  \  .WORD $9244
4334   9EC7 C4          
4334   9EC8 92 44       
4335   9ECA 4C 4F 41 44     .TEXT "LOAD"         \  EOW('C')  \  .WORD $9254
4335   9ECE C3          
4335   9ECF 92 54       
4336   9ED1 4C 4F 41 44     .TEXT "LOAD"         \  EOW('F')  \  .WORD $9264
4336   9ED5 C6          
4336   9ED6 92 64       
4337   9ED8 4C 4F 41 44     .TEXT "LOAD"         \  EOW('Q')  \  .WORD $9274
4337   9EDC D1          
4337   9EDD 92 74       
4338   9EDF 53 41 56 45     .TEXT "SAVE"         \  EOW('C')  \  .WORD $9277
4338   9EE3 C3          
4338   9EE4 92 77       
4339   9EE6 53 41 56 45     .TEXT "SAVE"         \  EOW('F')  \  .WORD $9287
4339   9EEA C6          
4339   9EEB 92 87       
4340   9EED 53 41 56 45     .TEXT "SAVE"         \  EOW('Q')  \  .WORD $9297
4340   9EF1 D1          
4340   9EF2 92 97       
4341   9EF4 53 41 56 45     .TEXT "SAVE"         \  EOW('D')  \  .WORD $929A
4341   9EF8 C4          
4341   9EF9 92 9A       
4342   9EFB 4C 4F 41 44     .TEXT "LOAD"         \  EOW('D')  \  .WORD $92A6
4342   9EFF C4          
4342   9F00 92 A6       
4343   9F02 53 41 56 45     .TEXT "SAVE"         \  EOW('R')  \  .WORD $92B2
4343   9F06 D2          
4343   9F07 92 B2       
4344   9F09 4C 4F 41 44     .TEXT "LOAD"         \  EOW('R')  \  .WORD $92BE
4344   9F0D D2          
4344   9F0E 92 BE       
4345   9F10 44 49           .TEXT "DI"           \  EOW('R')  \  .WORD $92CA
4345   9F12 D2          
4345   9F13 92 CA       
4346   9F15 4E 4F 44 45     .TEXT "NODER"        \  EOW('R')  \  .WORD $92D6
4346   9F19 52 
4346   9F1A D2          
4346   9F1B 92 D6       
4347   9F1D 56 45 52 49     .TEXT "VERI"         \  EOW('Q')  \  .WORD $92D9
4347   9F21 D1          
4347   9F22 92 D9       
4348   9F24 43 48 41 49     .TEXT "CHAI"         \  EOW('N')  \  .WORD $92DC
4348   9F28 CE          
4348   9F29 92 DC       
4349   9F2B 43 48 41 49     .TEXT "CHAI"         \  EOW('C')  \  .WORD $92F5
4349   9F2F C3          
4349   9F30 92 F5       
4350   9F32 43 48 41 49     .TEXT "CHAI"         \  EOW('Q')  \  .WORD $9305
4350   9F36 D1          
4350   9F37 93 05       
4351   9F39 4B 45 59 42     .TEXT "KEYBOAR"      \  EOW('D')  \  .WORD $9308
4351   9F3D 4F 41 52 
4351   9F40 C4          
4351   9F41 93 08       
4352   9F43 4B 42 45 45     .TEXT "KBEEOF"       \  EOW('F')  \  .WORD $9317
4352   9F47 4F 46 
4352   9F49 C6          
4352   9F4A 93 17       
4353   9F4C 4B 42 45 52     .TEXT "KBER"         \  EOW('R')  \  .WORD $9322
4353   9F50 D2          
4353   9F51 93 22       
4354   9F53 4B 54 41 53     .TEXT "KTAS"         \  EOW('T')  \  .WORD $9323
4354   9F57 D4          
4354   9F58 93 23       
4355   9F5A 4B 54 41 53     .TEXT "KTASOF"       \  EOW('F')  \  .WORD $9339
4355   9F5E 4F 46 
4355   9F60 C6          
4355   9F61 93 39       
4356   9F63 4B 54 41 45     .TEXT "KTAER"        \  EOW('R')  \  .WORD $934F
4356   9F67 52 
4356   9F68 D2          
4356   9F69 93 4F       
4357   9F6B 54 52 41 43     .TEXT "TRAC"         \  EOW('E')  \  .WORD $9350
4357   9F6F C5          
4357   9F70 93 50       
4358   9F72 54 45 4C 45     .TEXT "TELEFO"       \  EOW('N')  \  .WORD $936D
4358   9F76 46 4F 
4358   9F78 CE          
4358   9F79 93 6D       
4359   9F7B             ;% LB_TXTADDR_TBL END
4360   9F7B             ;------------------------------------------------------------------------------------------------------------
4361   9F7B             
4362   9F7B             
4363   9F7B             
4364   9F7B             ;------------------------------------------------------------------------------------------------------------
4365   9F7B             ; Unknown
4366   9F7B FF 00 C5 14     .BYTE $FF,$00,$C5,$14,$00,$51,$D5
4366   9F7F 00 51 D5 
4367   9F82             ;------------------------------------------------------------------------------------------------------------
4368   9F82             
4369   9F82             
4370   9F82             
4371   9F82             ;------------------------------------------------------------------------------------------------------------
4372   9F82             ; $9F82 - $9FFF Filler
4373   9F82             ;------------------------------------------------------------------------------------------------------------
4374   9F82             ;% LB_FILLER_9F82 START
4375   9F82             FILLER_9F82:
4376   9F82 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4376   9F86 00 00 00 00 
4377   9F8A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4377   9F8E 00 00 00 00 
4378   9F92 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4378   9F96 00 00 00 00 
4379   9F9A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4379   9F9E 00 00 00 00 
4380   9FA2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4380   9FA6 00 00 00 00 
4381   9FAA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4381   9FAE 00 00 00 00 
4382   9FB2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4382   9FB6 00 00 00 00 
4383   9FBA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4383   9FBE 00 00 00 00 
4384   9FC2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4384   9FC6 00 00 00 00 
4385   9FCA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4385   9FCE 00 00 00 00 
4386   9FD2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4386   9FD6 00 00 00 00 
4387   9FDA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4387   9FDE 00 00 00 00 
4388   9FE2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4388   9FE6 00 00 00 00 
4389   9FEA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4389   9FEE 00 00 00 00 
4390   9FF2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4390   9FF6 00 00 00 00 
4391   9FFA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00
4391   9FFE 00 00 
4392   A000             ;% LB_FILLER_9F82 END
4393   A000             ;------------------------------------------------------------------------------------------------------------
4394   A000             
4395   A000             .END
tasm: Number of errors = 0
