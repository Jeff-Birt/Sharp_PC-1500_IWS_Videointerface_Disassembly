0001   0000             ; IWS-Video_H16_V1.0.asm
0002   0000             ; IWS Video Interface
0003   0000             ;
0004   0000             
0005   0000             #define EOW(n8)        .BYTE n8 | $80    ; Sets bit 7 of character
0006   0000             
0007   0000             #INCLUDE    "lib/PC-1500.lib"
0001+  0000              ; PC-1500 library file
0002+  0000             RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
0003+  0000             RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
0004+  0000             PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
0005+  0000             RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
0006+  0000             SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
0007+  0000             SHADOW_RAM_SIZE   = $0600 ; 
0008+  0000             DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
0009+  0000             DISP_BUFF_SIZE    = $0150 ; 
0010+  0000             STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
0011+  0000             STRING_VARS_SIZE  = $01AF ; 
0012+  0000             CPU_STACK         = $7800 ; CPU stack (7800-784F)
0013+  0000             CPU_STACK_SIZE    = $50   ; 
0014+  0000             XCHRINPT_H        = $785B ; Address of exernal character input routine (H)
0015+  0000             XCHRINPT_L        = $785C ; Address of exernal character input routine (L)
0016+  0000             KATAFLAGS         = $785D ; Katakana displayed flags
0017+  0000             KATACHAR          = $785E ; Address of Katakana character codes (H)
0018+  0000             ST_ROM_MOD        = $7860 ; Start of ROM in module (H)
0019+  0000             ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
0020+  0000             ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
0021+  0000             RAM_ST_H          = $7863 ; Start of RAM pointer (H)
0022+  0000             RAM_END_H         = $7864 ; End of RAM pointer (H)
0023+  0000             BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
0024+  0000             BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
0025+  0000             BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
0026+  0000             BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
0027+  0000             BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
0028+  0000             BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
0029+  0000             BEEP_PTR          = $786B ; BEEP and RMT flags
0030+  0000             RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
0031+  0000             RCLTEMPBUFF_SIZE  = $05   ; 
0032+  0000             WAIT_CFG          = $7871 ; WAIT setting
0033+  0000             WAIT_CTR_H        = $7872 ; WAIT time counter (H)
0034+  0000             WAIT_CTR_L        = $7873 ; WAIT time counter (L)
0035+  0000             CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
0036+  0000             CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
0037+  0000             CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
0038+  0000             BEEP_FREQ         = $7878 ; BEEP frequency
0039+  0000             CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
0040+  0000             CURS_BLNK_POS     = $787B ; Position of blink character in display, plus 8
0041+  0000             CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
0042+  0000             BLNKD_CHAR_CODE   = $787D ; Code of character blinked
0043+  0000             CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
0044+  0000             CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
0045+  0000             DISPARAM          = $7880 ; Display Parameter: determines display at READY
0046+  0000             STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
0047+  0000             CURVARADD_H       = $7883 ; Current variable address (H)
0048+  0000             CURVARADD_L       = $7884 ; Current variable address (L)
0049+  0000             CURVARTYPE        = $7885 ; Current variable type
0050+  0000             LASTVARADD_H      = $7886 ; Last variable address (H)
0051+  0000             LASTVARADD_L      = $7887 ; Last variable address (L)
0052+  0000             LASTVARTYPE       = $7888 ; Last variable type
0053+  0000             BREAKPARAM        = $788A ; BREAK flag parameter
0054+  0000             INBUFPTR_L        = $788B ; Input Buffer pointer (L)
0055+  0000             NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
0056+  0000             TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
0057+  0000             TRACE_PARAM       = $788E ; TRACE Parameter
0058+  0000             OUTBUF_PTR        = $788F ; Output Buffer pointer (L)
0059+  0000             FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
0060+  0000             GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
0061+  0000             BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
0062+  0000             BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
0063+  0000             STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
0064+  0000             USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
0065+  0000             USINGM            = $7896 ; USING M integer part
0066+  0000             USING_CHR         = $7897 ; USING & character string
0067+  0000             USINGMD           = $7898 ; USING m decimal part
0068+  0000             VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
0069+  0000             VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
0070+  0000             ERL               = $789B ; ERL, Error code
0071+  0000             CURR_LINE_H       = $789C ; Current line number (H)
0072+  0000             CURR_LINE_L       = $789D ; Current line number (L)
0073+  0000             CURR_TOP_H        = $789E ; Beginning address of current program (H)
0074+  0000             CURR_TOP_L        = $789F ; Beginning address of current program (L)
0075+  0000             PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
0076+  0000             PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
0077+  0000             PREV_LINE_H       = $78A2 ; Previous line number (H)
0078+  0000             PREV_LINE_L       = $78A3 ; Previous line number (L)
0079+  0000             PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
0080+  0000             PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
0081+  0000             SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
0082+  0000             SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
0083+  0000             SRCH_LINE_H       = $78A8 ; Line number found after search (H)
0084+  0000             SRCH_LINE_L       = $78A9 ; Line number found after search (L)
0085+  0000             SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
0086+  0000             SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
0087+  0000             BRK_ADD_H         = $78AC ; Break address (H)
0088+  0000             BRK_ADD_L         = $78AD ; Break address (L)
0089+  0000             BRK_LINE_H        = $78AE ; Break line number (H)
0090+  0000             BRK_LINE_L        = $78AF ; Break line number (L)
0091+  0000             BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
0092+  0000             BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
0093+  0000             ERR_ADD_H         = $78B2 ; Error address (H)
0094+  0000             ERR_ADD_L         = $78B3 ; Error address (L)
0095+  0000             ERR_LINE_H        = $78B4 ; Error line number (H)
0096+  0000             ERR_LINE_L        = $78B5 ; Error line number (L)
0097+  0000             ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
0098+  0000             ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
0099+  0000             ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
0100+  0000             ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
0101+  0000             ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
0102+  0000             ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
0103+  0000             ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
0104+  0000             ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
0105+  0000             DATA_PTR_H        = $78BE ; Pointer for data statement (H)
0106+  0000             DATA_PTR_L        = $78BF ; Pointer for data statement (H)
0107+  0000             FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
0108+  0000             FIXED_VARS_SIZE   = $0110 ; 
0109+  0000             PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
0110+  0000             OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0111+  0000             CLK_BYPASS        = $79D3 ; 55=bypass setting of modulation clock freq, serial output
0112+  0000             KB_BYPASS         = $79D4 ; 55=bypass keyboard scan, obtain input from external device
0113+  0000             UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
0114+  0000             ARX               = $7A00 ; Floating-Point accumulator
0115+  0000             ARX_SIZE          = $08   ; 
0116+  0000             ARZ               = $7A08 ; Scratch register (7A00-7A07)
0117+  0000             ARZ_SIZE          = $08   ; 
0118+  0000             ARY               = $7A10 ; Second operand (7A10-7A17)
0119+  0000             ARY_SIZE          = $08   ; 
0120+  0000             ARU               = $7A18 ; Scratch register (7A18-7A1F)
0121+  0000             ARU_SIZE          = $08   ; 
0122+  0000             ARV               = $7A20 ; Scratch register (7A2-7A27)
0123+  0000             ARV_SIZE          = $08   ; 
0124+  0000             ARW               = $7A28 ; Scratch register (7A28-7A2F)
0125+  0000             ARW_SIZE          = $08   ; 
0126+  0000             ARS               = $7A30 ; Temporary storage register (7A30-7A37)
0127+  0000             ARS_SIZE          = $08   ; 
0128+  0000             B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
0129+  0000             B_STACK_SIZE      = $C8   ; 
0130+  0000             RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
0131+  0000             RND_VAL_SIZE      =       ; S
0132+  0000             KEY_REPEAT        = $7B09 ; Key repeat speed
0133+  0000             APOW_CTR_H        = $7B0A ; Auto power down counter (H)
0134+  0000             APOW_CTR_M        = $7B0B ; Auto power down counter (M)
0135+  0000             APOW_CTR_L        = $7B0C ; Auto power down counter (L)
0136+  0000             CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
0137+  0000             CURS_CTRL         = $7B0E ; Cursor Control Parameter
0138+  0000             KEY_LAST          = $7B0F ; Last pressed key code
0139+  0000             STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
0140+  0000             STR_BUF_SIZE      = $50   ; 
0141+  0000             OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
0142+  0000             OUT_BUF_SIZE      = $50   ; 
0143+  0000             IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
0144+  0000             IN_BUF_SIZE       = $80   ; 
0145+  0000             ST_MAIN_ROM       = $C000 ; Start of PC-1500 ROM, 55
0146+  0000             SA_XREG_2RAM      = $C001 ; Save X-Reg to 78xx. D1 defines low byte xx.
0147+  0000             SAVEVARPTR_ARX    = $C00E ; Save variable pointer. Address from U-Reg, length from AR-X (7A07).
0148+  0000             SAVEVARPTR_A      = $C011 ; Save variable pointer. Address from U-Reg, length from A.
0149+  0000             TRACE_VEC         = $C01D ; Not used (C01C-C01F)
0150+  0000             ST_BAS_TBL        = $C020 ; Start of Basic table
0151+  0000             TOKEN_TBL         = $C054 ; B5: AREAD F1 80:C684
0152+  0000             SM_NEW0           = $C34F ;  'NEW0?' (C350-C354) (Start of system messages)
0153+  0000             SM_NEW0_SIZE      = $05   ; 
0154+  0000             SM_CHECK          = $C355 ;  ':CHECK' (C355-C35B)
0155+  0000             SM_BREAK          = $C35C ;  'BREAK' (C35C-C361)
0156+  0000             SM_IN             = $C362 ;  'IN' (C362-C364)
0157+  0000             SM_IN_SIZE        = $05   ; 
0158+  0000             SM_ERROR          = $C365 ;  'ERROR' (C365-C36A)
0159+  0000             SM_ERROR_SIZE     = $05   ; 
0160+  0000             DEFKEY_TBL        = $C36B ; Occupied DEF key table (C36B-C38A)
0161+  0000             DEFKEY_TBL_SIZE   = $05   ; 
0162+  0000             EDCTRL_TBL        = $C38B ; Address table for editor control characters (C38B-C3A9)
0163+  0000             EDCTRL_TBL_SIZE   = $05   ; 
0164+  0000             FVAL_TBLE         = $C3A8 ; Operator table for formula eval of subs (C3A8-C3FF)  (DE) (D6DF)
0165+  0000             FVAL_TBLE_SIZE    = $05   ; 
0166+  0000             BASIC_INT         = $C400 ; Basic interpreter, Y-Ref points to next char/token
0167+  0000             BCMD_LET          = $C458 ; Basic command LET
0168+  0000             TRCROUTINE        = $C4AF ; Trace Routine
0169+  0000             BCMD_STOP         = $C4B6 ; Basic command STOP
0170+  0000             BCMD_END          = $C50D ; Basic Command END
0171+  0000             BCMD_GOTO         = $C515 ; Basic Command GOTO
0172+  0000             DEFKEY_EVAL       = $C529 ; Evaluate def keys
0173+  0000             BCMD_IF           = $C5B4 ; Basic Command IF
0174+  0000             BCMD_ON           = $C5E0 ; Basic Command ON
0175+  0000             BCMD_GOSUB        = $C64E ; Basic Command GOSUB
0176+  0000             BCMD_REM          = $C676 ; Basic Command REM
0177+  0000             BCMD_USING        = $C67C ; Basic Command USING
0178+  0000             BCMD_DATA         = $C684 ; Basic Command DATA / ARUN / AREAD
0179+  0000             BCMD_TRON         = $C68C ; Basic Command TRON
0180+  0000             BCMD_TROFF        = $C693 ; Basic Command TROFF
0181+  0000             BCMD_DEGREE       = $C697 ; Basic Command DEGREE
0182+  0000             BCMD_RADIAN       = $C6A4 ; Basic Command RADIAN
0183+  0000             BCMD_GRAD         = $C6A8 ; Basic Command GRAD
0184+  0000             BCMD_RETURN       = $C6AC ; Basic Command RETURN
0185+  0000             BCMD_NEXT         = $C704 ; Basic Command NEXT
0186+  0000             BCMD_FOR          = $C711 ; Basic Command FOR
0187+  0000             BCMD_POKE         = $C777 ; Basic Command POKE
0188+  0000             BCMD_POKE#        = $C778 ; Basic Command POKE#
0189+  0000             BCMD_RESTORE      = $C7A2 ; Basic Command RESTORE
0190+  0000             BCMD_READ         = $C7BB ; Basic Command READ
0191+  0000             BCMD_NEW          = $C8A0 ; Basic Command NEW
0192+  0000             BCMD_CLEAR        = $C8F5 ; Basic Command CLEAR
0193+  0000             BCMD_CALL         = $CB63 ; Basic Command CALL
0194+  0000             BCMD_RUN          = $C884 ; Basic Command RUN
0195+  0000             BCMD_CONT         = $C8C7 ; Basic Command CONT
0196+  0000             BCMD_INPUT        = $C8FA ; Basic Command INPUT
0197+  0000             BCMD_LOCK         = $C968 ; Basic Command LOCK
0198+  0000             BCMD_UNLOCK       = $C96A ; Basic Command UNLOCK
0199+  0000             BCMD_LIST         = $C96E ; Basic Command LIST
0200+  0000             BCMD_DIM          = $C988 ; Basic Command DIM
0201+  0000             COLD_START        = $C9E4 ; Editor Cold Start
0202+  0000             BTN_SHCL          = $CA55 ; SHIFT CL (Clear All)
0203+  0000             WARM_START        = $CA58 ; Editor Warm Start
0204+  0000             BUTTON_CL         = $CA64 ; CL Button (Clear LCD )
0205+  0000             BTN_RCL           = $CB61 ; RCL Button
0206+  0000             RSV_CHNG          = $CB69 ; Change RESERVE level
0207+  0000             BTN_SHMODE        = $CB9C ; SHIFT MODE Button (RESERVE mode)
0208+  0000             BTN_MODE          = $CBA0 ; MODE Button
0209+  0000             BTN_INS           = $CBC7 ; INS Button
0210+  0000             BTN_DEL           = $CBCF ; DEL Button
0211+  0000             BTN_RIGHT         = $CBE4 ; CURSOR RIGHT Button
0212+  0000             PRG_ENTER         = $CC1D ; "@", Programmatic ENTER
0213+  0000             BTN_LRFT          = $CC22 ; CURSOR LEFT Button
0214+  0000             BTN_UP            = $CC38 ; CURSOR UP Button
0215+  0000             BTN_DOWN          = $CC48 ; CURSOR DOWN Button
0216+  0000             BTN_ENTER         = $CCC1 ; ENTER Button
0217+  0000             UNLOCK            = $CD6A ; UNLOCK
0218+  0000             BTN_OFF           = $CD71 ; OFF Button
0219+  0000             ERR1              = $CD89 ; Display ERROR 1, return to editor.
0220+  0000             ERRN              = $CD8B ; Display ERROR N, from UH or do 'ON-ERROR' routine.
0221+  0000             INS2INBUF         = $CDE6 ; INSERT - Insert one character into the Input Buffer.
0222+  0000             CHAR2INBUF        = $CE10 ; Enter characters into the Input Buffer.
0223+  0000             DELFRMINBUF       = $CE38 ; DELETE - Delete one character from the Input Buffer.
0224+  0000             DEFEVAL           = $CE4A ; Evaluate DEF key
0225+  0000             RESKEY_SRCH       = $CEC4 ; Searches for reserve key code in Reserve memory
0226+  0000             TXFR_RSV_KEY      = $CED0 ; Transfers reserve key assignment to Reserve memory.
0227+  0000             PRGLINE_TDI       = $CF27 ; Transfer, delete, insert program line from Input Buffer
0228+  0000             INBUF_CLRRST      = $D021 ; Clear rest of the input buffer (0D).
0229+  0000             INBUF_INIT        = $D030 ; Clear Input Buffer, Y-Reg points to start of Input Buffer
0230+  0000             INBUF_CLR         = $D034 ; Clears Input buffer with $0D
0231+  0000             SYSMSG            = $D046 ; Send System Messages.
0232+  0000             UL_XREG2YREG      = $D049 ; Transfers UL bytes from X-Reg to Y-Reg
0233+  0000             VARONBSTK         = $D04C ; Find variable on Basic Stack, if not found C = 0.
0234+  0000             POPBSTK           = $D065 ; Pop address from Basic Stack.
0235+  0000             PSHBSTK           = $D071 ; Push U-Reg to Basic Stack
0236+  0000             DELSVARS          = $D080 ; Deletes all standard variables
0237+  0000             DELDVARS          = $D091 ; Deletes dimensioned variables
0238+  0000             DEL_DIM_VARS      = $D09C ; Deletes dimensioned variables if program and variable memory overlap C=1
0239+  0000             BCD_Y2ARX         = $D14F ; Pass BCD number pointed to by Y-Reg to AR-X
0240+  0000             XFRLINE2INBUF     = $D2D0 ; Transfer line pointed to by X-Reg to Input Buffer
0241+  0000             LINESEARCH        = $D2EA ; Searches for line number according to U-Reg from start of program.
0242+  0000             SRCHPRGLINE       = $D2EC ; Searches program line in U-REG from X-REG
0243+  0000             DELU_FROMX        = $D3C4 ; Deletes (U + 1) bytes from X-Reg.
0244+  0000             DEC2HEX           = $D3D5 ; Convert from decimal to hexadecimal.
0245+  0000             BCMD_PEEK         = $D993 ; Basic commands PEEK/PEEK#
0246+  0000             BCMD_NOT          = $D99E ; Basic command NOT
0247+  0000             BCMD_INKY         = $D9AA ; Basic command INKEY$
0248+  0000             BCMD_CHR          = $D9B1 ; Basic command CHR$
0249+  0000             BCMD_STR          = $D9CF ; Basic command STR$
0250+  0000             BCMD_LEN          = $D9D7 ; Basic command LEN / ASC
0251+  0000             ARUINT2ARX        = $D9E7 ; Transfers U-Reg as an integer to AR-X in the format '82 UH UL '.
0252+  0000             BCMD_RLM_STR      = $D9F3 ; Basic commands RIGHT$ / LEFT$ / MID$
0253+  0000             BCMD_STATUS       = $DA44 ; Basic command STATUS
0254+  0000             BCMD_MEM          = $DA5D ; Basic command MEM
0255+  0000             MULT16B           = $DA71 ; 16-Bit Multiplication: X-Reg=Y-Reg*U-Reg.
0256+  0000             TWOSCOMP          = $DAA8 ; Forms two's complement of U-Reg.
0257+  0000             EVAL_USING        = $DAB2 ; Evaluation of USING paramters from Y-Reg
0258+  0000             ISARXBCD          = $DB87 ; Check AR-X for BCD format
0259+  0000             LOAD_NEXT         = $DCD4 ; Load next Token / character
0260+  0000             BCMD_TIME         = $DE82 ; Basic command TIME
0261+  0000             XREG2STRBUF       = $DFA1 ; Inserts string pointed to by X-Reg into string buffer. Jump if overflow.
0262+  0000             ARX2STRBUF        = $DFC4 ; Loads AR-X with a pointer to the string buffer.
0263+  0000             U_MINUS_X         = $DFE2 ; U-Reg = U-Reg - X-Reg. If overflow occurs C=0 and UH=16
0264+  0000             MEM_IN_UREG       = $DFEE ; Calculates the available memory space (MEM) in U-Reg.
0265+  0000             PRGST2XREG        = $DFF3 ; X-Reg = Program Start Address. U-Reg = STATUS 1-2
0266+  0000             RESET             = $E000 ; Reset-Routine
0267+  0000             IO_INT            = $E153 ; Initializes I/O module with table from E168.
0268+  0000             IO_TBL            = $E168 ; Paramaters for I/O init. (Byte table)
0269+  0000             ISR_HANDLER       = $E171 ; Maskable Interrupt Routine
0270+  0000             NMI_HANDLER       = $E22B ; Non-Maskable Interrupt Routine
0271+  0000             TIMER_ISR         = $E22C ; Timer Interrupt
0272+  0000             PVBANK            = $E234 ; PV banking. Using status of bit 0 in 7900. If 0, PV=1.
0273+  0000             WAITNOKEYS        = $E23D ; Waits until no more keys are pressed.
0274+  0000             WAIT4KB           = $E243 ; Waiting for character input from keyboard. Accumulator=character
0275+  0000             AUTO_OFF          = $E33F ; Auto-Power-Off routine
0276+  0000             ISKEY_1           = $E418 ; Keyboard query. Z=1 if no key pressed.
0277+  0000             ISKEY_0           = $E41A ; Keyboard query. Z=0 if no key pressed.
0278+  0000             KEY2ASCII         = $E42C ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0279+  0000             CHK_BRK           = $E451 ; Checks whether Break was pressed. Yes: Z=0, no Z=1.
0280+  0000             STR_COMP          = $E4A0 ; Compare two strings: pointer in Y-Reg and AR-Y. AR-X=1 is true.
0281+  0000             TOK_TABL_SRCH     = $E4A8 ; Searches for token table below C000. CE-158 C=1, UH-1. CE-150 C=1, UH=2
0282+  0000             BCMD_INPUTNUM     = $E4E7 ; Basic command INPUT#
0283+  0000             BCMD_PRINT        = $E4EB ; Basic command PRINT
0284+  0000             WRITE2CLOCK       = $E52B ; Write to clock  chip.
0285+  0000             TIMEMODE          = $E573 ; Timer mode select according to Accumulator
0286+  0000             ARX2TIME          = $E59A ; Write TIME from AR-X to clock chip
0287+  0000             TIME2ARX          = $E5B4 ; Read TIME from clock chip into AR-X.
0288+  0000             BEEP_ON-OFF       = $E655 ; Beep ON/OFF. Beep on/off pointer 7868 80=1 beep off, 80=0 beep on.
0289+  0000             BCMD_BEEP_STD     = $E669 ; Basic command BEEP - Standard beep.
0290+  0000             BCMD_BEEP         = $E66F ; Basic command BEEP - Duration in X-Reg, Pitch in UL.
0291+  0000             BCMD_PAUSE        = $E6A5 ; Basic command PAUSE
0292+  0000             BCMD_GPRINT       = $E7AC ; Basic command GPRINT
0293+  0000             BCMD_GCURSOR      = $E83E ; Basic command GCURSOR
0294+  0000             BCMD_CURSOR       = $E846 ; Basic command CURSOR
0295+  0000             BCMD_CLS          = $E865 ; Basic command CLS
0296+  0000             BCMD_WAIT         = $E86A ; Basic command WAIT
0297+  0000             TIMEDELAY         = $E88C ; Time delay 15.625 ms * number in U-Reg. BREAK is possible.
0298+  0000             PRGMDISP          = $E8CA ; Display program.
0299+  0000             STATUSCHK         = $E9EB ; Checks display and input status.
0300+  0000             USING_FRMT        = $EA78 ; USING formatting. If error C = 1.
0301+  0000             ARX2ASCII         = $EB40 ; Converts AR-X to ASCII according to USING parameters.
0302+  0000             TRUNCDEC          = $EC2F ; Truncation of the decimal places
0303+  0000             BCMD_DEC9         = $EC3C ; Checks if value in AR-X can be represented in 9 decimal places. If not, C=1.
0304+  0000             X_STROUT          = $EC5C ; Transfers string in X-Reg to output buffer. If error C=1.
0305+  0000             IF_ARX2BCD        = $EC6C ; If AR-X numerical convert to BCD. C=0. If CSI contine w/Distance Address D1.
0306+  0000             ARXBCD2ASCII      = $EC74 ; Converts AR-X from BCD to ASCII and transfers to output buffer.
0307+  0000             XP_STROUT         = $EC82 ; Transmits string X-Reg points to into output buffer. C=1 if buffer full
0308+  0000             CLRNOCURSOR       = $EC9C ; Clears LCD if cursor not allowed and sets the matrix column pointer to 00.
0309+  0000             INIT_CURS         = $ECAE ; Initializes cursor parameters.
0310+  0000             INIT_MTRX         = $ECB2 ; Initializes matrix column pointer (0).
0311+  0000             ARX2OUTBUF        = $ECB7 ; Transfers value in AR-X to output buffer.
0312+  0000             ARX2OUTBUF_F      = $ECD6 ; Tranfer AR-X foramtted to Ouput Buffer
0313+  0000             ARXASCII2OUTBUF   = $ECE3 ; Convert AR-X to ASCII and sent to Output Buffer
0314+  0000             USING_PARAM       = $ECEB ; Determine and transer USING paramaters
0315+  0000             OUTBUF2LCD        = $ECFA ; Output 26 characters in Output Buffer to LCD
0316+  0000             TEXTUREG_A        = $ED00 ; Output of text on LCD. U-Reg=start address; A=length.
0317+  0000             TEXTUREG_XL       = $ED3B ; Outputs text from U-Reg. XL = number of characters
0318+  0000             CHAR2COL          = $ED4D ; Output character at next matrix column
0319+  0000             CHARA2COL         = $ED57 ; Output character in A to next matrix column.
0320+  0000             CHARA2COLX        = $ED5B ; Output character in A to matrix column X-Reg points to.
0321+  0000             A2HEX             = $ED7D ; Convert character in A to HEX nibble
0322+  0000             ASCII2HEX         = $ED95 ; Convert two ASCII characters from X-Reg into HEX
0323+  0000             MTRXNRANGE        = $EDAB ; Checks if matrix pointer still in permissible range 0-155. No, C=1
0324+  0000             MTRXINC           = $EDB1 ; Increase matrix pointer if in permissible range 0-155. No, C=1
0325+  0000             LCDCACHE          = $EDC1 ; Cache LCD display of 7810-7BFF
0326+  0000             BCMD_BFF          = $EDD8 ; Retrieve LCD display of 7610-7BFF
0327+  0000             HEX2COL           = $EDEF ; Output HEX value from A to next matrix column
0328+  0000             GPRNT_A_2LCD      = $EDF6 ; Output of A as a GRPRINT (bit pattern) on LCD 
0329+  0000             MATRIX_PTR2XREG   = $EE1F ; Calculates matrix column address from matrix pointer, to X-Reg.
0330+  0000             MATRIX_A2XREG     = $EE22 ; Calculated matrix column address from A, to X-Reg
0331+  0000             CHAR2ADDR         = $EE48 ; Retrive address in Character Set Table for characters in A
0332+  0000             LCDCLR            = $EE71 ; Clears the LCD display.
0333+  0000             LCDCLRRNG         = $EE78 ; Clears the range from (UH00-UH40).
0334+  0000             SAVELCD2BUF       = $EE80 ; Save LCD to buffer
0335+  0000             BUF2LCD           = $EE99 ; Transfer buffer to LCD
0336+  0000             LCDCHRLEFT        = $EEB0 ; Determines number of empty characters left on LCD, to A.
0337+  0000             BCMD_POINT        = $EECB ; Basic command POINT
0338+  0000             CURSOR_OFF        = $EF00 ; Turns off blinking cursor.
0339+  0000             USING2STK         = $EF05 ; Saves USING parameters on processor stack (7895-7897)
0340+  0000             ARX2STRNG         = $EF1B ; Convert AR-X to string
0341+  0000             STK2USING         = $EF35 ; Get USING parameters from processor stack.
0342+  0000             TXT2LCD           = $EF44 ; Output text on LCD display.
0343+  0000             TXT2LCD_ARY       = $EF5B ; Output text on LCD from AR-Y to 7AXL
0344+  0000             PREPLCDOUT        = $EF67 ; Prepare the LCD output
0345+  0000             OUTBUFCLR         = $EF81 ; Clear output buffer.
0346+  0000             SUBTR             = $EFB6 ; AR-X = AR-X - AR-Y (Subtraction).
0347+  0000             ADDIT             = $EFBA ; AR-X = AR-X + AR-Y (Addition).
0348+  0000             PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
0349+  0000             PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
0350+  0000             PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
0351+  0000             PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
0352+  0000             PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
0353+  0000             PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
0354+  0000             PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
0355+  0000             PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
0356+  0000             PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
0357+  0000             PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
0358+  0000             PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
0359+  0000             PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)
0360+  0000             SQUARE            = $F019 ; AR-X = AR-X * AR-X (Square)
0361+  0000             MULTIPLY          = $F01A ; AR-X = AR-X * AR-Y (Multiplication)
0362+  0000             ADDMANY           = $F067 ; Add multiple ARs to AR-X if proper bit set in A
0363+  0000             RECIPRICAL        = $F080 ; AR-X = 1 /AR- X (Reciprocal)
0364+  0000             DIVISION          = $F084 ; AR-X = AR-X / AR-Y (Division)
0365+  0000             SQR_ROOT          = $F0E9 ; AR-X = SQR (AR-X) (Square Root)
0366+  0000             BCMD_LN           = $F161 ; Basic command LN, AR-X = LN (AR-X)
0367+  0000             BCMD_LOG          = $F165 ; Basic command LOG, AR-X = LOG (AR-X)
0368+  0000             BCMD_EXP          = $F1CB ; Basic command EXP
0369+  0000             EXPONENT          = $F1D4 ; AR-X = 10 ^ AR-X
0370+  0000             BCMD_COS          = $F391 ; Basic command COS
0371+  0000             BCMD_TAN          = $F39E ; Basic command TAN
0372+  0000             BCMD_SIN          = $F3A2 ; Basic command SIN
0373+  0000             BCMD_ACS          = $F492 ; Basic command ACS
0374+  0000             BCMD_ATN          = $F496 ; Basic command ATN
0375+  0000             BCMD_ASN          = $F49A ; Basic command ASN
0376+  0000             BCMD_DEG          = $F531 ; Basic command DEG
0377+  0000             BCMD_DMS          = $F564 ; Basic command DMS
0378+  0000             BCMD_ABS          = $F597 ; Basic command ABS
0379+  0000             BCMD_SGN          = $F590 ; Basic command SGN
0380+  0000             BCMD_PI           = $F5B5 ; Basic command PI (in AR-Y)
0381+  0000             BCMD_INT          = $F5BE ; Basic command INT
0382+  0000             BCMD_RND          = $F5D0 ; Basic command RND
0383+  0000             RANDGEN           = $F5EB ; Generates randon number in AR-X
0384+  0000             ARX_              = $F63C ; Sets digits 11 and 12 in AR-X to 00. Used at end of (5C)
0385+  0000             BCMD_RANDOM       = $F641 ; Basic command RANDOM
0386+  0000             ARX2BCD_ABS       = $F65D ; Converts AR-X into BCD form.
0387+  0000             ARX2BCD           = $F663 ; Converts the result in the AR-X into the correct BCD format.
0388+  0000             XFER_DEC_ARX2ARY  = $F6B4 ; Transfers decimal places from AR-X to AR-Y.
0389+  0000             SIGN_TEST         = $F6E6 ; Push result of sign combination (AR-X and AR-Y) on the stack.
0390+  0000             LDA_SGN_ARX       = $F6FB ; Load A with sign from AR-X, clears signs AR-X.
0391+  0000             XFER_ARY2ARS      = $F701 ; Transfer AR-Y to AR-S
0392+  0000             XFER_ARX2ARS      = $F707 ; Transfer AR-X to AR-S.
0393+  0000             XFER_ARX2ARY      = $F70D ; Transfer AR-X to AR-Y.
0394+  0000             XFER_ARS2ARY      = $F715 ; Transfer AR-S to AR-Y.
0395+  0000             XFER_SM_ARY2ARX   = $F71B ; Transfer sign and mantissa from AR-Y to AR-X.
0396+  0000             XFER_SM_ARZ2ARX   = $F71F ; Transfer sign and mantissa from AR-Z to AR-X.
0397+  0000             XFER_SM_ARY2ARZ   = $F725 ; Transfer sign and mantissa from AR-Y to AR-Z.
0398+  0000             XFER_SM_ARX2ARY   = $F729 ; Transfer sign and mantissa from AR-X to AR-Y
0399+  0000             XFER_SM_ARX2ARZ   = $F72F ; Transfer sign and mantissa from AR-X to AR-Z (7A09 - 7A0F).
0400+  0000             XREG2YREG         = $F733 ; Block shift 7 bytes from X-Reg to Y-Reg.
0401+  0000             XFER_ARS2ARX      = $F737 ; Transfer AR-S to AR-X.
0402+  0000             XFER_ARY2ARX      = $F73D ; Transfer AR-Y to AR-X.
0403+  0000             CLR_SM_ARY        = $F747 ; Clear sign and mantissa of AR-Y.
0404+  0000             CLR_SM_ARZ        = $F74B ; Clear sign and mantissa of AR-Z.
0405+  0000             CLR_SM_ARW        = $F74F ; Clear sign and mantissa of AR-W.
0406+  0000             CLR_ARY           = $F753 ; Clear AR-Y
0407+  0000             CLR_ARX           = $F757 ; Clear AR-X.
0408+  0000             CLR_ARZ           = $F75B ; Clear AR-Z.
0409+  0000             CLR_SM_XREG       = $F75F ; Clear sign and mantissa in AR-X
0410+  0000             CLR_7_XREG        = $F761 ; Clear 7 bytes from X-Reg.
0411+  0000             CLR_N_XREG        = $F763 ; Clear UL + 1 byte from X-Reg.
0412+  0000             ARW_SHR_4BITS     = $F769 ; Shift AR-W one nibble right (/10)
0413+  0000             ARZ_SHR_4BITS     = $F76D ; Shift AR-Z one nibb;e right (/10)
0414+  0000             ARY_SHR_4BITS     = $F771 ; Shift AR-Y one nibble right (/10)
0415+  0000             ARX_SHR_4BITS     = $F775 ; Shift AR-X one nibble right (/10)
0416+  0000             X_REG_SHR_4BITS   = $F777 ; Shift X-Reg one nibble right (/10)
0417+  0000             ARS_SHL_4BITS     = $F78C ; Shift AR-S one nibble left (*10).
0418+  0000             ARW_SHL_4BITS     = $F794 ; Shift AR-W one nibble left (*10).
0419+  0000             ARZ_SHL_4BITS     = $F798 ; Shift AR-Z one nibble left (*10).
0420+  0000             ARX_SHL_4BITS     = $F79C ; Shift AR-X one nibble left (*10).
0421+  0000             RND2ARX           = $F7A7 ; Transfer random number from RND to AR-X.
0422+  0000             SET_HB_XYREGS     = $F7B0 ; Set high bytes in X-Reg and Y-Reg to 7A (to AR register).
0423+  0000             SWAP_AARX_ARY     = $F7B5 ; Swap AR-X with AR-S.
0424+  0000             SWAP_ARX_ARY      = $F7B9 ; Swap AR-X with AR-Y.
0425+  0000             SWAP_BYTES        = $F7BF ; Swap bytes (UL+1)
0426+  0000             ADD_ARU_ARX       = $F7C8 ; AR-X = AR-X + AR-U.
0427+  0000             TOKENIZE_INBUF    = $F957 ; Tokenizer. Convert input buffer to program line.
0428+  0000             VAR_TYPE          = $F97B ; Convert input buffer into tokens and use formula interpreter
0429+  0000             DEC_OPN           = $FA58 ; Decrement the OPN byte in A in 2K steps
0430+  0000             SET_PV            = $FA65 ; Sets PV bit and PV byte according to Carry flag
0431+  0000             TOKEN_CHECK       = $FA74 ; Checks if token table exists, right-shifted HB address in A. No, C=0.
0432+  0000             TOKEN_PROCESS     = $FA89 ; Processes tokens according to data bytes.
0433+  0000             PVBANK_A          = $FB2A ; Performs PV banking according to A (79D0).
0434+  0000             TRACE             = $FB9D ; Trace
0435+  0000             STRXFR            = $FBCB ; Save string to output buffer or output to string buffer
0436+  0000             AUX_CONST         = $FBE9 ; Auxiliary constants for arithmetic routines
0437+  0000             CHARSET           = $FCA0 ; Character set table
0438+  0000             KB_LAYOUT_NORM    = $FE80 ; Keyborad layout (standard function)
0439+  0000             KB_LAYOUT_SH      = $FEC0 ; Keyborad layout (shifted function)
0440+  0000             CALL_VECTORS      = $FF00 ; Table for CALL vectors
0008   0000             #INCLUDE    "lib/CE-158.lib"
0001+  0000              ; CE-158 library file
0002+  0000             OUTSTAT_REG       = $7850 ; CE-158 OUTSTAT value
0003+  0000             CONSOLE_REG       = $7851 ; CE-158 CONSOLE. Number of characters/line. Default=0=unlimited
0004+  0000             CONSOLE2          = $7852 ; CE-158 Console 1 (//)
0005+  0000             CE158_UNDEF1      = $7853 ; CE-158 Undefined
0006+  0000             CE158_UNDEF2      = $7854 ; CE-158 Undefined
0007+  0000             CRLF_REG          = $7855 ; CE-158 EOL Character(s) used i.e. CR/LF. HB for LPT, LB for COM
0008+  0000             ZONE_REG          = $7856 ; CE-158 ZONE
0009+  0000             SETDEV_REG        = $7857 ; CE-158 SETDEV value
0010+  0000             SETCOM_REG        = $7858 ; CE-158 SETCOM
0011+  0000             CE158_7859_UNDEF  = $7859 ; CE-158 Undefined
0012+  0000             CE158_785A_UNDEF  = $785A ; CE-158 Undefined
0013+  0000             CE158_REG_79DD    = $79DD ; Used for BPD command flags
0014+  0000             CE158_REG_79DE    = $79DE ; Unknown use
0015+  0000             CE158_REG_79DF    = $79DF ; Used for CLOAD/CSAVE BUSY annunciator blink counter
0016+  0000             CE158_REG_79FA    = $79FA ; Used by CE-158
0017+  0000             CE158_REG_79FB    = $79FB ; Used by CE-158
0018+  0000             CE158_REG_79FC    = $79FC ; Used by CE-158
0019+  0000             CE158_REG_79FD    = $79FD ; Used by CE-158
0020+  0000             CE158_REG_79FE    = $79FE ; Used by CE-158
0021+  0000             CE158_7B08        = $7B08 ; Used in CE-158 Low Bank
0022+  0000             CE158_DIV_RESET   = $D004 ; CE158_DIVIDER_RESET (ME1)
0023+  0000             CE158_UREG_OUTP   = $D005 ; CE158_U_REG_OUTPUT  (ME1)
0024+  0000             CE158_SER_XFR     = $D006 ; CE158_SERIAL_XFR  (ME1)
0025+  0000             CE158_FREG_LDIV   = $D007 ; CE158_F_REG_LD/DIV  (ME1)
0026+  0000             CE158_PRT_C       = $D008 ; CE158_PRT_C  (ME1)
0027+  0000             CE158_G_REG       = $D009 ; CE158_G_REG  (ME1)
0028+  0000             CE158_MSK_REG     = $D00A ; CE158_MSK_REG  (ME1)
0029+  0000             CE158_IF_REG      = $D00B ; CE158_IF_REG  (ME1)
0030+  0000             CE158_PRT_A_DIR   = $D00C ; CE158_PRT_A_DIR  (ME1)
0031+  0000             CE158_PRT_B_DIR   = $D00D ; CE158_PRT_B_DIR  (ME1)
0032+  0000             CE158_PRT_A       = $D00E ; CE158_PRT_A  (ME1)
0033+  0000             CE158_PRT_B       = $D00F ; CE158_PRT_B  (ME1)
0034+  0000             CE158_UART_DATAW  = $D200 ; UART_DATA_W
0035+  0000             CE158_UART_REGW   = $D201 ; UART_REG_W
0036+  0000             CE158_UART_DATAR  = $D202 ; UART_DATA_R
0037+  0000             CE158_UART_REGR   = $D203 ; UART_REG_R
0038+  0000             CE-158_IR_PING    = $DC00 ; PC-1500 pings this address every ISR cycle (does nothing)
0039+  0000             CE158_IR_REG      = $DE00 ; Interrupt ID register, Bit 7 0 = INT, 1 = No INT.
0009   0000             ;#INCLUDE    "lib/CE-158N.lib"
0010   0000             #INCLUDE    "lib/CE-150.lib"
0001+  0000              ; CE-150 library file
0002+  0000             USER_CTRX_H       = $79E0 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (H)
0003+  0000             USER_CTRX_L       = $79E1 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (L)
0004+  0000             USER_CTRY_H       = $79E2 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (H)
0005+  0000             USER_CTRY_L       = $79E3 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (L)
0006+  0000             SCIS_CTRY_H       = $79E4 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (H)
0007+  0000             SCIS_CTRY_L       = $79E5 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (L)
0008+  0000             ABS_POSX          = $79E6 ; CE-150, ABSOLUTE POSITION X (X dir absolute point counter)
0009+  0000             SCIS_EXTY_H       = $79E7 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (H)
0010+  0000             SCIS_EXTY_L       = $79E8 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (L)
0011+  0000             PEN_UPDOWN        = $79E9 ; CE-150, Pen UP/DOWN
0012+  0000             LINE_TYPE         = $79EA ; CE-150, LINE TYPE (0 to 9), GRAPH mode
0013+  0000             DOT_LINE_CTR      = $79EB ; CE-150, Dotted line counter
0014+  0000             CURR_PEN          = $79EC ; CE-150, Current Pen position: 00=up, 01=down
0015+  0000             XMTR_HLD_CTR      = $79ED ; CE-150, X-motor hold counter
0016+  0000             MTR_PHASE         = $79EE ; CE-150, Motor Phase: stored in Port C
0017+  0000             YMTR_HLD_CTR      = $79EF ; CE-150, Y-Motor hold counter
0018+  0000             PRNT_MODE         = $79F0 ; CE-150, Print Mode: 00=TEXT, FF=GRAPH
0019+  0000             PRNT_DISABLE      = $79F1 ; CE-150, Printer disable
0020+  0000             PRNT_ROTATE       = $79F2 ; CE-150, ROTATE setting (0 to 3)
0021+  0000             PRNT_COLOR        = $79F3 ; CE-150, COLOR setting (0 to 3)
0022+  0000             PRNT_CSIZE        = $79F4 ; CE-150, CSIZE setting (0 to 3)
0023+  0000             PRNT_LLPARAM      = $79F5 ; CE-150, LPRINT/LLIST Parameter
0024+  0000             PRNT_TEMPM        = $79F6 ; CE-150, LINE=dir. param. LLIST=determine LF. COLOR=Pen location.
0025+  0000             PRNT_DTYPE        = $79F7 ; CE-150, Type of data LRPINTed: 00=numeric, FF=character string
0026+  0000             PRNT_TEMPP        = $79F8 ; CE-150, Temp storage of Pen location during paper feed
0027+  0000             PRNT_PWRINT       = $79F9 ; CE-150, Flag indicating power up/interrupt in progress
0028+  0000             PRNT_VEC          = $A000 ; CE-150 Character vectors (A000-A28A)
0029+  0000             PRNT_VEC_SIZE     = $028B ; 
0030+  0000             MGP1_150          = $A28B ; Start of MGP 1 program block
0031+  0000             COLDES            = $A519 ; CE-150 Color Designation
0032+  0000             MOTOFF            = $A769 ; CE-150 Printer motor OFF
0033+  0000             PRINT_150         = $A781 ; CE-150 Print ASCII character (no LF)
0034+  0000             MOTDRV            = $A8DD ; CE-150 Motor Drive, move pen
0035+  0000             LFEED             = $A951 ; CE-150 Line Feed
0036+  0000             NLFEED            = $AA04 ; CE-150 send #n line feeds to printer
0037+  0000             PENUPDOWN         = $AAE3 ; CE-150 Pen Up/Down
0038+  0000             GRPHPREP          = $ABEF ; CE-150 Switch from tect to graphics mode
0039+  0000             TEXT              = $ACA6 ; CE-150 TEXT
0040+  0000             TEXTPREP          = $ACD3 ; CE-150 Text mode preperation
0041+  0000             GRAPH             = $ACD3 ; CE-150 GRAPH
0042+  0000             CE150_MSK_REG     = $B00A ; (ME1)
0043+  0000             CE150_IF_REG      = $B00B ; (ME1)
0044+  0000             CE150_PRT_A_DIR   = $B00C ; (ME1)
0045+  0000             CE150_PRT_B_DIR   = $B00D ; (ME1)
0046+  0000             CE150_PRT_A       = $B00E ; (ME1)
0047+  0000             CE150_PRT_B       = $B00F ; (ME1)
0048+  0000             SORGN             = $B153 ; CE-150 SORGN
0049+  0000             ROTATE            = $B15A ; CE-150 ROTATE
0050+  0000             COLOR             = $B16A ; CE-150 COLOR
0051+  0000             CSIZE             = $B180 ; CE-150 CSIZE
0052+  0000             GLCURSOR          = $B191 ; CE-150 GLCURSOR
0053+  0000             LF                = $B1B4 ; CE-150 LF
0054+  0000             LINE              = $B222 ; CE-150 LINE
0055+  0000             RLINE             = $B224 ; CE-150 RLINE
0056+  0000             LPRINT_150        = $B2EC ; CE-150 LPRINT
0057+  0000             LLIST_150         = $B754 ; CE-150 LLIST
0058+  0000             SBRA4             = $B888 ; SBR A4 Start of program block CMT 2
0059+  0000             SBRA8             = $B88B ; SBR A8
0060+  0000             SBRAA             = $B88E ; SBR AA
0061+  0000             SBRAE             = $B891 ; SBR AE
0062+  0000             SBRB0             = $B894 ; SBR B0
0063+  0000             SBRB2             = $B897 ; SBR B2
0064+  0000             SBRB4             = $B89A ; SBR B4
0065+  0000             SBRB6             = $B89D ; SBR B6
0066+  0000             SBRB8             = $B8A0 ; SBR B8
0067+  0000             PCJUMP01          = $B8A3 ; Direct PC load from &E524
0068+  0000             CSAVE_150         = $B8A6 ; CE-150 CSAVE
0069+  0000             CLOAD_150         = $B8F9 ; CE-150 CLOAD
0070+  0000             MERGE_150         = $B994 ; CE-150 MERGE
0071+  0000             CHAIN_150         = $BB6A ; CE-150 CHAIN
0072+  0000             HEADERCREATE      = $BBD6 ; CE-150 Write tape synchronisation header
0073+  0000             TERMCMTIO         = $BBF5 ; CE-150 Finalisation of tape I/O control
0074+  0000             HEADERIO          = $BCE8 ; CE-150 Read tape synchronisation feader / Searh for filename
0075+  0000             FILETRSF          = $BD3C ; CE-150 Read / Write file to tape
0076+  0000             SAVEONECHR        = $BDCC ; CE-150 Send a character to tape
0077+  0000             LOADONECHR        = $BDF0 ; CE-150 Read a character from tape
0078+  0000             RMT               = $BEF9 ; CE-150 RMT
0079+  0000             REMOTEON          = $BF11 ; CE-150 Remote ON
0080+  0000             REMOTEOFF         = $BF43 ; CE-150 Remote OFF
0011   0000             #INCLUDE    "lib/PC-1500_Macros.lib"
0001+  0000             ; PC-1500 Macros
0002+  0000             ;------------------------------------------------------------------------------------------------------------
0003+  0000             ; Assembly macros used to encode arguments for lh5801 'macros' that take arguments inline after CALL
0004+  0000             
0005+  0000             #define EQU .EQU
0006+  0000             .MSFIRST
0007+  0000             
0008+  0000             COMMA:      EQU $2C                         ; ',' used for macros
0009+  0000             CR:         EQU $0D                         ; '/CR' used for macros
0010+  0000             DASH:       EQU $2D                         ; '-' used for macros
0011+  0000             EQUALS:     EQU $3D                         ; '-' used for macros
0012+  0000             HASH:       EQU $23                         ; '#' used for macros
0013+  0000             SEMI:       EQU $3B                         ; ';' used for macros
0014+  0000             QUOTE:      EQU $22                         ; '-' used for macros
0015+  0000             DOLLAR:     EQU $24                         ; '#' used for macros
0016+  0000             PERCENT:    EQU $25                         ; ';' used for macros
0017+  0000             
0018+  0000             
0019+  0000             TOK_OFF:    EQU $F19E                       ; OFF   command token
0020+  0000             TOK_ON:     EQU $F19C                       ; ON    command token
0021+  0000             TOK_TAB:    EQU $F0BB                       ; TAB   command token
0022+  0000             TOK_USING:  EQU $F085                       ; USING command token
0023+  0000             
0024+  0000             
0025+  0000             #define ABRF(n8)        .BYTE n8 - $ - 1    ; calculate forward branch
0026+  0000             #define ABYT(n8)        .BYTE n8            ; use byte verbatium
0027+  0000             #define ABYTL(n16)      .BYTE n16 & $FF     ; use byte verbatium
0028+  0000             #define ACHR(ch)        .BYTE ch            ; character
0029+  0000             #define AWRD(n16)       .WORD n16           ; use word value verbatum
0030+  0000             #define CNIB(n81,n82)   .BYTE ((n81 & $F0) | (n82 & $0F))   ; calculates control nibble
0031+  0000             #define HB(n16)         (n16 >> 8)          ; Return HB of 16bit value
0032+  0000             #define LB(n16)         (n16 & $FF)         ; Return HB of 16bit value
0033+  0000             #define HBO(n16,n8)     ((n16 + n8) >> 8)   ; Return HB of 16bit value
0034+  0000             #define LBO(n16,n8)     ((n16 + n8) & $FF)  ; Return HB of 16bit value
0035+  0000             
0036+  0000             ; CE-158 related
0037+  0000             #define HIGH_BANK       SPU \ SPV           ; Switch to High Bank
0038+  0000             #define LOW_BANK        RPU \ SPV           ; Switch to High Bank
0039+  0000             #define SETCOM_M        LDI A,$F9 \ STA (SETCOM_REG)    ; SETDEV to 2400,8,N,1
0040+  0000             #define SETDEV_M(n8)    LDI A,n8 \ STA (SETDEV_REG)     ; SETCOM to device passed
0041+  0000             #define SETOPN_M(n8)    LDI A,n8 \ STA (OPN)            ; Set OPN to n8 table
0042+  0000             
0043+  0000             KI:                 EQU $01                     ;
0044+  0000             DO:                 EQU $02                     ;
0045+  0000             PO:                 EQU $04                     ;
0046+  0000             CI:                 EQU $08                     ;
0047+  0000             CO:                 EQU $10                     ;
0048+  0000             U1:                 EQU $20                     ; U1, use UART 1 (Bit5=0=UART0, Bit5=1=UART1)
0049+  0000             PN:                 EQU $40                     ; PN, LPT port to input
0050+  0000             BP:                 EQU $80                     ; BP, enable BDP mode with U0
0051+  0000             
0052+  0000             #define ADDRCHK(add,location)        #if ($ > add)    ; check address
0053+  0000             #DEFCONT                     \!over_run
0054+  0000             #DEFCONT                     \.ECHO location
0055+  0000             #DEFCONT                     \.ECHO " address over run by "
0056+  0000             #DEFCONT                     \.ECHO ($ - add)
0057+  0000             #DEFCONT                     \.ECHO " bytes\r\n"
0058+  0000             #DEFCONT                     \#endif
0012   0000             
0013   0000             VIDEORAM = $7000 ; $7000-$77FF ME1
0014   0000             CRTCTRL = $7800 ; $7800-$7801 ME1
0015   0000             
0016   8000             .ORG $8000
0017   8000             
0018   8000             ;------------------------------------------------------------------------------------------------------------
0019   8000             ; BASIC Command Table 8000
0020   8000             ;------------------------------------------------------------------------------------------------------------
0021   8000             ;% B_TBL_8000 START
0022   8000             B_TBL_8000:
0023   8000 55              .BYTE  $55                                          ; Marker that BASIC Table follows 
0024   8001             
0025   8001             B_TBL_8000_TNUM:
0026   8001 05              .BYTE  $05                                          ; Table number
0027   8002             
0028   8002             B_TBL_8000_NAME:
0029   8002 43 52 54 0D     .TEXT  "CRT\r" \ .BYTE $9A,$9A,$9A,$9A              ; Table name
0029   8006 9A 9A 9A 9A 
0030   800A             
0031   800A             B_TBL_8000_INIT:
0032   800A BA 8D C1        JMP     $8DC1                                       ; 82B8 - Table initilization vector
0033   800D             
0034   800D             B_TBL_8000_INPUT_NUM:
0035   800D BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C5 - Table INPUT# vector
0036   8010             
0037   8010             B_TBL_8000_PRINT_NUM:
0038   8010 BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C9 - Table PRINT# vector
0039   8013             
0040   8013             B_TBL_8000_JMPS:
0041   8013 9A 9A 9A 9A     .BYTE  $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A      ; Unused jumps 
0041   8017 9A 9A 9A 9A 
0041   801B 9A 9A 
0042   801D             
0043   801D             B_TBL_8000_TRACE:
0044   801D 93 50 FF        .BYTE $93,$50,$FF                                   ; Unusual
0045   8020             
0046   8020             B_TBL_8000_A_KW:
0047   8020 00 00           .WORD $0000                                         ;
0048   8022             
0049   8022             B_TBL_8000_B_KW:
0050   8022 80 56           .WORD LET_B                                         ; $8056
0051   8024             
0052   8024             B_TBL_8000_C_KW:
0053   8024 80 61           .WORD LET_C                                         ; $8061
0054   8026             
0055   8026             B_TBL_8000_D_KW:
0056   8026 80 95           .WORD LET_D                                         ; $8095
0057   8028             
0058   8028             B_TBL_8000_E_KW:
0059   8028 80 A5           .WORD LET_E                                         ; $80A5
0060   802A             
0061   802A             B_TBL_8000_F_KW:
0062   802A 00 00           .WORD $0000                                         ;
0063   802C             
0064   802C             B_TBL_8000_G_KW:
0065   802C 80 BE           .WORD LET_G                                         ; $80BE
0066   802E             
0067   802E             B_TBL_8000_H_KW:
0068   802E 80 E0           .WORD LET_H                                         ; $80E0
0069   8030             
0070   8030             B_TBL_8000_I_KW:
0071   8030 81 02           .WORD LET_I                                         ; $8102
0072   8032             
0073   8032             B_TBL_8000_J_KW:
0074   8032 00 00           .WORD $0000                                         ; 
0075   8034             
0076   8034             B_TBL_8000_K_KW:
0077   8034 81 0C           .WORD LET_K                                         ; $810C
0078   8036             
0079   8036             B_TBL_8000_L_KW:
0080   8036 81 14           .WORD LET_L                                         ; $8114
0081   8038             
0082   8038             B_TBL_8000_M_KW:
0083   8038 81 26           .WORD LET_M                                         ; $8126
0084   803A             
0085   803A             B_TBL_8000_N_KW:
0086   803A 00 00           .WORD $0000                                         ; 
0087   803C             
0088   803C             B_TBL_8000_O_KW:
0089   803C 00 00           .WORD $0000                                         ; 
0090   803E             
0091   803E             B_TBL_8000_P_KW:
0092   803E 81 3B           .WORD LET_P                                         ; $813B
0093   8040             
0094   8040             B_TBL_8000_Q_KW:
0095   8040 00 00           .WORD $0000                                         ; 
0096   8042             
0097   8042             B_TBL_8000_R_KW:
0098   8042 81 45           .WORD LET_R                                         ; $8145
0099   8044             
0100   8044             B_TBL_8000_S_KW:
0101   8044 81 5B           .WORD LET_S                                         ; $815B
0102   8046             
0103   8046             B_TBL_8000_T_KW:
0104   8046 81 6E           .WORD LET_T                                         ; $816E
0105   8048             
0106   8048             B_TBL_8000_U_KW:
0107   8048 00 00           .WORD $0000                                         ; 
0108   804A             
0109   804A             B_TBL_8000_V_KW:
0110   804A 81 78           .WORD LET_V                                         ; $8178
0111   804C             
0112   804C             B_TBL_8000_W_KW:
0113   804C 00 00           .WORD $0000                                         ; 
0114   804E             
0115   804E             B_TBL_8000_X_KW:
0116   804E 00 00           .WORD $0000                                         ; 
0117   8050             
0118   8050             B_TBL_8000_Y_KW:
0119   8050 00 00           .WORD $0000                                         ; 
0120   8052             
0121   8052             B_TBL_8000_Z_KW:
0122   8052 00 00           .WORD $0000                                         ; 
0123   8054             
0124   8054             B_TBL_8000_CMD_LST:     ;Token LB < 80 command is function, else is proceedure
0125   8054             ;Ctrl nibble    Ctrl nib calc            Name              Token  Vector
0126   8054             LET_B:  EQU ($ + 2) ; First keyword starting with 'B'. LET_B = Address of 'A' in BACKGR
0127   8054             CN1:    EQU $D6 \ CNIB($96,CN1)     \ .TEXT "BACKGR"    \ .WORD $F0DE, $9023        ; $8054
0127   8054 96          
0127   8055 42 41 43 4B 
0127   8059 47 52 
0127   805B F0 DE 90 23 
0128   805F             
0129   805F             LET_C:  EQU ($ + 2) ; First keyword starting with 'C'. LET_C = Address of 'L' in CLS
0130   805F             CN2:    EQU $C3 \ CNIB(CN1,CN2)     \ .TEXT "CLS"       \ .WORD $F088, $8974        ; $805F
0130   805F D3          
0130   8060 43 4C 53    
0130   8063 F0 88 89 74 
0131   8067             CN3:    EQU $A5 \ CNIB(CN2,CN3)     \ .TEXT "CHAIN"     \ .WORD $F0B2, $92DC        ; $8067
0131   8067 C5          
0131   8068 43 48 41 49 
0131   806C 4E 
0131   806D F0 B2 92 DC 
0132   8071             CN4:    EQU $C6 \ CNIB(CN3,CN4)     \ .TEXT "COLORV"    \ .WORD $F0EB, $914F        ; $8071
0132   8071 A6          
0132   8072 43 4F 4C 4F 
0132   8076 52 56 
0132   8078 F0 EB 91 4F 
0133   807C             CN5:    EQU $C7 \ CNIB(CN4,CN5)     \ .TEXT "CONSOLE"   \ .WORD $F0B1, $89B5        ; $807C
0133   807C C7          
0133   807D 43 4F 4E 53 
0133   8081 4F 4C 45 
0133   8084 F0 B1 89 B5 
0134   8088             CN6:    EQU $D6 \ CNIB(CN5,CN6)     \ .TEXT "CURSOR"    \ .WORD $F084, $8A49        ; $8088
0134   8088 C6          
0134   8089 43 55 52 53 
0134   808D 4F 52 
0134   808F F0 84 8A 49 
0135   8093             
0136   8093             LET_D:  EQU ($ + 2) ; First keyword starting with 'D'. LET_D = Address of 'EI' in DIR
0137   8093             CN7:    EQU $C3 \ CNIB(CN6,CN7)     \ .TEXT "DIR"       \ .WORD $F0E0, $92CA        ; $8093
0137   8093 D3          
0137   8094 44 49 52    
0137   8097 F0 E0 92 CA 
0138   809B             CN8:    EQU $53 \ CNIB(CN7,CN8)     \ .TEXT "DEC"       \ .WORD $F070, $914C        ; $809B
0138   809B C3          
0138   809C 44 45 43    
0138   809F F0 70 91 4C 
0139   80A3             
0140   80A3             LET_E:  EQU ($ + 2) ; First keyword starting with 'E'. LET_E = Address of 'D' in EDIT
0141   80A3             CN9:    EQU $C4 \ CNIB(CN8,CN9)     \ .TEXT "EDIT"      \ .WORD $F0C7, $914F        ; $80A3
0141   80A3 54          
0141   80A4 45 44 49 54 
0141   80A8 F0 C7 91 4F 
0142   80AC             CN10:   EQU $C3 \ CNIB(CN9,CN10)    \ .TEXT "ERL"       \ .WORD $F053, $9088        ; $80AC
0142   80AC C3          
0142   80AD 45 52 4C    
0142   80B0 F0 53 90 88 
0143   80B4             CN11:   EQU $D3 \ CNIB(CN10,CN11)   \ .TEXT "ERN"       \ .WORD $F052, $9082        ; $80B4
0143   80B4 C3          
0143   80B5 45 52 4E    
0143   80B8 F0 52 90 82 
0144   80BC             
0145   80BC             LET_G:  EQU ($ + 2) ; First keyword starting with 'G'. LET_G = Address of 'C' in GCLS
0146   80BC             CN12:   EQU $C4 \ CNIB(CN11,CN12)   \ .TEXT "GCLS"      \ .WORD $F0E1, $9107        ; $80BC
0146   80BC D4          
0146   80BD 47 43 4C 53 
0146   80C1 F0 E1 91 07 
0147   80C5             CN13:   EQU $C8 \ CNIB(CN12,CN13)   \ .TEXT "GVCURSOR"  \ .WORD $F0E8, $914F        ; $80C5
0147   80C5 C8          
0147   80C6 47 56 43 55 
0147   80CA 52 53 4F 52 
0147   80CE F0 E8 91 4F 
0148   80D2             CN14:   EQU $D7 \ CNIB(CN13,CN14)   \ .TEXT "GVPRINT"   \ .WORD $F0E9, $914F        ; $80D2
0148   80D2 C7          
0148   80D3 47 56 50 52 
0148   80D7 49 4E 54 
0148   80DA F0 E9 91 4F 
0149   80DE             
0150   80DE             LET_H:  EQU ($ + 2) ; First keyword starting with 'H'. LET_H = Address of 'C' in HCURSOR
0151   80DE             CN15:   EQU $C7 \ CNIB(CN14,CN15)   \ .TEXT "HCURSOR"   \ .WORD $F054, $8EFD        ; $80DE
0151   80DE D7          
0151   80DF 48 43 55 52 
0151   80E3 53 4F 52 
0151   80E6 F0 54 8E FD 
0152   80EA             CN16:   EQU $C8 \ CNIB(CN15,CN16)   \ .TEXT "HPCURSOR"  \ .WORD $F055, $8F04        ; $80EA
0152   80EA C8          
0152   80EB 48 50 43 55 
0152   80EF 52 53 4F 52 
0152   80F3 F0 55 8F 04 
0153   80F7             CN17:   EQU $B4 \ CNIB(CN16,CN17)   \ .TEXT "HEX$"      \ .WORD $F071, $8981        ; $80F7
0153   80F7 C4          
0153   80F8 48 45 58 24 
0153   80FC F0 71 89 81 
0154   8100             
0155   8100             LET_I:  EQU ($ + 2) ; First keyword starting with 'I'. LET_I = Address of 'N' in INPUT
0156   8100             CN18:   EQU $D5 \ CNIB(CN17,CN18)   \ .TEXT "INPUT"     \ .WORD $F091, $8C89        ; $8100
0156   8100 B5          
0156   8101 49 4E 50 55 
0156   8105 54 
0156   8106 F0 91 8C 89 
0157   810A             
0158   810A             LET_K:  EQU ($ + 2) ; First keyword starting with 'K'. LET_K = Address of 'E' in KEY
0159   810A             CN19:   EQU $D3 \ CNIB(CN18,CN19)   \ .TEXT "KEY"       \ .WORD $F0E2, $9308        ; $810A
0159   810A D3          
0159   810B 4B 45 59    
0159   810E F0 E2 93 08 
0160   8112             
0161   8112             LET_L:  EQU ($ + 2) ; First keyword starting with 'L'. LET_L = Address of 'I' in LIST
0162   8112             CN20:   EQU $C4 \ CNIB(CN19,CN20)   \ .TEXT "LIST"      \ .WORD $F090, $8F16        ; $8112
0162   8112 D4          
0162   8113 4C 49 53 54 
0162   8117 F0 90 8F 16 
0163   811B             CN21:   EQU $D4 \ CNIB(CN20,CN21)   \ .TEXT "LOAD"      \ .WORD $F080, $9244        ; $811B
0163   811B C4          
0163   811C 4C 4F 41 44 
0163   8120 F0 80 92 44 
0164   8124             
0165   8124             LET_M:  EQU ($ + 2) ; First keyword starting with 'M'. LET_M = Address of 'O' in MONITOR
0166   8124             CN22:   EQU $C7 \ CNIB(CN21,CN22)   \ .TEXT "MONITOR"   \ .WORD $F0E4, $8EE1        ; $8124
0166   8124 D7          
0166   8125 4D 4F 4E 49 
0166   8129 54 4F 52 
0166   812C F0 E4 8E E1 
0167   8130             CN23:   EQU $D4 \ CNIB(CN22,CN23)   \ .TEXT "MODE"      \ .WORD $F0DF, $91D3        ; $8130
0167   8130 C4          
0167   8131 4D 4F 44 45 
0167   8135 F0 DF 91 D3 
0168   8139             
0169   8139             LET_P:  EQU ($ + 2) ; First keyword starting with 'P'. LET_P = Address of 'R' in PRINT
0170   8139             CN24:   EQU $D5 \ CNIB(CN23,CN24)   \ .TEXT "PRINT"     \ .WORD $F097, $91A7        ; $8139
0170   8139 D5          
0170   813A 50 52 49 4E 
0170   813E 54 
0170   813F F0 97 91 A7 
0171   8143             
0172   8143             LET_R:  EQU ($ + 2) ; First keyword starting with 'R'. LET_R = Address of 'E' in REPKEY
0173   8143             CN25:   EQU $C6 \ CNIB(CN24,CN25)   \ .TEXT "REPKEY"    \ .WORD $F0C3, $90F1        ; $8143
0173   8143 D6          
0173   8144 52 45 50 4B 
0173   8148 45 59 
0173   814A F0 C3 90 F1 
0174   814E             CN26:   EQU $D6 \ CNIB(CN25,CN26)   \ .TEXT "REPROG"    \ .WORD $F0C5, $914F        ; $814E
0174   814E C6          
0174   814F 52 45 50 52 
0174   8153 4F 47 
0174   8155 F0 C5 91 4F 
0175   8159             
0176   8159             LET_S:  EQU ($ + 2) ; First keyword starting with 'S'. LET_S = Address of 'A' in SAVE
0177   8159             CN27:   EQU $C4 \ CNIB(CN26,CN27)   \ .TEXT "SAVE"      \ .WORD $F081, $9234        ; $8159
0177   8159 D4          
0177   815A 53 41 56 45 
0177   815E F0 81 92 34 
0178   8162             CN28:   EQU $D5 \ CNIB(CN27,CN28)   \ .TEXT "SLEEP"     \ .WORD $F0E7, $90AA        ; $8162
0178   8162 C5          
0178   8163 53 4C 45 45 
0178   8167 50 
0178   8168 F0 E7 90 AA 
0179   816C             
0180   816C             LET_T:  EQU ($ + 2) ; First keyword starting with 'T'. LET_T = Address of 'E' in TESTV
0181   816C             CN29:   EQU $D5 \ CNIB(CN28,CN29)   \ .TEXT "TESTV"     \ .WORD $F0EA, $914F        ; $816C
0181   816C D5          
0181   816D 54 45 53 54 
0181   8171 56 
0181   8172 F0 EA 91 4F 
0182   8176             
0183   8176             LET_V:  EQU ($ + 2) ; First keyword starting with 'V'. LET_V = Address of 'E' in VERIFYQ
0184   8176             CN30:   EQU $C7 \ CNIB(CN29,CN30)   \ .TEXT "VERIFYQ"   \ .WORD $F083, $92D9        ; $8176
0184   8176 D7          
0184   8177 56 45 52 49 
0184   817B 46 59 51 
0184   817E F0 83 92 D9 
0185   8182             CN31:   EQU $C7 \ CNIB(CN30,CN31)   \ .TEXT "VCURSOR"   \ .WORD $F056, $8EE4        ; $8182
0185   8182 C7          
0185   8183 56 43 55 52 
0185   8187 53 4F 52 
0185   818A F0 56 8E E4 
0186   818E             CN32:   EQU $C8 \ CNIB(CN31,CN32)   \ .TEXT "VPCURSOR"  \ .WORD $F050, $8EEB        ; $818E
0186   818E C8          
0186   818F 56 50 43 55 
0186   8193 52 53 4F 52 
0186   8197 F0 50 8E EB 
0187   819B             
0188   819B             CN33:  EQU $D0 \ .BYTE CN33
0188   819B D0          
0189   819C             
0190   819C             B_TBL_8000_END:
0191   819C             ;% B_TBL_8000 END
0192   819C             
0193   819C             
0194   819C             FILLER: ; $819C
0195   819C 00 38           .BYTE $00,$38
0196   819E             
0197   819E             ;------------------------------------------------------------------------------
0198   819E             ; UNKNOWN
0199   819E             JMP_819E: ; BR $826F, $827C, LIST:$8F8F
0200   819E FD 98           PSH  Y
0201   81A0 FD A5 77 D9     LDA  #(VIDEORAM + $07D9) ; $77D9
0202   81A4 B7 01           CPI  A,$01
0203   81A6 89 0A           BZR  BR_81B2 ; $81B2
0204   81A8 B5 40           LDI  A,$40
0205   81AA AE 79 D1        STA  (OPN)
0206   81AD FD EB 77 D9     ORI  #(VIDEORAM + $07D9),$02 ; $77D9
0206   81B1 02 
0207   81B2             
0208   81B2             BR_81B2: ; BR $81A6
0209   81B2 E9 79 D4 00     ANI  (KB_BYPASS),$00 ; $79D4
0210   81B6 14              LDA  YL
0211   81B7 FD AE 77 D4     STA  #(VIDEORAM + $07D4) ; $77D4
0212   81BB A5 78 80        LDA  (DISPARAM)
0213   81BE B7 02           CPI  A,$02
0214   81C0 8B 6D           BZS  BR_822F ; $822F
0215   81C2 FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0216   81C6 B7 19           CPI  A,$19
0217   81C8 89 05           BZR  BR_81CF ; $81CF
0218   81CA BE 8C 57        SJP  (JMP_8C57) ; $8C57
0219   81CD 83 60           BCS  BR_822F ; $822F
0220   81CF             
0221   81CF             BR_81CF: ; BR $81C8
0222   81CF BE 88 EB        SJP  (JMP_88EB) ; $88EB
0223   81D2 B7 19           CPI  A,$19
0224   81D4 81 03           BCR  BR_81D9 ; $81D9
0225   81D6 BE 84 D7        SJP  (JMP_84D7) ; $84D7
0226   81D9             
0227   81D9             BR_81D9: ; BR $81D4
0228   81D9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3 
0229   81DD B7 09           CPI  A,$09
0230   81DF 89 08           BZR  BR_81E9 ; $81E9
0231   81E1 BE 89 29        SJP  (JMP_8929) ; $8929
0232   81E4 81 49           BCR  BR_822F ; $822F
0233   81E6 BE 84 66        SJP  (BR_8466) ; $8466
0234   81E9             
0235   81E9             BR_81E9: ; BR $81DF
0236   81E9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0237   81ED B7 0D           CPI  A,$0D
0238   81EF 89 03           BZR  BR_81F4 ; $81F4
0239   81F1 BE 87 CC        SJP  (JMP_87CC) ; $87CC
0240   81F4             
0241   81F4             BR_81F4: ; BR $81EF
0242   81F4 BE 88 EB        SJP  (JMP_88EB) ; $88EB
0243   81F7 B7 19           CPI  A,$19
0244   81F9 81 03           BCR  BR_81FE ; $81FE
0245   81FB BE 84 D7        SJP  (JMP_84D7) ; $84D7
0246   81FE             
0247   81FE             BR_81FE: ; BR $81F9
0248   81FE FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0249   8202 18              STA  YH
0250   8203 5A 01           LDI  YL,$01
0251   8205 FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
0252   8209 B7 01           CPI  A,$01
0253   820B 89 08           BZR  BR_8215 ; $8215
0254   820D A5 77 4E        LDA  (STRING_VARS + $FE)
0255   8210 18              STA  YH
0256   8211 A5 77 4F        LDA  (STRING_VARS + $FF)
0257   8214 1A              STA  YL
0258   8215             
0259   8215             BR_8215: ; BR $820B
0260   8215 BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
0261   8218 FD 18           LDX  Y
0262   821A 58 7B           LDI  YH,HB(IN_BUF); $7B
0263   821C 5A B0           LDI  YL,LB(IN_BUF) ; $B0
0264   821E FD E9 77 D6     ANI  #(VIDEORAM + $07D6),$00 ; $77D6
0264   8222 00 
0265   8223 BE 85 2C        SJP  (JMP_852C) ; $852C
0266   8226 BE 86 63        SJP  (JMP_8663) ; $8663
0267   8229 BE 84 56        SJP  (JMP_8456) ; $8456
0268   822C BE 87 21        SJP  (JMP_8721) ; $8721
0269   822F             
0270   822F             BR_822F: ; BR $81C0, $81CD, $81E4
0271   822F E9 7B 0A 00     ANI  (APOW_CTR_H),$00
0272   8233 E9 7B 0B 00     ANI  (APOW_CTR_M),$00
0273   8237 E9 7B 0C 00     ANI  (APOW_CTR_L),$00
0274   823B BE 91 50        SJP  (JMP_9150) ; $9150
0275   823E BE 90 DE        SJP  (JMP_90DE) ; $90DE
0276   8241 BE 89 63        SJP  (JMP_8963) ; $8963
0277   8244 FD C8           PSH  A
0278   8246 A5 76 4E        LDA  (DISP_BUFF + $4E)
0279   8249 BB F7           ORI  A,$F7
0280   824B B7 FF           CPI  A,$FF
0281   824D 8B 03           BZS  BR_8252 ; $8252
0282   824F BA 82 71        JMP  BR_8271 ; $8271
0283   8252             
0284   8252             BR_8252: ; BR $824D
0285   8252 FD 88           PSH  X
0286   8254 FD 98           PSH  Y
0287   8256 FD A8           PSH  U
0288   8258 BE E4 2C        SJP  (KEY2ASCII)
0289   825B FD 2A           POP  U
0290   825D FD 1A           POP  Y
0291   825F FD 0A           POP  X
0292   8261 B7 09           CPI  A,$09
0293   8263 89 0C           BZR  BR_8271 ; $8271
0294   8265 EB 76 4E 04     ORI  (DISP_BUFF + $4E),$04
0295   8269 E9 76 4E F7     ANI  (DISP_BUFF + $4E),$F7
0296   826D FD 8A           POP  A
0297   826F 9E D3           BCH  JMP_819E ; $819E
0298   8271             
0299   8271             BR_8271: ; BR $824F, $8263
0300   8271 FD 8A           POP  A
0301   8273 B7 1A           CPI  A,$1A
0302   8275 89 07           BZR  BR_827E ; $827E
0303   8277 BE 8D 41        SJP  (JMP_8D41) ; $8D41
0304   827A FD 1A           POP  Y
0305   827C 9E E0           BCH  JMP_819E ; $819E
0306   827E             
0307   827E             BR_827E: ; BR $8275
0308   827E B7 0B            CPI  A,$0B
0309   8280 89 17            BZR  BR_8299 ; $8299
0310   8282 FD A5 77 D1      LDA  #(VIDEORAM + $07D1) ; $77D1
0311   8286 B7 28            CPI  A,$28
0312   8288 89 0D            BZR  BR_8297 ; $8297
0313   828A FD A5 77 D2      LDA  #(VIDEORAM + $07D2) ; $77D2
0314   828E B7 03            CPI  A,$03
0315   8290 81 05            BCR  BR_8297 ; $8297
0316   8292 FD EF 77 D2      ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0316   8296 FF 
0317   8297             
0318   8297             BR_8297: ; BR $8288, $8290
0319   8297 B5 0B           LDI  A,$0B
0320   8299             
0321   8299             BR_8299: ; BR $8280
0322   8299 B7 0B           CPI  A,$0B
0323   829B 89 4D           BZR  BR_82EA ; $82EA
0324   829D FD C8           PSH  A
0325   829F BE 86 E4        SJP  (JMP_86E4) ; $86E4
0326   82A2 83 05           BCS  BR_82A9 ; $82A9
0327   82A4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; 
0327   82A8 01 
0328   82A9             
0329   82A9             BR_82A9: ; BR $82A2
0330   82A9 FD 8A           POP  A
0331   82AB FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01 ; $77DF
0331   82AF 01 
0332   82B0 B5 0A           LDI  A,$0A
0333   82B2 FD AE 78 00     STA  #(CRTCTRL)
0334   82B6 FD A5 77 DA     LDA  #(VIDEORAM + $07DA) ; $77DA
0335   82BA FD AE 78 01     STA  #(CRTCTRL + $01)
0336   82BE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0336   82C2 FF 
0337   82C3 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0338   82C7 B7 00           CPI  A,$00
0339   82C9 89 08           BZR  BR_82D3 ; $82D3
0340   82CB BE 91 89        SJP  (JMP_9189) ; $9189
0341   82CE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0341   82D2 01 
0342   82D3             
0343   82D3             BR_82D3: ; BR $82C9
0344   82D3 FD A5 77 D9     LDA  #(VIDEORAM + $07D9) ; $77D9
0345   82D7 B7 99           CPI  A,$99
0346   82D9 89 0B           BZR  BR_82E6 ; $82E6
0347   82DB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0347   82DF 01 
0348   82E0 B5 02           LDI  A,$02
0349   82E2 FD AE 77 D9     STA  #(VIDEORAM + $07D9) ; $77D9
0350   82E6             
0351   82E6             BR_82E6: ; BR $82D9
0352   82E6 B5 0B           LDI  A,$0B
0353   82E8 8E D1           BCH  BR_83BB ; $83BB
0354   82EA             
0355   82EA             BR_82EA: ; BR $829B
0356   82EA B7 0A           CPI  A,$0A
0357   82EC 89 29           BZR  BR_8317 ; $8317
0358   82EE FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
0359   82F2 B7 28           CPI  A,$28
0360   82F4 89 1F           BZR  BR_8315 ; $8315
0361   82F6 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0362   82FA B7 17           CPI  A,$17
0363   82FC 81 12           BCR  BR_8310 ; $8310
0364   82FE BE 84 D7        SJP  (JMP_84D7) ; $84D7
0365   8301 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0365   8305 FF 
0366   8306 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0366   830A FF 
0367   830B FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0367   830F FF 
0368   8310             
0369   8310             BR_8310: ; BR $82FC
0370   8310 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01
0370   8314 01 
0371   8315             
0372   8315             BR_8315: ; BR $82F4
0373   8315 B5 0A           LDI  A,$0A
0374   8317             
0375   8317             BR_8317: ; BR $82EC
0376   8317 B7 0A           CPI  A,$0A
0377   8319 89 13           BZR  BR_832E ; $832E
0378   831B FD C8           PSH  A
0379   831D BE 86 FA        SJP  (JMP_86FA) ; $86FA
0380   8320 83 05           BCS  BR_8327 ; $8327
0381   8322 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0381   8326 FF 
0382   8327             
0383   8327             BR_8327: ; BR $8320
0384   8327 FD 8A           POP  A
0385   8329 FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01 ; $77DF
0385   832D 01 
0386   832E             
0387   832E             BR_832E: ; BR $8319
0388   832E B7 0C           CPI  A,$0C
0389   8330 89 11           BZR  BR_8343 ; $8343
0390   8332 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01 ; $77DF
0390   8336 01 
0391   8337 8B 0A           BZS  BR_8343 ; $8343
0392   8339 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00 ; $77DF
0392   833D 00 
0393   833E FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0393   8342 FF 
0394   8343             
0395   8343             BR_8343: ; BR $8330, $8337
0396   8343 B7 08           CPI  A,$08
0397   8345 89 11           BZR  BR_8358
0398   8347 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01 ; $77DF
0398   834B 01 
0399   834C 8B 0A           BZS  BR_8358
0400   834E FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00 ; $77DF
0400   8352 00 
0401   8353 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
0401   8357 FF 
0402   8358             
0403   8358             BR_8358: ; BR $8345, $834C
0404   8358 B7 0E           CPI  A,$0E
0405   835A 89 05           BZR  BR_8361 ; $8361
0406   835C FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00 ; $77D8
0406   8360 00 
0407   8361             
0408   8361             BR_8361: ; BR $835A
0409   8361 B7 1F           CPI  A,$1F
0410   8363 89 02           BZR  BR_8367 ; $8367
0411   8365 8E 04           BCH  BR_836B ; $836B
0412   8367             
0413   8367             BR_8367: ; BR $8363
0414   8367 B7 1E           CPI  A,$1E
0415   8369 89 09           BZR  BR_8374 ; $8374
0416   836B             
0417   836B             BR_836B: ; BR $8365
0418   836B FD C8           PSH  A
0419   836D BE 8D 41        SJP  (JMP_8D41) ; $8D41
0420   8370 FD 8A           POP  A
0421   8372 8E 47           BCH  BR_83BB ; $83BB
0422   8374             
0423   8374             BR_8374: ; BR $8369
0424   8374 B7 0E           CPI  A,$0E
0425   8376 83 09           BCS  BR_8381 ; $8381
0426   8378 B7 0A           CPI  A,$0A
0427   837A 81 05           BCR  BR_8381 ; $8381
0428   837C BE 83 C6        SJP  (JMP_83C6) ; $83C6
0429   837F 8E 3A           BCH  BR_83BB ; $83BB
0430   8381             
0431   8381             BR_8381: ; BR $8376,$837A
0432   8381 1A              STA  YL
0433   8382 FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0434   8386 B7 0D           CPI  A,$0D
0435   8388 89 03           BZR  BR_838D ; $838D
0436   838A BE 84 2D        SJP  (JMP_842D) ; $842D
0437   838D             
0438   838D             BR_838D: ; BR $8388
0439   838D FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0440   8391 B7 0A           CPI  A,$0A
0441   8393 89 03           BZR  BR_8398 ; $8398
0442   8395 BE 84 3B        SJP  (JMP_843B) ; $843B
0443   8398             
0444   8398             BR_8398: ; BR $8393
0445   8398 B7 0B           CPI  A,$0B
0446   839A 89 03           BZR  $839F
0447   839C BE 84 3B        SJP  (JMP_843B) ; $843B
0448   839F 14              LDA  YL
0449   83A0 E9 7B 0E FD     ANI  (CURS_CTRL),$FD
0450   83A4 FD C8           PSH  A
0451   83A6 B5 55           LDI  A,$55
0452   83A8 FD A7 77 E2     CPA  #(VIDEORAM + $07E2) ; $77E2
0453   83AC 89 0B           BZR  BR_83B9 ; $83B9
0454   83AE FD 88           PSH  X
0455   83B0 FD A8           PSH  U
0456   83B2 BE E6 69        SJP  (BCMD_BEEP_STD)
0457   83B5 FD 2A           POP  U
0458   83B7 FD 0A           POP  X
0459   83B9             
0460   83B9             BR_83B9: ; BR $83AC
0461   83B9 FD 8A           POP  A
0462   83BB             
0463   83BB             BR_83BB: ; BR $82E8,$8372,$837F
0464   83BB FD 1A           POP  Y
0465   83BD FD AE 77 D3     STA  #(VIDEORAM + $07D3) ; $77D3
0466   83C1 EB 79 D4 55     ORI  ($79D4),$55 ; ***
0467   83C5 9A              RTN
0468   83C6             
0469   83C6             JMP_83C6: ; BR $837C
0470   83C6 1A              STA  YL
0471   83C7 B5 3E           LDI  A,$3E
0472   83C9 A7 7B B0        CPA  (IN_BUF)
0473   83CC 8B 49           BZS  BR_8417 ; $8417
0474   83CE B5 0D           LDI  A,$0D
0475   83D0 FD A7 77 D3     CPA  #(VIDEORAM + $07D3) ; $77D3
0476   83D4 89 0F           BZR  $83E5
0477   83D6 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
0478   83DA B7 50           CPI  A,$50
0479   83DC 8B 12           BZS  BR_83F0 ; $83F0
0480   83DE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0480   83E2 01 
0481   83E3 8E 32           BCH  BR_8417 ; $8417
0482   83E5 16              CPA  YL
0483   83E6 8B 31           BZS  BR_8419 ; $8419
0484   83E8 5E 08           CPI  YL,$08
0485   83EA 8B 33           BZS  BR_841F ; $841F
0486   83EC 5E 0C           CPI  YL,$0C
0487   83EE 8B 2F           BZS  BR_841F ; $841F
0488   83F0             
0489   83F0             BR_83F0: ; BR $83DC,$841D,$8425,$8428,$844D,$8454
0490   83F0 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0490   83F4 01 
0491   83F5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
0492   83F9 B7 28           CPI  A,$28
0493   83FB 89 1A           BZR  BR_8417 ; $8417
0494   83FD FD 98           PSH  Y
0495   83FF FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0496   8403 DF              DEC  A
0497   8404 18              STA  YH
0498   8405 5A 28           LDI  YL,$28
0499   8407 BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
0500   840A FD 15           LDA  #(Y)
0501   840C FD 1A           POP  Y
0502   840E B7 0E           CPI  A,$0E
0503   8410 81 05           BCR  BR_8417 ; $8417
0504   8412 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0504   8416 01 
0505   8417             
0506   8417             BR_8417: ; BR $83CC,$83E3,$83FB,$8410,$842B,$8442,$844B,$8452
0507   8417 14              LDA  YL
0508   8418 9A              RTN
0509   8419             
0510   8419             BR_8419: ; BR $83E6
0511   8419 5E 0D           CPI  YL,$0D
0512   841B 8B 02           BZS  BR_841F ; $841F
0513   841D 9E 2F           BCH  BR_83F0 ; $83F0
0514   841F             
0515   841F             BR_841F: ; BR $841B
0516   841F FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0517   8423 B7 0A           CPI  A,$0A
0518   8425 9B 37           BZS  BR_83F0 ; $83F0
0519   8427 B7 0B           CPI  A,$0B
0520   8429 9B 3B           BZS  BR_83F0 ; $83F0
0521   842B 9E 16           BCH  BR_8417 ; $8417
0522   842D             
0523   842D             JMP_842D: ; BR $838A
0524   842D B5 3E           LDI  A,$3E
0525   842F A7 7B B0        CPA  (IN_BUF)
0526   8432 89 01           BZR  BR_8435 ; $8435
0527   8434 9A              RTN
0528   8435             
0529   8435             BR_8435: ; BR $8432
0530   8435 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0530   8439 01 
0531   843A 9A              RTN
0532   843B             
0533   843B             JMP_843B: ; BR $8395,$839C
0534   843B A5 76 4F        LDA  (DISP_BUFF + $4F)
0535   843E B9 20           ANI  A,$20
0536   8440 B7 20           CPI  A,$20
0537   8442 99 2D           BZR  BR_8417 ; $8417
0538   8444 5E 0A           CPI  YL,$0A
0539   8446 89 07           BZR  BR_844F ; $844F
0540   8448 BE 86 FA        SJP  (JMP_86FA) ;  $86FA
0541   844B 91 36           BCR  BR_8417 ; $8417
0542   844D 9E 5F           BCH  BR_83F0 ; $83F0
0543   844F             
0544   844F             BR_844F:  ; BR $8446
0545   844F BE 86 E4        SJP  (JMP_86E4) ; $86E4
0546   8452 91 3D           BCR  BR_8417 ; $8417
0547   8454 9E 66           BCH  BR_83F0 ; $83F0
0548   8456             
0549   8456             JMP_8456: ; BR $8229
0550   8456 A5 7B B0        LDA  (IN_BUF)
0551   8459 B7 3E           CPI  A,$3E
0552   845B 8B 01           BZS  BR_845E ; $845E
0553   845D 9A              RTN
0554   845E             
0555   845E             BR_845E:  ; BR $845B
0556   845E A5 78 7B        LDA  (CURS_BLNK_POS) ; $787B
0557   8461 B7 09           CPI  A,$09
0558   8463 81 01           BCR  BR_8466 ; $8466
0559   8465 9A              RTN
0560   8466             
0561   8466             BR_8466: ; BR $81E6,$8463,$8949
0562   8466 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0563   846A 18              STA  YH
0564   846B 5A 01           LDI  YL,$01
0565   846D BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
0566   8470 FD 88           PSH  X
0567   8472 48 8E           LDI  XH,$8E
0568   8474 4A B3           LDI  XL,$B3
0569   8476 68 0D           LDI  UH,$0D
0570   8478 B5 40           LDI  A,$40
0571   847A A9 76 4F        AND  (DISP_BUFF + $4F)
0572   847D B7 40           CPI  A,$40
0573   847F 89 13           BZR  BR_8494 ; $8494
0574   8481 FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01 ; $77F3
0574   8485 01 
0575   8486 83 05           BCS  BR_848D ; $848D
0576   8488 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0576   848C 01 
0577   848D             
0578   848D             BR_848D: ; BR $8486
0579   848D FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00 ; $77F3
0579   8491 00 
0580   8492 8E 27           BCH  BR_84BB ; $84BB
0581   8494             
0582   8494             BR_8494: ; BR $847F
0583   8494 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00 ; $77F3
0583   8498 00 
0584   8499 B5 20           LDI  A,$20
0585   849B A9 76 4F        AND  (DISP_BUFF + $4F)
0586   849E B7 20           CPI  A,$20
0587   84A0 8B 19           BZS  BR_84BB ; $84BB
0588   84A2 B5 10           LDI  A,$10
0589   84A4 A9 76 4F        AND  (DISP_BUFF + $4F)
0590   84A7 B7 10           CPI  A,$10
0591   84A9 89 29           BZR  BR_84D4 ; $84D4
0592   84AB B5 06           LDI  A,$06
0593   84AD FD CA           ADR  X
0594   84AF 6A 0D           LDI  UL,$0D
0595   84B1 BE 88 FD        SJP  (JMP_88FD) ; $88FD
0596   84B4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
0596   84B8 01 
0597   84B9 8E 0A           BCH  BR_84C5 ; $84C5
0598   84BB             
0599   84BB             BR_84BB:  ; BR $8492,$84A0
0600   84BB B7 20           CPI  A,$20
0601   84BD 89 04           BZR  BR_84C3 ; $84C3
0602   84BF B5 03           LDI  A,$03
0603   84C1 FD CA           ADR  X
0604   84C3             
0605   84C3             BR_84C3: ; BR $84BD
0606   84C3 6A 02           LDI  UL,$02
0607   84C5             
0608   84C5             BR_84C5: ; BR $84B9
0609   84C5 B5 3E           LDI  A,$3E
0610   84C7 FD 1E           STA  #(Y)
0611   84C9 54              INC  Y
0612   84CA BE 8D 64        SJP  (JMP_8D64) ; $8D64
0613   84CD BE 89 63        SJP  (JMP_8963) ; $8963
0614   84D0 54              INC  Y
0615   84D1 A4              LDA  UH
0616   84D2 FD 1E           STA  #(Y)
0617   84D4             
0618   84D4             BR_84D4: ; BR $84A9
0619   84D4 FD 0A           POP  X
0620   84D6 9A              RTN
0621   84D7             
0622   84D7             
0623   84D7             ;------------------------------------------------------------------------------
0624   84D7             ; UNKNOWN
0625   84D7             JMP_84D7: ; BR $819D6,$81FB,$82FE,$875F,$87C8,$8890,$8BA7,$8BEA
0626   84D7 1A              STA  YL
0627   84D8 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
0628   84DC B7 28           CPI  A,$28
0629   84DE 8B 06           BZS  BR_84E6 ; $84E6
0630   84E0 5E 19           CPI  YL,$19
0631   84E2 89 02           BZR  BR_84E6 ; $84E6
0632   84E4 14              LDA  YL
0633   84E5 9A              RTN
0634   84E6             
0635   84E6             BR_84E6: ; BR $84DE,$84E2
0636   84E6 BE 8E 5F        SJP  (JMP_8E5F) ; $8E5F
0637   84E9 FD 18           LDX  Y
0638   84EB FD CA           ADR  X
0639   84ED B7 28           CPI  A,$28
0640   84EF 89 0C           BZR  BR_84FD ; $84FD
0641   84F1 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
0642   84F5 B7 19           CPI  A,$19
0643   84F7 8B 04           BZS  BR_84FD ; $84FD
0644   84F9 B5 28           LDI  A,$28
0645   84FB FD CA           ADR  X
0646   84FD             
0647   84FD             BR_84FD: ; BR $84EF,$84F7
0648   84FD 68 07           LDI  UH,$07
0649   84FF 6A 80           LDI  UL,$80
0650   8501             
0651   8501             BR_8501: ; BR $8507,$850B
0652   8501 FD 05           LDA  #(X)
0653   8503 FD 1E           STA  #(Y)
0654   8505 44              INC  X
0655   8506 54              INC  Y
0656   8507 88 08           LOP  UL,BR_8501 ; $8501
0657   8509 FD 62           DEC  UH
0658   850B 93 0C           BCS  BR_8501 ; $8501
0659   850D B5 00           LDI  A,$00
0660   850F 6A 4F           LDI  UL,$4F
0661   8511             
0662   8511             BR_8511: ; BR $8514
0663   8511 FD 1E           STA  #(Y)
0664   8513 54              INC  Y
0665   8514 88 05           LOP  UL,BR_8511 ; $8511
0666   8516 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
0667   851A B7 28           CPI  A,$28
0668   851C 89 04           BZR  BR_8522 ; $8522
0669   851E B5 18           LDI  A,$18
0670   8520 8E 02           BCH  BR_8524 ; $8524
0671   8522             
0672   8522             BR_8522: ; BR $851c
0673   8522 B5 19           LDI  A,$19
0674   8524             
0675   8524             BR_8524: ; BR $8520
0676   8524 FD AE 77 D2     STA  #(VIDEORAM + $07D2) ; $77D2
0677   8528 AE 77 4E        STA  (STRING_VARS + $FE)
0678   852B 9A              RTN
0679   852C             
0680   852C             JMP_852C: ; BR $8223
0681   852C 68 00           LDI  UH,$00
0682   852E 6A 4F           LDI  UL,$4F
0683   8530 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00 ; $77D7
0683   8534 00 
0684   8535             
0685   8535             BR_8535: ; BR $85B3,$8600
0686   8535 BE 88 54        SJP  (JMP_8854) ; $8854
0687   8538 14              LDA  YL
0688   8539 FD A7 77 D4     CPA  #(VIDEORAM + $07D4) ; $77D4
0689   853D 89 17           BZR  BR_8556 ; $8556
0690   853F FD A5 77 D6     LDA  #(VIDEORAM + $07D6) ; $77D5
0691   8543 B7 00           CPI  A,$00
0692   8545 89 0F           BZR  BR_8556 ; $8556
0693   8547 84              LDA  XH
0694   8548 FD AE 77 D4     STA  #(VIDEORAM + $07D4) ; $77D4
0695   854C 04              LDA  XL
0696   854D FD AE 77 D5     STA  #(VIDEORAM + $07D5) ; $77D5
0697   8551 FD EB 77 D6     ORI  #(VIDEORAM + $07D6),$01 ; $77D6
0697   8555 01 
0698   8556             
0699   8556             BR_8556: ; BR $853D,$8545
0700   8556 FD A8           PSH  U
0701   8558 C0              VEJ  (C0)
0702   8559 81 60           BCR  BR_85BB ; $85BB
0703   855B FD 98           PSH  Y
0704   855D FD 88           PSH  X
0705   855F 58 7B           LDI  YH,HB(RND_VAL) ; $7B
0706   8561 5A 00           LDI  YL,LB(RND_VAL) ; $00
0707   8563 FD 98           PSH  Y
0708   8565 CD 1C           VMJ  ($1C) \ ABYT($02)
0708   8567 02          
0709   8568 BE 86 56        SJP  (BR_8656) ; $8656
0710   856B FD 0A           POP  X
0711   856D 59 00           ANI  (Y),$00
0712   856F B7 00           CPI  A,$00
0713   8571 89 03           BZR  BR_8576 ; $8576
0714   8573 B5 FE           LDI  A,$FE
0715   8575 0E              STA  (X)
0716   8576             
0717   8576             BR_8576: ; BR $8571
0718   8576 14              LDA  YL
0719   8577 2A              STA  UL
0720   8578 FD 1A           POP  Y
0721   857A             
0722   857A             BR_857A: ; BR $85A4
0723   857A 45              LIN  X
0724   857B FD 1E           STA  #(Y)
0725   857D 54              INC  Y
0726   857E FD C8           PSH  A
0727   8580 FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
0728   8584 B7 01           CPI  A,$01
0729   8586 8B 04           BZS  BR_858C ; $858C
0730   8588 FD 8A           POP  A
0731   858A 8E 09           BCH  BR_8595 ; $8595
0732   858C             
0733   858C             BR_858C: ; BR $8586
0734   858C FD 8A           POP  A
0735   858E B7 0D           CPI  A,$0D
0736   8590 89 03           BZR  BR_8595 ; $8595
0737   8592 F9              REC
0738   8593 8E 21           BCH  BR_85B6 ; $85B6
0739   8595             
0740   8595             BR_8595: ; BR $858A,$8590
0741   8595 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01 ; $77D7
0741   8599 01 
0742   859A BE 87 E7        SJP  (JMP_87E7) ; $87E7
0743   859D 83 17           BCS  BR_85B6 ; $85B6
0744   859F B7 FF           CPI  A,$FF
0745   85A1 89 01           BZR  BR_85A4 ; $85A4
0746   85A3 56              DEC  Y
0747   85A4             
0748   85A4             BR_85A4: ; BR $85A1
0749   85A4 88 2C           LOP  UL,BR_857A ; $857A
0750   85A6 FD 62           DEC  UH
0751   85A8 FD 62           DEC  UH
0752   85AA A4              LDA  UH
0753   85AB FD 18           LDX  Y
0754   85AD FD 1A           POP  Y
0755   85AF FD 2A           POP  U
0756   85B1 DD              INC  A
0757   85B2 2A              STA  UL
0758   85B3 88 80           LOP  UL,BR_8535 ; $8535
0759   85B5 9A              RTN
0760   85B6             
0761   85B6             BR_85B6: ; BR $8593,$859D
0762   85B6 FD 1A           POP  Y
0763   85B8 FD 2A           POP  U
0764   85BA 9A              RTN
0765   85BB             
0766   85BB             BR_85BB: ; BR $8559
0767   85BB FD 2A           POP  U
0768   85BD 6E 4B           CPI  UL,$4B
0769   85BF 81 03           BCR  BR_85C4 ; $85C4
0770   85C1 BE 86 04        SJP  (BR_8604) ; $8604
0771   85C4             
0772   85C4             BR_85C4: ; BR $85BF
0773   85C4 FD 0E           STA  #(X)
0774   85C6 44              INC  X
0775   85C7 FD C8           PSH  A
0776   85C9 FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
0777   85CD B7 01           CPI  A,$01
0778   85CF 8B 04           BZS  BR_85D5 ; $85D5
0779   85D1 FD 8A           POP  A
0780   85D3 8E 1B           BCH  BR_85F0 ; $85F0
0781   85D5             
0782   85D5             BR_85D5: ; BR $85CF
0783   85D5 FD 8A           POP  A
0784   85D7 B7 0D           CPI  A,$0D
0785   85D9 89 15           BZR  BR_85F0 ; $85F0
0786   85DB FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
0787   85DF B7 18           CPI  A,$18
0788   85E1 8B 06           BZS  BR_85E9 ; $85E9
0789   85E3 46              DEC  X
0790   85E4 46              DEC  X
0791   85E5 BE 88 BF        SJP  (JMP_88BF) ; $88BF
0792   85E8 9A              RTN
0793   85E9             
0794   85E9             BR_85E9: ; BR $85E1
0795   85E9 FD 05           LDA  #(X)
0796   85EB B7 0E           CPI  A,$0E
0797   85ED 83 01           BCS  BR_85F0
0798   85EF 9A              RTN
0799   85F0             
0800   85F0             BR_85F0: ; BR $85D3,$85D9
0801   85F0 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01 ; $77D7
0801   85F4 01 
0802   85F5 BE 87 E7        SJP  (JMP_87E7) ; $87E7
0803   85F8 81 01           BCR  BR_85FB ; $85FB
0804   85FA 9A              RTN
0805   85FB             
0806   85FB             BR_85FB: ; BR $85F8
0807   85FB B7 FF           CPI  A,$FF
0808   85FD 89 01           BZR  BR_8600 ; $8600
0809   85FF 46              DEC  X
0810   8600             
0811   8600             BR_8600: ; BR $85FD
0812   8600 88 CD           LOP  UL,BR_8535 ; $8535
0813   8602 F9              REC
0814   8603 9A              RTN
0815   8604             
0816   8604             
0817   8604             ;------------------------------------------------------------------------------
0818   8604             ;UNKNOWN
0819   8604             BR_8604: ; BR $85C1,$
0820   8604 6C FF           CPI  UH,$FF
0821   8606 89 01           BZR  BR_8609 ; $8609
0822   8608 9A              RTN
0823   8609             
0824   8609             BR_8609: ; BR $8606
0825   8609 B7 3A           CPI  A,$3A
0826   860B 81 03           BCR  BR_8610 ; $8610
0827   860D             
0828   860D             BR_860D: ; BR $8612,$861F,$862A
0829   860D 68 FF           LDI  UH,$FF
0830   860F 9A              RTN
0831   8610             
0832   8610             BR_8610: ; BR $860B
0833   8610 B7 30           CPI  A,$30
0834   8612 91 07           BCR  BR_860D ; $860D
0835   8614 FD C8           PSH  A
0836   8616 B5 40           LDI  A,$40
0837   8618 A7 78 80        CPA  (DISPARAM)
0838   861B 89 04           BZR  BR_8621 ; $8621
0839   861D FD 8A           POP  A
0840   861F 9E 14           BCH  BR_860D ; $860D
0841   8621             
0842   8621             BR_8621: ; BR $861B
0843   8621 B5 20           LDI  A,$20
0844   8623 A7 78 80        CPA  (DISPARAM)
0845   8626 89 04           BZR  BR_862C ; $862C
0846   8628 FD 8A           POP  A
0847   862A 9E 1F           BCH  BR_860D ; $860D
0848   862C             
0849   862C             BR_862C: ; BR $8626
0850   862C B5 50           LDI  A,$50
0851   862E FB              SEC
0852   862F 20              SBC  UL
0853   8630 FD A8           PSH  U
0854   8632 68 7A           LDI  UH,HB(ARZ) ; $7A
0855   8634 6A 08           LDI  UL,LB(ARZ) ; $08
0856   8636 FD EA           ADR  U
0857   8638 25              LDA  (U)
0858   8639 FD 2A           POP  U
0859   863B B7 3A           CPI  A,$3A
0860   863D 8B 07           BZS  BR_8646 ; $8646
0861   863F B7 20           CPI  A,$20
0862   8641 8B 03           BZS  BR_8646 ; $8646
0863   8643 FD 8A           POP  A
0864   8645 9A              RTN
0865   8646             
0866   8646             BR_8646: ; BR $863D,$8641
0867   8646 28              STA  UH
0868   8647 FD 8A           POP  A
0869   8649 FD 0E           STA  #(X)
0870   864B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01 ; $77D7
0870   864F 01 
0871   8650 44              INC  X
0872   8651 62              DEC  UL
0873   8652 A4              LDA  UH
0874   8653 68 FF           LDI  UH,$FF
0875   8655 9A              RTN
0876   8656             
0877   8656             BR_8656:
0878   8656 FD 48           LDX  S
0879   8658 FD C8           PSH  A
0880   865A B5 0A           LDI  A,$0A
0881   865C FD CA           ADR  X
0882   865E 05              LDA  (X)
0883   865F 28              STA  UH
0884   8660 FD 8A           POP  A
0885   8662 9A              RTN
0886   8663             
0887   8663             JMP_8663: ; BR $8226
0888   8663 A5 78 80        LDA  (DISPARAM)
0889   8666 B7 80           CPI  A,$80
0890   8668 89 03           BZR  BR_866D ; $866D
0891   866A BA 89 63        JMP  JMP_8963 ; $8963
0892   866D             
0893   866D             BR_866D: ; BR $8668
0894   866D B7 A0           CPI  A,$A0
0895   866F 89 03           BZR  BR_8674 ; $8674
0896   8671 BA 89 63        JMP  JMP_8963 ; $8963
0897   8674             
0898   8674             BR_8674: ; BR $866F
0899   8674 B7 01           CPI  A,$01
0900   8676 89 03           BZR  BR_867B ; $867B
0901   8678 BA 89 63        JMP  JMP_8963 ; $8963
0902   867B             
0903   867B             
0904   867B             BR_867B: ; BR $8676
0905   867B FD A5 77 D4     LDA  #(VIDEORAM + $07D4) ; $77D4
0906   867F 18              STA  YH
0907   8680 FD A5 77 D5     LDA  #(VIDEORAM + $07D5) ; $77D5
0908   8684 1A              STA  YL
0909   8685 B5 0E           LDI  A,$0E
0910   8687 FD AE 78 00     STA  #(CRTCTRL)
0911   868B 94              LDA  YH
0912   868C FD AE 78 01     STA  #(CRTCTRL + $01)
0913   8690 B5 0F           LDI  A,$0F
0914   8692 FD AE 78 00     STA  #(CRTCTRL)
0915   8696 14              LDA  YL
0916   8697 FD AE 78 01     STA  #(CRTCTRL + $01)
0917   869B FD A5 77 DA     LDA  #(VIDEORAM + $07DA) ; $77DA
0918   869F FD 88           PSH  X
0919   86A1 FD C8           PSH  A
0920   86A3 48 8E           LDI  XH,$8E
0921   86A5 4A A1           LDI  XL,$A1
0922   86A7 B5 1C           LDI  A,$1C
0923   86A9 FD CA           ADR  X
0924   86AB ED 78 7C 01     BII  (CURSOR_BLNK),$01
0925   86AF 8B 05           BZS  BR_86B6 ; $86B6
0926   86B1 FD EB 77 DA     ORI  #(VIDEORAM + $07DA),$40 ; $77DA
0926   86B5 40 
0927   86B6             
0928   86B6             BR_86B6: ; BR $8668
0929   86B6 ED 78 7C 01     BII  (CURSOR_BLNK),$01
0930   86BA 89 05           BZR  BR_86C1 ; $86C1
0931   86BC FD E9 77 DA     ANI  #(VIDEORAM + $07DA),$BF ; $77DA
0931   86C0 BF 
0932   86C1             
0933   86C1             BR_86C1: ; BR $86BA
0934   86C1 B5 0A           LDI  A,$0A
0935   86C3 FD AE 78 00     STA  #(CRTCTRL)
0936   86C7 FD A5 77 DA     LDA  #(VIDEORAM + $07DA) ; $77DA
0937   86CB FD AE 78 01     STA  #(CRTCTRL + $01)
0938   86CF B5 0B           LDI  A,$0B
0939   86D1 FD AE 78 00     STA  #(CRTCTRL)
0940   86D5 FD A5 77 DB     LDA  #(VIDEORAM + $07DB) ; $77DB
0941   86D9 B9 1F           ANI  A,$1F
0942   86DB FD AE 78 01     STA  #(CRTCTRL + $01)
0943   86DF FD 8A           POP  A
0944   86E1 FD 0A           POP  X
0945   86E3 9A              RTN
0946   86E4             
0947   86E4             
0948   86E4             ;------------------------------------------------------------------------------
0949   86E4             ; UNKNOWN
0950   86E4             JMP_86E4: ; BR $829F,$844F
0951   86E4 A5 78 65        LDA  (BASPRG_ST_H)
0952   86E7 A7 78 A6        CPA  (SRCH_ADD_H)
0953   86EA 8B 02           BZS  BR_86EE ; $86EE
0954   86EC FB              SEC
0955   86ED 9A              RTN
0956   86EE             
0957   86EE             BR_86EE: ; BR $86EA
0958   86EE A5 78 66        LDA  (BASPRG_ST_L)
0959   86F1 A7 78 A7        CPA  (SRCH_ADD_L)
0960   86F4 8B 02           BZS  BR_86F8 ; $86F8
0961   86F6 FB              SEC
0962   86F7 9A              RTN
0963   86F8             
0964   86F8             BR_86F8: ; BR $86F4
0965   86F8 F9              REC
0966   86F9 9A              RTN
0967   86FA             
0968   86FA             
0969   86FA             ;------------------------------------------------------------------------------
0970   86FA             ; UNKNOWN
0971   86FA             JMP_86FA: ; BR $831D,$8448
0972   86FA FD 88           PSH  X
0973   86FC A5 78 A6        LDA  (SRCH_ADD_H)
0974   86FF 08              STA  XH
0975   8700 A5 78 A7        LDA  (SRCH_ADD_L)
0976   8703 0A              STA  XL
0977   8704 44              INC  X
0978   8705 44              INC  X
0979   8706 45              LIN  X
0980   8707 FD CA           ADR  X
0981   8709 A5 78 67        LDA  (BASPRG_END_H)
0982   870C 86              CPA  XH
0983   870D 8B 04           BZS  BR_8713 ; $8713
0984   870F FD 0A           POP  X
0985   8711 FB              SEC
0986   8712 9A              RTN
0987   8713             
0988   8713             BR_8713: ; BR $870D
0989   8713 A5 78 68        LDA  (BASPRG_END_L)
0990   8716 06              CPA  XL
0991   8717 8B 04           BZS  BR_871D ; $871D
0992   8719 FD 0A           POP  X
0993   871B FB              SEC
0994   871C 9A              RTN
0995   871D             
0996   871D             BR_871D: ; BR $8717
0997   871D FD 0A           POP  X
0998   871F F9              REC
0999   8720 9A              RTN
1000   8721             
1001   8721             
1002   8721             ;------------------------------------------------------------------------------
1003   8721             ; UNKNOWN
1004   8721             JMP_8721: ; BR $822C
1005   8721 A5 78 80        LDA  (DISPARAM)
1006   8724 FD C8           PSH  A
1007   8726 B7 20           CPI  A,$20
1008   8728 8B 28           BZS  BR_8752 ; $8752
1009   872A B7 80           CPI  A,$80
1010   872C 8B 24           BZS  BR_8752 ; $8752
1011   872E B7 A0           CPI  A,$A0
1012   8730 8B 20           BZS  BR_8752 ; $8752
1013   8732 B7 01           CPI  A,$01
1014   8734 8B 1C           BZS  BR_8752 ; $8752
1015   8736 FD 8A           POP  A
1016   8738 FD A5 77 D3     LDA  #(VIDEORAM + $07D3) ; $77D3
1017   873C B7 0D           CPI  A,$0D
1018   873E 8B 01           BZS  BR_8741 ; $8741
1019   8740 9A              RTN
1020   8741             
1021   8741             BR_8741: ; BR $873E
1022   8741 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1023   8745 B7 28           CPI  A,$28
1024   8747 8B 01           BZS  BR_874A ; $874A
1025   8749 9A              RTN
1026   874A             
1027   874A             BR_874A: ; BR $8747
1028   874A A5 7B D7        LDA  (IN_BUF + $27)
1029   874D B7 0D           CPI  A,$0D
1030   874F 89 6A           BZR  BR_87BB ; $87BB
1031   8751 9A              RTN
1032   8752             
1033   8752             BR_8752: ; BR $8728,$872C,$8730,$8734
1034   8752 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
1034   8756 01 
1035   8757 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
1036   875B B7 19           CPI  A,$19
1037   875D 81 03           BCR  BR_8762 ; $8762
1038   875F BE 84 D7        SJP  (JMP_84D7) ; $84D7
1039   8762             
1040   8762             BR_8762: ; BR $875D
1041   8762 BE 87 D4        SJP  (JMP_87D4) ; $87D4
1042   8765 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
1043   8769 18              STA  YH
1044   876A 5A 01           LDI  YL,$01
1045   876C BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1046   876F 6A 4F           LDI  UL,$4F
1047   8771 FD 8A           POP  A
1048   8773 B7 20           CPI  A,$20
1049   8775 89 06           BZR  BR_877D ; $877D
1050   8777 48 7B           LDI  XH,HB(OUT_BUF) ; $7B
1051   8779 4A 60           LDI  XL,LB(OUT_BUF) ; $60
1052   877B 8E 0C           BCH  BR_8789 ; $8789
1053   877D             
1054   877D             BR_877D: ; BR $8775
1055   877D 48 7A           LDI  XH,$7A
1056   877F 4A 10           LDI  XL,$10
1057   8781 6A 19           LDI  UL,$19
1058   8783 B5 0D           LDI  A,$0D
1059   8785 FD AE 77 D3     STA  #(VIDEORAM + $07D3) ; $77D3
1060   8789             
1061   8789             BR_8789: ; BR $877B
1062   8789 68 00           LDI  UH,$00
1063   878B             
1064   878B             BR_878B: ; BR $
1065   878B 45              LIN  X
1066   878C B7 00           CPI  A,$00
1067   878E 8B 0D           BZS  BR_879D; $879D
1068   8790 6C 02           CPI  UH,$02
1069   8792 8B 09           BZS  BR_879D ; $879D
1070   8794 68 01           LDI  UH,$01
1071   8796 FD 1E           STA  #(Y)
1072   8798 54              INC  Y
1073   8799             
1074   8799             BR_8799: ; BR $8799
1075   8799 88 10           LOP  UL,BR_878B ; $878B
1076   879B 8E 08           BCH  BR_87A5 ; $87A5
1077   879D             
1078   879D             BR_879D: ; BR $878E,$8792
1079   879D 6C 01           CPI  UH,$01
1080   879F 89 02           BZR  BR_87A3 ; $87A3
1081   87A1 FD 60           INC  UH
1082   87A3             
1083   87A3             BR_87A3: ; BR $879F
1084   87A3 9E 0C           BCH  BR_8799 ; $8799
1085   87A5             
1086   87A5             BR_87A5: ; BR $879B
1087   87A5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1088   87A9 B7 28           CPI  A,$28
1089   87AB 8B 01           BZS  BR_87AE ; $87AE
1090   87AD 9A              RTN
1091   87AE             
1092   87AE             BR_87AE: ; BR $87AB
1093   87AE 4C 7B           CPI  XH,$7B
1094   87B0 8B 01           BZS  BR_87B3 ; $87B3
1095   87B2 9A              RTN
1096   87B3             
1097   87B3             BR_87B3: ; BR $87B0
1098   87B3 A5 7B 87        LDA  (OUT_BUF + $27)
1099   87B6 B7 00           CPI  A,$00
1100   87B8 89 01           BZR  BR_87BB ; $87BB
1101   87BA 9A              RTN
1102   87BB             
1103   87BB             BR_87BB: ; BR $874F,$87B8,$8791,$87E5
1104   87BB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01 ; $77D2
1104   87BF 01 
1105   87C0 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
1106   87C4 B7 19           CPI  A,$19
1107   87C6 81 03           BCR  BR_87CB ; $87CB
1108   87C8 BE 84 D7        SJP  (JMP_84D7) ; $84D7
1109   87CB             
1110   87CB             BR_87CB: ; BR $87C6
1111   87CB 9A              RTN
1112   87CC             
1113   87CC             
1114   87CC             JMP_87CC: ; BR $81F1
1115   87CC A5 7B B0        LDA  (IN_BUF)
1116   87CF B7 3E           CPI  A,$3E
1117   87D1 9B 18           BZS  BR_87BB ; $87BB
1118   87D3 9A              RTN
1119   87D4             
1120   87D4             JMP_87D4: ; BR $8762
1121   87D4 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1122   87D8 B7 28           CPI  A,$28
1123   87DA 8B 01           BZS  BR_87DD ; $87DD
1124   87DC 9A              RTN
1125   87DD             
1126   87DD             BR_87DD: ; BR $87DA
1127   87DD A5 7B D8        LDA  (IN_BUF + $28)
1128   87E0 B7 0D           CPI  A,$0D
1129   87E2 89 01           BZR  BR_87E5 ; $87E5
1130   87E4 9A              RTN
1131   87E5             
1132   87E5             BR_87E5: ; BR $87E2
1133   87E5 9E 2C           BCH  BR_87BB ; $87BB
1134   87E7             
1135   87E7             
1136   87E7             ;------------------------------------------------------------------------------
1137   87E7             ; UNKNOWN
1138   87E7             JMP_87E7: ; BR $859A,$85F5
1139   87E7 FD A5 77 D7     LDA  #(VIDEORAM + $07D7) ; $77D7
1140   87EB B7 50           CPI  A,$50
1141   87ED 83 01           BCS  BR_87F0 ; $87F0
1142   87EF 9A              RTN
1143   87F0             
1144   87F0             BR_87F0: ; BR $87ED
1145   87F0 A5 78 80        LDA  (DISPARAM)
1146   87F3 B7 50           CPI  A,$50
1147   87F5 8B 06           BZS  BR_87FD ; $87FD
1148   87F7 B7 54           CPI  A,$54
1149   87F9 8B 02           BZS  BR_87FD ; $87FD
1150   87FB FB              SEC
1151   87FC 9A              RTN
1152   87FD             
1153   87FD             BR_87FD: ; BR $87F5,$87F9
1154   87FD FD A5 77 D6     LDA  #(VIDEORAM + $07D6) ; $77D6
1155   8801 B7 01           CPI  A,$01
1156   8803             
1157   8803             BR_8803: ; BR $91C1
1158   8803 89 02           BZR  BR_8807 ; $8807
1159   8805 FB              SEC
1160   8806 9A              RTN
1161   8807             
1162   8807             BR_8807: ; BR $8803
1163   8807 FD 88           PSH  X
1164   8809 FD 98           PSH  Y
1165   880B FD A8           PSH  U
1166   880D FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
1167   8811 18              STA  YH
1168   8812 5A 01           LDI  YL,$01
1169   8814 FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
1170   8818 B7 01           CPI  A,$01
1171   881A 89 08           BZR  BR_8824 ; $8824
1172   881C A5 77 4E        LDA  (STRING_VARS + $FE)
1173   881F 18              STA  YH
1174   8820 A5 77 4F        LDA  (STRING_VARS + $FF)
1175   8823 1A              STA  YL
1176   8824             
1177   8824             BR_8824: ; BR $881A
1178   8824 BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1179   8827 48 7B           LDI  XH,HB(IN_BUF) ; $7B
1180   8829 4A B0           LDI  XL,LB(IN_BUF) ; $B0
1181   882B 6A 4F           LDI  UL,$4F
1182   882D 45              LIN  X
1183   882E 54              INC  Y
1184   882F B7 30           CPI  A,$30
1185   8831 81 06           BCR  BR_8839 ; $8839
1186   8833 B7 3A           CPI  A,$3A
1187   8835 83 02           BCS  BR_8839 ; $8839
1188   8837 88 0C           LOP  UL,$882D
1189   8839             
1190   8839             BR_8839: ; BR $8331,$8335
1191   8839 FD 18           LDX  Y
1192   883B 54              INC  Y
1193   883C 62              DEC  UL
1194   883D             
1195   883D             BR_883D: ; BR $8843
1196   883D FD 15           LDA  #(Y)
1197   883F 54              INC  Y
1198   8840 FD 0E           STA  #(X)
1199   8842 44              INC  X
1200   8843 88 08           LOP  UL,BR_883D ; $883D
1201   8845 FD 2A           POP  U
1202   8847 FD 1A           POP  Y
1203   8849 FD 0A           POP  X
1204   884B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$FF ; $77
1204   884F FF 
1205   8850 B5 FF           LDI  A,$FF
1206   8852 F9              REC
1207   8853 9A              RTN
1208   8854             
1209   8854             
1210   8854             JMP_8854: ; BR $8835
1211   8854 FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
1212   8858 B7 01           CPI  A,$01
1213   885A 8B 01           BZS  BR_885D ; $885D
1214   885C 9A              RTN
1215   885D             
1216   885D             BR_885D: ; BR $885A
1217   885D A5 77 4E        LDA  (STRING_VARS + $FE)
1218   8860 B7 16           CPI  A,$16
1219   8862 83 01           BCS  BR_8865 ; $8865
1220   8864 9A              RTN
1221   8865             
1222   8865             BR_8865: ; BR $8862
1223   8865 FD 98           PSH  Y
1224   8867 FD A8           PSH  U
1225   8869 FD 88           PSH  X
1226   886B 04              LDA  XL
1227   886C FB              SEC
1228   886D A1 70 01        SBC  (SHADOW_RAM + $01)
1229   8870 0A              STA  XL
1230   8871 84              LDA  XH
1231   8872 A1 70 00        SBC  (SHADOW_RAM)
1232   8875 08              STA  XH
1233   8876 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1234   887A B7 50           CPI  A,$50
1235   887C 89 08           BZR  BR_8886 ; $8886
1236   887E 4C 07           CPI  XH,$07
1237   8880 89 02           BZR  BR_8884 ; $8884
1238   8882 4E D0           CPI  XL,$D0
1239   8884             
1240   8884             BR_8884: ; BR $8880
1241   8884 8E 06           BCH  BR_888C ; $888C
1242   8886             
1243   8886             BR_8886: ; BR $887C
1244   8886 4C 03           CPI  XH,$03
1245   8888 89 02           BZR  BR_888C ; $888C
1246   888A 4E E8           CPI  XL,$E8
1247   888C             
1248   888C             BR_888C: ; BR $8884,$8888
1249   888C 81 20           BCR  BR_88AE ; $88AE
1250   888E B5 1A           LDI  A,$1A
1251   8890 BE 84 D7        SJP  (JMP_84D7) ; $84D7
1252   8893 A5 77 4E        LDA  (STRING_VARS + $FE)
1253   8896 18              STA  YH
1254   8897 5A 01           LDI  YL,$01
1255   8899 BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1256   889C FD 0A           POP  X
1257   889E FD 98           PSH  Y
1258   88A0 BE 88 B5        SJP  (JMP_88B5) ; $88B5
1259   88A3 FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1260   88A7 B7 50           CPI  A,$50
1261   88A9 8B 03           BZS  BR_88AE ; $88AE
1262   88AB BE 88 B5        SJP  (JMP_88B5) ; $88B5
1263   88AE             
1264   88AE             BR_88AE: ; BR $888C,$88A9
1265   88AE FD 0A           POP  X
1266   88B0 FD 2A           POP  U
1267   88B2 FD 1A           POP  Y
1268   88B4 9A              RTN
1269   88B5             
1270   88B5             
1271   88B5             ;------------------------------------------------------------------------------
1272   88B5             ; UNKNOWN
1273   88B5             JMP_88B5: ; BR $88A0,$88AB
1274   88B5 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
1274   88B9 FF 
1275   88BA EF 77 4E FF     ADI  (STRING_VARS + $FE),$FF
1276   88BE 9A              RTN
1277   88BF             
1278   88BF             
1279   88BF             ;------------------------------------------------------------------------------
1280   88BF             ; UNKNOWN
1281   88BF             JMP_88BF: ; BR $85E5,$8C17
1282   88BF 04              LDA  XL
1283   88C0 FB              SEC
1284   88C1 A1 70 01        SBC  (SHADOW_RAM + $01)
1285   88C4 0A              STA  XL
1286   88C5 84              LDA  XH
1287   88C6 A1 70 00        SBC  (SHADOW_RAM)
1288   88C9 08              STA  XH
1289   88CA 6A 01           LDI  UL,$01
1290   88CC             
1291   88CC             BR_88CC: ; BR $88E3
1292   88CC 60              INC  UL
1293   88CD FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1294   88D1 4C 00           CPI  XH,$00
1295   88D3 89 05           BZR  BR_88DA ; $88DA
1296   88D5 06              CPA  XL
1297   88D6 8B 02           BZS  BR_88DA ; $88DA
1298   88D8 83 0B           BCS  BR_88E5 ; $88E5
1299   88DA             
1300   88DA             BR_88DA: ; BR $88D3,$88D6
1301   88DA 28              STA  UH
1302   88DB 04              LDA  XL
1303   88DC FB              SEC
1304   88DD A0              SBC  UH
1305   88DE 0A              STA  XL
1306   88DF 84              LDA  XH
1307   88E0 B1 00           SBI  A,$00
1308   88E2 08              STA  XH
1309   88E3 9E 19           BCH  BR_88CC ; $88CC
1310   88E5             
1311   88E5             BR_88E5: ; BR $88D8
1312   88E5 24              LDA  UL
1313   88E6 FD AE 77 D2     STA  #(VIDEORAM + $07D2) ; $77D2
1314   88EA 9A              RTN
1315   88EB             
1316   88EB             
1317   88EB             ;------------------------------------------------------------------------------
1318   88EB             ; UNKNOWN
1319   88EB             JMP_88EB: ; BR $81CF,$81F4
1320   88EB FD A5 77 D8     LDA  #(VIDEORAM + $07D8) ; $77D8
1321   88EF B7 01           CPI  A,$01
1322   88F1 89 05           BZR  BR_88F8 ; $88F8
1323   88F3 A5 77 4E        LDA  (STRING_VARS + $FE)
1324   88F6 8E 04           BCH  BR_88FC ; $88FC
1325   88F8             
1326   88F8             BR_88F8: ; BR $88F1
1327   88F8 FD A5 77 D2     LDA  #(VIDEORAM + $07D2) ; $77D2
1328   88FC             
1329   88FC             BR_88FC: ; BR $88F6
1330   88FC 9A              RTN
1331   88FD             
1332   88FD             
1333   88FD             ;------------------------------------------------------------------------------
1334   88FD             ; UNKNOWN
1335   88FD             JMP_88FD: ; BR $84B1
1336   88FD 68 33           LDI  UH,$33
1337   88FF B5 10           LDI  A,$10
1338   8901 A9 76 4E        AND  (DISP_BUFF + $4E)
1339   8904 B7 10           CPI  A,$10
1340   8906 89 01           BZR  BR_8909 ; $8909
1341   8908 9A              RTN
1342   8909             
1343   8909             BR_8909: ; BR $8906
1344   8909 FD 62           DEC  UH
1345   890B B5 20           LDI  A,$20
1346   890D A9 76 4E        AND  (DISP_BUFF + $4E)
1347   8910 B7 20           CPI  A,$20
1348   8912 89 01           BZR  BR_8915 ; $8915
1349   8914 9A              RTN
1350   8915             
1351   8915             BR_8915: ; BR $8912
1352   8915 FD 62           DEC  UH
1353   8917 B5 40           LDI  A,$40
1354   8919 A9 76 4E        AND  (DISP_BUFF + $4E)
1355   891C B7 40           CPI  A,$40
1356   891E 89 06           BZR  BR_8926 ; $8926
1357   8920 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00 ; $77DF
1357   8924 00 
1358   8925 9A              RTN
1359   8926             
1360   8926             BR_8926: ; BR $891E
1361   8926 68 0D           LDI  UH,$0D
1362   8928 9A              RTN
1363   8929             
1364   8929             
1365   8929             ;------------------------------------------------------------------------------
1366   8929             ; UNKNOWN
1367   8929             JMP_8929: ; BR $81E1
1368   8929 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00 ; $77DF
1368   892D 00 
1369   892E A5 76 4F        LDA  (DISP_BUFF + $4F)
1370   8931 BF 10           BII  A,$10
1371   8933 8B 19           BZS  BR_894E ; $894E
1372   8935 A5 78 80        LDA  (DISPARAM)
1373   8938 B9 01           ANI  A,$01
1374   893A B7 01           CPI  A,$01
1375   893C 8B 02           BZS  BR_8940 ; $8940
1376   893E FB              SEC
1377   893F 9A              RTN
1378   8940             
1379   8940             BR_8940: ; BR $893C
1380   8940 A5 78 80        LDA  (DISPARAM)
1381   8943 B9 01           ANI  A,$01
1382   8945 B7 01           CPI  A,$01
1383   8947 89 05           BZR  BR_894E ; $894E
1384   8949 BE 84 66        SJP  (BR_8466) ; $8466
1385   894C F9              REC
1386   894D 9A              RTN
1387   894E             
1388   894E             BR_894E: ; BR $8933,$8947
1389   894E A5 78 80        LDA  (DISPARAM)
1390   8951 B9 01           ANI  A,$01
1391   8953 B7 00           CPI  A,$00
1392   8955 89 02           BZR  BR_8959 ; $8959
1393   8957 FB              SEC
1394   8958 9A              RTN
1395   8959             
1396   8959             BR_8959: ; BR $8955
1397   8959 BE 8C 57        SJP  (JMP_8C57) ; $8C57
1398   895C FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF ; $77D2
1398   8960 FF 
1399   8961 F9              REC
1400   8962 9A              RTN
1401   8963             
1402   8963             
1403   8963             ;------------------------------------------------------------------------------
1404   8963             ; UNKNOWN
1405   8963             JMP_8963: ; BR $8241,$84CD,$866A,$8671,$8678,$8A98
1406   8963 FD C8           PSH  A
1407   8965 B5 0A           LDI  A,$0A
1408   8967 FD AE 78 00     STA  #(CRTCTRL) ; &7800
1409   896B B5 20           LDI  A,$20
1410   896D FD AE 78 01     STA  #(CRTCTRL + $01) ; $7801
1411   8971 FD 8A           POP  A
1412   8973 9A              RTN
1413   8974             
1414   8974             
1415   8974             ;------------------------------------------------------------------------------------------------------------
1416   8974             ; CLS - 
1417   8974             ; Called from 
1418   8974             ; Arguments: 
1419   8974             ; Outputs: 
1420   8974             ; RegMod: 
1421   8974             ;% LB_CLS START
1422   8974             CLS: ; $8974
1423   8974 FD 98           PSH  Y
1424   8976 BE 8D 41        SJP  (JMP_8D41); $8D41
1425   8979 FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00 ; $77D3
1425   897D 00 
1426   897E FD 1A           POP  Y
1427   8980 E2              VEJ  (E2)
1428   8981             
1429   8981 BE DF B4        SJP  ($DFB4)
1430   8984 D0              VEJ  (D0) \ ABYT($00) \ ABRF(BR_89A0) ; $89A0
1430   8985 00          
1430   8986 19          
1431   8987 6C 00           CPI  UH,$00
1432   8989 8B 04           BZS  BR_898F ; $898F
1433   898B A4              LDA  UH
1434   898C BE 89 A1        SJP  (BR_8981) ; $89A1
1435   898F             
1436   898F             BR_898F:
1437   898F 24              LDA  UL
1438   8990 BE 89 A1        SJP  (BR_8981) ; $89A1
1439   8993 6A 04           LDI  UL,$04
1440   8995 6C 00           CPI  UH,$00
1441   8997 89 02           BZR  BR_899B ; $899B
1442   8999 6A 02           LDI  UL,$02
1443   899B             
1444   899B             BR_899B:
1445   899B BE DF C5        SJP  ($DFC5) ; ARX2STRBUF+1
1446   899E 68 00           LDI  UH,$00
1447   89A0             
1448   89A0             BR_89A0: 
1449   89A0 9A              RTN
1450   89A1             
1451   89A1             BR_8981:
1452   89A1 FD C8           PSH  A
1453   89A3 F1              AEX
1454   89A4 BE 89 A9        SJP  (BR_89A9) ; $89A9
1455   89A7 FD 8A           POP  A
1456   89A9             
1457   89A9             BR_89A9:
1458   89A9 B9 0F           ANI  A,$0F
1459   89AB BB 30           ORI  A,$30
1460   89AD B7 3A           CPI  A,$3A
1461   89AF 81 02           BCR  BR_89B3 ; $89B3
1462   89B1 B3 06           ADI  A,$06
1463   89B3             
1464   89B3             BR_89B3: 
1465   89B3 51              SIN  Y
1466   89B4 9A              RTN
1467   89B5             ;% LB_CLS END
1468   89B5             
1469   89B5             
1470   89B5             ;------------------------------------------------------------------------------------------------------------
1471   89B5             ; CONSOLE - 
1472   89B5             ; Called from 
1473   89B5             ; Arguments: 
1474   89B5             ; Outputs: 
1475   89B5             ; RegMod: 
1476   89B5             ;% LB_CONSOLE START
1477   89B5             CONSOLE:
1478   89B5 15              LDA  (Y)
1479   89B6 B7 49           CPI  A,$49
1480   89B8 89 0A           BZR  BR_89C4 ; $89C4
1481   89BA FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$02 ; $77F4
1481   89BE 02 
1482   89BF BE 8A 38        SJP  (JMP_8A38) ; $8A38
1483   89C2 54              INC  Y
1484   89C3 E2              VEJ  (E2)
1485   89C4             
1486   89C4             BR_89C4:
1487   89C4 B7 4E           CPI  A,$4E
1488   89C6 89 0A           BZR  BR_89D2 ; $89D2
1489   89C8 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$05 ; $77F4
1489   89CC 05 
1490   89CD BE 8A 38        SJP  (JMP_8A38) ; $8A38
1491   89D0 54              INC  Y
1492   89D1 E2              VEJ  (E2)
1493   89D2             
1494   89D2             BR_89D2:
1495   89D2 DE              VEJ  (DE) \ ABRF(BR_8A48) ; $8A48
1495   89D3 74          
1496   89D4 D0              VEJ  (D0) \ ABYT($06) \ ABRF(BR_8A48 ) ; $8A48
1496   89D5 06          
1496   89D6 71          
1497   89D7 24              LDA  UL
1498   89D8 B7 01           CPI  A,$01
1499   89DA 89 09           BZR  BR_89E5 ; $89E5
1500   89DC FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$03 ; $77F4
1500   89E0 03 
1501   89E1 BE 8A 38        SJP  (JMP_8A38) ; $8A38
1502   89E4 E2              VEJ  (E2)
1503   89E5             
1504   89E5             BR_89E5:
1505   89E5 B7 02           CPI  A,$02
1506   89E7 89 09           BZR  BR_89F2 ; $89F2
1507   89E9 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$04 ; $77F4
1507   89ED 04 
1508   89EE BE 8A 38        SJP  (JMP_8A38) ; $8A38
1509   89F1 E2              VEJ  (E2)
1510   89F2             
1511   89F2             BR_89F2:
1512   89F2 B7 00           CPI  A,$00
1513   89F4 89 11           BZR  BR_8A07 ; $8A07
1514   89F6 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$00 ; $77F4
1514   89FA 00 
1515   89FB BE 8A 38        SJP  (JMP_8A38) ; $8A38
1516   89FE 48 8E           LDI  XH,$8E
1517   8A00 4A A1           LDI  XL,$A1
1518   8A02 BE 8D A8        SJP  (JMP_8DA8) ; $8DA8
1519   8A05 9E 93           BCH  CLS
1520   8A07             
1521   8A07             BR_8A07:
1522   8A07 24              LDA  UL
1523   8A08 B7 50           CPI  A,$50
1524   8A0A 8B 1B           BZS  BR_8A27 ; $8A27
1525   8A0C B7 28           CPI  A,$28
1526   8A0E 89 36           BZR  BR_8A46 ; $8A46
1527   8A10 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$01 ; $77F4
1527   8A14 01 
1528   8A15 BE 8A 38        SJP  (JMP_8A38) ; $8A38
1529   8A18 48 8E           LDI  XH,$8E
1530   8A1A 4A 8F           LDI  XL,$8F
1531   8A1C BE 8D A8        SJP  (JMP_8DA8) ; $8DA8
1532   8A1F B5 28           LDI  A,$28
1533   8A21 FD AE 77 D1     STA  #(VIDEORAM + $07D1) ; $77D1
1534   8A25 9E B3           BCH  CLS
1535   8A27             
1536   8A27             BR_8A27:
1537   8A27 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$06 ; $77F4
1537   8A2B 06 
1538   8A2C BE 8A 38        SJP  (JMP_8A38) ; $8A38
1539   8A2F 48 8E           LDI  XH,$8E
1540   8A31 4A A1           LDI  XL,$A1
1541   8A33 BE 8D A8        SJP  (JMP_8DA8) ; $8DA8
1542   8A36 9E C4           BCH  CLS
1543   8A38             
1544   8A38             JMP_8A38:
1545   8A38 FD A5 77 F4     LDA  #(VIDEORAM + $07F4) ; $77F4
1546   8A3C FD AE D4 00     STA  #($D400) ; ***
1547   8A40 9A              RTN
1548   8A41 BE 8D A8        SJP  (JMP_8DA8) $8DA8
1549   8A44 9E D2           BCH  CLS
1550   8A46             
1551   8A46             BR_8A46:
1552   8A46 68 13           LDI  UH,$13
1553   8A48             
1554   8A48             BR_8A48:
1555   8A48 E0              VEJ  (E0)
1556   8A49             ;% LB_CLS END
1557   8A49             
1558   8A49             
1559   8A49             ;------------------------------------------------------------------------------------------------------------
1560   8A49             ; CURSOR - 
1561   8A49             ; Called from 
1562   8A49             ; Arguments: 
1563   8A49             ; Outputs: 
1564   8A49             ; RegMod: 
1565   8A49             ;% LB_CURSOR START
1566   8A49             CURSOR:
1567   8A49 DE              VEJ  (DE) \ ABRF(BR_8A8A) ; $8A8A
1567   8A4A 3F          
1568   8A4B D0              VEJ  (D0) \ ABYT($0C) \ ABRF(BR_8A8A) ; $8A8A
1568   8A4C 0C          
1568   8A4D 3C          
1569   8A4E FD A5 77 D1     LDA  #(VIDEORAM + $07D1) ; $77D1
1570   8A52 DF              DEC  A
1571   8A53 26              CPA  UL
1572   8A54 81 03           BCR  BR_8A59 ; $8A59
1573   8A56 BA 8A 5D        JMP  JMP_8A5D ; $8A5D
1574   8A59             
1575   8A59             BR_8A59:
1576   8A59 68 13           LDI  UH,$13
1577   8A5B 8E 2D           BCH  BR_8A8A ; $8A8A
1578   8A5D             
1579   8A5D             JMP_8A5D:
1580   8A5D 24              LDA  UL
1581   8A5E DD              INC  A
1582   8A5F FD C8           PSH  A
1583   8A61 C2              VEJ  (C2) \ ACHR($2C) \ ABRF(BR_8A75) ; $8A75
1583   8A62 2C          
1583   8A63 11          
1584   8A64 DE              VEJ  (DE) \ ABRF(BR_8A8A) ; $8A8A
1584   8A65 24          
1585   8A66 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_8A88) ; $8A88
1585   8A67 10          
1585   8A68 1F          
1586   8A69 24              LDA  UL
1587   8A6A DD              INC  A
1588   8A6B 2A              STA  UL
1589   8A6C B7 1A           CPI  A,$1A
1590   8A6E 89 03           BZR  BR_8A73 ; $8A73
1591   8A70 68 13           LDI  UH,$13
1592   8A72 E0              VEJ  (E0)
1593   8A73             
1594   8A73             BR_8A73:
1595   8A73 8E 09           BCH  BR_8A7E ; $8A7E
1596   8A75             
1597   8A75             BR_8A75:
1598   8A75 56              DEC  Y
1599   8A76 FD C8           PSH  A
1600   8A78 A5 77 4E        LDA  (STRING_VARS + $FE)
1601   8A7B 2A              STA  UL
1602   8A7C FD 8A           POP  A
1603   8A7E             
1604   8A7E             BR_8A7E:
1605   8A7E 24              LDA  UL
1606   8A7F AE 77 4E        STA  (STRING_VARS + $FE)
1607   8A82 FD 8A           POP  A
1608   8A84 AE 77 4F        STA  (STRING_VARS + $FF)
1609   8A87 E2              VEJ  (E2)
1610   8A88             
1611   8A88             BR_8A88:
1612   8A88 FD 8A           POP  A
1613   8A8A             
1614   8A8A             BR_8A8A:
1615   8A8A E0              VEJ  (E0)
1616   8A8B             
1617   8A8B             JMP_8A8B:
1618   8A8B B5 60           LDI  A,$60
1619   8A8D AE 78 8F        STA  (OUTBUF_PTR) ; $788F
1620   8A90 BE 8C 4A        SJP  (JMP_8C4A) ; $8C4A
1621   8A93 FD EB 77 F3     ORI  #(VIDEORAM + $07F3),$01 ; $77F3
1621   8A97 01 
1622   8A98 BE 89 63        SJP  (JMP_8963) ; $8963
1623   8A9B B5 00           LDI  A,$00
1624   8A9D 6A 4F           LDI  UL,$4F
1625   8A9F 48 7B           LDI  XH,$7B
1626   8AA1 4A 60           LDI  XL,$60
1627   8AA3             
1628   8AA3             BR_8AA3:
1629   8AA3 41              SIN  X
1630   8AA4 88 03           LOP  UL,BR_8AA3 ; $8AA3
1631   8AA6             
1632   8AA6             BR_8AA6:
1633   8AA6 C0              VEJ  (C0)
1634   8AA7 6C F0           CPI  UH,$F0
1635   8AA9 89 02           BZR  BR_8AAD ; $8AAD
1636   8AAB 6E 85           CPI  UL,$85
1637   8AAD             
1638   8AAD             BR_8AAD:
1639   8AAD 8B 03           BZS  BR_8AB2 ; $8AB2
1640   8AAF C6              VEJ  (C6)
1641   8AB0 8E 04           BCH  BR_8AB6 ; $8AB6
1642   8AB2             
1643   8AB2             BR_8AB2:
1644   8AB2 CD 9A           VMJ  ($9A);($4D)
1645   8AB4 C3 E0           VCS  ($E0)
1646   8AB6             
1647   8AB6             BR_8AB6:
1648   8AB6 15              LDA  (Y)
1649   8AB7 B7 0D           CPI  A,$0D
1650   8AB9 8B E3           BZS  BR_89DE ; $8B9E
1651   8ABB             
1652   8ABB             BR_8ABB:
1653   8ABB 15              LDA  (Y)
1654   8ABC B7 3A           CPI  A,$3A
1655   8ABE 8B DE           BZS  BR_89DE ; $8B9E
1656   8AC0 CD 2E           VMJ  ($2E) \ ABRF(BR_8AC5) ; $8AC5
1656   8AC2 02          
1657   8AC3 8E 03           BCH  BR_8AC8 ; $8AC8
1658   8AC5             
1659   8AC5             BR_8AC5:
1660   8AC5 BA 8C 38        JMP  JMP_8C38 ; $8C38
1661   8AC8             
1662   8AC8             BR_8AC8:
1663   8AC8 A5 7A 04        LDA  (ARX + $04)
1664   8ACB B7 C1           CPI  A,$C1
1665   8ACD 8B 58           BZS  BR_8B27 ; $8B27
1666   8ACF B7 D0           CPI  A,$D0
1667   8AD1 8B 54           BZS  BR_8B27 ; $8B27
1668   8AD3 A5 78 95        LDA  (USINGF)
1669   8AD6 B7 00           CPI  A,$00
1670   8AD8 89 1D           BZR  BR_8AF7 ; $8AF7
1671   8ADA B5 10           LDI  A,$10
1672   8ADC AE 78 94        STA  (STR_BUF_PTR_L)
1673   8ADF FD 98           PSH  Y
1674   8AE1 BE D9 CF        SJP  (BCMD_STR)
1675   8AE4 FD 1A           POP  Y
1676   8AE6 6C 00           CPI  UH,$00
1677   8AE8 99 25           BZR  BR_8AC5 ; $8AC5
1678   8AEA A5 7A 01        LDA  (ARX + $01)
1679   8AED B7 00           CPI  A,$00
1680   8AEF 89 04           BZR  BR_8AF5 ; $8AF5
1681   8AF1 EF 78 8F 01     ADI  (OUTBUF_PTR),$01 ; $788F
1682   8AF5             
1683   8AF5             BR_8AF5:
1684   8AF5 8E 30           BCH  BR_8B27 ; $8B27
1685   8AF7             
1686   8AF7             BR_8AF7:
1687   8AF7 FD 98           PSH  Y
1688   8AF9 D2              VEJ  (D2) \ ABRF(BR_8AFC-1) \ ABYT($80) ; -1 hack as target calc 1 off
1688   8AFA 00          
1688   8AFB 80          
1689   8AFC             
1690   8AFC             BR_8AFC:
1691   8AFC CD 96           VMJ  ($96);($4B)
1692   8AFE 14              LDA  YL
1693   8AFF F9              REC
1694   8B00 00              SBC  XL
1695   8B01 2A              STA  UL
1696   8B02             
1697   8B02             BR_8B02:
1698   8B02 45              LIN  X
1699   8B03 B7 20           CPI  A,$20
1700   8B05 89 05           BZR  BR_8B0C ; $8B0C
1701   8B07 88 07           LOP  UL,BR_8B02 ; $8B02
1702   8B09 68 01           LDI  UH,$01
1703   8B0B E0              VEJ  (E0)
1704   8B0C             
1705   8B0C             BR_8B0C:
1706   8B0C 46              DEC  X
1707   8B0D A5 7A 01        LDA  (ARX + $01)
1708   8B10 B7 80           CPI  A,$80
1709   8B12 8B 01           BZS  BR_8B15 ; $8B15
1710   8B14 46              DEC  X
1711   8B15             
1712   8B15             BR_8B15:
1713   8B15 14              LDA  YL
1714   8B16 FB              SEC
1715   8B17 DD              INC  A
1716   8B18 00              SBC  XL
1717   8B19 DD              INC  A
1718   8B1A 2A              STA  UL
1719   8B1B 58 7A           LDI  YH,HB(ARX) ; $7A
1720   8B1D 5A 05           LDI  YL,LB(ARX+5); $05
1721   8B1F 84              LDA  XH
1722   8B20 51              SIN  Y
1723   8B21 04              LDA  XL
1724   8B22 51              SIN  Y
1725   8B23 24              LDA  UL
1726   8B24 1E              STA  (Y)
1727   8B25 FD 1A           POP  Y
1728   8B27             
1729   8B27             BR_8B27:
1730   8B27 FD 98           PSH  Y
1731   8B29 DC              VEJ  (DC)
1732   8B2A A5 78 97        LDA  (USING_CHR)
1733   8B2D B7 00           CPI  A,$00
1734   8B2F 89 04           BZR  BR_8B35 ; $8B35
1735   8B31             
1736   8B31             BR_8B31:
1737   8B31 FD C8           PSH  A
1738   8B33 8E 1D           BCH  BR_8B52 ; $8B52
1739   8B35             
1740   8B35             BR_8B35:
1741   8B35 FD C8           PSH  A
1742   8B37 A5 7A 04        LDA  (ARX + $04)
1743   8B3A B7 D0           CPI  A,$D0
1744   8B3C 8B 06           BZS  BR_8B44 ; $8B44
1745   8B3E FD 8A           POP  A
1746   8B40 B5 00           LDI  A,$00
1747   8B42 9E 13           BCH  BR_8B31 ; $8B31
1748   8B44             
1749   8B44             BR_8B44:
1750   8B44 FD 8A           POP  A
1751   8B46 26              CPA  UL
1752   8B47 83 05           BCS  BR_8B4E ; $8B4E
1753   8B49 2A              STA  UL
1754   8B4A B5 00           LDI  A,$00
1755   8B4C 9E 1D           BCH  BR_8B31 ; $8B31
1756   8B4E             
1757   8B4E             BR_8B4E:
1758   8B4E FB              SEC
1759   8B4F 20              SBC  UL
1760   8B50 FD C8           PSH  A
1761   8B52             
1762   8B52             BR_8B52:
1763   8B52 CD 94           VMJ  ($94);($4A) ; VMJ diss is wrong
1764   8B54 FD 8A           POP  A
1765   8B56 B7 00           CPI  A,$00
1766   8B58 8B 0F           BZS  BR_8B69 ; $8B69
1767   8B5A 2A              STA  UL
1768   8B5B B5 20           LDI  A,$20
1769   8B5D 62              DEC  UL
1770   8B5E 6E 50           CPI  UL,$50
1771   8B60 83 07           BCS  BR_8B69 ; $8B69
1772   8B62             
1773   8B62             BR_8B62:
1774   8B62 5E B0           CPI  YL,$B0
1775   8B64 83 03           BCS  BR_8B69 ; $8B69
1776   8B66 51              SIN  Y
1777   8B67 88 07           LOP  UL,BR_8B62 ; $8B62
1778   8B69             
1779   8B69             BR_8B69:
1780   8B69 14              LDA  YL
1781   8B6A AE 78 8F        STA  ($788F) ; OUTBUF_PTR
1782   8B6D FD 1A           POP  Y
1783   8B6F 55              LIN  Y
1784   8B70 FD AE 77 D3     STA  #(VIDEORAM + $07D3) ; $77D3
1785   8B74 B7 3B           CPI  A,$3B
1786   8B76 9B D2           BZS  BR_8AA6 ; $8AA6
1787   8B78 B7 2C           CPI  A,$2C
1788   8B7A 89 15           BZR  BR_8B91 ; $8B91
1789   8B7C B5 11           LDI  A,$11
1790   8B7E FB              SEC
1791   8B7F A1 7A 07        SBC  (ARX + $07)
1792   8B82 B7 11           CPI  A,$11
1793   8B84 81 02           BCR  BR_8B88 ; $8B88
1794   8B86 B5 01           LDI  A,$01
1795   8B88             
1796   8B88             BR_8B88:
1797   8B88 F9              REC
1798   8B89 A3 78 8F        ADC  (OUTBUF_PTR) ; $788F
1799   8B8C AE 78 8F        STA  (OUTBUF_PTR) ; $788F
1800   8B8F 9E D6           BCH  BR_8ABB ; $8ABB
1801   8B91             
1802   8B91             BR_8B91:
1803   8B91 56              DEC  Y
1804   8B92 B7 3A           CPI  A,$3A
1805   8B94 8B 08           BZS  BR_89DE ; $8B9E
1806   8B96 B7 0D           CPI  A,$0D
1807   8B98 8B 04           BZS  BR_89DE ; $8B9E
1808   8B9A 68 01           LDI  UH,$01
1809   8B9C 8E 9A           BCH  JMP_8C38 ; $8C38
1810   8B9E             
1811   8B9E             BR_89DE:
1812   8B9E FD 98           PSH  Y
1813   8BA0 A5 77 4E        LDA  (STRING_VARS + $FE)
1814   8BA3 B7 19           CPI  A,$19
1815   8BA5 81 03           BCR  BR_8BAA ; $8BAA
1816   8BA7 BE 84 D7        SJP  (JMP_84D7) ; $84D7
1817   8BAA             
1818   8BAA             BR_8BAA:
1819   8BAA 18              STA  YH
1820   8BAB A5 77 4F        LDA  (STRING_VARS + $FF)
1821   8BAE 1A              STA  YL
1822   8BAF BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1823   8BB2 48 7B           LDI  XH,HB(OUT_BUF) ; $7B
1824   8BB4 4A 60           LDI  XL,LB(OUT_BUF) ; $60
1825   8BB6 A5 78 8F        LDA  ($788F) ; OUTBUF_PTR
1826   8BB9 F9              REC
1827   8BBA B1 60           SBI  A,$60
1828   8BBC 83 01           BCS  BR_8BBF ; $8BBF
1829   8BBE DD              INC  A
1830   8BBF             
1831   8BBF             BR_8BBF:
1832   8BBF 2A              STA  UL
1833   8BC0             
1834   8BC0             BR_8BC0:
1835   8BC0 45              LIN  X
1836   8BC1 FD 1E           STA  #(Y)
1837   8BC3 54              INC  Y
1838   8BC4 EF 77 4F 01     ADI  (STRING_VARS + $FF),$01
1839   8BC8 A5 77 4F        LDA  (STRING_VARS + $FF)
1840   8BCB FD A7 77 D1     CPA  #(VIDEORAM + $07D1) ; $77D1
1841   8BCF 81 2B           BCR  BR_8BFC ; $8BFC
1842   8BD1 8B 29           BZS  BR_8BFC ; $8BFC
1843   8BD3 E9 77 4F 01     ANI  (STRING_VARS + $FF),$01
1844   8BD7 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01
1845   8BDB A5 77 4E        LDA  (STRING_VARS + $FE)
1846   8BDE B7 1A           CPI  A,$1A
1847   8BE0 81 1A           BCR  BR_8BFC ; $8BFC
1848   8BE2 6E 00           CPI  UL,$00
1849   8BE4 8B 16           BZS  BR_8BFC ; $8BFC
1850   8BE6 FD 88           PSH  X
1851   8BE8 FD A8           PSH  U
1852   8BEA BE 84 D7        SJP  (JMP_84D7) ; $84D7
1853   8BED A5 77 4E        LDA  (STRING_VARS + $FE)
1854   8BF0 18              STA  YH
1855   8BF1 A5 77 4F        LDA  (STRING_VARS + $FF)
1856   8BF4 1A              STA  YL
1857   8BF5 BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1858   8BF8 FD 2A           POP  U
1859   8BFA FD 0A           POP  X
1860   8BFC             
1861   8BFC             BR_8BFC:
1862   8BFC 88 3E           LOP  UL,BR_8BC0 ; $8BC0
1863   8BFE FD 18           LDX  Y
1864   8C00 46              DEC  X
1865   8C01 FD 1A           POP  Y
1866   8C03 56              DEC  Y
1867   8C04 55              LIN  Y
1868   8C05 B7 3B           CPI  A,$3B
1869   8C07 8B 0E           BZS  BR_8C17 ; $8C17
1870   8C09 B5 01           LDI  A,$01
1871   8C0B A7 77 4F        CPA  (STRING_VARS + $FF)
1872   8C0E 8B 07           BZS  BR_8C17 ; $8C17
1873   8C10 AE 77 4F        STA  (STRING_VARS + $FF)
1874   8C13 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01
1875   8C17             
1876   8C17             BR_8C17:
1877   8C17 BE 88 BF        SJP  (JMP_88BF) ; $88BF
1878   8C1A 68 00           LDI  UH,$00
1879   8C1C FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00 ; $77D3
1879   8C20 00 
1880   8C21 D8              VEJ  (D8)
1881   8C22 89 05           BZR  BR_8C29 ; $8C29
1882   8C24 B5 03           LDI  A,$03
1883   8C26 AE 78 71        STA  (WAIT_CFG)
1884   8C29             
1885   8C29             BR_8C29:
1886   8C29 A5 78 71        LDA  (WAIT_CFG)
1887   8C2C B7 02           CPI  A,$02
1888   8C2E 8B 0F           BZS  BR_8C3F ; $8C3F
1889   8C30 A5 77 4E        LDA  (STRING_VARS + $FE)
1890   8C33 FD AE 77 D2     STA  #(VIDEORAM + $07D2) ; $77D2
1891   8C37 E2              VEJ  (E2)
1892   8C38             
1893   8C38             JMP_8C38:
1894   8C38 B5 0D           LDI  A,$0D
1895   8C3A FD AE 77 D3     STA  #(VIDEORAM + $07D3) ; $77D3
1896   8C3E E0              VEJ  (E0)
1897   8C3F             
1898   8C3F             BR_8C3F:
1899   8C3F A5 78 72        LDA  (WAIT_CTR_H)
1900   8C42 28              STA  UH
1901   8C43 A5 78 73        LDA  (WAIT_CTR_L)
1902   8C46 2A              STA  UL
1903   8C47 CD AC           VMJ  ($AC);($56)
1904   8C49 E2              VEJ  (E2)
1905   8C4A             
1906   8C4A             JMP_8C4A:
1907   8C4A B5 0A           LDI  A,$0A
1908   8C4C FD AE 78 00     STA  #(CRTCTRL)
1909   8C50 B5 10           LDI  A,$10
1910   8C52 FD AE 78 01     STA  #(CRTCTRL + $01)
1911   8C56 9A              RTN
1912   8C57             
1913   8C57             JMP_8C57:
1914   8C57 A5 78 80        LDA  (DISPARAM)
1915   8C5A B9 01           ANI  A,$01
1916   8C5C B7 01           CPI  A,$01
1917   8C5E 8B 02           BZS  BR_8C62 ; $8C62
1918   8C60 F9              REC
1919   8C61 9A              RTN
1920   8C62             
1921   8C62             BR_8C62:
1922   8C62 CD 38           VMJ  ($38)
1923   8C64 68 02           LDI  UH,$02
1924   8C66 6A 19           LDI  UL,$19
1925   8C68 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)
1926   8C6C 18              STA  YH
1927   8C6D 5A 01           LDI  YL,$01
1928   8C6F BE 8D 6B        SJP  (JMP_8D6B) ; $8D6B
1929   8C72             
1930   8C72             BR_8C72:
1931   8C72 BE 8D 64        SJP  (JMP_8D64) ; $8D64
1932   8C75 FD 62           DEC  UH
1933   8C77 83 07           BCS  BR_8C80 ; $8C80
1934   8C79 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01
1934   8C7D 01 
1935   8C7E FB              SEC
1936   8C7F 9A              RTN
1937   8C80             
1938   8C80             BR_8C80:
1939   8C80 B5 20           LDI  A,$20
1940   8C82 FD 1E           STA  #(Y)
1941   8C84 54              INC  Y
1942   8C85 6A 19           LDI  UL,$19
1943   8C87 9E 17           BCH  BR_8C72 ; $8C72
1944   8C89             ;% LB_CURSOR END
1945   8C89             
1946   8C89             
1947   8C89             ;------------------------------------------------------------------------------------------------------------
1948   8C89             ; INPUT - 
1949   8C89             ; Called from 
1950   8C89             ; Arguments: 
1951   8C89             ; Outputs: 
1952   8C89             ; RegMod: 
1953   8C89             ;% LB_INPUT START
1954   8C89             INPUT:
1955   8C89 C2              VEJ  (C2) \ ACHR($23) \ ABRF(BR_8C8F) ; $8C8F
1955   8C8A 23          
1955   8C8B 03          
1956   8C8C BA C8 FD        JMP  BCMD_CLEAR+8 ; $C8FD
1957   8C8F             
1958   8C8F             BR_8C8F:
1959   8C8F D8              VEJ  (D8)
1960   8C90 89 03           BZR  BR_8C95 ; $8C95
1961   8C92 68 1A           LDI  UH,$1A
1962   8C94 E0              VEJ  (E0)
1963   8C95             
1964   8C95             BR_8C95:
1965   8C95 C6              VEJ  (C6)
1966   8C96 BE D0 34        SJP  (INBUF_CLR)
1967   8C99 C2              VEJ  (C2) \ ACHR($22) \ ABRF(BR_8CFB) ; $8CFB
1967   8C9A 22          
1967   8C9B 5F          
1968   8C9C CD 0C           VMJ  ($0C)
1969   8C9E FD 98           PSH  Y
1970   8CA0 5A B0           LDI  YL,$B0
1971   8CA2 58 7B           LDI  YH,$7B
1972   8CA4 FD C8           PSH  A
1973   8CA6 A5 77 4E        LDA  (STRING_VARS + $FE)
1974   8CA9 FD AE 77 D2     STA  #(VIDEORAM + $07D2)
1975   8CAD FD 8A           POP  A
1976   8CAF EF 77 4E 01     ADI  (STRING_VARS + $FE),$01
1977   8CB3 A5 7A 07        LDA  (ARX + $07)
1978   8CB6 2A              STA  UL
1979   8CB7 BE D0 49        SJP  (UL_XREG2YREG)
1980   8CBA 14              LDA  YL
1981   8CBB AE 78 8B        STA  (INBUFPTR_L)
1982   8CBE FD 1A           POP  Y
1983   8CC0 C2              VEJ  (C2) \ ACHR($3B) \ ABRF(BR_8CC7) ; $8CC7
1983   8CC1 3B          
1983   8CC2 04          
1984   8CC3 B5 40           LDI  A,$40
1985   8CC5 8E 0A           BCH  $8CD1
1986   8CC7             
1987   8CC7             BR_8CC7:
1988   8CC7 C4              VEJ  (C4) \ ACHR($2C) \ ABRF(BR_8D15) ; $8D15
1988   8CC8 2C          
1988   8CC9 4B          
1989   8CCA             
1990   8CCA             BR_8CCA:
1991   8CCA B5 B0           LDI  A,$B0
1992   8CCC AE 78 8B        STA  (INBUFPTR_L)
1993   8CCF B5 00           LDI  A,$00
1994   8CD1 AE 78 80        STA  (DISPARAM)
1995   8CD4 CE              VEJ  (CE) \ ABYT($58) \ ABRF($8D05) ; ***
1995   8CD5 58          
1995   8CD6 2E          
1996   8CD7 F6              VEJ  (F6) \ AWRD(LASTVARADD_H)
1996   8CD8 78 86       
1997   8CDA 44              INC  X
1998   8CDB A5 7A 07        LDA  (ARX + $07)
1999   8CDE 0E              STA  (X)
2000   8CDF D4              VEJ  (D4) \ ABYT($A0)
2000   8CE0 A0          
2001   8CE1 D4              VEJ  (D4) \ ABYT($AC)
2001   8CE2 AC          
2002   8CE3 BE EF 67        SJP  (PREPLCDOUT)
2003   8CE6 68 20           LDI  UH,$20
2004   8CE8 C3 E0           VCS  ($E0)
2005   8CEA EB 78 8A 50     ORI  (BREAKPARAM),$50
2006   8CEE A5 78 8B        LDA  (INBUFPTR_L)
2007   8CF1 1A              STA  YL
2008   8CF2 58 7B           LDI  YH,$7B
2009   8CF4 E9 7B 0E 9F     ANI  (CURS_CTRL),$9F
2010   8CF8 BA 8D 18        JMP  JMP_8D18 ; $8D18
2011   8CFB             
2012   8CFB             BR_8CFB:
2013   8CFB FD C8           PSH  A
2014   8CFD A5 77 4E        LDA  (STRING_VARS + $FE)
2015   8D00 FD AE 77 D2     STA  #(VIDEORAM + $07D2)
2016   8D04 FD 8A           POP  A
2017   8D06 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01
2018   8D0A C6              VEJ  (C6)
2019   8D0B B5 3F           LDI  A,$3F
2020   8D0D AE 7B B0        STA  (IN_BUF)
2021   8D10 9E 48           BCH  BR_8CCA ; $8CCA
2022   8D12 68 07           LDI  UH,$07
2023   8D14 E0              VEJ  (E0)
2024   8D15             
2025   8D15             BR_8D15:
2026   8D15 BA C9 E3        JMP  BCMD_DIM + $5B ; $C9E3
2027   8D18             
2028   8D18             JMP_8D18:
2029   8D18 BE E8 CA        SJP  (PRGMDISP)
2030   8D1B E9 78 9D 00     ANI  (CURR_LINE_L),$00
2031   8D1F E9 78 9C 00     ANI  (CURR_LINE_H),$00
2032   8D23 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE
2033   8D27 AA 78 4F        LDI  S,(CPU_STACK + $4F)
2034   8D2A BE E2 43        SJP  (WAIT4KB)
2035   8D2D FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01
2035   8D31 01 
2036   8D32 89 05           BZR  BR_8D39 ; $8D39
2037   8D34 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF
2037   8D38 FF 
2038   8D39             
2039   8D39             BR_8D39:
2040   8D39 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00
2040   8D3D 00 
2041   8D3E BA CA 92        JMP  $CA92 ; ***in editor
2042   8D41             
2043   8D41             JMP_8D41:
2044   8D41 68 07           LDI  UH,$07
2045   8D43 6A CF           LDI  UL,$CF
2046   8D45 B5 00           LDI  A,$00
2047   8D47 BE 8E 5F        SJP  (JMP_8E5F); $8E5F
2048   8D4A BE 8D 5E        SJP  (BR_8D5E) ; $8D5E
2049   8D4D FD 62           DEC  UH
2050   8D4F 93 07           BCS  $8D4A ; in CE-150 FILETRSF
2051   8D51 B5 01           LDI  A,$01
2052   8D53 FD AE 77 D2     STA  #(VIDEORAM + $07D2)
2053   8D57 AE 77 4E        STA  (STRING_VARS + $FE)
2054   8D5A AE 77 4F        STA  (STRING_VARS + $FF)
2055   8D5D 9A              RTN
2056   8D5E             
2057   8D5E             BR_8D5E:
2058   8D5E FD 1E           STA  #(Y)
2059   8D60 54              INC  Y
2060   8D61 88 05           LOP  UL,BR_8D5E ; $8D5E
2061   8D63 9A              RTN
2062   8D64             
2063   8D64             JMP_8D64:
2064   8D64 45              LIN  X
2065   8D65 FD 1E           STA  #(Y)
2066   8D67 54              INC  Y
2067   8D68 88 06           LOP  UL,JMP_8D64 ; $8D64
2068   8D6A 9A              RTN
2069   8D6B             
2070   8D6B             JMP_8D6B:
2071   8D6B FD C8           PSH  A
2072   8D6D FD 88           PSH  X
2073   8D6F FD A8           PSH  U
2074   8D71 FD 18           LDX  Y
2075   8D73 FD 42           DEC  XH
2076   8D75 42              DEC  XL
2077   8D76 BE 8E 5F        SJP  (JMP_8E5F) ; $8E5F
2078   8D79 14              LDA  YL
2079   8D7A FB              SEC
2080   8D7B B1 50           SBI  A,$50
2081   8D7D 1A              STA  YL
2082   8D7E 94              LDA  YH
2083   8D7F B1 00           SBI  A,$00
2084   8D81 18              STA  YH
2085   8D82 4C 19           CPI  XH,$19
2086   8D84 83 1D           BCS  BR_8DA3 ; $8DA3
2087   8D86 4E 50           CPI  XL,$50
2088   8D88 83 19           BCS  BR_8DA3 ; $8DA3
2089   8D8A 84              LDA  XH
2090   8D8B 2A              STA  UL
2091   8D8C FD A5 77 D1     LDA  #(VIDEORAM + $07D1)
2092   8D90 B7 28           CPI  A,$28
2093   8D92 89 01           BZR  BR_8D95 ; $8D95
2094   8D94 60              INC  UL
2095   8D95             
2096   8D95             BR_8D95:
2097   8D95 FD DA           ADR  Y
2098   8D97 88 04           LOP  UL,BR_8D95 ; $8D95
2099   8D99 04              LDA  XL
2100   8D9A FD DA           ADR  Y
2101   8D9C             
2102   8D9C             BR_89DC:
2103   8D9C FD 2A           POP  U
2104   8D9E FD 0A           POP  X
2105   8DA0 FD 8A           POP  A
2106   8DA2 9A              RTN
2107   8DA3             
2108   8DA3             BR_8DA3:
2109   8DA3 BE 8E 5F        SJP  (JMP_8E5F) ; $8E5F
2110   8DA6 9E 0C           BCH  BR_89DC ; $8D9C
2111   8DA8             
2112   8DA8             JMP_8DA8:
2113   8DA8 68 00           LDI  UH,$00
2114   8DAA 6A 11           LDI  UL,$11
2115   8DAC             
2116   8DAC             BR_8DAC:
2117   8DAC A4              LDA  UH
2118   8DAD FD AE 78 00     STA  #(CRTCTRL)
2119   8DB1 45              LIN  X
2120   8DB2 FD AE 78 01     STA  #(CRTCTRL + $01)
2121   8DB6 FD 60           INC  UH
2122   8DB8 88 0E           LOP  UL,BR_8DAC ; $8DAC
2123   8DBA B5 50           LDI  A,$50
2124   8DBC FD AE 77 D1     STA  #(VIDEORAM + $07D1)
2125   8DC0 9A              RTN
2126   8DC1 FD 88           PSH  X
2127   8DC3 FD 98           PSH  Y
2128   8DC5 FD A8           PSH  U
2129   8DC7 A5 E2 B7        LDA  (WAIT4KB + $74) ; $E2B7
2130   8DCA B7 CC           CPI  A,$CC
2131   8DCC 89 02           BZR  BR_8DDC ; $8DD0
2132   8DCE 8E 33           BCH  BR_8E03 ; $8E03
2133   8DD0             
2134   8DD0             BR_8DDC:
2135   8DD0 4A 1A           LDI  XL,$1A
2136   8DD2 68 93           LDI  UH,$93
2137   8DD4 6A 6D           LDI  UL,$6D
2138   8DD6 BE ED 3B        SJP  (TEXTUREG_XL)
2139   8DD9 BE E6 69        SJP  (BCMD_BEEP_STD)
2140   8DDC 8E 0C           BCH  BR_8DEA ; $8DEA
2141   8DDE             
2142   8DDE             BR_8DDE:
2143   8DDE 4A 1A           LDI  XL,$1A
2144   8DE0 68 93           LDI  UH,$93
2145   8DE2 6A 6D           LDI  UL,$6D
2146   8DE4 BE ED 3B        SJP  (TEXTUREG_XL)
2147   8DE7 BE E6 69        SJP  (BCMD_BEEP_STD)
2148   8DEA             
2149   8DEA             BR_8DEA:
2150   8DEA BE E2 43        SJP  (WAIT4KB)
2151   8DED B7 0E           CPI  A,$0E
2152   8DEF 8B 03           BZS  BR_8DF4 ; $8DF4
2153   8DF1 BA 8D F8        JMP  BR_8DF8 ; $8DF8
2154   8DF4             
2155   8DF4             BR_8DF4:
2156   8DF4 91 18           BCR  BR_8DDE ; $8DDE
2157   8DF6 8E 02           BCH  BR_8DFA ; $8DFA
2158   8DF8             
2159   8DF8             BR_8DF8:
2160   8DF8 93 1C           BCS  BR_8DDE ; $8DDE
2161   8DFA             
2162   8DFA             BR_8DFA:
2163   8DFA FD 2A           POP  U
2164   8DFC FD 1A           POP  Y
2165   8DFE FD 0A           POP  X
2166   8E00 BA 92 D6        JMP  JMP_92D6 ; $92D6
2167   8E03             
2168   8E03             BR_8E03:
2169   8E03 B5 00           LDI  A,$00
2170   8E05 AE 78 5D        STA  (KATAFLAGS)
2171   8E08 FD AE D4 00     STA  #($D400) ; ***
2172   8E0C FD AE 77 F4     STA  #(VIDEORAM + $07F4)
2173   8E10 BE 8D 41        SJP  (JMP_8D41) ; $8D41
2174   8E13 B5 0F           LDI  A,$0F
2175   8E15 BE 90 6A        SJP  (JMP_906A) ; $906A
2176   8E18 B5 00           LDI  A,$00
2177   8E1A BE 91 1A        SJP  (JMP_911A) ; $911A
2178   8E1D B5 55           LDI  A,$55
2179   8E1F AE 79 D5        STA  ($79D5) ; ***
2180   8E22 B5 01           LDI  A,$01
2181   8E24 FD AE 77 D9     STA  #(VIDEORAM + $07D9)
2182   8E28 48 8E           LDI  XH,$8E
2183   8E2A 4A A1           LDI  XL,$A1
2184   8E2C BE 8D A8        SJP  (JMP_8DA8) ; $8DA8
2185   8E2F B5 80           LDI  A,$80
2186   8E31 FD AE 77 DA     STA  #(VIDEORAM + $07DA)
2187   8E35 B5 07           LDI  A,$07
2188   8E37 FD AE 77 DB     STA  #(VIDEORAM + $07DB)
2189   8E3B E9 79 D4 00     ANI  (KB_BYPASS),$00 ; $79D4
2190   8E3F B5 81           LDI  A,$81
2191   8E41 AE 78 5B        STA  (XCHRINPT_H) ; $785B
2192   8E44 B5 9E           LDI  A,$9E
2193   8E46 AE 78 5C        STA  (XCHRINPT_L) ; $785C
2194   8E49 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00
2194   8E4D 00 
2195   8E4E FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00
2195   8E52 00 
2196   8E53 B5 55           LDI  A,$55
2197   8E55 AE 79 D4        STA  (KB_BYPASS) ; $79D4
2198   8E58 FD 2A           POP  U
2199   8E5A FD 1A           POP  Y
2200   8E5C FD 0A           POP  X
2201   8E5E 9A              RTN
2202   8E5F             
2203   8E5F             JMP_8E5F:
2204   8E5F 58 70           LDI  YH,$70 ; video RAM or shadow RAM?
2205   8E61 5A 00           LDI  YL,$00
2206   8E63 9A              RTN
2207   8E64             
2208   8E64 FD 98           PSH  Y
2209   8E66 BE 8E 86        SJP  (JMP_8E86) ; $8E86
2210   8E69 B5 00           LDI  A,$00
2211   8E6B 8E 0B           BCH  BR_8E78 ; $8E78
2212   8E6D FD 98           PSH  Y
2213   8E6F BE 8E 86        SJP  (JMP_8E86) ; $8E86
2214   8E72 F9              REC
2215   8E73 B3 08           ADI  A,$08
2216   8E75 18              STA  YH
2217   8E76 B5 F0           LDI  A,$F0
2218   8E78             
2219   8E78             BR_8E78:
2220   8E78 68 07           LDI  UH,$07
2221   8E7A 6A FF           LDI  UL,$FF
2222   8E7C             
2223   8E7C             BR_8E7C:
2224   8E7C BE 8D 5E        SJP  (BR_8D5E) ; $8D5E
2225   8E7F FD 62           DEC  UH
2226   8E81 93 07           BCS  BR_8E7C ; $8E7C
2227   8E83 FD 1A           POP  Y
2228   8E85 9A              RTN
2229   8E86             
2230   8E86             JMP_8E86:
2231   8E86 BE 8E 5F        SJP  (JMP_8E5F) ; $8E5F
2232   8E89 94              LDA  YH
2233   8E8A F1              AEX
2234   8E8B DF              DEC  A
2235   8E8C F1              AEX
2236   8E8D 18              STA  YH
2237   8E8E 9A              RTN
2238   8E8F             ;% LB_INPUT END
2239   8E8F             
2240   8E8F             ; Unknown
2241   8E8F             ; $8E8F ~ $8EEA
2242   8E8F 3B 28 30 74     .BYTE  $3B,$28,$30,$74,$1C,$00,$19,$1A
2242   8E93 1C 00 19 1A 
2243   8E97 00 0A 68 00     .BYTE  $00,$0A,$68,$00,$70,$00,$00,$00
2243   8E9B 70 00 00 00 
2244   8E9F 00 00 74 50     .BYTE  $00,$00,$74,$50,$5C,$35,$1C,$00
2244   8EA3 5C 35 1C 00 
2245   8EA7 19 1A 00 0A     .BYTE  $19,$1A,$00,$0A,$68,$00,$70,$00
2245   8EAB 68 00 70 00 
2246   8EAF 00 00 00 00     .BYTE  $00,$00,$00,$00,$52,$55,$4E,$50
2246   8EB3 52 55 4E 50 
2247   8EB7 52 4F 52 45     .BYTE  $52,$4F,$52,$45,$53,$45,$52,$56
2247   8EBB 53 45 52 56 
2248   8EBF 45 20 45 42     .BYTE  $45,$20,$45,$42,$45,$4E,$45,$3A
2248   8EC3 45 4E 45 3A 
2249   8EC7 28 43 29 20     .BYTE  $28,$43,$29,$20,$62,$79,$20,$49
2249   8ECB 62 79 20 49 
2250   8ECF 6E 67 2E 42     .BYTE  $6E,$67,$2E,$42,$75,$65,$72,$6F
2250   8ED3 75 65 72 6F 
2251   8ED7 20 57 2E 53     .BYTE  $20,$57,$2E,$53,$70,$65,$69,$64
2251   8EDB 70 65 69 64 
2252   8EDF 65 6C           .BYTE  $65,$6C
2253   8EE1             
2254   8EE1             
2255   8EE1             MONITOR:
2256   8EE1 BA 92 D6        JMP JMP_92D6 ;   $92D6
2257   8EE4             
2258   8EE4             
2259   8EE4             VCURSOR:
2260   8EE4 A5 77 4E        LDA  (STRING_VARS + $FE)
2261   8EE7 DF              DEC  A
2262   8EE8 BA D9 E4        JMP  BCMD_LEN + $0D ; $D9E4
2263   8EEB             
2264   8EEB             
2265   8EEB             
2266   8EEB             ;------------------------------------------------------------------------------------------------------------
2267   8EEB             ; VPCURSOR - 
2268   8EEB             ; Called from 
2269   8EEB             ; Arguments: 
2270   8EEB             ; Outputs: 
2271   8EEB             ; RegMod: 
2272   8EEB             ;% LB_VPCURSOR START
2273   8EEB             VPCURSOR: ; $8EEB
2274   8EEB B5 10           LDI  A,$10
2275   8EED FD AE 78 00     STA  #(CRTCTRL)
2276   8EF1 FD A5 78 01     LDA  #(CRTCTRL + $01)
2277   8EF5 FD AE 77 F6     STA  #(VIDEORAM + $07F6) ; $77F6
2278   8EF9 DF              DEC  A
2279   8EFA BA D9 E4        JMP  BCMD_LEN + $0D ; $D9E4
2280   8EFD             ;% LB_VPCURSOR END
2281   8EFD             
2282   8EFD             
2283   8EFD             ;------------------------------------------------------------------------------------------------------------
2284   8EFD             ; HCURSOR - 
2285   8EFD             ; Called from 
2286   8EFD             ; Arguments: 
2287   8EFD             ; Outputs: 
2288   8EFD             ; RegMod: 
2289   8EFD             ;% LB_HCURSOR START
2290   8EFD             HCURSOR: ; $8EFD
2291   8EFD A5 77 4F        LDA  (STRING_VARS + $FF)
2292   8F00 DF              DEC  A
2293   8F01 BA D9 E4        JMP  BCMD_LEN + $0D ; $D9E4
2294   8F04             ;% LB_HCURSOR END
2295   8F04             
2296   8F04             
2297   8F04             ;------------------------------------------------------------------------------------------------------------
2298   8F04             ; HPCURSOR - 
2299   8F04             ; Called from 
2300   8F04             ; Arguments: 
2301   8F04             ; Outputs: 
2302   8F04             ; RegMod: 
2303   8F04             ;% LB_HPCURSOR START
2304   8F04             HPCURSOR: ; $8F04
2305   8F04 00              SBC  XL
2306   8F05 11              SBC  (Y)
2307   8F06 FD AE 78 00     STA  #(CRTCTRL)
2308   8F0A FD A5 78 01     LDA  #(CRTCTRL + $01)
2309   8F0E FD AE 77 F5     STA  #(VIDEORAM + $07F5)
2310   8F12 DF              DEC  A
2311   8F13 BA D9 E4        JMP  BCMD_LEN + $0D ; $D9E4
2312   8F16             ;% LB_HPCURSOR END
2313   8F16             
2314   8F16             
2315   8F16             ;------------------------------------------------------------------------------------------------------------
2316   8F16             ; LIST - 
2317   8F16             ; Called from 
2318   8F16             ; Arguments: 
2319   8F16             ; Outputs: 
2320   8F16             ; RegMod: 
2321   8F16             ;% LB_LIST START
2322   8F16             LIST: ; $8F16
2323   8F16 A5 76 4F        LDA  (DISP_BUFF + $4F)
2324   8F19 B9 07           ANI  A,$07
2325   8F1B BB 20           ORI  A,$20
2326   8F1D AE 76 4F        STA  (DISP_BUFF + $4F)
2327   8F20 15              LDA  (Y)
2328   8F21 B7 0D           CPI  A,$0D
2329   8F23 89 02           BZR  BR_8F27 ; $8F27
2330   8F25 8E 1F           BCH  BR_8F46 ; $8F46
2331   8F27             
2332   8F27             BR_8F27:
2333   8F27 B7 50           CPI  A,$50
2334   8F29 89 08           BZR  BR_8F33 ; $8F33
2335   8F2B 54              INC  Y
2336   8F2C 15              LDA  (Y)
2337   8F2D B7 0D           CPI  A,$0D
2338   8F2F 89 02           BZR  BR_8F33 ; $8F33
2339   8F31 8E 21           BCH  BR_8F54 ; $8F54
2340   8F33             
2341   8F33             BR_8F33:
2342   8F33 B7 56           CPI  A,$56
2343   8F35 89 09           BZR  BR_8F40 ; $8F40
2344   8F37 54              INC  Y
2345   8F38 15              LDA  (Y)
2346   8F39 B7 0D           CPI  A,$0D
2347   8F3B 89 03           BZR  BR_8F40 ; $8F40
2348   8F3D BA 92 D6        JMP  JMP_92D6 ; $92D6
2349   8F40             
2350   8F40             BR_8F40:
2351   8F40 BA C9 6F        JMP  BCMD_LIST + 1 ; $C96F
2352   8F43 BA 80 00        JMP  B_TBL_8000 ; $8000
2353   8F46             
2354   8F46             BR_8F46:
2355   8F46 BE 90 8E        SJP  (JMP_908E) ; $908E
2356   8F49 CC              VEJ  (CC) \ ABYTL(ROM_ST_H) ; $7861
2356   8F4A 61          
2357   8F4B B5 FF           LDI  A,$FF
2358   8F4D 86              CPA  XH
2359   8F4E 89 04           BZR  BR_8F54 ; $8F54
2360   8F50 CC              VEJ  (CC) \ ABYTL(BASPRG_ST_H) ; $7865
2360   8F51 65          
2361   8F52 8E 02           BCH  BR_8F56 ; $8F56
2362   8F54             
2363   8F54             BR_8F54:
2364   8F54 CC              VEJ  (CC) \ ABYTL(BASPRG_EDT_H) ; $7869
2364   8F55 69          
2365   8F56             
2366   8F56             BR_8F56:
2367   8F56 05              LDA  (X)
2368   8F57 B7 FF           CPI  A,$FF
2369   8F59 89 01           BZR  BR_8F5C ; $8F5C
2370   8F5B E2              VEJ  (E2)
2371   8F5C             
2372   8F5C             BR_8F5C:
2373   8F5C B5 55           LDI  A,$55
2374   8F5E FD AE 77 D9     STA  #(VIDEORAM + $07D9)
2375   8F62 A5 78 71        LDA  (WAIT_CFG)
2376   8F65 B7 00           CPI  A,$00
2377   8F67 89 0D           BZR  BR_8F76 ; $8F76
2378   8F69 B5 02           LDI  A,$02
2379   8F6B AE 78 71        STA  (WAIT_CFG)
2380   8F6E B5 00           LDI  A,$00
2381   8F70 AE 78 72        STA  (WAIT_CTR_H)
2382   8F73 AE 78 73        STA  (WAIT_CTR_L)
2383   8F76             
2384   8F76             BR_8F76:
2385   8F76 B5 03           LDI  A,$03
2386   8F78 FD CA           ADR  X
2387   8F7A CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H) ; $78A6
2387   8F7B A6          
2388   8F7C             
2389   8F7C             BR_8F7C:
2390   8F7C 46              DEC  X
2391   8F7D 46              DEC  X
2392   8F7E BE D2 D0        SJP  (XFRLINE2INBUF) ; $D2D0
2393   8F81 B5 14           LDI  A,$14
2394   8F83 AE 78 80        STA  (DISPARAM)
2395   8F86 BE E8 CA        SJP  (PRGMDISP)
2396   8F89 B5 02           LDI  A,$02
2397   8F8B FD AE F0 0B     STA  #(PC1500_IF_REG)
2398   8F8F BE 81 9E        SJP  (JMP_819E) ; $819E
2399   8F92 F4              VEJ  (F4) \ AWRD(WAIT_CTR_H)
2399   8F93 78 72       
2400   8F95             
2401   8F95             BR_8F95:
2402   8F95 FD A8           PSH  U
2403   8F97             
2404   8F97             BR_8F97:
2405   8F97 38              NOP
2406   8F98 38              NOP
2407   8F99 88 04           LOP  UL,BR_8F97 ; $8F97
2408   8F9B FD 2A           POP  U
2409   8F9D 88 0A           LOP  UL,BR_8F95 ; $8F95
2410   8F9F 6C 00           CPI  UH,$00
2411   8FA1 8B 04           BZS  BR_8FA7 ; $8FA7
2412   8FA3 FD 62           DEC  UH
2413   8FA5 9E 12           BCH  BR_8F95 ; $8F95
2414   8FA7             
2415   8FA7             BR_8FA7:
2416   8FA7 BE E4 2C        SJP  (KEY2ASCII)
2417   8FAA B7 20           CPI  A,$20
2418   8FAC 89 02           BZR  BR_8FB0 ; $8FB0
2419   8FAE 9E 09           BCH  BR_8FA7 ; $8FA7
2420   8FB0             
2421   8FB0             BR_8FB0:
2422   8FB0 BE E4 2C        SJP  (KEY2ASCII)
2423   8FB3 B7 0B           CPI  A,$0B
2424   8FB5 89 08           BZR  BR_8FBF ; $8FBF
2425   8FB7 B5 99           LDI  A,$99
2426   8FB9 FD AE 77 D9     STA  #(VIDEORAM + $07D9)
2427   8FBD 8E 51           BCH  BR_9010 ; $9010
2428   8FBF             
2429   8FBF             BR_8FBF:
2430   8FBF FD A5 F0 0A     LDA  #(PC1500_MSK_REG)
2431   8FC3 B9 20           ANI  A,$20
2432   8FC5 B7 20           CPI  A,$20
2433   8FC7 89 0E           BZR  BR_8FD7 ; $8FD7
2434   8FC9 B5 00           LDI  A,$00
2435   8FCB AE 78 B5        STA  (ERR_LINE_L)
2436   8FCE FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00
2436   8FD2 00 
2437   8FD3 BE DC 32        SJP  ($DC32) ; ***
2438   8FD6 E2              VEJ  (E2)
2439   8FD7             
2440   8FD7             BR_8FD7:
2441   8FD7 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)
2442   8FDB DD              INC  A
2443   8FDC FD AE 77 D2     STA  #(VIDEORAM + $07D2)
2444   8FE0 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H) ; $78A6
2444   8FE1 A6          
2445   8FE2 44              INC  X
2446   8FE3 44              INC  X
2447   8FE4 05              LDA  (X)
2448   8FE5 FD CA           ADR  X
2449   8FE7 44              INC  X
2450   8FE8 47              LDE  X
2451   8FE9 B7 FF           CPI  A,$FF
2452   8FEB 89 02           BZR  BR_8FEF ; $8FEF
2453   8FED 8E 21           BCH  BR_9010 ; $9010
2454   8FEF             
2455   8FEF             BR_8FEF:
2456   8FEF CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H) ; $78A6
2456   8FF0 A6          
2457   8FF1 B5 04           LDI  A,$04
2458   8FF3 FD CA           ADR  X
2459   8FF5 FD 5A           STX  Y
2460   8FF7 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)
2461   8FFB B7 55           CPI  A,$55
2462   8FFD 89 0F           BZR  BR_900E ; $900E
2463   8FFF B5 00           LDI  A,$00
2464   9001 FD AE 77 D9     STA  #(VIDEORAM + $07D9)
2465   9005 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)
2466   9009 DF              DEC  A
2467   900A FD AE 77 D2     STA  #(VIDEORAM + $07D2)
2468   900E             
2469   900E             BR_900E:
2470   900E 9E 94           BCH  BR_8F7C ; $8F7C
2471   9010             
2472   9010             BR_9010:
2473   9010 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H) ; $78A6
2473   9011 A6          
2474   9012 B5 04           LDI  A,$04
2475   9014 FD CA           ADR  X
2476   9016 FD 5A           STX  Y
2477   9018 CA              VEJ  (CA) \ ABYTL(ERR_ADD_H) ; $78B2
2477   9019 B2          
2478   901A B5 01           LDI  A,$01
2479   901C AE 78 B5        STA  (ERR_LINE_L)
2480   901F BE DC 32        SJP  ($DC32) ; ***
2481   9022 E2              VEJ  (E2)
2482   9023             ;% LB_LIST END
2483   9023             
2484   9023             
2485   9023             ;------------------------------------------------------------------------------------------------------------
2486   9023             ; BACKGR - 
2487   9023             ; Called from 
2488   9023             ; Arguments: 
2489   9023             ; Outputs: 
2490   9023             ; RegMod: 
2491   9023             ;% LB_BACKGR START
2492   9023             BACKGR:
2493   9023 DE              VEJ  (DE) \ ABRF(BR_9081) ; $9081
2493   9024 5C          
2494   9025 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_9081) ; $9081
2494   9026 10          
2494   9027 59          
2495   9028 B7 10           CPI  A,$10
2496   902A 81 03           BCR  BR_902F ; $902F
2497   902C 68 13           LDI  UH,$13
2498   902E E0              VEJ  (E0)
2499   902F             
2500   902F             BR_902F:
2501   902F 24              LDA  UL
2502   9030 F1              AEX
2503   9031 FD AE 77 DD     STA  #(STRING_VARS + $18D) ; $77DD
2504   9035 C0              VEJ  (C0)
2505   9036 6E 0D           CPI  UL,$0D
2506   9038 89 0B           BZR  BR_9045 ; $9045
2507   903A FD A5 77 DD     LDA  #(STRING_VARS + $18D)
2508   903E B7 0A           CPI  A,$0A
2509   9040 BB 0F           ORI  A,$0F
2510   9042 2A              STA  UL
2511   9043 8E 20           BCH  BR_9065 ; $9065
2512   9045             
2513   9045             BR_9045:
2514   9045 B7 2C           CPI  A,$2C
2515   9047 89 1B           BZR  BR_9064 ; $9064
2516   9049 DE              VEJ  (DE) \ ABRF(BR_9081) ; $9081
2516   904A 36          
2517   904B D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_9081) ; $9081
2517   904C 10          
2517   904D 33          
2518   904E B7 10           CPI  A,$10
2519   9050 81 03           BCR  BR_9055 ; $9055
2520   9052 68 13           LDI  UH,$13
2521   9054 E0              VEJ  (E0)
2522   9055             
2523   9055             BR_9055:
2524   9055 FD AE 77 DE     STA  #(VIDEORAM + $07DE) ; $77DE
2525   9059 FD AB 77 DD     ORA  #(VIDEORAM + $07DD) ; $77DD
2526   905D 2A              STA  UL
2527   905E FD AE 77 DC     STA  #(VIDEORAM + $07DC) ; $77DC
2528   9062 8E 01           BCH  BR_9065 ; $9065
2529   9064             
2530   9064             BR_9064:
2531   9064 E4              VEJ  (E4)
2532   9065             
2533   9065             BR_9065:
2534   9065 24              LDA  UL
2535   9066 BE 90 6A        SJP  (JMP_906A) ; $906A
2536   9069 E2              VEJ  (E2)
2537   906A             
2538   906A             JMP_906A:
2539   906A 48 60           LDI  XH,$60 ; IWS $6000~$67FF color RAM?
2540   906C 4A 00           LDI  XL,$00
2541   906E 68 07           LDI  UH,$07 ; IWS $7802~$7FFF not used?
2542   9070 6A D0           LDI  UL,$D0
2543   9072             
2544   9072             BR_9072:
2545   9072 FD 0E           STA  #(X)
2546   9074 44              INC  X
2547   9075 66              DEC  U
2548   9076 6C 00           CPI  UH,$00
2549   9078 89 05           BZR  BR_907F ; $907F
2550   907A 6E 00           CPI  UL,$00
2551   907C 89 01           BZR  BR_907F ; $907F
2552   907E 9A              RTN
2553   907F             
2554   907F             BR_907F:
2555   907F 9E 0F           BCH  BR_9072 ; $9072
2556   9081             
2557   9081             BR_9081:
2558   9081 E0              VEJ  (E0)
2559   9082             ;% LB_BACKGR END
2560   9082             
2561   9082             
2562   9082             ;------------------------------------------------------------------------------------------------------------
2563   9082             ; ERN - 
2564   9082             ; Called from 
2565   9082             ; Arguments: 
2566   9082             ; Outputs: 
2567   9082             ; RegMod: 
2568   9082             ;% LB_ERN START
2569   9082             ERN:
2570   9082 A5 78 9B        LDA  (ERL)
2571   9085 BA D9 E4        JMP  BCMD_LEN + $0D ; $D9E4
2572   9088             ;% LB_ERN END
2573   9088             
2574   9088             
2575   9088             ;------------------------------------------------------------------------------------------------------------
2576   9088             ; ERL - 
2577   9088             ; Called from 
2578   9088             ; Arguments: 
2579   9088             ; Outputs: 
2580   9088             ; RegMod: 
2581   9088             ;% LB_ERL START
2582   9088             IWS_ERL:
2583   9088 F4              VEJ  (F4) \ AWRD(ERR_LINE_H)
2583   9089 78 B4       
2584   908B BA DA 6C        JMP  BCMD_MEM + $0F ; $DA6C
2585   908E             
2586   908E             JMP_908E:
2587   908E A5 78 60        LDA  (ST_ROM_MOD) ; $7860
2588   9091 08              STA  XH
2589   9092 B7 FF           CPI  A,$FF
2590   9094 89 04           BZR  BR_909A ; $909A
2591   9096 A5 78 63        LDA  (RAM_ST_H)
2592   9099 08              STA  XH
2593   909A             
2594   909A             BR_909A:
2595   909A 4A 00           LDI  XL,$00
2596   909C 05              LDA  (X)
2597   909D B7 55           CPI  A,$55
2598   909F 89 08           BZR  BR_90A9 ; $90A9
2599   90A1 4A 07           LDI  XL,$07
2600   90A3 05              LDA  (X)
2601   90A4 B7 00           CPI  A,$00
2602   90A6 89 01           BZR  BR_90A9 ; $90A9
2603   90A8 E2              VEJ  (E2)
2604   90A9             
2605   90A9             BR_90A9:
2606   90A9 9A              RTN
2607   90AA             ;% LB_ERL END
2608   90AA             
2609   90AA             
2610   90AA             ;------------------------------------------------------------------------------------------------------------
2611   90AA             ; SLEEP - 
2612   90AA             ; Called from 
2613   90AA             ; Arguments: 
2614   90AA             ; Outputs: 
2615   90AA             ; RegMod: 
2616   90AA             ;% LB_ERL SLEEP
2617   90AA             SLEEP:
2618   90AA 94              LDA  YH
2619   90AB B7 7B           CPI  A,$7B
2620   90AD 8B 04           BZS  BR_90B3 ; $90B3
2621   90AF BE E3 3F        SJP  (AUTO_OFF)
2622   90B2 E2              VEJ  (E2)
2623   90B3             
2624   90B3             BR_90B3:
2625   90B3 AA 78 4F        LDI  S,(CPU_STACK + $4F)
2626   90B6 BE CF CC        SJP  ($CFCC) ; ***Init Sys Addr, turn off trace
2627   90B9 BE D0 2B        SJP  ($D02B) ; ***Clear IN_BUF w/$0D
2628   90BC B5 3E           LDI  A,$3E
2629   90BE 1E              STA  (Y)
2630   90BF E9 78 8A EF     ANI  (BREAKPARAM),$EF
2631   90C3 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE
2632   90C7 B5 00           LDI  A,$00
2633   90C9 AE 78 80        STA  (DISPARAM)
2634   90CC AE 78 9C        STA  (CURR_LINE_H)
2635   90CF AE 78 9D        STA  (CURR_LINE_L)
2636   90D2 BE E8 CA        SJP  (PRGMDISP)
2637   90D5 48 CA           LDI  XH,$CA
2638   90D7 4A 92           LDI  XL,$92 ; In EDITOR?
2639   90D9 FD 88           PSH  X
2640   90DB BA E3 3F        JMP  AUTO_OFF ; $E33F
2641   90DE             
2642   90DE             JMP_90DE:
2643   90DE FD C8           PSH  A
2644   90E0 A5 79 D5        LDA  ($79D5) ; ***
2645   90E3 B7 55           CPI  A,$55
2646   90E5 89 07           BZR  BR_90EE ; $90EE
2647   90E7 FD 8A           POP  A
2648   90E9 EB 7B 0E 40     ORI  (CURS_CTRL),$40
2649   90ED 9A              RTN
2650   90EE             
2651   90EE             BR_90EE:
2652   90EE FD 8A           POP  A
2653   90F0 9A              RTN
2654   90F1             ;% LB_ERL END
2655   90F1             
2656   90F1             
2657   90F1             ;------------------------------------------------------------------------------------------------------------
2658   90F1             ; REPKEY - 
2659   90F1             ; Called from 
2660   90F1             ; Arguments: 
2661   90F1             ; Outputs: 
2662   90F1             ; RegMod: 
2663   90F1             ;% LB_REPKEY START
2664   90F1             REPKEY:
2665   90F1 C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_90FB) ; BCMD_LOG ($F165+?) \ $90FB
2665   90F2 F1 9C       
2665   90F4 06          
2666   90F5 B5 55           LDI  A,$55
2667   90F7             
2668   90F7             BR_90F7:
2669   90F7 AE 79 D5        STA  ($79D5) ; ***
2670   90FA E2              VEJ  (E2)
2671   90FB             
2672   90FB             BR_90FB:
2673   90FB 56              DEC  Y
2674   90FC 56              DEC  Y
2675   90FD C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_9105) ; DIVISION ($F084) \ $9105
2675   90FE F1 9E       
2675   9100 04          
2676   9101 B5 00           LDI  A,$00
2677   9103 9E 0E           BCH  BR_90F7 ; $90F7
2678   9105             
2679   9105             BR_9105:
2680   9105 54              INC  Y
2681   9106 E4              VEJ  (E4)
2682   9107             ;% LB_REPKEY END
2683   9107             
2684   9107             
2685   9107             ;------------------------------------------------------------------------------------------------------------
2686   9107             ; GCLS - 
2687   9107             ; Called from 
2688   9107             ; Arguments: 
2689   9107             ; Outputs: 
2690   9107             ; RegMod: 
2691   9107             ;% LB_GCLS START
2692   9107             GCLS:
2693   9107 15              LDA  (Y)
2694   9108 B7 0D           CPI  A,$0D
2695   910A 89 04           BZR  BR_9110 ; $9110
2696   910C B5 00           LDI  A,$00
2697   910E 8E 06           BCH  BR_9116 ; $9116
2698   9110             
2699   9110             BR_9110:
2700   9110 DE              VEJ  (DE) \ ABRF(BR_914B) ; $914B
2700   9111 39          
2701   9112 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_914B) ; $914B
2701   9113 10          
2701   9114 36          
2702   9115 24              LDA  UL
2703   9116             
2704   9116             BR_9116:
2705   9116 BE 91 1A        SJP  (JMP_911A) ; $911A
2706   9119 E2              VEJ  (E2)
2707   911A             
2708   911A             JMP_911A:
2709   911A B5 55           LDI  A,$55
2710   911C FD AE 30 00     STA  #($3000) ; ***IWS ME1???
2711   9120 FD A7 30 00     CPA  #($3000) ; ***
2712   9124 89 08           BZR  BR_912E ; $912E
2713   9126 68 07           LDI  UH,$07
2714   9128 6A D0           LDI  UL,$D0
2715   912A 48 68           LDI  XH,$68
2716   912C 4A 00           LDI  XL,$00
2717   912E             
2718   912E             BR_912E:
2719   912E B5 00           LDI  A,$00
2720   9130 FD AE 30 00     STA  #($3000) ; ***
2721   9134 68 3E           LDI  UH,$3E
2722   9136 6A 81           LDI  UL,$81
2723   9138 48 30           LDI  XH,$30
2724   913A 4A 00           LDI  XL,$00
2725   913C             
2726   913C             BR_913C:
2727   913C FD 0E           STA  #(X)
2728   913E 44              INC  X
2729   913F 66              DEC  U
2730   9140 6C 00           CPI  UH,$00
2731   9142 89 05           BZR  BR_9149 ; $9149
2732   9144 6E 00           CPI  UL,$00
2733   9146 89 01           BZR  BR_9149 ; $9149
2734   9148 9A              RTN
2735   9149             
2736   9149             BR_9149:
2737   9149 9E 0F           BCH  BR_913C ; $913C
2738   914B             
2739   914B             BR_914B:
2740   914B E0              VEJ  (E0)
2741   914C             ;% LB_GCLS END
2742   914C             
2743   914C             
2744   914C             ;------------------------------------------------------------------------------------------------------------
2745   914C             ; DEC - 
2746   914C             ; Called from 
2747   914C             ; Arguments: 
2748   914C             ; Outputs: 
2749   914C             ; RegMod: 
2750   914C             ;% LB_DEC START
2751   914C             DEC:
2752   914C BA 92 D6        JMP  JMP_92D6 ; $92D6
2753   914F             ;% LB_END 
2754   914F             
2755   914F             
2756   914F             ;------------------------------------------------------------------------------------------------------------
2757   914F             ; GVCURSOR - 
2758   914F             ; Called from 
2759   914F             ; Arguments: 
2760   914F             ; Outputs: 
2761   914F             ; RegMod: 
2762   914F             ;% LB_GVCURSOR START
2763   914F             GVCURSOR:
2764   914F E2              VEJ  (E2)
2765   9150             
2766   9150             JMP_9150:
2767   9150 A5 79 D6        LDA  ($79D6) ; ***
2768   9153 B7 55           CPI  A,$55
2769   9155 89 02           BZR  BR_9159 ; $9159
2770   9157 8E 1D           BCH  BR_9176 ; $9176
2771   9159             
2772   9159             BR_9159:
2773   9159 B5 BE           LDI  A,$BE
2774   915B AE 78 50        STA  (OUTSTAT_REG)
2775   915E B5 E2           LDI  A,$E2
2776   9160 AE 78 51        STA  (CONSOLE_REG) ; $7851
2777   9163 B5 67           LDI  A,$67
2778   9165 AE 78 52        STA  (CONSOLE2) ; $7852
2779   9168             
2780   9168             BR_9168:
2781   9168 B5 9A           LDI  A,$9A
2782   916A AE 78 53        STA  (CE158_UNDEF1) ; $7853
2783   916D B5 9A           LDI  A,$9A
2784   916F AE 78 54        STA  (CE158_UNDEF2) ;  $7854
2785   9172 BE 78 50        SJP  (OUTSTAT_REG)
2786   9175 9A              RTN
2787   9176             
2788   9176             BR_9176:
2789   9176 B5 BE           LDI  A,$BE
2790   9178 AE 78 50        STA  (OUTSTAT_REG)
2791   917B A5 78 56        LDA  (ZONE_REG) ; $7856
2792   917E AE 78 51        STA  (CONSOLE_REG) ; $7851
2793   9181 A5 78 57        LDA  (SETDEV_REG) ; $7857
2794   9184 AE 78 52        STA  (CONSOLE2) ; $7852
2795   9187 9E 21           BCH  BR_9168 ; $9168
2796   9189             
2797   9189             
2798   9189             JMP_9189:
2799   9189 48 77           LDI  XH,$77 ; IWS Video RAM?
2800   918B 4A 7F           LDI  XL,$7F
2801   918D 58 77           LDI  YH,$77 ; IWS Video RAM?
2802   918F 5A CF           LDI  YL,$CF
2803   9191 68 07           LDI  UH,$07
2804   9193 6A 80           LDI  UL,$80
2805   9195             
2806   9195             BR_9195:
2807   9195 FD 05           LDA  #(X)
2808   9197 FD 1E           STA  #(Y)
2809   9199 46              DEC  X
2810   919A 56              DEC  Y
2811   919B 66              DEC  U
2812   919C 6C 00           CPI  UH,$00
2813   919E 89 05           BZR  BR_91A5 ; $91A5
2814   91A0 6E 00           CPI  UL,$00
2815   91A2 89 01           BZR  BR_91A5 ; $91A5
2816   91A4 9A              RTN
2817   91A5             
2818   91A5             BR_91A5:
2819   91A5 9E 12           BCH  BR_9195 ; $9195
2820   91A7             ;% LB_GVCURSOR END
2821   91A7             
2822   91A7             
2823   91A7             ;------------------------------------------------------------------------------------------------------------
2824   91A7             ; PRINT - 
2825   91A7             ; Called from 
2826   91A7             ; Arguments: 
2827   91A7             ; Outputs: 
2828   91A7             ; RegMod: 
2829   91A7             ;% LB_PRINT START
2830   91A7             PRINT:
2831   91A7 C2              VEJ  (C2) \ ACHR($23) \ ABRF(BR_91B1) ; $91B1
2831   91A8 23          
2831   91A9 07          
2832   91AA C2              VEJ  (C2) \ ACHR($2D) \ ABRF(BR_91BB) ; $91BB
2832   91AB 2D          
2832   91AC 0E          
2833   91AD C6              VEJ  (C6)
2834   91AE BA E4 EE        JMP  $E4EE ; ***
2835   91B1             
2836   91B1             BR_91B1:
2837   91B1 C6              VEJ  (C6)
2838   91B2 D8              VEJ  (D8)
2839   91B3 89 03           BZR  BR_91B8 ; $91B8
2840   91B5 BA E4 EB        JMP  BCMD_PRINT ; $E4EB
2841   91B8             
2842   91B8             BR_91B8:
2843   91B8 BA 8A 8B        JMP  JMP_8A8B ; $8A8B
2844   91BB             
2845   91BB             BR_91BB:
2846   91BB C6              VEJ  (C6)
2847   91BC DE              VEJ  (DE) \ ABRF(BR_91D2) ; $91D2
2847   91BD 14          
2848   91BE D0              VEJ  (D0) \ ABYT($80) \ ABRF(BR_91D2) ; $91D2
2848   91BF 80          
2848   91C0 11          
2849   91C1 F4              VEJ  (F4) \ AWRD(BR_8803) ; $8803
2849   91C2 88 03       
2850   91C4 6C 44           CPI  UH,$44
2851   91C6 89 07           BZR  BR_91CF ; $91CF
2852   91C8 6E 49           CPI  UL,$49
2853   91CA 89 03           BZR  BR_91CF ; $91CF
2854   91CC BA 88 F7        JMP  $88F7
2855   91CF             
2856   91CF             BR_91CF:
2857   91CF 68 1B           LDI  UH,$1B
2858   91D1 E0              VEJ  (E0)
2859   91D2             
2860   91D2             BR_91D2:
2861   91D2 E0              VEJ  (E0)
2862   91D3             ;% LB_PRINT END
2863   91D3             
2864   91D3             
2865   91D3             ;------------------------------------------------------------------------------------------------------------
2866   91D3             ; MODE - 
2867   91D3             ; Called from 
2868   91D3             ; Arguments: 
2869   91D3             ; Outputs: 
2870   91D3             ; RegMod: 
2871   91D3             ;% LB_MODE START
2872   91D3             MODE: ; $91D3
2873   91D3 FD E9 77 E0     ANI  #(VIDEORAM + $07E0),$00 ; $77E0
2873   91D7 00 
2874   91D8             
2875   91D8             BR_91D8:
2876   91D8 C2               VEJ  (C2) \ ACHR($4D) \ ABRF(BR_9219) ; $9219
2876   91D9 4D          
2876   91DA 3E          
2877   91DB BE 91 EF         SJP  (BR_91EF) ; $91EF
2878   91DE 15               LDA  (Y)
2879   91DF B7 2C            CPI  A,$2C
2880   91E1 89 03            BZR  BR_91E6 ; $91E6
2881   91E3 54               INC  Y
2882   91E4 9E 0E            BCH  BR_91D8 ; $91D8
2883   91E6             
2884   91E6             BR_91E6:
2885   91E6 FD A5 77 E0     LDA  #(VIDEORAM + $07E0)
2886   91EA FD AE D8 00     STA  #($D800) ; ***IWS??
2887   91EE E2              VEJ  (E2)
2888   91EF             
2889   91EF             BR_91EF:
2890   91EF DE              VEJ  (DE) \ ABRF(BR_9218) ; $9218
2890   91F0 27          
2891   91F1 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_9218) ; $9218
2891   91F2 10          
2891   91F3 24          
2892   91F4 6C 01           CPI  UH,$01
2893   91F6 81 03           BCR  BR_91FB ; $91FB
2894   91F8 68 13           LDI  UH,$13
2895   91FA E0              VEJ  (E0)
2896   91FB             
2897   91FB             BR_91FB:
2898   91FB 6E 09           CPI  UL,$09
2899   91FD 89 03           BZR  BR_9202 ; $9202
2900   91FF 68 13           LDI  UH,$13
2901   9201 E0              VEJ  (E0)
2902   9202             
2903   9202             BR_9202:
2904   9202 6E 00           CPI  UL,$00
2905   9204 89 02           BZR  BR_9208 ; $9208
2906   9206 6A 09           LDI  UL,$09
2907   9208             
2908   9208             BR_9208:
2909   9208 62              DEC  UL
2910   9209 B5 00           LDI  A,$00
2911   920B FB              SEC
2912   920C             
2913   920C             BR_920C:
2914   920C DB              ROL
2915   920D 88 03           LOP  UL,BR_920C ; $920C
2916   920F FD AB 77 E0     ORA  #(VIDEORAM + $07E0)
2917   9213 FD AE 77 E0     STA  #(VIDEORAM + $07E0)
2918   9217 9A              RTN
2919   9218             
2920   9218             BR_9218:
2921   9218 E0              VEJ  (E0)
2922   9219             
2923   9219             BR_9219:
2924   9219 56              DEC  Y
2925   921A 15              LDA  (Y)
2926   921B CD 04           VMJ  ($04) \ ABRF(BR_921F) ; 921F
2926   921D 01          
2927   921E E2              VEJ  (E2)
2928   921F             
2929   921F             BR_921F:
2930   921F B7 22           CPI  A,$22
2931   9221 89 02           BZR  BR_9225 ; $9225
2932   9223 9E 4D           BCH  BR_91D8 ; $91D8
2933   9225             
2934   9225             BR_9225:
2935   9225 C2              VEJ  (C2) \ ACHR($53) \ ABRF(BR_9232) ; $9232
2935   9226 53          
2935   9227 0A          
2936   9228 DE              VEJ  (DE) \ ABRF($9233)
2936   9229 09          
2937   922A D0              VEJ  (D0) \ ABYT($08) \ ABRF(BR_9233) ; $9233
2937   922B 08          
2937   922C 06          
2938   922D 24              LDA  UL
2939   922E FD CC           ATP
2940   9230 9E 5A           BCH  BR_91D8 ; $91D8
2941   9232             
2942   9232             BR_9232:
2943   9232 E4              VEJ  (E4)
2944   9233             
2945   9233             BR_9233:
2946   9233 E0              VEJ  (E0)
2947   9234             ;% LB_MODE END
2948   9234             
2949   9234             
2950   9234             ;------------------------------------------------------------------------------------------------------------
2951   9234             ; SAVE - 
2952   9234             ; Called from 
2953   9234             ; Arguments: 
2954   9234             ; Outputs: 
2955   9234             ; RegMod: 
2956   9234             ;% LB_SAVE START
2957   9234             SAVE:
2958   9234 15              LDA  (Y)
2959   9235 54              INC  Y
2960   9236 CD 34           VMJ  ($34) \ ABYT($04) \ 
2960   9238 04          
2960   9239             
2961   9239 43                    ABYT($43) \ ABRF(BR_9277) \ 
2961   923A 3C          
2961   923B             
2962   923B 46                    ABYT($46) \ ABRF(BR_9287) \ 
2962   923C 4A          
2962   923D             
2963   923D 51                    ABYT($51) \ ABRF(BR_9297) \ 
2963   923E 58          
2963   923F             
2964   923F 44                    ABYT($44) \ ABRF(BR_929A) \ 
2964   9240 59          
2964   9241             
2965   9241 52                    ABYT($52) \ ABRF(BR_92B2)
2965   9242 6F          
2966   9243 E4              VEJ  (E4)
2967   9244             ;% LB_SAVE END
2968   9244             
2969   9244             
2970   9244             ;------------------------------------------------------------------------------------------------------------
2971   9244             ; LOAD - 
2972   9244             ; Called from 
2973   9244             ; Arguments: 
2974   9244             ; Outputs: 
2975   9244             ; RegMod: 
2976   9244             ;% LB_LOAD START
2977   9244             LOAD:
2978   9244 15               LDA  (Y)
2979   9245 54               INC  Y
2980   9246 CD 34            VMJ  ($34) \ ABYT($04) \ 
2980   9248 04          
2980   9249             
2981   9249 43                     ABYT($43) \ ABRF(BR_9254) \ 
2981   924A 09          
2981   924B             
2982   924B 46                     ABYT($46) \ ABRF(BR_9264) \ 
2982   924C 17          
2982   924D             
2983   924D 51                     ABYT($51) \ ABRF(BR_9274) \ 
2983   924E 25          
2983   924F             
2984   924F 44                     ABYT($44) \ ABRF(BR_92A6) \ 
2984   9250 55          
2984   9251             
2985   9251 52                     ABYT($52) \ ABRF(BR_92BE)
2985   9252 6B          
2986   9253 E4               VEJ  (E4)
2987   9254             
2988   9254             BR_9254:
2989   9254 F4              VEJ  (F4) \ AWRD($B802) ; ***
2989   9255 B8 02       
2990   9257 6C 43           CPI  UH,$43
2991   9259 89 07           BZR  BR_9262 ; $9262
2992   925B 6E 4D           CPI  UL,$4D
2993   925D 89 03           BZR  BR_9262 ; $9262
2994   925F BA B8 F9        JMP  CLOAD_150 ; $B8F9 
2995   9262             
2996   9262             BR_9262:
2997   9262 8E 72           BCH  JMP_92D6 ; $92D6
2998   9264             
2999   9264             BR_9264:
3000   9264 F4              VEJ  (F4) \ AWRD($A805) ; *** PRINT_150 $A781
3000   9265 A8 05       
3001   9267 6C 4C           CPI  UH,$4C
3002   9269 89 07           BZR  BR_9272 ; $9272
3003   926B 6E 32           CPI  UL,$32
3004   926D 89 03           BZR  BR_9272 ; $9272
3005   926F BA AD BB        JMP  $ADBB ; *** GRAPH $ACD3 (CE150)
3006   9272             
3007   9272             BR_9272:
3008   9272 8E 62           BCH  JMP_92D6 ; $92D6
3009   9274             
3010   9274             BR_9274:
3011   9274 BA 92 D6        JMP  JMP_92D6 ; $92D6
3012   9277             
3013   9277             BR_9277:
3014   9277 F4              VEJ  (F4) \ AWRD($B802) ; ***CMT Perips name $B800
3014   9278 B8 02       
3015   927A 6C 43           CPI  UH,$43
3016   927C 89 07           BZR  BR_9285 ; $9285
3017   927E 6E 4D           CPI  UL,$4D
3018   9280 89 03           BZR  BR_9285 ; $9285
3019   9282 BA B8 A6        JMP  CSAVE_150 ; $B8A6
3020   9285             
3021   9285             BR_9285:
3022   9285 8E 4F           BCH  JMP_92D6 ; $92D6
3023   9287             
3024   9287             BR_9287:
3025   9287 F4              VEJ  (F4) \ AWRD($A805) ; *** PRINT_150 $A781
3025   9288 A8 05       
3026   928A 6C 4C           CPI  UH,$4C
3027   928C 89 07           BZR  BR_9295 ; $9295
3028   928E 6E 32           CPI  UL,$32
3029   9290 89 03           BZR  BR_9295 ; $9295
3030   9292 BA AB 8F        JMP  $AB8F ; ***CE150 ENUPDOWN $AAE3
3031   9295             
3032   9295             BR_9295:
3033   9295 8E 3F           BCH  JMP_92D6 ; $92D6
3034   9297             
3035   9297             BR_9297:
3036   9297 BA 92 D6        JMP  JMP_92D6 ; $92D6
3037   929A             
3038   929A             BR_929A:
3039   929A F4              VEJ  (F4) \ AWRD($A803) ; *** PRINT_150 $A781
3039   929B A8 03       
3040   929D 6C 44           CPI  UH,$44
3041   929F 89 03           BZR  BR_92A4 ; $92A4
3042   92A1 BA A8 F4        JMP  $A8F4 ; ***CE150 MTRDRV $A8DD
3043   92A4             
3044   92A4             BR_92A4:
3045   92A4 8E 30           BCH  JMP_92D6 ; $92D6
3046   92A6             
3047   92A6             BR_92A6:
3048   92A6 F4              VEJ  (F4) \ AWRD($A803) ; ***PRINT_150
3048   92A7 A8 03       
3049   92A9 6C 44           CPI  UH,$44
3050   92AB 89 03           BZR  BR_92B0 ; $92B0
3051   92AD BA A8 F1        JMP  $A8F1 ; ***CE150 PRINT_150 $A781
3052   92B0             
3053   92B0             BR_92B0:
3054   92B0 8E 24           BCH  JMP_92D6 ; $92D6
3055   92B2             
3056   92B2             BR_92B2:
3057   92B2 F4              VEJ  (F4) \ AWRD($A803) ; ***PRINT_150
3057   92B3 A8 03       
3058   92B5 6C 44           CPI  UH,$44
3059   92B7 89 03           BZR  BR_92BC ; $92BC
3060   92B9 BA A8 EE        JMP  $A8EE ; ***CE150 MTRDRV $A8DD
3061   92BC             
3062   92BC             BR_92BC:
3063   92BC 8E 18           BCH  JMP_92D6 ; $92D6
3064   92BE             
3065   92BE             BR_92BE:
3066   92BE F4              VEJ  (F4) \ AWRD($A803) ; ***
3066   92BF A8 03       
3067   92C1 6C 44           CPI  UH,$44
3068   92C3 89 03           BZR  BR_92C8 ; $92C8
3069   92C5 BA A8 EB        JMP  $A8EB ; ***CE150 MTRDRV $A8DD
3070   92C8             
3071   92C8             BR_92C8:
3072   92C8 8E 0C           BCH  JMP_92D6 ; $92D6
3073   92CA F4              VEJ  (F4) \ AWRD($A803) ; ***
3073   92CB A8 03       
3074   92CD 6C 44           CPI  UH,$44
3075   92CF 89 03           BZR  BR_92D4 ; $92D4
3076   92D1 BA A8 E8        JMP  $A8E8 ; ***CE150 MTRDRV $A8DD
3077   92D4             
3078   92D4             BR_92D4:
3079   92D4                 ;BCH  JMP_92D6 ; $92D6
3080   92D4 9E 00           .BYTE $9E,$00 ; assm calc wrong dir on 0 len
3081   92D6             
3082   92D6             JMP_92D6:
3083   92D6 68 1B           LDI  UH,$1B
3084   92D8 E0              VEJ  (E0)
3085   92D9             ;% LB_LOAD END
3086   92D9             
3087   92D9             
3088   92D9             ;------------------------------------------------------------------------------------------------------------
3089   92D9             ; VERIFYQ - 
3090   92D9             ; Called from 
3091   92D9             ; Arguments: 
3092   92D9             ; Outputs: 
3093   92D9             ; RegMod: 
3094   92D9             ;% LB_VERIFYQ START
3095   92D9             VERIFYQ:
3096   92D9 BA 92 D6        JMP  JMP_92D6 ; $92D6
3097   92DC             ;% LB_VERIFYQ END
3098   92DC             
3099   92DC             
3100   92DC             ;------------------------------------------------------------------------------------------------------------
3101   92DC             ; CHAIN - 
3102   92DC             ; Called from 
3103   92DC             ; Arguments: 
3104   92DC             ; Outputs: 
3105   92DC             ; RegMod: 
3106   92DC             ;% LB_CHAIN START
3107   92DC             CHAIN:
3108   92DC 55              LIN  Y
3109   92DD CD 34           VMJ  ($34) \ ABYT($01) \ 
3109   92DF 01          
3109   92E0             
3110   92E0 43                    ABYT($43) \ ABRF(BR_92F5) \ 
3110   92E1 13          
3110   92E2             
3111   92E2 51                    ABYT($51) \ ABRF(BR_9305)
3111   92E3 21          
3112   92E4 F4              VEJ  (F4) \ AWRD($B802)
3112   92E5 B8 02       
3113   92E7 6C 43           CPI  UH,$43
3114   92E9 89 08           BZR  BR_92F3 ; $92F3
3115   92EB 6E 4D           CPI  UL,$4D
3116   92ED 89 04           BZR  BR_92F3 ; $92F3
3117   92EF 56              DEC  Y
3118   92F0 BA BB 6A        JMP  CHAIN_150 ; $BB6A
3119   92F3             
3120   92F3             BR_92F3:
3121   92F3 9E 1F           BCH  JMP_92D6 ; $92D6
3122   92F5             
3123   92F5             BR_92F5:
3124   92F5 F4              VEJ  (F4) \ AWRD($B802) ; ***CMT Periph name $B800
3124   92F6 B8 02       
3125   92F8 6C 43           CPI  UH,$43
3126   92FA 89 07           BZR  BR_9303 ; $9303
3127   92FC 6E 4D           CPI  UL,$4D
3128   92FE 89 03           BZR  BR_9303 ; $9303
3129   9300 BA BB 6A        JMP  CHAIN_150 ; $BB6A
3130   9303             
3131   9303             BR_9303:
3132   9303 9E 2F           BCH  JMP_92D6 ; $92D6
3133   9305             
3134   9305             BR_9305:
3135   9305 BA 92 D6        JMP  JMP_92D6 ; $92D6
3136   9308             ;% LB_CHAIN END
3137   9308             
3138   9308             
3139   9308             ;------------------------------------------------------------------------------------------------------------
3140   9308             ; KEY - 
3141   9308             ; Called from 
3142   9308             ; Arguments: 
3143   9308             ; Outputs: 
3144   9308             ; RegMod: 
3145   9308             ;% LB_KEY START
3146   9308             KEY:
3147   9308 C2              VEJ  (C2) \ AWRD($F182) \ ABRF(BR_9323) ; $9323
3147   9309 F1 82       
3147   930B 17          
3148   930C C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_9317) ; $9317
3148   930D F1 9C       
3148   930F 07          
3149   9310 B5 55           LDI  A,$55
3150   9312 FD AE 77 E2     STA  #(VIDEORAM + $07E2) ; $77E2
3151   9316 E2              VEJ  (E2)
3152   9317             
3153   9317             BR_9317:
3154   9317 C6              VEJ  (C6)
3155   9318 C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_9322) ; $9322
3155   9319 F1 9E       
3155   931B 06          
3156   931C FD E9 77 E2     ANI  #(VIDEORAM + $07E2),$00
3156   9320 00 
3157   9321 E2              VEJ  (E2)
3158   9322             
3159   9322             BR_9322:
3160   9322 E4              VEJ  (E4)
3161   9323             
3162   9323             BR_9323:
3163   9323 C6              VEJ  (C6)
3164   9324 C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_9339) ; $9339
3164   9325 F1 9C       
3164   9327 11          
3165   9328 F4              VEJ  (F4) \ AWRD($A803) ; ***PRINT_150
3165   9329 A8 03       
3166   932B 6C 44           CPI  UH,$44
3167   932D 89 07           BZR  BR_9336 ; $9336
3168   932F 6E 49           CPI  UL,$49
3169   9331 89 03           BZR  BR_9336 ; $9336
3170   9333 BA A8 FD        JMP  $A8FD ; ***MOTDRV
3171   9336             
3172   9336             BR_9336:
3173   9336 68 1B           LDI  UH,$1B
3174   9338 E0              VEJ  (E0)
3175   9339             
3176   9339             BR_9339:
3177   9339 C6              VEJ  (C6)
3178   933A C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_934F) ; $934F
3178   933B F1 9E       
3178   933D 11          
3179   933E F4              VEJ  (F4) \ AWRD($A803) ; ***
3179   933F A8 03       
3180   9341 6C 44           CPI  UH,$44
3181   9343 89 07           BZR  BR_934C ; $934C
3182   9345 6E 49           CPI  UL,$49
3183   9347 89 03           BZR  BR_934C ; $934C
3184   9349 BA A8 FA        JMP  $A8FA ; ***MOTDRV
3185   934C             
3186   934C             BR_934C: 
3187   934C 68 1B           LDI  UH,$1B
3188   934E E0              VEJ  (E0)
3189   934F             
3190   934F             BR_934F:
3191   934F E4              VEJ  (E4)
3192   9350 FD C8           PSH  A
3193   9352 FD A5 77 F0     LDA  #(VIDEORAM + $07F0) ; $77F0
3194   9356 B7 55           CPI  A,$55
3195   9358 89 0E           BZR  BR_9368 ; $9368
3196   935A FD A5 77 F1     LDA  #(VIDEORAM + $07F1)
3197   935E 08              STA  XH
3198   935F FD A5 77 F2     LDA  #(VIDEORAM + $07F2)
3199   9363 0A              STA  XL
3200   9364 FD 8A           POP  A
3201   9366 FD 5E           STX  P
3202   9368             
3203   9368             BR_9368:
3204   9368 FD 8A           POP  A
3205   936A BA C4 AF        JMP  TRCROUTINE ; $C4AF
3206   936D             
3207   936D             
3208   936D             ; $936D-$9394
3209   936D 54 45 4C 2E     .TEXT  "TEL. 071"
3209   9371 20 30 37 31 
3210   9375 36 31 2F 37     .TEXT  "61/79021"
3210   9379 39 30 32 31 
3211   937D 20 61 6E 72     .TEXT  " anrufen"
3211   9381 75 66 65 6E 
3212   9385 20 21 48 4F     .TEXT  " !HO V.1"
3212   9389 20 56 2E 31 
3213   938D 2E 30 20 38     .TEXT  ".0 859  "
3213   9391 35 39 20 20 
3214   9395             
3215   9395             
3216   9395             ; $9395 - $93FF
3217   9395 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3217   9399 00 00 00 00 
3218   939D 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3218   93A1 00 00 00 00 
3219   93A5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3219   93A9 00 00 00 00 
3220   93AD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3220   93B1 00 00 00 00 
3221   93B5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3221   93B9 00 00 00 00 
3222   93BD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3222   93C1 00 00 00 00 
3223   93C5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3223   93C9 00 00 00 00 
3224   93CD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3224   93D1 00 00 00 00 
3225   93D5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3225   93D9 00 00 00 00 
3226   93DD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3226   93E1 00 00 00 00 
3227   93E5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3227   93E9 00 00 00 00 
3228   93ED 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3228   93F1 00 00 00 00 
3229   93F5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3229   93F9 00 00 00 00 
3230   93FD 00 00 00        .BYTE  $00,$00,$00
3231   9400             
3232   9400             
3233   9400             ; last character of name has bit 7 set. Use macro EOW to accomplish this.
3234   9400             ; $9400 - $9F80
3235   9400             ;         NAME              BIT 7 SET      ADDRESS
3236   9400 56 4C 49 53     .TEXT "VLIS"         \  EOW('T')  \  .WORD $8000
3236   9404 D4          
3236   9405 80 00       
3237   9407 4F 50 4E 43     .TEXT "OPNCR"        \  EOW('T')  \  .WORD $0040
3237   940B 52 
3237   940C D4          
3237   940D 00 40       
3238   940F 54 45 53 54     .TEXT "TESTEN"       \  EOW('D')  \  .WORD $0004
3238   9413 45 4E 
3238   9415 C4          
3238   9416 00 04       
3239   9418 43 48 41 4E     .TEXT "CHANGETOKE"   \  EOW('N')  \  .WORD $001C
3239   941C 47 45 54 4F 
3239   9420 4B 45 
3239   9422 CE          
3239   9423 00 1C       
3240   9425 53 45 41 52     .TEXT "SEARCHENTE"   \  EOW('R')  \  .WORD $0020
3240   9429 43 48 45 4E 
3240   942D 54 45 
3240   942F D2          
3240   9430 00 20       
3241   9432 4D 41 4B 45     .TEXT "MAKEPARAME"   \  EOW('T')  \  .WORD $002E
3241   9436 50 41 52 41 
3241   943A 4D 45 
3241   943C D4          
3241   943D 00 2E       
3242   943F 4D 45 48 52     .TEXT "MEHRFACHVE"   \  EOW('R')  \  .WORD $0034
3242   9443 46 41 43 48 
3242   9447 56 45 
3242   9449 D2          
3242   944A 00 34       
3243   944C 4C 44 58 52     .TEXT "LDXRESERVE"   \  EOW('S')  \  .WORD $0038
3243   9450 45 53 45 52 
3243   9454 56 45 
3243   9456 D3          
3243   9457 00 38       
3244   9459 52 53 48 49     .TEXT "RSHIFT7BY"    \  EOW('T')  \  .WORD $0074
3244   945D 46 54 37 42 
3244   9461 59 
3244   9462 D4          
3244   9463 00 74       
3245   9465 4D 4F 56 45     .TEXT "MOVESTROUT"   \  EOW('P')  \  .WORD $0094
3245   9469 53 54 52 4F 
3245   946D 55 54 
3245   946F D0          
3245   9470 00 94       
3246   9472 44 49 53 50     .TEXT "DISPLAYTEX"   \  EOW('T')  \  .WORD $0092
3246   9476 4C 41 59 54 
3246   947A 45 58 
3246   947C D4          
3246   947D 00 92       
3247   947F 4D 41 4B 45     .TEXT "MAKEUSIN"     \  EOW('G')  \  .WORD $0096
3247   9483 55 53 49 4E 
3247   9487 C7          
3247   9488 00 96       
3248   948A 57 41 52 54     .TEXT "WARTEULAN"    \  EOW('G')  \  .WORD $00AC
3248   948E 45 55 4C 41 
3248   9492 4E 
3248   9493 C7          
3248   9494 00 AC       
3249   9496 4C 44 55 5A     .TEXT "LDUZEICHE"    \  EOW('N')  \  .WORD $00C0
3249   949A 45 49 43 48 
3249   949E 45 
3249   949F CE          
3249   94A0 00 C0       
3250   94A2 54 45 53 54     .TEXT "TESTTOKZE"    \  EOW('I')  \  .WORD $00C2
3250   94A6 54 4F 4B 5A 
3250   94AA 45 
3250   94AB C9          
3250   94AC 00 C2       
3251   94AE 54 45 53 54     .TEXT "TESTUTOKZ"    \  EOW('E')  \  .WORD $00C4
3251   94B2 55 54 4F 4B 
3251   94B6 5A 
3251   94B7 C5          
3251   94B8 00 C4       
3252   94BA 44 45 43 59     .TEXT "DECYTOKZE"    \  EOW('I')  \  .WORD $00C6
3252   94BE 54 4F 4B 5A 
3252   94C2 45 
3252   94C3 C9          
3252   94C4 00 C6       
3253   94C6 4E 4F 45 4E     .TEXT "NOENDTES"     \  EOW('T')  \  .WORD $00C8
3253   94CA 44 54 45 53 
3253   94CE D4          
3253   94CF 00 C8       
3254   94D1 4C 41 44 45     .TEXT "LADE78NN"     \  EOW('X')  \  .WORD $00CA
3254   94D5 37 38 4E 4E 
3254   94D9 D8          
3254   94DA 00 CA       
3255   94DC 4C 41 44 45     .TEXT "LADEXAUS7"    \  EOW('8')  \  .WORD $00CC
3255   94E0 58 41 55 53 
3255   94E4 37 
3255   94E5 B8          
3255   94E6 00 CC       
3256   94E8 41 52 49 54     .TEXT "ARITMETI"     \  EOW('K')  \  .WORD $00D0
3256   94EC 4D 45 54 49 
3256   94F0 CB          
3256   94F1 00 D0       
3257   94F3 54 45 53 54     .TEXT "TESTSTRNU"    \  EOW('M')  \  .WORD $00D2
3257   94F7 53 54 52 4E 
3257   94FB 55 
3257   94FC CD          
3257   94FD 00 D2       
3258   94FF 54 45 53 54     .TEXT "TESTBASICRU"  \  EOW('N')  \  .WORD $00D8
3258   9503 42 41 53 49 
3258   9507 43 52 55 
3258   950A CE          
3258   950B 00 D8       
3259   950D 53 54 52 49     .TEXT "STRINGINF"    \  EOW('O')  \  .WORD $00DC
3259   9511 4E 47 49 4E 
3259   9515 46 
3259   9516 CF          
3259   9517 00 DC       
3260   9519 41 55 53 44     .TEXT "AUSDRUC"      \  EOW('K')  \  .WORD $00DE
3260   951D 52 55 43 
3260   9520 CB          
3260   9521 00 DE       
3261   9523 45 52 52 4F     .TEXT "ERRO"         \  EOW('R')  \  .WORD $00E0
3261   9527 D2          
3261   9528 00 E0       
3262   952A 49 4E 54 45     .TEXT "INTERPRETE"   \  EOW('R')  \  .WORD $00E2
3262   952E 52 50 52 45 
3262   9532 54 45 
3262   9534 D2          
3262   9535 00 E2       
3263   9537 45 52 52 4F     .TEXT "ERROR"        \  EOW('1')  \  .WORD $00E4
3263   953B 52 
3263   953C B1          
3263   953D 00 E4       
3264   953F 43 4C 45 41     .TEXT "CLEARLC"      \  EOW('D')  \  .WORD $00F2
3264   9543 52 4C 43 
3264   9546 C4          
3264   9547 00 F2       
3265   9549 4C 41 44 45     .TEXT "LADEUAUSNNN"  \  EOW('N')  \  .WORD $00F4
3265   954D 55 41 55 53 
3265   9551 4E 4E 4E 
3265   9554 CE          
3265   9555 00 F4       
3266   9557 54 45 53 54     .TEXT "TESTKE"       \  EOW('Y')  \  .WORD $E42C
3266   955B 4B 45 
3266   955D D9          
3266   955E E4 2C       
3267   9560 53 54 4F 52     .TEXT "STORESTRIN"   \  EOW('G')  \  .WORD $DFB4
3267   9564 45 53 54 52 
3267   9568 49 4E 
3267   956A C7          
3267   956B DF B4       
3268   956D 53 54 4F 52     .TEXT "STOREINDST"   \  EOW('R')  \  .WORD $DFC5
3268   9571 45 49 4E 44 
3268   9575 53 54 
3268   9577 D2          
3268   9578 DF C5       
3269   957A 46 41 52 42     .TEXT "FARBRA"       \  EOW('M')  \  .WORD $6000
3269   957E 52 41 
3269   9580 CD          
3269   9581 60 00       
3270   9583 47 52 41 50     .TEXT "GRAPHIKRA"    \  EOW('M')  \  .WORD $3000
3270   9587 48 49 4B 52 
3270   958B 41 
3270   958C CD          
3270   958D 30 00       
3271   958F 56 49 44 45     .TEXT "VIDEORA"      \  EOW('M')  \  .WORD $7000
3271   9593 4F 52 41 
3271   9596 CD          
3271   9597 70 00       
3272   9599 56 49 44 45     .TEXT "VIDEOPROZE"   \  EOW('S')  \  .WORD $7800
3272   959D 4F 50 52 4F 
3272   95A1 5A 45 
3272   95A3 D3          
3272   95A4 78 00       
3273   95A6 42 41 53 49     .TEXT "BASICEND"     \  EOW('H')  \  .WORD $7867
3273   95AA 43 45 4E 44 
3273   95AE C8          
3273   95AF 78 67       
3274   95B1 42 41 53 49     .TEXT "BASICEND"     \  EOW('L')  \  .WORD $7868
3274   95B5 43 45 4E 44 
3274   95B9 CC          
3274   95BA 78 68       
3275   95BC 42 41 53 49     .TEXT "BASICANF"     \  EOW('H')  \  .WORD $7865
3275   95C0 43 41 4E 46 
3275   95C4 C8          
3275   95C5 78 65       
3276   95C7 42 41 53 49     .TEXT "BASICANF"     \  EOW('L')  \  .WORD $7866
3276   95CB 43 41 4E 46 
3276   95CF CC          
3276   95D0 78 66       
3277   95D2 53 54 41 54     .TEXT "STATUS"       \  EOW('H')  \  .WORD $764E
3277   95D6 55 53 
3277   95D8 C8          
3277   95D9 76 4E       
3278   95DB 53 54 41 54     .TEXT "STATUS"       \  EOW('L')  \  .WORD $764F
3278   95DF 55 53 
3278   95E1 CC          
3278   95E2 76 4F       
3279   95E4 49 4E 50 55     .TEXT "INPUTBUFFE"   \  EOW('R')  \  .WORD $7BB0
3279   95E8 54 42 55 46 
3279   95EC 46 45 
3279   95EE D2          
3279   95EF 7B B0       
3280   95F1 54 41 53 54     .TEXT "TASTUMLEI"    \  EOW('T')  \  .WORD $79D4
3280   95F5 55 4D 4C 45 
3280   95F9 49 
3280   95FA D4          
3280   95FB 79 D4       
3281   95FD 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('H')  \  .WORD $785B
3281   9601 55 4D 50 4F 
3281   9605 49 
3281   9606 C8          
3281   9607 78 5B       
3282   9609 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('L')  \  .WORD $785C
3282   960D 55 4D 50 4F 
3282   9611 49 
3282   9612 CC          
3282   9613 78 5C       
3283   9615 57 41 49 54     .TEXT "WAITY"        \  EOW('N')  \  .WORD $7871
3283   9619 59 
3283   961A CE          
3283   961B 78 71       
3284   961D 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('H')  \  .WORD $7872
3284   9621 43 4F 55 4E 
3284   9625 54 
3284   9626 C8          
3284   9627 78 72       
3285   9629 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('L')  \  .WORD $7873
3285   962D 43 4F 55 4E 
3285   9631 54 
3285   9632 CC          
3285   9633 78 73       
3286   9635 42 4C 49 4E     .TEXT "BLINKFLA"     \  EOW('G')  \  .WORD $787C
3286   9639 4B 46 4C 41 
3286   963D C7          
3286   963E 78 7C       
3287   9640 4F 55 54 50     .TEXT "OUTPBUFFP"    \  EOW('O')  \  .WORD $788F
3287   9644 42 55 46 46 
3287   9648 50 
3287   9649 CF          
3287   964A 78 8F       
3288   964C 53 54 52 49     .TEXT "STRIBUFFP"    \  EOW('O')  \  .WORD $7894
3288   9650 42 55 46 46 
3288   9654 50 
3288   9655 CF          
3288   9656 78 94       
3289   9658 55 53 49 4E     .TEXT "USINGFORMA"   \  EOW('T')  \  .WORD $7895
3289   965C 47 46 4F 52 
3289   9660 4D 41 
3289   9662 D4          
3289   9663 78 95       
3290   9665 55 53 49 4E     .TEXT "USINGLAEN"    \  EOW('G')  \  .WORD $7896
3290   9669 47 4C 41 45 
3290   966D 4E 
3290   966E C7          
3290   966F 78 96       
3291   9671 55 53 49 4E     .TEXT "USINGSTRIN"   \  EOW('G')  \  .WORD $7897
3291   9675 47 53 54 52 
3291   9679 49 4E 
3291   967B C7          
3291   967C 78 97       
3292   967E 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('H')  \  .WORD $78A6
3292   9682 43 48 41 44 
3292   9686 52 
3292   9687 C8          
3292   9688 78 A6       
3293   968A 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('L')  \  .WORD $78A7
3293   968E 43 48 41 44 
3293   9692 52 
3293   9693 CC          
3293   9694 78 A7       
3294   9696 4D 4F 44 55     .TEXT "MODULS"       \  EOW('W')  \  .WORD $D800
3294   969A 4C 53 
3294   969C D7          
3294   969D D8 00       
3295   969F 4D 4F 44 55     .TEXT "MODU"         \  EOW('L')  \  .WORD $77E0
3295   96A3 CC          
3295   96A4 77 E0       
3296   96A6 4B 45 59 42     .TEXT "KEYBEE"       \  EOW('P')  \  .WORD $77E2
3296   96AA 45 45 
3296   96AC D0          
3296   96AD 77 E2       
3297   96AF 4C 52 45 43     .TEXT "LREC"         \  EOW('L')  \  .WORD $77D1
3297   96B3 CC          
3297   96B4 77 D1       
3298   96B6 55 50           .TEXT "UP"           \  EOW('L')  \  .WORD $77D2
3298   96B8 CC          
3298   96B9 77 D2       
3299   96BB 49 4E           .TEXT "IN"           \  EOW('P')  \  .WORD $77D3
3299   96BD D0          
3299   96BE 77 D3       
3300   96C0 43 55 52        .TEXT "CUR"          \  EOW('H')  \  .WORD $77D4
3300   96C3 C8          
3300   96C4 77 D4       
3301   96C6 43 55 52        .TEXT "CUR"          \  EOW('L')  \  .WORD $77D5
3301   96C9 CC          
3301   96CA 77 D5       
3302   96CC 43 55 52 50     .TEXT "CURP"         \  EOW('1')  \  .WORD $77D6
3302   96D0 B1          
3302   96D1 77 D6       
3303   96D3 4D 4F 4D 45     .TEXT "MOMENTVCU"    \  EOW('R')  \  .WORD $774E
3303   96D7 4E 54 56 43 
3303   96DB 55 
3303   96DC D2          
3303   96DD 77 4E       
3304   96DF 4D 4F 4D 45     .TEXT "MOMENTHCU"    \  EOW('R')  \  .WORD $774F
3304   96E3 4E 54 48 43 
3304   96E7 55 
3304   96E8 D2          
3304   96E9 77 4F       
3305   96EB 4B 4F 4D        .TEXT "KOM"          \  EOW('P')  \  .WORD $77D7
3305   96EE D0          
3305   96EF 77 D7       
3306   96F1 49 4E 50        .TEXT "INP"          \  EOW('P')  \  .WORD $77D8
3306   96F4 D0          
3306   96F5 77 D8       
3307   96F7 56 41 52 49     .TEXT "VARIABL"      \  EOW('E')  \  .WORD $77D9
3307   96FB 41 42 4C 
3307   96FE C5          
3307   96FF 77 D9       
3308   9701 43 55 52 53     .TEXT "CURSORAR"     \  EOW('T')  \  .WORD $77DA
3308   9705 4F 52 41 52 
3308   9709 D4          
3308   970A 77 DA       
3309   970C 43 55 52 53     .TEXT "CURSORART"    \  EOW('L')  \  .WORD $77DB
3309   9710 4F 52 41 52 
3309   9714 54 
3309   9715 CC          
3309   9716 77 DB       
3310   9718 46 41 52 42     .TEXT "FARB"         \  EOW('E')  \  .WORD $77DC
3310   971C C5          
3310   971D 77 DC       
3311   971F 48 49 4E 54     .TEXT "HINTERG"      \  EOW('R')  \  .WORD $77DD
3311   9723 45 52 47 
3311   9726 D2          
3311   9727 77 DD       
3312   9729 5A 45 49 43     .TEXT "ZEICHFARB"    \  EOW('E')  \  .WORD $77DE
3312   972D 48 46 41 52 
3312   9731 42 
3312   9732 C5          
3312   9733 77 DE       
3313   9735 56 41 52        .TEXT "VAR"          \  EOW('2')  \  .WORD $77DF
3313   9738 B2          
3313   9739 77 DF       
3314   973B 55 53 52 54     .TEXT "USRT"         \  EOW('R')  \  .WORD $77F0
3314   973F D2          
3314   9740 77 F0       
3315   9742 55 53 52 54     .TEXT "USRTR"        \  EOW('1')  \  .WORD $77F1
3315   9746 52 
3315   9747 B1          
3315   9748 77 F1       
3316   974A 55 53 52 54     .TEXT "USRTR"        \  EOW('2')  \  .WORD $77F2
3316   974E 52 
3316   974F B2          
3316   9750 77 F2       
3317   9752 50 52 49 4E     .TEXT "PRINTFLA"     \  EOW('G')  \  .WORD $77F3
3317   9756 54 46 4C 41 
3317   975A C7          
3317   975B 77 F3       
3318   975D 49 4E 46 4F     .TEXT "INFOR"        \  EOW('M')  \  .WORD $77F4
3318   9761 52 
3318   9762 CD          
3318   9763 77 F4       
3319   9765 49 4E 50 46     .TEXT "INPFLA"       \  EOW('G')  \  .WORD $77E1
3319   9769 4C 41 
3319   976B C7          
3319   976C 77 E1       
3320   976E 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('1')  \  .WORD $F0DD
3320   9772 4E 30 
3320   9774 B1          
3320   9775 F0 DD       
3321   9777 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('2')  \  .WORD $F0DE
3321   977B 4E 30 
3321   977D B2          
3321   977E F0 DE       
3322   9780 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('3')  \  .WORD $F0DF
3322   9784 4E 30 
3322   9786 B3          
3322   9787 F0 DF       
3323   9789 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('4')  \  .WORD $F088
3323   978D 4E 30 
3323   978F B4          
3323   9790 F0 88       
3324   9792 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('5')  \  .WORD $F0EB
3324   9796 4E 30 
3324   9798 B5          
3324   9799 F0 EB       
3325   979B 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('6')  \  .WORD $F0B1
3325   979F 4E 30 
3325   97A1 B6          
3325   97A2 F0 B1       
3326   97A4 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('7')  \  .WORD $F084
3326   97A8 4E 30 
3326   97AA B7          
3326   97AB F0 84       
3327   97AD 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('8')  \  .WORD $F0E0
3327   97B1 4E 30 
3327   97B3 B8          
3327   97B4 F0 E0       
3328   97B6 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('9')  \  .WORD $F070
3328   97BA 4E 30 
3328   97BC B9          
3328   97BD F0 70       
3329   97BF 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('0')  \  .WORD $F0C7
3329   97C3 4E 31 
3329   97C5 B0          
3329   97C6 F0 C7       
3330   97C8 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('1')  \  .WORD $F053
3330   97CC 4E 31 
3330   97CE B1          
3330   97CF F0 53       
3331   97D1 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('2')  \  .WORD $F052
3331   97D5 4E 31 
3331   97D7 B2          
3331   97D8 F0 52       
3332   97DA 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('3')  \  .WORD $F0E1
3332   97DE 4E 31 
3332   97E0 B3          
3332   97E1 F0 E1       
3333   97E3 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('4')  \  .WORD $F0E8
3333   97E7 4E 31 
3333   97E9 B4          
3333   97EA F0 E8       
3334   97EC 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('5')  \  .WORD $F0E9
3334   97F0 4E 31 
3334   97F2 B5          
3334   97F3 F0 E9       
3335   97F5 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('6')  \  .WORD $F054
3335   97F9 4E 31 
3335   97FB B6          
3335   97FC F0 54       
3336   97FE 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('7')  \  .WORD $F055
3336   9802 4E 31 
3336   9804 B7          
3336   9805 F0 55       
3337   9807 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('8')  \  .WORD $F071
3337   980B 4E 31 
3337   980D B8          
3337   980E F0 71       
3338   9810 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('9')  \  .WORD $F091
3338   9814 4E 31 
3338   9816 B9          
3338   9817 F0 91       
3339   9819 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('0')  \  .WORD $F0E2
3339   981D 4E 32 
3339   981F B0          
3339   9820 F0 E2       
3340   9822 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('1')  \  .WORD $F0B2
3340   9826 4E 32 
3340   9828 B1          
3340   9829 F0 B2       
3341   982B 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('2')  \  .WORD $F090
3341   982F 4E 32 
3341   9831 B2          
3341   9832 F0 90       
3342   9834 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('3')  \  .WORD $F080
3342   9838 4E 32 
3342   983A B3          
3342   983B F0 80       
3343   983D 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('4')  \  .WORD $F0E4
3343   9841 4E 32 
3343   9843 B4          
3343   9844 F0 E4       
3344   9846 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('5')  \  .WORD $F097
3344   984A 4E 32 
3344   984C B5          
3344   984D F0 97       
3345   984F 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('6')  \  .WORD $F0C3
3345   9853 4E 32 
3345   9855 B6          
3345   9856 F0 C3       
3346   9858 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('7')  \  .WORD $F0C5
3346   985C 4E 32 
3346   985E B7          
3346   985F F0 C5       
3347   9861 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('8')  \  .WORD $F081
3347   9865 4E 32 
3347   9867 B8          
3347   9868 F0 81       
3348   986A 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('9')  \  .WORD $F0E7
3348   986E 4E 32 
3348   9870 B9          
3348   9871 F0 E7       
3349   9873 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('0')  \  .WORD $F0EA
3349   9877 4E 33 
3349   9879 B0          
3349   987A F0 EA       
3350   987C 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('1')  \  .WORD $F056
3350   9880 4E 33 
3350   9882 B1          
3350   9883 F0 56       
3351   9885 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('2')  \  .WORD $F050
3351   9889 4E 33 
3351   988B B2          
3351   988C F0 50       
3352   988E 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('3')  \  .WORD $F083
3352   9892 4E 33 
3352   9894 B3          
3352   9895 F0 83       
3353   9897 54              .TEXT "T"            \  EOW('B')  \  .WORD $8055
3353   9898 C2          
3353   9899 80 55       
3354   989B 54              .TEXT "T"            \  EOW('C')  \  .WORD $8060
3354   989C C3          
3354   989D 80 60       
3355   989F 54              .TEXT "T"            \  EOW('D')  \  .WORD $8094
3355   98A0 C4          
3355   98A1 80 94       
3356   98A3 54              .TEXT "T"            \  EOW('E')  \  .WORD $80A4
3356   98A4 C5          
3356   98A5 80 A4       
3357   98A7 54              .TEXT "T"            \  EOW('G')  \  .WORD $80BD
3357   98A8 C7          
3357   98A9 80 BD       
3358   98AB 54              .TEXT "T"            \  EOW('H')  \  .WORD $80DF
3358   98AC C8          
3358   98AD 80 DF       
3359   98AF 54              .TEXT "T"            \  EOW('I')  \  .WORD $8101
3359   98B0 C9          
3359   98B1 81 01       
3360   98B3 54              .TEXT "T"            \  EOW('K')  \  .WORD $810B
3360   98B4 CB          
3360   98B5 81 0B       
3361   98B7 54              .TEXT "T"            \  EOW('L')  \  .WORD $8113
3361   98B8 CC          
3361   98B9 81 13       
3362   98BB 54              .TEXT "T"            \  EOW('M')  \  .WORD $8125
3362   98BC CD          
3362   98BD 81 25       
3363   98BF 54              .TEXT "T"            \  EOW('P')  \  .WORD $813A
3363   98C0 D0          
3363   98C1 81 3A       
3364   98C3 54              .TEXT "T"            \  EOW('R')  \  .WORD $8144
3364   98C4 D2          
3364   98C5 81 44       
3365   98C7 54              .TEXT "T"            \  EOW('S')  \  .WORD $815A
3365   98C8 D3          
3365   98C9 81 5A       
3366   98CB 54              .TEXT "T"            \  EOW('T')  \  .WORD $816D
3366   98CC D4          
3366   98CD 81 6D       
3367   98CF 54              .TEXT "T"            \  EOW('V')  \  .WORD $8177
3367   98D0 D6          
3367   98D1 81 77       
3368   98D3 41 4E 46 41     .TEXT "ANFAN"        \  EOW('G')  \  .WORD $819E
3368   98D7 4E 
3368   98D8 C7          
3368   98D9 81 9E       
3369   98DB 41 4E 46        .TEXT "ANF"          \  EOW('1')  \  .WORD $81F4
3369   98DE B1          
3369   98DF 81 F4       
3370   98E1 4B 45           .TEXT "KE"           \  EOW('Y')  \  .WORD $822F
3370   98E3 D9          
3370   98E4 82 2F       
3371   98E6 4D 4F 44 45     .TEXT "MODE"         \  EOW('T')  \  .WORD $836B
3371   98EA D4          
3371   98EB 83 6B       
3372   98ED 41 4C 54 45     .TEXT "ALTE"         \  EOW('R')  \  .WORD $8381
3372   98F1 D2          
3372   98F2 83 81       
3373   98F4 42 41 53 49     .TEXT "BASI"         \  EOW('C')  \  .WORD $83BB
3373   98F8 C3          
3373   98F9 83 BB       
3374   98FB 4E 45 58 54     .TEXT "NEXT"         \  EOW('L')  \  .WORD $83C6
3374   98FF CC          
3374   9900 83 C6       
3375   9902 4E 45 58 54     .TEXT "NEXT"         \  EOW('0')  \  .WORD $83F0
3375   9906 B0          
3375   9907 83 F0       
3376   9909 4E 45 58 54     .TEXT "NEXT"         \  EOW('E')  \  .WORD $8417
3376   990D C5          
3376   990E 84 17       
3377   9910 45 4E 54 45     .TEXT "ENTE"         \  EOW('R')  \  .WORD $8419
3377   9914 D2          
3377   9915 84 19       
3378   9917 4E 45 58 54     .TEXT "NEXT"         \  EOW('C')  \  .WORD $841F
3378   991B C3          
3378   991C 84 1F       
3379   991E 4E 45 58 54     .TEXT "NEXT"         \  EOW('D')  \  .WORD $842D
3379   9922 C4          
3379   9923 84 2D       
3380   9925 4E 45 58 54     .TEXT "NEXT"         \  EOW('2')  \  .WORD $843B
3380   9929 B2          
3380   992A 84 3B       
3381   992C 4D 4F 44 55     .TEXT "MODU"         \  EOW('S')  \  .WORD $8456
3381   9930 D3          
3381   9931 84 56       
3382   9933 4D 4F 44        .TEXT "MOD"          \  EOW('1')  \  .WORD $8466
3382   9936 B1          
3382   9937 84 66       
3383   9939 52 50 4D 4F     .TEXT "RPMOD"        \  EOW('E')  \  .WORD $84BB
3383   993D 44 
3383   993E C5          
3383   993F 84 BB       
3384   9941 4D 4F 44        .TEXT "MOD"          \  EOW('C')  \  .WORD $84C5
3384   9944 C3          
3384   9945 84 C5       
3385   9947 4D 4F 44 45     .TEXT "MODEN"        \  EOW('D')  \  .WORD $84D4
3385   994B 4E 
3385   994C C4          
3385   994D 84 D4       
3386   994F 53 43 52 4F     .TEXT "SCROL"        \  EOW('L')  \  .WORD $84D7
3386   9953 4C 
3386   9954 CC          
3386   9955 84 D7       
3387   9957 53 43 52        .TEXT "SCR"          \  EOW('1')  \  .WORD $84E6
3387   995A B1          
3387   995B 84 E6       
3388   995D 53 43 52        .TEXT "SCR"          \  EOW('2')  \  .WORD $84FD
3388   9960 B2          
3388   9961 84 FD       
3389   9963 53 43 52 4F     .TEXT "SCROL"        \  EOW('1')  \  .WORD $8501
3389   9967 4C 
3389   9968 B1          
3389   9969 85 01       
3390   996B 53 43 52 4F     .TEXT "SCRO"         \  EOW('2')  \  .WORD $8511
3390   996F B2          
3390   9970 85 11       
3391   9972 53 43 52 45     .TEXT "SCREN"        \  EOW('D')  \  .WORD $8524
3391   9976 4E 
3391   9977 C4          
3391   9978 85 24       
3392   997A 44 45 43 4F     .TEXT "DECOD"        \  EOW('E')  \  .WORD $852C
3392   997E 44 
3392   997F C5          
3392   9980 85 2C       
3393   9982 44 45 43 4F     .TEXT "DECOD"        \  EOW('1')  \  .WORD $8535
3393   9986 44 
3393   9987 B1          
3393   9988 85 35       
3394   998A 44 45 43 4F     .TEXT "DECOD1"       \  EOW('A')  \  .WORD $8556
3394   998E 44 31 
3394   9990 C1          
3394   9991 85 56       
3395   9993 44 45 43 4F     .TEXT "DECOD"        \  EOW('2')  \  .WORD $8576
3395   9997 44 
3395   9998 B2          
3395   9999 85 76       
3396   999B 44 45 43 4F     .TEXT "DECOD"        \  EOW('3')  \  .WORD $857A
3396   999F 44 
3396   99A0 B3          
3396   99A1 85 7A       
3397   99A3 44 43 44        .TEXT "DCD"          \  EOW('3')  \  .WORD $8595
3397   99A6 B3          
3397   99A7 85 95       
3398   99A9 54 52 55 4E     .TEXT "TRUN"         \  EOW('K')  \  .WORD $85B6
3398   99AD CB          
3398   99AE 85 B6       
3399   99B0 4E 4F 43 4F     .TEXT "NOCOD"        \  EOW('E')  \  .WORD $85BB
3399   99B4 44 
3399   99B5 C5          
3399   99B6 85 BB       
3400   99B8 4E 43           .TEXT "NC"           \  EOW('D')  \  .WORD $85F0
3400   99BA C4          
3400   99BB 85 F0       
3401   99BD 54 52 45 4E     .TEXT "TREN"         \  EOW('N')  \  .WORD $8604
3401   99C1 CE          
3401   99C2 86 04       
3402   99C4 54 52 45 4E     .TEXT "TRENRE"       \  EOW('T')  \  .WORD $860D
3402   99C8 52 45 
3402   99CA D4          
3402   99CB 86 0D       
3403   99CD 54 52 45 4E     .TEXT "TREN"         \  EOW('E')  \  .WORD $8643
3403   99D1 C5          
3403   99D2 86 43       
3404   99D4 54 52 45 4E     .TEXT "TREN"         \  EOW('1')  \  .WORD $8646
3404   99D8 B1          
3404   99D9 86 46       
3405   99DB 54 52 55 4E     .TEXT "TRUN"         \  EOW('C')  \  .WORD $8656
3405   99DF C3          
3405   99E0 86 56       
3406   99E2 43 55 52 53     .TEXT "CURSO"        \  EOW('R')  \  .WORD $8663
3406   99E6 4F 
3406   99E7 D2          
3406   99E8 86 63       
3407   99EA 54 4F           .TEXT "TO"           \  EOW('F')  \  .WORD $86E4
3407   99EC C6          
3407   99ED 86 E4       
3408   99EF 45 4F           .TEXT "EO"           \  EOW('F')  \  .WORD $86FA
3408   99F1 C6          
3408   99F2 86 FA       
3409   99F4 4F 42           .TEXT "OB"           \  EOW('F')  \  .WORD $8721
3409   99F6 C6          
3409   99F7 87 21       
3410   99F9 4F 55 42 46     .TEXT "OUBF"         \  EOW('1')  \  .WORD $8752
3410   99FD B1          
3410   99FE 87 52       
3411   9A00 4F 55 42 46     .TEXT "OUBF"         \  EOW('0')  \  .WORD $878B
3411   9A04 B0          
3411   9A05 87 8B       
3412   9A07 4F 55 42 46     .TEXT "OUBF"         \  EOW('2')  \  .WORD $8799
3412   9A0B B2          
3412   9A0C 87 99       
3413   9A0E 4F 55 42 46     .TEXT "OUBF"         \  EOW('3')  \  .WORD $879D
3413   9A12 B3          
3413   9A13 87 9D       
3414   9A15 4F 55 42 46     .TEXT "OUBF"         \  EOW('4')  \  .WORD $87A5
3414   9A19 B4          
3414   9A1A 87 A5       
3415   9A1C 4F 42 46        .TEXT "OBF"          \  EOW('5')  \  .WORD $87BB
3415   9A1F B5          
3415   9A20 87 BB       
3416   9A22 53 54 45        .TEXT "STE"          \  EOW('P')  \  .WORD $87CC
3416   9A25 D0          
3416   9A26 87 CC       
3417   9A28 4C 45 4E 47     .TEXT "LENGT"        \  EOW('H')  \  .WORD $87D4
3417   9A2C 54 
3417   9A2D C8          
3417   9A2E 87 D4       
3418   9A30 4F 56 45 52     .TEXT "OVERF"        \  EOW('L')  \  .WORD $87E7
3418   9A34 46 
3418   9A35 CC          
3418   9A36 87 E7       
3419   9A38 4F 56 46 4C     .TEXT "OVFL"         \  EOW('0')  \  .WORD $87FD
3419   9A3C B0          
3419   9A3D 87 FD       
3420   9A3F 4F 56 46        .TEXT "OVF"          \  EOW('0')  \  .WORD $882D
3420   9A42 B0          
3420   9A43 88 2D       
3421   9A45 4F 56 46        .TEXT "OVF"          \  EOW('1')  \  .WORD $8839
3421   9A48 B1          
3421   9A49 88 39       
3422   9A4B 4F 56 46        .TEXT "OVF"          \  EOW('2')  \  .WORD $883D
3422   9A4E B2          
3422   9A4F 88 3D       
3423   9A51 4F 55 54 53     .TEXT "OUTSC"        \  EOW('R')  \  .WORD $8854
3423   9A55 43 
3423   9A56 D2          
3423   9A57 88 54       
3424   9A59 4F 55 54 53     .TEXT "OUTSC"        \  EOW('1')  \  .WORD $885D
3424   9A5D 43 
3424   9A5E B1          
3424   9A5F 88 5D       
3425   9A61 4F 55 54 53     .TEXT "OUTSC"        \  EOW('2')  \  .WORD $8865
3425   9A65 43 
3425   9A66 B2          
3425   9A67 88 65       
3426   9A69 4F 55 54 53     .TEXT "OUTSC"        \  EOW('E')  \  .WORD $88AE
3426   9A6D 43 
3426   9A6E C5          
3426   9A6F 88 AE       
3427   9A71 44 43 55        .TEXT "DCU"          \  EOW('V')  \  .WORD $88B5
3427   9A74 D6          
3427   9A75 88 B5       
3428   9A77 4F 42 54 55     .TEXT "OBTUP"        \  EOW('L')  \  .WORD $88BF
3428   9A7B 50 
3428   9A7C CC          
3428   9A7D 88 BF       
3429   9A7F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('0')  \  .WORD $88CC
3429   9A83 50 
3429   9A84 B0          
3429   9A85 88 CC       
3430   9A87 4F 42 54 55     .TEXT "OBTUP"        \  EOW('1')  \  .WORD $88DA
3430   9A8B 50 
3430   9A8C B1          
3430   9A8D 88 DA       
3431   9A8F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('E')  \  .WORD $88E5
3431   9A93 50 
3431   9A94 C5          
3431   9A95 88 E5       
3432   9A97 55 4F           .TEXT "UO"           \  EOW('V')  \  .WORD $88EB
3432   9A99 D6          
3432   9A9A 88 EB       
3433   9A9C 52 50 4C 41     .TEXT "RPLAN"        \  EOW('E')  \  .WORD $88FD
3433   9AA0 4E 
3433   9AA1 C5          
3433   9AA2 88 FD       
3434   9AA4 52 45 53 4D     .TEXT "RESMO"        \  EOW('D')  \  .WORD $8929
3434   9AA8 4F 
3434   9AA9 C4          
3434   9AAA 89 29       
3435   9AAC 52 53 4D        .TEXT "RSM"          \  EOW('0')  \  .WORD $8940
3435   9AAF B0          
3435   9AB0 89 40       
3436   9AB2 52 53 4D        .TEXT "RSM"          \  EOW('1')  \  .WORD $894E
3436   9AB5 B1          
3436   9AB6 89 4E       
3437   9AB8 43 55 52 4F     .TEXT "CUROF"        \  EOW('F')  \  .WORD $8963
3437   9ABC 46 
3437   9ABD C6          
3437   9ABE 89 63       
3438   9AC0 56 43 4C        .TEXT "VCL"          \  EOW('S')  \  .WORD $8974
3438   9AC3 D3          
3438   9AC4 89 74       
3439   9AC6 48 45           .TEXT "HE"           \  EOW('X')  \  .WORD $8981
3439   9AC8 D8          
3439   9AC9 89 81       
3440   9ACB 56 48           .TEXT "VH"           \  EOW('1')  \  .WORD $898F
3440   9ACD B1          
3440   9ACE 89 8F       
3441   9AD0 56 48 41 53     .TEXT "VHAS"         \  EOW('C')  \  .WORD $89A1
3441   9AD4 C3          
3441   9AD5 89 A1       
3442   9AD7 56 48 41 53     .TEXT "VHAS"         \  EOW('1')  \  .WORD $89A9
3442   9ADB B1          
3442   9ADC 89 A9       
3443   9ADE 56 48 41 53     .TEXT "VHAS"         \  EOW('2')  \  .WORD $89B3
3443   9AE2 B2          
3443   9AE3 89 B3       
3444   9AE5 43 4F 4E 53     .TEXT "CONSOL"       \  EOW('E')  \  .WORD $89B5
3444   9AE9 4F 4C 
3444   9AEB C5          
3444   9AEC 89 B5       
3445   9AEE 56 53 49 5A     .TEXT "VSIZ"         \  EOW('1')  \  .WORD $8A27
3445   9AF2 B1          
3445   9AF3 8A 27       
3446   9AF5 44 49           .TEXT "DI"           \  EOW('P')  \  .WORD $8A38
3446   9AF7 D0          
3446   9AF8 8A 38       
3447   9AFA 56 53 49 5A     .TEXT "VSIZ"         \  EOW('F')  \  .WORD $8A46
3447   9AFE C6          
3447   9AFF 8A 46       
3448   9B01 56 53 49 5A     .TEXT "VSIZF"        \  EOW('A')  \  .WORD $8A48
3448   9B05 46 
3448   9B06 C1          
3448   9B07 8A 48       
3449   9B09 56 43 55 52     .TEXT "VCUR"         \  EOW('S')  \  .WORD $8A49
3449   9B0D D3          
3449   9B0E 8A 49       
3450   9B10 43 55 52 53     .TEXT "CURS1"        \  EOW('W')  \  .WORD $8A75
3450   9B14 31 
3450   9B15 D7          
3450   9B16 8A 75       
3451   9B18 43 55 52 53     .TEXT "CURS2"        \  EOW('W')  \  .WORD $8A7E
3451   9B1C 32 
3451   9B1D D7          
3451   9B1E 8A 7E       
3452   9B20 45 52 52 43     .TEXT "ERRCU"        \  EOW('R')  \  .WORD $8A88
3452   9B24 55 
3452   9B25 D2          
3452   9B26 8A 88       
3453   9B28 45 52 52 43     .TEXT "ERRCURSO"     \  EOW('R')  \  .WORD $8A8A
3453   9B2C 55 52 53 4F 
3453   9B30 D2          
3453   9B31 8A 8A       
3454   9B33 56 50 52 49     .TEXT "VPRIN"        \  EOW('T')  \  .WORD $8A8B
3454   9B37 4E 
3454   9B38 D4          
3454   9B39 8A 8B       
3455   9B3B 43 4C 4F        .TEXT "CLO"          \  EOW('B')  \  .WORD $8AA3
3455   9B3E C2          
3455   9B3F 8A A3       
3456   9B41 56 50 41        .TEXT "VPA"          \  EOW('N')  \  .WORD $8AA6
3456   9B44 CE          
3456   9B45 8A A6       
3457   9B47 56 50 41 4E     .TEXT "VPAN"         \  EOW('0')  \  .WORD $8AB6
3457   9B4B B0          
3457   9B4C 8A B6       
3458   9B4E 56 50 52        .TEXT "VPR"          \  EOW('0')  \  .WORD $8ABB
3458   9B51 B0          
3458   9B52 8A BB       
3459   9B54 50 52 46        .TEXT "PRF"          \  EOW('0')  \  .WORD $8AC5
3459   9B57 B0          
3459   9B58 8A C5       
3460   9B5A 56 50 52        .TEXT "VPR"          \  EOW('1')  \  .WORD $8AC8
3460   9B5D B1          
3460   9B5E 8A C8       
3461   9B60 55 53 49 4E     .TEXT "USIN"         \  EOW('G')  \  .WORD $8AF7
3461   9B64 C7          
3461   9B65 8A F7       
3462   9B67 55 53           .TEXT "US"           \  EOW('1')  \  .WORD $8B02
3462   9B69 B1          
3462   9B6A 8B 02       
3463   9B6C 55 53           .TEXT "US"           \  EOW('2')  \  .WORD $8B0C
3463   9B6E B2          
3463   9B6F 8B 0C       
3464   9B71 50 52 41 53     .TEXT "PRAS"         \  EOW('C')  \  .WORD $8B27
3464   9B75 C3          
3464   9B76 8B 27       
3465   9B78 50 52 53 43     .TEXT "PRSC"         \  EOW('0')  \  .WORD $8B31
3465   9B7C B0          
3465   9B7D 8B 31       
3466   9B7F 50 52 53 43     .TEXT "PRSC"         \  EOW('1')  \  .WORD $8B52
3466   9B83 B1          
3466   9B84 8B 52       
3467   9B86 50 52 53 43     .TEXT "PRSC"         \  EOW('2')  \  .WORD $8B62
3467   9B8A B2          
3467   9B8B 8B 62       
3468   9B8D 50 52 53 43     .TEXT "PRSC"         \  EOW('3')  \  .WORD $8B69
3468   9B91 B3          
3468   9B92 8B 69       
3469   9B94 56 50 52        .TEXT "VPR"          \  EOW('2')  \  .WORD $8B91
3469   9B97 B2          
3469   9B98 8B 91       
3470   9B9A 4F 55 54 42     .TEXT "OUTBU"        \  EOW('F')  \  .WORD $8B9E
3470   9B9E 55 
3470   9B9F C6          
3470   9BA0 8B 9E       
3471   9BA2 4F 42 46        .TEXT "OBF"          \  EOW('0')  \  .WORD $8BC0
3471   9BA5 B0          
3471   9BA6 8B C0       
3472   9BA8 4F 42 46        .TEXT "OBF"          \  EOW('1')  \  .WORD $8BFC
3472   9BAB B1          
3472   9BAC 8B FC       
3473   9BAE 50 52 54 45     .TEXT "PRTEN"        \  EOW('D')  \  .WORD $8C17
3473   9BB2 4E 
3473   9BB3 C4          
3473   9BB4 8C 17       
3474   9BB6 50 52 46 45     .TEXT "PRFEH"        \  EOW('L')  \  .WORD $8C38
3474   9BBA 48 
3474   9BBB CC          
3474   9BBC 8C 38       
3475   9BBE 57 41 49        .TEXT "WAI"          \  EOW('T')  \  .WORD $8C3F
3475   9BC1 D4          
3475   9BC2 8C 3F       
3476   9BC4 4E 4F 56        .TEXT "NOV"          \  EOW('C')  \  .WORD $8C4A
3476   9BC7 C3          
3476   9BC8 8C 4A       
3477   9BCA 4B 4F 4D        .TEXT "KOM"          \  EOW('L')  \  .WORD $8C57
3477   9BCD CC          
3477   9BCE 8C 57       
3478   9BD0 4B 4F 4D 4C     .TEXT "KOML"         \  EOW('1')  \  .WORD $8C72
3478   9BD4 B1          
3478   9BD5 8C 72       
3479   9BD7 49 4E 50 55     .TEXT "INPU"         \  EOW('T')  \  .WORD $8C89
3479   9BDB D4          
3479   9BDC 8C 89       
3480   9BDE 58 49 4E 50     .TEXT "XINP"         \  EOW('1')  \  .WORD $8C8F
3480   9BE2 B1          
3480   9BE3 8C 8F       
3481   9BE5 58 49 4E 50     .TEXT "XINP"         \  EOW('3')  \  .WORD $8CC7
3481   9BE9 B3          
3481   9BEA 8C C7       
3482   9BEC 58 49 4E 50     .TEXT "XINP"         \  EOW('6')  \  .WORD $8CCA
3482   9BF0 B6          
3482   9BF1 8C CA       
3483   9BF3 58 49 4E 50     .TEXT "XINP"         \  EOW('4')  \  .WORD $8CD1
3483   9BF7 B4          
3483   9BF8 8C D1       
3484   9BFA 58 49 4E 50     .TEXT "XINP"         \  EOW('2')  \  .WORD $8CFB
3484   9BFE B2          
3484   9BFF 8C FB       
3485   9C01 58 49 4E 50     .TEXT "XINP"         \  EOW('5')  \  .WORD $8D15
3485   9C05 B5          
3485   9C06 8D 15       
3486   9C08 45 44 49 54     .TEXT "EDITO"        \  EOW('R')  \  .WORD $8D18
3486   9C0C 4F 
3486   9C0D D2          
3486   9C0E 8D 18       
3487   9C10 43 4C 45 41     .TEXT "CLEARSC"      \  EOW('R')  \  .WORD $8D41
3487   9C14 52 53 43 
3487   9C17 D2          
3487   9C18 8D 41       
3488   9C1A 43 4C           .TEXT "CL"           \  EOW('1')  \  .WORD $8D4A
3488   9C1C B1          
3488   9C1D 8D 4A       
3489   9C1F 57 52 49 54     .TEXT "WRITE"        \  EOW('1')  \  .WORD $8D5E
3489   9C23 45 
3489   9C24 B1          
3489   9C25 8D 5E       
3490   9C27 57 52 49 54     .TEXT "WRITE"        \  EOW('2')  \  .WORD $8D64
3490   9C2B 45 
3490   9C2C B2          
3490   9C2D 8D 64       
3491   9C2F 4F 42 54 41     .TEXT "OBTAI"        \  EOW('N')  \  .WORD $8D6B
3491   9C33 49 
3491   9C34 CE          
3491   9C35 8D 6B       
3492   9C37 4F 42 54        .TEXT "OBT"          \  EOW('1')  \  .WORD $8D95
3492   9C3A B1          
3492   9C3B 8D 95       
3493   9C3D 4F 42 54        .TEXT "OBT"          \  EOW('2')  \  .WORD $8D99
3493   9C40 B2          
3493   9C41 8D 99       
3494   9C43 4F 42 54 45     .TEXT "OBTEN"        \  EOW('D')  \  .WORD $8D9C
3494   9C47 4E 
3494   9C48 C4          
3494   9C49 8D 9C       
3495   9C4B 4F 42 54        .TEXT "OBT"          \  EOW('F')  \  .WORD $8DA3
3495   9C4E C6          
3495   9C4F 8D A3       
3496   9C51 49 4E 49 54     .TEXT "INITIA"       \  EOW('L')  \  .WORD $8DA8
3496   9C55 49 41 
3496   9C57 CC          
3496   9C58 8D A8       
3497   9C5A 49 4E 49 54     .TEXT "INITIA"       \  EOW('1')  \  .WORD $8DAC
3497   9C5E 49 41 
3497   9C60 B1          
3497   9C61 8D AC       
3498   9C63 46 49 52 53     .TEXT "FIRS"         \  EOW('T')  \  .WORD $8DC1
3498   9C67 D4          
3498   9C68 8D C1       
3499   9C6A 57 41 52 54     .TEXT "WARTE"        \  EOW('V')  \  .WORD $8DD0
3499   9C6E 45 
3499   9C6F D6          
3499   9C70 8D D0       
3500   9C72 41 4E           .TEXT "AN"           \  EOW('Z')  \  .WORD $8DDE
3500   9C74 DA          
3500   9C75 8D DE       
3501   9C77 54 41           .TEXT "TA"           \  EOW('S')  \  .WORD $8DEA
3501   9C79 D3          
3501   9C7A 8D EA       
3502   9C7C 46 49 52 53     .TEXT "FIRST"        \  EOW('1')  \  .WORD $8E03
3502   9C80 54 
3502   9C81 B1          
3502   9C82 8E 03       
3503   9C84 53 54 52 54     .TEXT "STRTA"        \  EOW('D')  \  .WORD $8E5F
3503   9C88 41 
3503   9C89 C4          
3503   9C8A 8E 5F       
3504   9C8C 43 4C 53        .TEXT "CLS"          \  EOW('0')  \  .WORD $8E64
3504   9C8F B0          
3504   9C90 8E 64       
3505   9C92 43 4C 53        .TEXT "CLS"          \  EOW('1')  \  .WORD $8E6D
3505   9C95 B1          
3505   9C96 8E 6D       
3506   9C98 43 4C 53        .TEXT "CLS"          \  EOW('A')  \  .WORD $8E78
3506   9C9B C1          
3506   9C9C 8E 78       
3507   9C9E 43 4C 53 41     .TEXT "CLSA"         \  EOW('0')  \  .WORD $8E7C
3507   9CA2 B0          
3507   9CA3 8E 7C       
3508   9CA5 53 54 4F        .TEXT "STO"          \  EOW('R')  \  .WORD $8E86
3508   9CA8 D2          
3508   9CA9 8E 86       
3509   9CAB 44 41 54        .TEXT "DAT"          \  EOW('1')  \  .WORD $8E8F
3509   9CAE B1          
3509   9CAF 8E 8F       
3510   9CB1 44 41 54        .TEXT "DAT"          \  EOW('2')  \  .WORD $8EA1
3510   9CB4 B2          
3510   9CB5 8E A1       
3511   9CB7 4D 4F 44        .TEXT "MOD"          \  EOW('T')  \  .WORD $8EB3
3511   9CBA D4          
3511   9CBB 8E B3       
3512   9CBD 54 58 54        .TEXT "TXT"          \  EOW('5')  \  .WORD $8EC7
3512   9CC0 B5          
3512   9CC1 8E C7       
3513   9CC3 4D 4F 4E 49     .TEXT "MONITO"       \  EOW('R')  \  .WORD $8EE1
3513   9CC7 54 4F 
3513   9CC9 D2          
3513   9CCA 8E E1       
3514   9CCC 56 43 55 52     .TEXT "VCURSO"       \  EOW('R')  \  .WORD $8EE4
3514   9CD0 53 4F 
3514   9CD2 D2          
3514   9CD3 8E E4       
3515   9CD5 56 50 43 55     .TEXT "VPCURSO"      \  EOW('R')  \  .WORD $8EEB
3515   9CD9 52 53 4F 
3515   9CDC D2          
3515   9CDD 8E EB       
3516   9CDF 48 43 55 52     .TEXT "HCURSO"       \  EOW('R')  \  .WORD $8EFD
3516   9CE3 53 4F 
3516   9CE5 D2          
3516   9CE6 8E FD       
3517   9CE8 48 50 43 55     .TEXT "HPCURSO"      \  EOW('R')  \  .WORD $8F04
3517   9CEC 52 53 4F 
3517   9CEF D2          
3517   9CF0 8F 04       
3518   9CF2 4C 49 53        .TEXT "LIS"          \  EOW('T')  \  .WORD $8F16
3518   9CF5 D4          
3518   9CF6 8F 16       
3519   9CF8 56 4C 49 53     .TEXT "VLISTAL"      \  EOW('L')  \  .WORD $8F43
3519   9CFC 54 41 4C 
3519   9CFF CC          
3519   9D00 8F 43       
3520   9D02 4C 49 53 54     .TEXT "LISTAL"       \  EOW('L')  \  .WORD $8F46
3520   9D06 41 4C 
3520   9D08 CC          
3520   9D09 8F 46       
3521   9D0B 50 4C 49 53     .TEXT "PLISTAL"      \  EOW('L')  \  .WORD $8F54
3521   9D0F 54 41 4C 
3521   9D12 CC          
3521   9D13 8F 54       
3522   9D15 4C 49 53 54     .TEXT "LISTCR"       \  EOW('T')  \  .WORD $8F56
3522   9D19 43 52 
3522   9D1B D4          
3522   9D1C 8F 56       
3523   9D1E 4C 49 53 54     .TEXT "LISTSCROL"    \  EOW('L')  \  .WORD $8F76
3523   9D22 53 43 52 4F 
3523   9D26 4C 
3523   9D27 CC          
3523   9D28 8F 76       
3524   9D2A 4C 49 53 54     .TEXT "LISTLABE"     \  EOW('L')  \  .WORD $8F7C
3524   9D2E 4C 41 42 45 
3524   9D32 CC          
3524   9D33 8F 7C       
3525   9D35 48 4F 4C 44     .TEXT "HOLD"         \  EOW('1')  \  .WORD $8F95
3525   9D39 B1          
3525   9D3A 8F 95       
3526   9D3C 48 4F 4C 44     .TEXT "HOLD"         \  EOW('2')  \  .WORD $8F97
3526   9D40 B2          
3526   9D41 8F 97       
3527   9D43 57 41 52 54     .TEXT "WART"         \  EOW('E')  \  .WORD $8FA7
3527   9D47 C5          
3527   9D48 8F A7       
3528   9D4A 4C 49 53 54     .TEXT "LISTEDI"      \  EOW('T')  \  .WORD $9010
3528   9D4E 45 44 49 
3528   9D51 D4          
3528   9D52 90 10       
3529   9D54 42 41 43 4B     .TEXT "BACKG"        \  EOW('R')  \  .WORD $9023
3529   9D58 47 
3529   9D59 D2          
3529   9D5A 90 23       
3530   9D5C 42 41 43 4B     .TEXT "BACKGRS"      \  EOW('T')  \  .WORD $9065
3530   9D60 47 52 53 
3530   9D63 D4          
3530   9D64 90 65       
3531   9D66 42 41 43 4B     .TEXT "BACKGRB"      \  EOW('E')  \  .WORD $906A
3531   9D6A 47 52 42 
3531   9D6D C5          
3531   9D6E 90 6A       
3532   9D70 42 41 43 4B     .TEXT "BACKGRLADE"   \  EOW('N')  \  .WORD $9072
3532   9D74 47 52 4C 41 
3532   9D78 44 45 
3532   9D7A CE          
3532   9D7B 90 72       
3533   9D7D 45 52 52 42     .TEXT "ERRBACKG"     \  EOW('R')  \  .WORD $9081
3533   9D81 41 43 4B 47 
3533   9D85 D2          
3533   9D86 90 81       
3534   9D88 45 52           .TEXT "ER"           \  EOW('N')  \  .WORD $9082
3534   9D8A CE          
3534   9D8B 90 82       
3535   9D8D 45 52           .TEXT "ER"           \  EOW('L')  \  .WORD $9088
3535   9D8F CC          
3535   9D90 90 88       
3536   9D92 53 43 48 55     .TEXT "SCHUT"        \  EOW('Z')  \  .WORD $908E
3536   9D96 54 
3536   9D97 DA          
3536   9D98 90 8E       
3537   9D9A 53 4C 45 45     .TEXT "SLEE"         \  EOW('P')  \  .WORD $90AA
3537   9D9E D0          
3537   9D9F 90 AA       
3538   9DA1 52 45 50 5A     .TEXT "REPZE"        \  EOW('I')  \  .WORD $90DE
3538   9DA5 45 
3538   9DA6 C9          
3538   9DA7 90 DE       
3539   9DA9 52 45 50 4B     .TEXT "REPKE"        \  EOW('Y')  \  .WORD $90F1
3539   9DAD 45 
3539   9DAE D9          
3539   9DAF 90 F1       
3540   9DB1 4C 44 52 45     .TEXT "LDRE"         \  EOW('P')  \  .WORD $90F7
3540   9DB5 D0          
3540   9DB6 90 F7       
3541   9DB8 52 45 50 4F     .TEXT "REPOF"        \  EOW('F')  \  .WORD $90FB
3541   9DBC 46 
3541   9DBD C6          
3541   9DBE 90 FB       
3542   9DC0 45 52 52 52     .TEXT "ERRRE"        \  EOW('P')  \  .WORD $9105
3542   9DC4 45 
3542   9DC5 D0          
3542   9DC6 91 05       
3543   9DC8 47 43 4C        .TEXT "GCL"          \  EOW('S')  \  .WORD $9107
3543   9DCB D3          
3543   9DCC 91 07       
3544   9DCE 43 4C 45 41     .TEXT "CLEARG"       \  EOW('R')  \  .WORD $9116
3544   9DD2 52 47 
3544   9DD4 D2          
3544   9DD5 91 16       
3545   9DD7 43 4C 52 47     .TEXT "CLRGRAP"      \  EOW('H')  \  .WORD $911A
3545   9DDB 52 41 50 
3545   9DDE C8          
3545   9DDF 91 1A       
3546   9DE1 43 4C 52 47     .TEXT "CLRGS"        \  EOW('T')  \  .WORD $913C
3546   9DE5 53 
3546   9DE6 D4          
3546   9DE7 91 3C       
3547   9DE9 45 52 52 47     .TEXT "ERRGCL"       \  EOW('S')  \  .WORD $914B
3547   9DED 43 4C 
3547   9DEF D3          
3547   9DF0 91 4B       
3548   9DF2 44 45           .TEXT "DE"           \  EOW('Z')  \  .WORD $914C
3548   9DF4 DA          
3548   9DF5 91 4C       
3549   9DF7 54 45 53        .TEXT "TES"          \  EOW('T')  \  .WORD $914F
3549   9DFA D4          
3549   9DFB 91 4F       
3550   9DFD 43 4F 4C 4F     .TEXT "COLO"         \  EOW('R')  \  .WORD $914F
3550   9E01 D2          
3550   9E02 91 4F       
3551   9E04 45 44 49        .TEXT "EDI"          \  EOW('T')  \  .WORD $914F
3551   9E07 D4          
3551   9E08 91 4F       
3552   9E0A 47 43 55 52     .TEXT "GCURSO"       \  EOW('R')  \  .WORD $914F
3552   9E0E 53 4F 
3552   9E10 D2          
3552   9E11 91 4F       
3553   9E13 47 50 52 49     .TEXT "GPRIN"        \  EOW('T')  \  .WORD $914F
3553   9E17 4E 
3553   9E18 D4          
3553   9E19 91 4F       
3554   9E1B 52 45 50 52     .TEXT "REPRO"        \  EOW('G')  \  .WORD $914F
3554   9E1F 4F 
3554   9E20 C7          
3554   9E21 91 4F       
3555   9E23 4B 45 59 52     .TEXT "KEYRA"        \  EOW('M')  \  .WORD $9150
3555   9E27 41 
3555   9E28 CD          
3555   9E29 91 50       
3556   9E2B 53 45 54 50     .TEXT "SETP"         \  EOW('V')  \  .WORD $9168
3556   9E2F D6          
3556   9E30 91 68       
3557   9E32 4B 45 59 42     .TEXT "KEYBOUMLEI"   \  EOW('T')  \  .WORD $9176
3557   9E36 4F 55 4D 4C 
3557   9E3A 45 49 
3557   9E3C D4          
3557   9E3D 91 76       
3558   9E3F 53 43 52 4F     .TEXT "SCROLLMINU"   \  EOW('S')  \  .WORD $9189
3558   9E43 4C 4C 4D 49 
3558   9E47 4E 55 
3558   9E49 D3          
3558   9E4A 91 89       
3559   9E4C 43 4F 50        .TEXT "COP"          \  EOW('Y')  \  .WORD $9195
3559   9E4F D9          
3559   9E50 91 95       
3560   9E52 50 52 49 4E     .TEXT "PRIN"         \  EOW('T')  \  .WORD $91A7
3560   9E56 D4          
3560   9E57 91 A7       
3561   9E59 50 52 49 4E     .TEXT "PRINTNOKREU"  \  EOW('Z')  \  .WORD $91B1
3561   9E5D 54 4E 4F 4B 
3561   9E61 52 45 55 
3561   9E64 DA          
3561   9E65 91 B1       
3562   9E67 50 52 49 4E     .TEXT "PRINTDIS"     \  EOW('K')  \  .WORD $91BB
3562   9E6B 54 44 49 53 
3562   9E6F CB          
3562   9E70 91 BB       
3563   9E72 45 52 52 50     .TEXT "ERRPRK"       \  EOW('R')  \  .WORD $91D2
3563   9E76 52 4B 
3563   9E78 D2          
3563   9E79 91 D2       
3564   9E7B 4D 4F 44        .TEXT "MOD"          \  EOW('E')  \  .WORD $91D3
3564   9E7E C5          
3564   9E7F 91 D3       
3565   9E81 4D 4F 44 45     .TEXT "MODEC"        \  EOW('L')  \  .WORD $91D8
3565   9E85 43 
3565   9E86 CC          
3565   9E87 91 D8       
3566   9E89 53 55 42 4D     .TEXT "SUBM"         \  EOW('O')  \  .WORD $91EF
3566   9E8D CF          
3566   9E8E 91 EF       
3567   9E90 4D 4F 44 55     .TEXT "MODULBI"      \  EOW('T')  \  .WORD $920C
3567   9E94 4C 42 49 
3567   9E97 D4          
3567   9E98 92 0C       
3568   9E9A 4D 45 52        .TEXT "MER"          \  EOW('R')  \  .WORD $9218
3568   9E9D D2          
3568   9E9E 92 18       
3569   9EA0 53 50 45 45     .TEXT "SPEEDS"       \  EOW('W')  \  .WORD $9219
3569   9EA4 44 53 
3569   9EA6 D7          
3569   9EA7 92 19       
3570   9EA9 53 50 45 45     .TEXT "SPEED"        \  EOW('2')  \  .WORD $921F
3570   9EAD 44 
3570   9EAE B2          
3570   9EAF 92 1F       
3571   9EB1 53 45 52        .TEXT "SER"          \  EOW('R')  \  .WORD $9232
3571   9EB4 D2          
3571   9EB5 92 32       
3572   9EB7 53 45 52 52     .TEXT "SERR"         \  EOW('2')  \  .WORD $9233
3572   9EBB B2          
3572   9EBC 92 33       
3573   9EBE 53 41 56        .TEXT "SAV"          \  EOW('E')  \  .WORD $9234
3573   9EC1 C5          
3573   9EC2 92 34       
3574   9EC4 4C 4F 41        .TEXT "LOA"          \  EOW('D')  \  .WORD $9244
3574   9EC7 C4          
3574   9EC8 92 44       
3575   9ECA 4C 4F 41 44     .TEXT "LOAD"         \  EOW('C')  \  .WORD $9254
3575   9ECE C3          
3575   9ECF 92 54       
3576   9ED1 4C 4F 41 44     .TEXT "LOAD"         \  EOW('F')  \  .WORD $9264
3576   9ED5 C6          
3576   9ED6 92 64       
3577   9ED8 4C 4F 41 44     .TEXT "LOAD"         \  EOW('Q')  \  .WORD $9274
3577   9EDC D1          
3577   9EDD 92 74       
3578   9EDF 53 41 56 45     .TEXT "SAVE"         \  EOW('C')  \  .WORD $9277
3578   9EE3 C3          
3578   9EE4 92 77       
3579   9EE6 53 41 56 45     .TEXT "SAVE"         \  EOW('F')  \  .WORD $9287
3579   9EEA C6          
3579   9EEB 92 87       
3580   9EED 53 41 56 45     .TEXT "SAVE"         \  EOW('Q')  \  .WORD $9297
3580   9EF1 D1          
3580   9EF2 92 97       
3581   9EF4 53 41 56 45     .TEXT "SAVE"         \  EOW('D')  \  .WORD $929A
3581   9EF8 C4          
3581   9EF9 92 9A       
3582   9EFB 4C 4F 41 44     .TEXT "LOAD"         \  EOW('D')  \  .WORD $92A6
3582   9EFF C4          
3582   9F00 92 A6       
3583   9F02 53 41 56 45     .TEXT "SAVE"         \  EOW('R')  \  .WORD $92B2
3583   9F06 D2          
3583   9F07 92 B2       
3584   9F09 4C 4F 41 44     .TEXT "LOAD"         \  EOW('R')  \  .WORD $92BE
3584   9F0D D2          
3584   9F0E 92 BE       
3585   9F10 44 49           .TEXT "DI"           \  EOW('R')  \  .WORD $92CA
3585   9F12 D2          
3585   9F13 92 CA       
3586   9F15 4E 4F 44 45     .TEXT "NODER"        \  EOW('R')  \  .WORD $92D6
3586   9F19 52 
3586   9F1A D2          
3586   9F1B 92 D6       
3587   9F1D 56 45 52 49     .TEXT "VERI"         \  EOW('Q')  \  .WORD $92D9
3587   9F21 D1          
3587   9F22 92 D9       
3588   9F24 43 48 41 49     .TEXT "CHAI"         \  EOW('N')  \  .WORD $92DC
3588   9F28 CE          
3588   9F29 92 DC       
3589   9F2B 43 48 41 49     .TEXT "CHAI"         \  EOW('C')  \  .WORD $92F5
3589   9F2F C3          
3589   9F30 92 F5       
3590   9F32 43 48 41 49     .TEXT "CHAI"         \  EOW('Q')  \  .WORD $9305
3590   9F36 D1          
3590   9F37 93 05       
3591   9F39 4B 45 59 42     .TEXT "KEYBOAR"      \  EOW('D')  \  .WORD $9308
3591   9F3D 4F 41 52 
3591   9F40 C4          
3591   9F41 93 08       
3592   9F43 4B 42 45 45     .TEXT "KBEEOF"       \  EOW('F')  \  .WORD $9317
3592   9F47 4F 46 
3592   9F49 C6          
3592   9F4A 93 17       
3593   9F4C 4B 42 45 52     .TEXT "KBER"         \  EOW('R')  \  .WORD $9322
3593   9F50 D2          
3593   9F51 93 22       
3594   9F53 4B 54 41 53     .TEXT "KTAS"         \  EOW('T')  \  .WORD $9323
3594   9F57 D4          
3594   9F58 93 23       
3595   9F5A 4B 54 41 53     .TEXT "KTASOF"       \  EOW('F')  \  .WORD $9339
3595   9F5E 4F 46 
3595   9F60 C6          
3595   9F61 93 39       
3596   9F63 4B 54 41 45     .TEXT "KTAER"        \  EOW('R')  \  .WORD $934F
3596   9F67 52 
3596   9F68 D2          
3596   9F69 93 4F       
3597   9F6B 54 52 41 43     .TEXT "TRAC"         \  EOW('E')  \  .WORD $9350
3597   9F6F C5          
3597   9F70 93 50       
3598   9F72 54 45 4C 45     .TEXT "TELEFO"       \  EOW('N')  \  .WORD $936D
3598   9F76 46 4F 
3598   9F78 CE          
3598   9F79 93 6D       
3599   9F7B             
3600   9F7B FF 00 C5 14     .BYTE $FF,$00,$C5,$14,$00,$51,$D5
3600   9F7F 00 51 D5 
3601   9F82             
3602   9F82             
3603   9F82             ; $9F82 - $9FFF 
3604   9F82 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3604   9F86 00 00 00 00 
3605   9F8A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3605   9F8E 00 00 00 00 
3606   9F92 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3606   9F96 00 00 00 00 
3607   9F9A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3607   9F9E 00 00 00 00 
3608   9FA2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3608   9FA6 00 00 00 00 
3609   9FAA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3609   9FAE 00 00 00 00 
3610   9FB2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3610   9FB6 00 00 00 00 
3611   9FBA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3611   9FBE 00 00 00 00 
3612   9FC2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3612   9FC6 00 00 00 00 
3613   9FCA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3613   9FCE 00 00 00 00 
3614   9FD2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3614   9FD6 00 00 00 00 
3615   9FDA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3615   9FDE 00 00 00 00 
3616   9FE2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3616   9FE6 00 00 00 00 
3617   9FEA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3617   9FEE 00 00 00 00 
3618   9FF2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3618   9FF6 00 00 00 00 
3619   9FFA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00
3619   9FFE 00 00 
3620   A000             
3621   A000             ;% LB_KEY END
3622   A000             
3623   A000             
3624   A000             .END
tasm: Number of errors = 0
