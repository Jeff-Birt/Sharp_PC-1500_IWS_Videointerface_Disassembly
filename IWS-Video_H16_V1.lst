0001   0000             ; IWS-Video_H16_V1.0.asm
0002   0000             ; IWS Video Interface
0003   0000             ;
0004   0000             
0005   0000             #define EOW(n8)        .BYTE n8 | $80    ; Sets bit 7 of character
0006   0000             
0007   0000             #INCLUDE    "lib/PC-1500.lib"
0001+  0000              ; PC-1500 library file
0002+  0000             RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
0003+  0000             RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
0004+  0000             PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
0005+  0000             RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
0006+  0000             SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
0007+  0000             SHADOW_RAM_SIZE   = $0600 ; 
0008+  0000             DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
0009+  0000             DISP_BUFF_SIZE    = $0150 ; 
0010+  0000             STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
0011+  0000             STRING_VARS_SIZE  = $01AF ; 
0012+  0000             CPU_STACK         = $7800 ; CPU stack (7800-784F)
0013+  0000             CPU_STACK_SIZE    = $50   ; 
0014+  0000             XCHRINPT_H        = $785B ; Address of exernal character input routine (H)
0015+  0000             XCHRINPT_L        = $785C ; Address of exernal character input routine (L)
0016+  0000             KATAFLAGS         = $785D ; Katakana displayed flags
0017+  0000             KATACHAR          = $785E ; Address of Katakana character codes (H)
0018+  0000             ST_ROM_MOD        = $7860 ; Start of ROM in module (H)
0019+  0000             ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
0020+  0000             ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
0021+  0000             RAM_ST_H          = $7863 ; Start of RAM pointer (H)
0022+  0000             RAM_END_H         = $7864 ; End of RAM pointer (H)
0023+  0000             BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
0024+  0000             BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
0025+  0000             BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
0026+  0000             BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
0027+  0000             BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
0028+  0000             BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
0029+  0000             BEEP_PTR          = $786B ; BEEP and RMT flags
0030+  0000             RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
0031+  0000             RCLTEMPBUFF_SIZE  = $05   ; 
0032+  0000             WAIT_CFG          = $7871 ; WAIT setting
0033+  0000             WAIT_CTR_H        = $7872 ; WAIT time counter (H)
0034+  0000             WAIT_CTR_L        = $7873 ; WAIT time counter (L)
0035+  0000             CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
0036+  0000             CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
0037+  0000             CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
0038+  0000             BEEP_FREQ         = $7878 ; BEEP frequency
0039+  0000             CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
0040+  0000             CURS_BLNK_POS     = $787B ; Position of blink character in display, plus 8
0041+  0000             CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
0042+  0000             BLNKD_CHAR_CODE   = $787D ; Code of character blinked
0043+  0000             CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
0044+  0000             CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
0045+  0000             DISPARAM          = $7880 ; Display Parameter: determines display at READY
0046+  0000             STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
0047+  0000             CURVARADD_H       = $7883 ; Current variable address (H)
0048+  0000             CURVARADD_L       = $7884 ; Current variable address (L)
0049+  0000             CURVARTYPE        = $7885 ; Current variable type
0050+  0000             LASTVARADD_H      = $7886 ; Last variable address (H)
0051+  0000             LASTVARADD_L      = $7887 ; Last variable address (L)
0052+  0000             LASTVARTYPE       = $7888 ; Last variable type
0053+  0000             BREAKPARAM        = $788A ; BREAK flag parameter
0054+  0000             INBUFPTR_L        = $788B ; Input Buffer pointer (L)
0055+  0000             NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
0056+  0000             TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
0057+  0000             TRACE_PARAM       = $788E ; TRACE Parameter
0058+  0000             OUTBUF_PTR        = $788F ; Output Buffer pointer (L)
0059+  0000             FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
0060+  0000             GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
0061+  0000             BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
0062+  0000             BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
0063+  0000             STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
0064+  0000             USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
0065+  0000             USINGM            = $7896 ; USING M integer part
0066+  0000             USING_CHR         = $7897 ; USING & character string
0067+  0000             USINGMD           = $7898 ; USING m decimal part
0068+  0000             VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
0069+  0000             VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
0070+  0000             ERL               = $789B ; ERL, Error code
0071+  0000             CURR_LINE_H       = $789C ; Current line number (H)
0072+  0000             CURR_LINE_L       = $789D ; Current line number (L)
0073+  0000             CURR_TOP_H        = $789E ; Beginning address of current program (H)
0074+  0000             CURR_TOP_L        = $789F ; Beginning address of current program (L)
0075+  0000             PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
0076+  0000             PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
0077+  0000             PREV_LINE_H       = $78A2 ; Previous line number (H)
0078+  0000             PREV_LINE_L       = $78A3 ; Previous line number (L)
0079+  0000             PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
0080+  0000             PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
0081+  0000             SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
0082+  0000             SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
0083+  0000             SRCH_LINE_H       = $78A8 ; Line number found after search (H)
0084+  0000             SRCH_LINE_L       = $78A9 ; Line number found after search (L)
0085+  0000             SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
0086+  0000             SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
0087+  0000             BRK_ADD_H         = $78AC ; Break address (H)
0088+  0000             BRK_ADD_L         = $78AD ; Break address (L)
0089+  0000             BRK_LINE_H        = $78AE ; Break line number (H)
0090+  0000             BRK_LINE_L        = $78AF ; Break line number (L)
0091+  0000             BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
0092+  0000             BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
0093+  0000             ERR_ADD_H         = $78B2 ; Error address (H)
0094+  0000             ERR_ADD_L         = $78B3 ; Error address (L)
0095+  0000             ERR_LINE_H        = $78B4 ; Error line number (H)
0096+  0000             ERR_LINE_L        = $78B5 ; Error line number (L)
0097+  0000             ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
0098+  0000             ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
0099+  0000             ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
0100+  0000             ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
0101+  0000             ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
0102+  0000             ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
0103+  0000             ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
0104+  0000             ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
0105+  0000             DATA_PTR_H        = $78BE ; Pointer for data statement (H)
0106+  0000             DATA_PTR_L        = $78BF ; Pointer for data statement (H)
0107+  0000             FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
0108+  0000             FIXED_VARS_SIZE   = $0110 ; 
0109+  0000             PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
0110+  0000             OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0111+  0000             CLK_BYPASS        = $79D3 ; 55=bypass setting of modulation clock freq, serial output
0112+  0000             KB_BYPASS         = $79D4 ; 55=bypass keyboard scan, obtain input from external device
0113+  0000             UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
0114+  0000             ARX               = $7A00 ; Floating-Point accumulator
0115+  0000             ARX_SIZE          = $08   ; 
0116+  0000             ARZ               = $7A08 ; Scratch register (7A00-7A07)
0117+  0000             ARZ_SIZE          = $08   ; 
0118+  0000             ARY               = $7A10 ; Second operand (7A10-7A17)
0119+  0000             ARY_SIZE          = $08   ; 
0120+  0000             ARU               = $7A18 ; Scratch register (7A18-7A1F)
0121+  0000             ARU_SIZE          = $08   ; 
0122+  0000             ARV               = $7A20 ; Scratch register (7A2-7A27)
0123+  0000             ARV_SIZE          = $08   ; 
0124+  0000             ARW               = $7A28 ; Scratch register (7A28-7A2F)
0125+  0000             ARW_SIZE          = $08   ; 
0126+  0000             ARS               = $7A30 ; Temporary storage register (7A30-7A37)
0127+  0000             ARS_SIZE          = $08   ; 
0128+  0000             B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
0129+  0000             B_STACK_SIZE      = $C8   ; 
0130+  0000             RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
0131+  0000             RND_VAL_SIZE      =       ; S
0132+  0000             KEY_REPEAT        = $7B09 ; Key repeat speed
0133+  0000             APOW_CTR_H        = $7B0A ; Auto power down counter (H)
0134+  0000             APOW_CTR_M        = $7B0B ; Auto power down counter (M)
0135+  0000             APOW_CTR_L        = $7B0C ; Auto power down counter (L)
0136+  0000             CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
0137+  0000             CURS_CTRL         = $7B0E ; Cursor Control Parameter
0138+  0000             KEY_LAST          = $7B0F ; Last pressed key code
0139+  0000             STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
0140+  0000             STR_BUF_SIZE      = $50   ; 
0141+  0000             OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
0142+  0000             OUT_BUF_SIZE      = $50   ; 
0143+  0000             IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
0144+  0000             IN_BUF_SIZE       = $80   ; 
0145+  0000             ST_MAIN_ROM       = $C000 ; Start of PC-1500 ROM, 55
0146+  0000             SA_XREG_2RAM      = $C001 ; Save X-Reg to 78xx. D1 defines low byte xx.
0147+  0000             SAVEVARPTR_ARX    = $C00E ; Save variable pointer. Address from U-Reg, length from AR-X (7A07).
0148+  0000             SAVEVARPTR_A      = $C011 ; Save variable pointer. Address from U-Reg, length from A.
0149+  0000             TRACE_VEC         = $C01D ; Not used (C01C-C01F)
0150+  0000             ST_BAS_TBL        = $C020 ; Start of Basic table
0151+  0000             TOKEN_TBL         = $C054 ; B5: AREAD F1 80:C684
0152+  0000             SM_NEW0           = $C34F ;  'NEW0?' (C350-C354) (Start of system messages)
0153+  0000             SM_NEW0_SIZE      = $05   ; 
0154+  0000             SM_CHECK          = $C355 ;  ':CHECK' (C355-C35B)
0155+  0000             SM_BREAK          = $C35C ;  'BREAK' (C35C-C361)
0156+  0000             SM_IN             = $C362 ;  'IN' (C362-C364)
0157+  0000             SM_IN_SIZE        = $05   ; 
0158+  0000             SM_ERROR          = $C365 ;  'ERROR' (C365-C36A)
0159+  0000             SM_ERROR_SIZE     = $05   ; 
0160+  0000             DEFKEY_TBL        = $C36B ; Occupied DEF key table (C36B-C38A)
0161+  0000             DEFKEY_TBL_SIZE   = $05   ; 
0162+  0000             EDCTRL_TBL        = $C38B ; Address table for editor control characters (C38B-C3A9)
0163+  0000             EDCTRL_TBL_SIZE   = $05   ; 
0164+  0000             FVAL_TBLE         = $C3A8 ; Operator table for formula eval of subs (C3A8-C3FF)  (DE) (D6DF)
0165+  0000             FVAL_TBLE_SIZE    = $05   ; 
0166+  0000             BASIC_INT         = $C400 ; Basic interpreter, Y-Ref points to next char/token
0167+  0000             BCMD_LET          = $C458 ; Basic command LET
0168+  0000             TRCROUTINE        = $C4AF ; Trace Routine
0169+  0000             BCMD_STOP         = $C4B6 ; Basic command STOP
0170+  0000             BCMD_END          = $C50D ; Basic Command END
0171+  0000             BCMD_GOTO         = $C515 ; Basic Command GOTO
0172+  0000             DEFKEY_EVAL       = $C529 ; Evaluate def keys
0173+  0000             BCMD_IF           = $C5B4 ; Basic Command IF
0174+  0000             BCMD_ON           = $C5E0 ; Basic Command ON
0175+  0000             BCMD_GOSUB        = $C64E ; Basic Command GOSUB
0176+  0000             BCMD_REM          = $C676 ; Basic Command REM
0177+  0000             BCMD_USING        = $C67C ; Basic Command USING
0178+  0000             BCMD_DATA         = $C684 ; Basic Command DATA / ARUN / AREAD
0179+  0000             BCMD_TRON         = $C68C ; Basic Command TRON
0180+  0000             BCMD_TROFF        = $C693 ; Basic Command TROFF
0181+  0000             BCMD_DEGREE       = $C697 ; Basic Command DEGREE
0182+  0000             BCMD_RADIAN       = $C6A4 ; Basic Command RADIAN
0183+  0000             BCMD_GRAD         = $C6A8 ; Basic Command GRAD
0184+  0000             BCMD_RETURN       = $C6AC ; Basic Command RETURN
0185+  0000             BCMD_NEXT         = $C704 ; Basic Command NEXT
0186+  0000             BCMD_FOR          = $C711 ; Basic Command FOR
0187+  0000             BCMD_POKE         = $C777 ; Basic Command POKE
0188+  0000             BCMD_POKE#        = $C778 ; Basic Command POKE#
0189+  0000             BCMD_RESTORE      = $C7A2 ; Basic Command RESTORE
0190+  0000             BCMD_READ         = $C7BB ; Basic Command READ
0191+  0000             BCMD_NEW          = $C8A0 ; Basic Command NEW
0192+  0000             BCMD_CLEAR        = $C8F5 ; Basic Command CLEAR
0193+  0000             BCMD_CALL         = $CB63 ; Basic Command CALL
0194+  0000             BCMD_RUN          = $C884 ; Basic Command RUN
0195+  0000             BCMD_CONT         = $C8C7 ; Basic Command CONT
0196+  0000             BCMD_INPUT        = $C8FA ; Basic Command INPUT
0197+  0000             BCMD_LOCK         = $C968 ; Basic Command LOCK
0198+  0000             BCMD_UNLOCK       = $C96A ; Basic Command UNLOCK
0199+  0000             BCMD_LIST         = $C96E ; Basic Command LIST
0200+  0000             BCMD_DIM          = $C988 ; Basic Command DIM
0201+  0000             COLD_START        = $C9E4 ; Editor Cold Start
0202+  0000             BTN_SHCL          = $CA55 ; SHIFT CL (Clear All)
0203+  0000             WARM_START        = $CA58 ; Editor Warm Start
0204+  0000             BUTTON_CL         = $CA64 ; CL Button (Clear LCD )
0205+  0000             BTN_RCL           = $CB61 ; RCL Button
0206+  0000             RSV_CHNG          = $CB69 ; Change RESERVE level
0207+  0000             BTN_SHMODE        = $CB9C ; SHIFT MODE Button (RESERVE mode)
0208+  0000             BTN_MODE          = $CBA0 ; MODE Button
0209+  0000             BTN_INS           = $CBC7 ; INS Button
0210+  0000             BTN_DEL           = $CBCF ; DEL Button
0211+  0000             BTN_RIGHT         = $CBE4 ; CURSOR RIGHT Button
0212+  0000             PRG_ENTER         = $CC1D ; "@", Programmatic ENTER
0213+  0000             BTN_LRFT          = $CC22 ; CURSOR LEFT Button
0214+  0000             BTN_UP            = $CC38 ; CURSOR UP Button
0215+  0000             BTN_DOWN          = $CC48 ; CURSOR DOWN Button
0216+  0000             BTN_ENTER         = $CCC1 ; ENTER Button
0217+  0000             UNLOCK            = $CD6A ; UNLOCK
0218+  0000             BTN_OFF           = $CD71 ; OFF Button
0219+  0000             ERR1              = $CD89 ; Display ERROR 1, return to editor.
0220+  0000             ERRN              = $CD8B ; Display ERROR N, from UH or do 'ON-ERROR' routine.
0221+  0000             INS2INBUF         = $CDE6 ; INSERT - Insert one character into the Input Buffer.
0222+  0000             CHAR2INBUF        = $CE10 ; Enter characters into the Input Buffer.
0223+  0000             DELFRMINBUF       = $CE38 ; DELETE - Delete one character from the Input Buffer.
0224+  0000             DEFEVAL           = $CE4A ; Evaluate DEF key
0225+  0000             RESKEY_SRCH       = $CEC4 ; Searches for reserve key code in Reserve memory
0226+  0000             TXFR_RSV_KEY      = $CED0 ; Transfers reserve key assignment to Reserve memory.
0227+  0000             PRGLINE_TDI       = $CF27 ; Transfer, delete, insert program line from Input Buffer
0228+  0000             INBUF_CLRRST      = $D021 ; Clear rest of the input buffer (0D).
0229+  0000             INBUF_INIT        = $D030 ; Clear Input Buffer, Y-Reg points to start of Input Buffer
0230+  0000             INBUF_CLR         = $D034 ; Clears Input buffer with $0D
0231+  0000             SYSMSG            = $D046 ; Send System Messages.
0232+  0000             UL_XREG2YREG      = $D049 ; Transfers UL bytes from X-Reg to Y-Reg
0233+  0000             VARONBSTK         = $D04C ; Find variable on Basic Stack, if not found C = 0.
0234+  0000             POPBSTK           = $D065 ; Pop address from Basic Stack.
0235+  0000             PSHBSTK           = $D071 ; Push U-Reg to Basic Stack
0236+  0000             DELSVARS          = $D080 ; Deletes all standard variables
0237+  0000             DELDVARS          = $D091 ; Deletes dimensioned variables
0238+  0000             DEL_DIM_VARS      = $D09C ; Deletes dimensioned variables if program and variable memory overlap C=1
0239+  0000             BCD_Y2ARX         = $D14F ; Pass BCD number pointed to by Y-Reg to AR-X
0240+  0000             XFRLINE2INBUF     = $D2D0 ; Transfer line pointed to by X-Reg to Input Buffer
0241+  0000             LINESEARCH        = $D2EA ; Searches for line number according to U-Reg from start of program.
0242+  0000             SRCHPRGLINE       = $D2EC ; Searches program line in U-REG from X-REG
0243+  0000             DELU_FROMX        = $D3C4 ; Deletes (U + 1) bytes from X-Reg.
0244+  0000             DEC2HEX           = $D3D5 ; Convert from decimal to hexadecimal.
0245+  0000             BCMD_PEEK         = $D993 ; Basic commands PEEK/PEEK#
0246+  0000             BCMD_NOT          = $D99E ; Basic command NOT
0247+  0000             BCMD_INKY         = $D9AA ; Basic command INKEY$
0248+  0000             BCMD_CHR          = $D9B1 ; Basic command CHR$
0249+  0000             BCMD_STR          = $D9CF ; Basic command STR$
0250+  0000             BCMD_LEN          = $D9D7 ; Basic command LEN / ASC
0251+  0000             ARUINT2ARX        = $D9E7 ; Transfers U-Reg as an integer to AR-X in the format '82 UH UL '.
0252+  0000             BCMD_RLM_STR      = $D9F3 ; Basic commands RIGHT$ / LEFT$ / MID$
0253+  0000             BCMD_STATUS       = $DA44 ; Basic command STATUS
0254+  0000             BCMD_MEM          = $DA5D ; Basic command MEM
0255+  0000             MULT16B           = $DA71 ; 16-Bit Multiplication: X-Reg=Y-Reg*U-Reg.
0256+  0000             TWOSCOMP          = $DAA8 ; Forms two's complement of U-Reg.
0257+  0000             EVAL_USING        = $DAB2 ; Evaluation of USING paramters from Y-Reg
0258+  0000             ISARXBCD          = $DB87 ; Check AR-X for BCD format
0259+  0000             LOAD_NEXT         = $DCD4 ; Load next Token / character
0260+  0000             BCMD_TIME         = $DE82 ; Basic command TIME
0261+  0000             XREG2STRBUF       = $DFA1 ; Inserts string pointed to by X-Reg into string buffer. Jump if overflow.
0262+  0000             ARX2STRBUF        = $DFC4 ; Loads AR-X with a pointer to the string buffer.
0263+  0000             U_MINUS_X         = $DFE2 ; U-Reg = U-Reg - X-Reg. If overflow occurs C=0 and UH=16
0264+  0000             MEM_IN_UREG       = $DFEE ; Calculates the available memory space (MEM) in U-Reg.
0265+  0000             PRGST2XREG        = $DFF3 ; X-Reg = Program Start Address. U-Reg = STATUS 1-2
0266+  0000             RESET             = $E000 ; Reset-Routine
0267+  0000             IO_INT            = $E153 ; Initializes I/O module with table from E168.
0268+  0000             IO_TBL            = $E168 ; Paramaters for I/O init. (Byte table)
0269+  0000             ISR_HANDLER       = $E171 ; Maskable Interrupt Routine
0270+  0000             NMI_HANDLER       = $E22B ; Non-Maskable Interrupt Routine
0271+  0000             TIMER_ISR         = $E22C ; Timer Interrupt
0272+  0000             PVBANK            = $E234 ; PV banking. Using status of bit 0 in 7900. If 0, PV=1.
0273+  0000             WAITNOKEYS        = $E23D ; Waits until no more keys are pressed.
0274+  0000             WAIT4KB           = $E243 ; Waiting for character input from keyboard. Accumulator=character
0275+  0000             AUTO_OFF          = $E33F ; Auto-Power-Off routine
0276+  0000             ISKEY_1           = $E418 ; Keyboard query. Z=1 if no key pressed.
0277+  0000             ISKEY_0           = $E41A ; Keyboard query. Z=0 if no key pressed.
0278+  0000             KEY2ASCII         = $E42C ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0279+  0000             CHK_BRK           = $E451 ; Checks whether Break was pressed. Yes: Z=0, no Z=1.
0280+  0000             STR_COMP          = $E4A0 ; Compare two strings: pointer in Y-Reg and AR-Y. AR-X=1 is true.
0281+  0000             TOK_TABL_SRCH     = $E4A8 ; Searches for token table below C000. CE-158 C=1, UH-1. CE-150 C=1, UH=2
0282+  0000             BCMD_INPUTNUM     = $E4E7 ; Basic command INPUT#
0283+  0000             BCMD_PRINT        = $E4EB ; Basic command PRINT
0284+  0000             WRITE2CLOCK       = $E52B ; Write to clock  chip.
0285+  0000             TIMEMODE          = $E573 ; Timer mode select according to Accumulator
0286+  0000             ARX2TIME          = $E59A ; Write TIME from AR-X to clock chip
0287+  0000             TIME2ARX          = $E5B4 ; Read TIME from clock chip into AR-X.
0288+  0000             BEEP_ON-OFF       = $E655 ; Beep ON/OFF. Beep on/off pointer 7868 80=1 beep off, 80=0 beep on.
0289+  0000             BCMD_BEEP_STD     = $E669 ; Basic command BEEP - Standard beep.
0290+  0000             BCMD_BEEP         = $E66F ; Basic command BEEP - Duration in X-Reg, Pitch in UL.
0291+  0000             BCMD_PAUSE        = $E6A5 ; Basic command PAUSE
0292+  0000             BCMD_GPRINT       = $E7AC ; Basic command GPRINT
0293+  0000             BCMD_GCURSOR      = $E83E ; Basic command GCURSOR
0294+  0000             BCMD_CURSOR       = $E846 ; Basic command CURSOR
0295+  0000             BCMD_CLS          = $E865 ; Basic command CLS
0296+  0000             BCMD_WAIT         = $E86A ; Basic command WAIT
0297+  0000             TIMEDELAY         = $E88C ; Time delay 15.625 ms * number in U-Reg. BREAK is possible.
0298+  0000             PRGMDISP          = $E8CA ; Display program.
0299+  0000             STATUSCHK         = $E9EB ; Checks display and input status.
0300+  0000             USING_FRMT        = $EA78 ; USING formatting. If error C = 1.
0301+  0000             ARX2ASCII         = $EB40 ; Converts AR-X to ASCII according to USING parameters.
0302+  0000             TRUNCDEC          = $EC2F ; Truncation of the decimal places
0303+  0000             BCMD_DEC9         = $EC3C ; Checks if value in AR-X can be represented in 9 decimal places. If not, C=1.
0304+  0000             X_STROUT          = $EC5C ; Transfers string in X-Reg to output buffer. If error C=1.
0305+  0000             IF_ARX2BCD        = $EC6C ; If AR-X numerical convert to BCD. C=0. If CSI contine w/Distance Address D1.
0306+  0000             ARXBCD2ASCII      = $EC74 ; Converts AR-X from BCD to ASCII and transfers to output buffer.
0307+  0000             XP_STROUT         = $EC82 ; Transmits string X-Reg points to into output buffer. C=1 if buffer full
0308+  0000             CLRNOCURSOR       = $EC9C ; Clears LCD if cursor not allowed and sets the matrix column pointer to 00.
0309+  0000             INIT_CURS         = $ECAE ; Initializes cursor parameters.
0310+  0000             INIT_MTRX         = $ECB2 ; Initializes matrix column pointer (0).
0311+  0000             ARX2OUTBUF        = $ECB7 ; Transfers value in AR-X to output buffer.
0312+  0000             ARX2OUTBUF_F      = $ECD6 ; Tranfer AR-X foramtted to Ouput Buffer
0313+  0000             ARXASCII2OUTBUF   = $ECE3 ; Convert AR-X to ASCII and sent to Output Buffer
0314+  0000             USING_PARAM       = $ECEB ; Determine and transer USING paramaters
0315+  0000             OUTBUF2LCD        = $ECFA ; Output 26 characters in Output Buffer to LCD
0316+  0000             TEXTUREG_A        = $ED00 ; Output of text on LCD. U-Reg=start address; A=length.
0317+  0000             TEXTUREG_XL       = $ED3B ; Outputs text from U-Reg. XL = number of characters
0318+  0000             CHAR2COL          = $ED4D ; Output character at next matrix column
0319+  0000             CHARA2COL         = $ED57 ; Output character in A to next matrix column.
0320+  0000             CHARA2COLX        = $ED5B ; Output character in A to matrix column X-Reg points to.
0321+  0000             A2HEX             = $ED7D ; Convert character in A to HEX nibble
0322+  0000             ASCII2HEX         = $ED95 ; Convert two ASCII characters from X-Reg into HEX
0323+  0000             MTRXNRANGE        = $EDAB ; Checks if matrix pointer still in permissible range 0-155. No, C=1
0324+  0000             MTRXINC           = $EDB1 ; Increase matrix pointer if in permissible range 0-155. No, C=1
0325+  0000             LCDCACHE          = $EDC1 ; Cache LCD display of 7810-7BFF
0326+  0000             BCMD_BFF          = $EDD8 ; Retrieve LCD display of 7610-7BFF
0327+  0000             HEX2COL           = $EDEF ; Output HEX value from A to next matrix column
0328+  0000             GPRNT_A_2LCD      = $EDF6 ; Output of A as a GRPRINT (bit pattern) on LCD 
0329+  0000             MATRIX_PTR2XREG   = $EE1F ; Calculates matrix column address from matrix pointer, to X-Reg.
0330+  0000             MATRIX_A2XREG     = $EE22 ; Calculated matrix column address from A, to X-Reg
0331+  0000             CHAR2ADDR         = $EE48 ; Retrive address in Character Set Table for characters in A
0332+  0000             LCDCLR            = $EE71 ; Clears the LCD display.
0333+  0000             LCDCLRRNG         = $EE78 ; Clears the range from (UH00-UH40).
0334+  0000             SAVELCD2BUF       = $EE80 ; Save LCD to buffer
0335+  0000             BUF2LCD           = $EE99 ; Transfer buffer to LCD
0336+  0000             LCDCHRLEFT        = $EEB0 ; Determines number of empty characters left on LCD, to A.
0337+  0000             BCMD_POINT        = $EECB ; Basic command POINT
0338+  0000             CURSOR_OFF        = $EF00 ; Turns off blinking cursor.
0339+  0000             USING2STK         = $EF05 ; Saves USING parameters on processor stack (7895-7897)
0340+  0000             ARX2STRNG         = $EF1B ; Convert AR-X to string
0341+  0000             STK2USING         = $EF35 ; Get USING parameters from processor stack.
0342+  0000             TXT2LCD           = $EF44 ; Output text on LCD display.
0343+  0000             TXT2LCD_ARY       = $EF5B ; Output text on LCD from AR-Y to 7AXL
0344+  0000             PREPLCDOUT        = $EF67 ; Prepare the LCD output
0345+  0000             OUTBUFCLR         = $EF81 ; Clear output buffer.
0346+  0000             SUBTR             = $EFB6 ; AR-X = AR-X - AR-Y (Subtraction).
0347+  0000             ADDIT             = $EFBA ; AR-X = AR-X + AR-Y (Addition).
0348+  0000             PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
0349+  0000             PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
0350+  0000             PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
0351+  0000             PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
0352+  0000             PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
0353+  0000             PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
0354+  0000             PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
0355+  0000             PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
0356+  0000             PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
0357+  0000             PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
0358+  0000             PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
0359+  0000             PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)
0360+  0000             SQUARE            = $F019 ; AR-X = AR-X * AR-X (Square)
0361+  0000             MULTIPLY          = $F01A ; AR-X = AR-X * AR-Y (Multiplication)
0362+  0000             ADDMANY           = $F067 ; Add multiple ARs to AR-X if proper bit set in A
0363+  0000             RECIPRICAL        = $F080 ; AR-X = 1 /AR- X (Reciprocal)
0364+  0000             DIVISION          = $F084 ; AR-X = AR-X / AR-Y (Division)
0365+  0000             SQR_ROOT          = $F0E9 ; AR-X = SQR (AR-X) (Square Root)
0366+  0000             BCMD_LN           = $F161 ; Basic command LN, AR-X = LN (AR-X)
0367+  0000             BCMD_LOG          = $F165 ; Basic command LOG, AR-X = LOG (AR-X)
0368+  0000             BCMD_EXP          = $F1CB ; Basic command EXP
0369+  0000             EXPONENT          = $F1D4 ; AR-X = 10 ^ AR-X
0370+  0000             BCMD_COS          = $F391 ; Basic command COS
0371+  0000             BCMD_TAN          = $F39E ; Basic command TAN
0372+  0000             BCMD_SIN          = $F3A2 ; Basic command SIN
0373+  0000             BCMD_ACS          = $F492 ; Basic command ACS
0374+  0000             BCMD_ATN          = $F496 ; Basic command ATN
0375+  0000             BCMD_ASN          = $F49A ; Basic command ASN
0376+  0000             BCMD_DEG          = $F531 ; Basic command DEG
0377+  0000             BCMD_DMS          = $F564 ; Basic command DMS
0378+  0000             BCMD_ABS          = $F597 ; Basic command ABS
0379+  0000             BCMD_SGN          = $F590 ; Basic command SGN
0380+  0000             BCMD_PI           = $F5B5 ; Basic command PI (in AR-Y)
0381+  0000             BCMD_INT          = $F5BE ; Basic command INT
0382+  0000             BCMD_RND          = $F5D0 ; Basic command RND
0383+  0000             RANDGEN           = $F5EB ; Generates randon number in AR-X
0384+  0000             ARX_              = $F63C ; Sets digits 11 and 12 in AR-X to 00. Used at end of (5C)
0385+  0000             BCMD_RANDOM       = $F641 ; Basic command RANDOM
0386+  0000             ARX2BCD_ABS       = $F65D ; Converts AR-X into BCD form.
0387+  0000             ARX2BCD           = $F663 ; Converts the result in the AR-X into the correct BCD format.
0388+  0000             XFER_DEC_ARX2ARY  = $F6B4 ; Transfers decimal places from AR-X to AR-Y.
0389+  0000             SIGN_TEST         = $F6E6 ; Push result of sign combination (AR-X and AR-Y) on the stack.
0390+  0000             LDA_SGN_ARX       = $F6FB ; Load A with sign from AR-X, clears signs AR-X.
0391+  0000             XFER_ARY2ARS      = $F701 ; Transfer AR-Y to AR-S
0392+  0000             XFER_ARX2ARS      = $F707 ; Transfer AR-X to AR-S.
0393+  0000             XFER_ARX2ARY      = $F70D ; Transfer AR-X to AR-Y.
0394+  0000             XFER_ARS2ARY      = $F715 ; Transfer AR-S to AR-Y.
0395+  0000             XFER_SM_ARY2ARX   = $F71B ; Transfer sign and mantissa from AR-Y to AR-X.
0396+  0000             XFER_SM_ARZ2ARX   = $F71F ; Transfer sign and mantissa from AR-Z to AR-X.
0397+  0000             XFER_SM_ARY2ARZ   = $F725 ; Transfer sign and mantissa from AR-Y to AR-Z.
0398+  0000             XFER_SM_ARX2ARY   = $F729 ; Transfer sign and mantissa from AR-X to AR-Y
0399+  0000             XFER_SM_ARX2ARZ   = $F72F ; Transfer sign and mantissa from AR-X to AR-Z (7A09 - 7A0F).
0400+  0000             XREG2YREG         = $F733 ; Block shift 7 bytes from X-Reg to Y-Reg.
0401+  0000             XFER_ARS2ARX      = $F737 ; Transfer AR-S to AR-X.
0402+  0000             XFER_ARY2ARX      = $F73D ; Transfer AR-Y to AR-X.
0403+  0000             CLR_SM_ARY        = $F747 ; Clear sign and mantissa of AR-Y.
0404+  0000             CLR_SM_ARZ        = $F74B ; Clear sign and mantissa of AR-Z.
0405+  0000             CLR_SM_ARW        = $F74F ; Clear sign and mantissa of AR-W.
0406+  0000             CLR_ARY           = $F753 ; Clear AR-Y
0407+  0000             CLR_ARX           = $F757 ; Clear AR-X.
0408+  0000             CLR_ARZ           = $F75B ; Clear AR-Z.
0409+  0000             CLR_SM_XREG       = $F75F ; Clear sign and mantissa in AR-X
0410+  0000             CLR_7_XREG        = $F761 ; Clear 7 bytes from X-Reg.
0411+  0000             CLR_N_XREG        = $F763 ; Clear UL + 1 byte from X-Reg.
0412+  0000             ARW_SHR_4BITS     = $F769 ; Shift AR-W one nibble right (/10)
0413+  0000             ARZ_SHR_4BITS     = $F76D ; Shift AR-Z one nibb;e right (/10)
0414+  0000             ARY_SHR_4BITS     = $F771 ; Shift AR-Y one nibble right (/10)
0415+  0000             ARX_SHR_4BITS     = $F775 ; Shift AR-X one nibble right (/10)
0416+  0000             X_REG_SHR_4BITS   = $F777 ; Shift X-Reg one nibble right (/10)
0417+  0000             ARS_SHL_4BITS     = $F78C ; Shift AR-S one nibble left (*10).
0418+  0000             ARW_SHL_4BITS     = $F794 ; Shift AR-W one nibble left (*10).
0419+  0000             ARZ_SHL_4BITS     = $F798 ; Shift AR-Z one nibble left (*10).
0420+  0000             ARX_SHL_4BITS     = $F79C ; Shift AR-X one nibble left (*10).
0421+  0000             RND2ARX           = $F7A7 ; Transfer random number from RND to AR-X.
0422+  0000             SET_HB_XYREGS     = $F7B0 ; Set high bytes in X-Reg and Y-Reg to 7A (to AR register).
0423+  0000             SWAP_AARX_ARY     = $F7B5 ; Swap AR-X with AR-S.
0424+  0000             SWAP_ARX_ARY      = $F7B9 ; Swap AR-X with AR-Y.
0425+  0000             SWAP_BYTES        = $F7BF ; Swap bytes (UL+1)
0426+  0000             ADD_ARU_ARX       = $F7C8 ; AR-X = AR-X + AR-U.
0427+  0000             TOKENIZE_INBUF    = $F957 ; Tokenizer. Convert input buffer to program line.
0428+  0000             VAR_TYPE          = $F97B ; Convert input buffer into tokens and use formula interpreter
0429+  0000             DEC_OPN           = $FA58 ; Decrement the OPN byte in A in 2K steps
0430+  0000             SET_PV            = $FA65 ; Sets PV bit and PV byte according to Carry flag
0431+  0000             TOKEN_CHECK       = $FA74 ; Checks if token table exists, right-shifted HB address in A. No, C=0.
0432+  0000             TOKEN_PROCESS     = $FA89 ; Processes tokens according to data bytes.
0433+  0000             PVBANK_A          = $FB2A ; Performs PV banking according to A (79D0).
0434+  0000             TRACE             = $FB9D ; Trace
0435+  0000             STRXFR            = $FBCB ; Save string to output buffer or output to string buffer
0436+  0000             AUX_CONST         = $FBE9 ; Auxiliary constants for arithmetic routines
0437+  0000             CHARSET           = $FCA0 ; Character set table
0438+  0000             KB_LAYOUT_NORM    = $FE80 ; Keyborad layout (standard function)
0439+  0000             KB_LAYOUT_SH      = $FEC0 ; Keyborad layout (shifted function)
0440+  0000             CALL_VECTORS      = $FF00 ; Table for CALL vectors
0008   0000             #INCLUDE    "lib/CE-158.lib"
0001+  0000              ; CE-158 library file
0002+  0000             OUTSTAT_REG       = $7850 ; CE-158 OUTSTAT value
0003+  0000             CONSOLE_REG       = $7851 ; CE-158 CONSOLE. Number of characters/line. Default=0=unlimited
0004+  0000             CONSOLE2          = $7852 ; CE-158 Console 1 (//)
0005+  0000             CE158_UNDEF1      = $7853 ; CE-158 Undefined
0006+  0000             CE158_UNDEF2      = $7854 ; CE-158 Undefined
0007+  0000             CRLF_REG          = $7855 ; CE-158 EOL Character(s) used i.e. CR/LF. HB for LPT, LB for COM
0008+  0000             ZONE_REG          = $7856 ; CE-158 ZONE
0009+  0000             SETDEV_REG        = $7857 ; CE-158 SETDEV value
0010+  0000             SETCOM_REG        = $7858 ; CE-158 SETCOM
0011+  0000             CE158_7859_UNDEF  = $7859 ; CE-158 Undefined
0012+  0000             CE158_785A_UNDEF  = $785A ; CE-158 Undefined
0013+  0000             CE158_REG_79DD    = $79DD ; Used for BPD command flags
0014+  0000             CE158_REG_79DE    = $79DE ; Unknown use
0015+  0000             CE158_REG_79DF    = $79DF ; Used for CLOAD/CSAVE BUSY annunciator blink counter
0016+  0000             CE158_REG_79FA    = $79FA ; Used by CE-158
0017+  0000             CE158_REG_79FB    = $79FB ; Used by CE-158
0018+  0000             CE158_REG_79FC    = $79FC ; Used by CE-158
0019+  0000             CE158_REG_79FD    = $79FD ; Used by CE-158
0020+  0000             CE158_REG_79FE    = $79FE ; Used by CE-158
0021+  0000             CE158_7B08        = $7B08 ; Used in CE-158 Low Bank
0022+  0000             CE158_DIV_RESET   = $D004 ; CE158_DIVIDER_RESET (ME1)
0023+  0000             CE158_UREG_OUTP   = $D005 ; CE158_U_REG_OUTPUT  (ME1)
0024+  0000             CE158_SER_XFR     = $D006 ; CE158_SERIAL_XFR  (ME1)
0025+  0000             CE158_FREG_LDIV   = $D007 ; CE158_F_REG_LD/DIV  (ME1)
0026+  0000             CE158_PRT_C       = $D008 ; CE158_PRT_C  (ME1)
0027+  0000             CE158_G_REG       = $D009 ; CE158_G_REG  (ME1)
0028+  0000             CE158_MSK_REG     = $D00A ; CE158_MSK_REG  (ME1)
0029+  0000             CE158_IF_REG      = $D00B ; CE158_IF_REG  (ME1)
0030+  0000             CE158_PRT_A_DIR   = $D00C ; CE158_PRT_A_DIR  (ME1)
0031+  0000             CE158_PRT_B_DIR   = $D00D ; CE158_PRT_B_DIR  (ME1)
0032+  0000             CE158_PRT_A       = $D00E ; CE158_PRT_A  (ME1)
0033+  0000             CE158_PRT_B       = $D00F ; CE158_PRT_B  (ME1)
0034+  0000             CE158_UART_DATAW  = $D200 ; UART_DATA_W
0035+  0000             CE158_UART_REGW   = $D201 ; UART_REG_W
0036+  0000             CE158_UART_DATAR  = $D202 ; UART_DATA_R
0037+  0000             CE158_UART_REGR   = $D203 ; UART_REG_R
0038+  0000             CE-158_IR_PING    = $DC00 ; PC-1500 pings this address every ISR cycle (does nothing)
0039+  0000             CE158_IR_REG      = $DE00 ; Interrupt ID register, Bit 7 0 = INT, 1 = No INT.
0009   0000             ;#INCLUDE    "lib/CE-158N.lib"
0010   0000             #INCLUDE    "lib/CE-150.lib"
0001+  0000              ; CE-150 library file
0002+  0000             USER_CTRX_H       = $79E0 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (H)
0003+  0000             USER_CTRX_L       = $79E1 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (L)
0004+  0000             USER_CTRY_H       = $79E2 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (H)
0005+  0000             USER_CTRY_L       = $79E3 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (L)
0006+  0000             SCIS_CTRY_H       = $79E4 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (H)
0007+  0000             SCIS_CTRY_L       = $79E5 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (L)
0008+  0000             ABS_POSX          = $79E6 ; CE-150, ABSOLUTE POSITION X (X dir absolute point counter)
0009+  0000             SCIS_EXTY_H       = $79E7 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (H)
0010+  0000             SCIS_EXTY_L       = $79E8 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (L)
0011+  0000             PEN_UPDOWN        = $79E9 ; CE-150, Pen UP/DOWN
0012+  0000             LINE_TYPE         = $79EA ; CE-150, LINE TYPE (0 to 9), GRAPH mode
0013+  0000             DOT_LINE_CTR      = $79EB ; CE-150, Dotted line counter
0014+  0000             CURR_PEN          = $79EC ; CE-150, Current Pen position: 00=up, 01=down
0015+  0000             XMTR_HLD_CTR      = $79ED ; CE-150, X-motor hold counter
0016+  0000             MTR_PHASE         = $79EE ; CE-150, Motor Phase: stored in Port C
0017+  0000             YMTR_HLD_CTR      = $79EF ; CE-150, Y-Motor hold counter
0018+  0000             PRNT_MODE         = $79F0 ; CE-150, Print Mode: 00=TEXT, FF=GRAPH
0019+  0000             PRNT_DISABLE      = $79F1 ; CE-150, Printer disable
0020+  0000             PRNT_ROTATE       = $79F2 ; CE-150, ROTATE setting (0 to 3)
0021+  0000             PRNT_COLOR        = $79F3 ; CE-150, COLOR setting (0 to 3)
0022+  0000             PRNT_CSIZE        = $79F4 ; CE-150, CSIZE setting (0 to 3)
0023+  0000             PRNT_LLPARAM      = $79F5 ; CE-150, LPRINT/LLIST Parameter
0024+  0000             PRNT_TEMPM        = $79F6 ; CE-150, LINE=dir. param. LLIST=determine LF. COLOR=Pen location.
0025+  0000             PRNT_DTYPE        = $79F7 ; CE-150, Type of data LRPINTed: 00=numeric, FF=character string
0026+  0000             PRNT_TEMPP        = $79F8 ; CE-150, Temp storage of Pen location during paper feed
0027+  0000             PRNT_PWRINT       = $79F9 ; CE-150, Flag indicating power up/interrupt in progress
0028+  0000             PRNT_VEC          = $A000 ; CE-150 Character vectors (A000-A28A)
0029+  0000             PRNT_VEC_SIZE     = $028B ; 
0030+  0000             MGP1_150          = $A28B ; Start of MGP 1 program block
0031+  0000             COLDES            = $A519 ; CE-150 Color Designation
0032+  0000             MOTOFF            = $A769 ; CE-150 Printer motor OFF
0033+  0000             PRINT_150         = $A781 ; CE-150 Print ASCII character (no LF)
0034+  0000             MOTDRV            = $A8DD ; CE-150 Motor Drive, move pen
0035+  0000             LFEED             = $A951 ; CE-150 Line Feed
0036+  0000             NLFEED            = $AA04 ; CE-150 send #n line feeds to printer
0037+  0000             PENUPDOWN         = $AAE3 ; CE-150 Pen Up/Down
0038+  0000             GRPHPREP          = $ABEF ; CE-150 Switch from tect to graphics mode
0039+  0000             TEXT              = $ACA6 ; CE-150 TEXT
0040+  0000             TEXTPREP          = $ACD3 ; CE-150 Text mode preperation
0041+  0000             GRAPH             = $ACD3 ; CE-150 GRAPH
0042+  0000             CE150_MSK_REG     = $B00A ; (ME1)
0043+  0000             CE150_IF_REG      = $B00B ; (ME1)
0044+  0000             CE150_PRT_A_DIR   = $B00C ; (ME1)
0045+  0000             CE150_PRT_B_DIR   = $B00D ; (ME1)
0046+  0000             CE150_PRT_A       = $B00E ; (ME1)
0047+  0000             CE150_PRT_B       = $B00F ; (ME1)
0048+  0000             SORGN             = $B153 ; CE-150 SORGN
0049+  0000             ROTATE            = $B15A ; CE-150 ROTATE
0050+  0000             COLOR             = $B16A ; CE-150 COLOR
0051+  0000             CSIZE             = $B180 ; CE-150 CSIZE
0052+  0000             GLCURSOR          = $B191 ; CE-150 GLCURSOR
0053+  0000             LF                = $B1B4 ; CE-150 LF
0054+  0000             LINE              = $B222 ; CE-150 LINE
0055+  0000             RLINE             = $B224 ; CE-150 RLINE
0056+  0000             LPRINT_150        = $B2EC ; CE-150 LPRINT
0057+  0000             LLIST_150         = $B754 ; CE-150 LLIST
0058+  0000             SBRA4             = $B888 ; SBR A4 Start of program block CMT 2
0059+  0000             SBRA8             = $B88B ; SBR A8
0060+  0000             SBRAA             = $B88E ; SBR AA
0061+  0000             SBRAE             = $B891 ; SBR AE
0062+  0000             SBRB0             = $B894 ; SBR B0
0063+  0000             SBRB2             = $B897 ; SBR B2
0064+  0000             SBRB4             = $B89A ; SBR B4
0065+  0000             SBRB6             = $B89D ; SBR B6
0066+  0000             SBRB8             = $B8A0 ; SBR B8
0067+  0000             PCJUMP01          = $B8A3 ; Direct PC load from &E524
0068+  0000             CSAVE_150         = $B8A6 ; CE-150 CSAVE
0069+  0000             CLOAD_150         = $B8F9 ; CE-150 CLOAD
0070+  0000             MERGE_150         = $B994 ; CE-150 MERGE
0071+  0000             CHAIN_150         = $BB6A ; CE-150 CHAIN
0072+  0000             HEADERCREATE      = $BBD6 ; CE-150 Write tape synchronisation header
0073+  0000             TERMCMTIO         = $BBF5 ; CE-150 Finalisation of tape I/O control
0074+  0000             HEADERIO          = $BCE8 ; CE-150 Read tape synchronisation feader / Searh for filename
0075+  0000             FILETRSF          = $BD3C ; CE-150 Read / Write file to tape
0076+  0000             SAVEONECHR        = $BDCC ; CE-150 Send a character to tape
0077+  0000             LOADONECHR        = $BDF0 ; CE-150 Read a character from tape
0078+  0000             RMT               = $BEF9 ; CE-150 RMT
0079+  0000             REMOTEON          = $BF11 ; CE-150 Remote ON
0080+  0000             REMOTEOFF         = $BF43 ; CE-150 Remote OFF
0011   0000             #INCLUDE    "lib/PC-1500_Macros.lib"
0001+  0000             ; PC-1500 Macros
0002+  0000             ;------------------------------------------------------------------------------------------------------------
0003+  0000             ; Assembly macros used to encode arguments for lh5801 'macros' that take arguments inline after CALL
0004+  0000             
0005+  0000             #define EQU .EQU
0006+  0000             .MSFIRST
0007+  0000             
0008+  0000             COMMA:      EQU $2C                         ; ',' used for macros
0009+  0000             CR:         EQU $0D                         ; '/CR' used for macros
0010+  0000             DASH:       EQU $2D                         ; '-' used for macros
0011+  0000             EQUALS:     EQU $3D                         ; '-' used for macros
0012+  0000             HASH:       EQU $23                         ; '#' used for macros
0013+  0000             SEMI:       EQU $3B                         ; ';' used for macros
0014+  0000             QUOTE:      EQU $22                         ; '-' used for macros
0015+  0000             DOLLAR:     EQU $24                         ; '#' used for macros
0016+  0000             PERCENT:    EQU $25                         ; ';' used for macros
0017+  0000             
0018+  0000             
0019+  0000             TOK_OFF:    EQU $F19E                       ; OFF   command token
0020+  0000             TOK_ON:     EQU $F19C                       ; ON    command token
0021+  0000             TOK_TAB:    EQU $F0BB                       ; TAB   command token
0022+  0000             TOK_USING:  EQU $F085                       ; USING command token
0023+  0000             
0024+  0000             
0025+  0000             #define ABRF(n8)        .BYTE n8 - $ - 1    ; calculate forward branch
0026+  0000             #define ABYT(n8)        .BYTE n8            ; use byte verbatium
0027+  0000             #define ABYTL(n16)      .BYTE n16 & $FF     ; use byte verbatium
0028+  0000             #define ACHR(ch)        .BYTE ch            ; character
0029+  0000             #define AWRD(n16)       .WORD n16           ; use word value verbatum
0030+  0000             #define CNIB(n81,n82)   .BYTE ((n81 & $F0) | (n82 & $0F))   ; calculates control nibble
0031+  0000             #define HB(n16)         (n16 >> 8)          ; Return HB of 16bit value
0032+  0000             #define LB(n16)         (n16 & $FF)         ; Return HB of 16bit value
0033+  0000             #define HBO(n16,n8)     ((n16 + n8) >> 8)   ; Return HB of 16bit value
0034+  0000             #define LBO(n16,n8)     ((n16 + n8) & $FF)  ; Return HB of 16bit value
0035+  0000             
0036+  0000             ; CE-158 related
0037+  0000             #define HIGH_BANK       SPU \ SPV           ; Switch to High Bank
0038+  0000             #define LOW_BANK        RPU \ SPV           ; Switch to High Bank
0039+  0000             #define SETCOM_M        LDI A,$F9 \ STA (SETCOM_REG)    ; SETDEV to 2400,8,N,1
0040+  0000             #define SETDEV_M(n8)    LDI A,n8 \ STA (SETDEV_REG)     ; SETCOM to device passed
0041+  0000             #define SETOPN_M(n8)    LDI A,n8 \ STA (OPN)            ; Set OPN to n8 table
0042+  0000             
0043+  0000             KI:                 EQU $01                     ;
0044+  0000             DO:                 EQU $02                     ;
0045+  0000             PO:                 EQU $04                     ;
0046+  0000             CI:                 EQU $08                     ;
0047+  0000             CO:                 EQU $10                     ;
0048+  0000             U1:                 EQU $20                     ; U1, use UART 1 (Bit5=0=UART0, Bit5=1=UART1)
0049+  0000             PN:                 EQU $40                     ; PN, LPT port to input
0050+  0000             BP:                 EQU $80                     ; BP, enable BDP mode with U0
0051+  0000             
0052+  0000             #define ADDRCHK(add,location)        #if ($ > add)    ; check address
0053+  0000             #DEFCONT                     \!over_run
0054+  0000             #DEFCONT                     \.ECHO location
0055+  0000             #DEFCONT                     \.ECHO " address over run by "
0056+  0000             #DEFCONT                     \.ECHO ($ - add)
0057+  0000             #DEFCONT                     \.ECHO " bytes\r\n"
0058+  0000             #DEFCONT                     \#endif
0012   0000             
0013   0000             ; IWS Videointerface RAM map
0014   0000             COLORRAM = $6000 ; $6000~$67FF ME1
0015   0000             GRAPHRAM = $6800 ; $6800~$67FF ME1
0016   0000             VIDEORAM = $7000 ; $7000-$77FF ME1
0017   0000             CRTCTRL  = $7800 ; $7800-$7801 ME1
0018   0000             NOTUSED  = $7802 ; $7802~$7FFF ME1
0019   0000             
0020   8000             .ORG $8000
0021   8000             
0022   8000             ;------------------------------------------------------------------------------------------------------------
0023   8000             ; BASIC Command Table 8000
0024   8000             ;------------------------------------------------------------------------------------------------------------
0025   8000             ;% B_TBL_8000 START
0026   8000             B_TBL_8000:
0027   8000 55              .BYTE  $55                                          ; Marker that BASIC Table follows 
0028   8001             
0029   8001             B_TBL_8000_TNUM:
0030   8001 05              .BYTE  $05                                          ; Table number
0031   8002             
0032   8002             B_TBL_8000_NAME:
0033   8002 43 52 54 0D     .TEXT  "CRT\r" \ .BYTE $9A,$9A,$9A,$9A              ; Table name
0033   8006 9A 9A 9A 9A 
0034   800A             
0035   800A             B_TBL_8000_INIT:
0036   800A BA 8D C1        JMP     TBL_INIT                                    ; $8DC1 - Table initilization vector
0037   800D             
0038   800D             B_TBL_8000_INPUT_NUM:
0039   800D BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C5 - Table INPUT# vector
0040   8010             
0041   8010             B_TBL_8000_PRINT_NUM:
0042   8010 BA 92 D6        JMP     JMP_92D6 ; $92D6                            ; 82C9 - Table PRINT# vector
0043   8013             
0044   8013             B_TBL_8000_JMPS:
0045   8013 9A 9A 9A 9A     .BYTE  $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A      ; Unused jumps 
0045   8017 9A 9A 9A 9A 
0045   801B 9A 9A 
0046   801D             
0047   801D             B_TBL_8000_TRACE:
0048   801D 93 50 FF        .BYTE $93,$50,$FF                                   ; Unusual
0049   8020             
0050   8020             B_TBL_8000_A_KW:
0051   8020 00 00           .WORD $0000                                         ;
0052   8022             
0053   8022             B_TBL_8000_B_KW:
0054   8022 80 56           .WORD LET_B                                         ; $8056
0055   8024             
0056   8024             B_TBL_8000_C_KW:
0057   8024 80 61           .WORD LET_C                                         ; $8061
0058   8026             
0059   8026             B_TBL_8000_D_KW:
0060   8026 80 95           .WORD LET_D                                         ; $8095
0061   8028             
0062   8028             B_TBL_8000_E_KW:
0063   8028 80 A5           .WORD LET_E                                         ; $80A5
0064   802A             
0065   802A             B_TBL_8000_F_KW:
0066   802A 00 00           .WORD $0000                                         ;
0067   802C             
0068   802C             B_TBL_8000_G_KW:
0069   802C 80 BE           .WORD LET_G                                         ; $80BE
0070   802E             
0071   802E             B_TBL_8000_H_KW:
0072   802E 80 E0           .WORD LET_H                                         ; $80E0
0073   8030             
0074   8030             B_TBL_8000_I_KW:
0075   8030 81 02           .WORD LET_I                                         ; $8102
0076   8032             
0077   8032             B_TBL_8000_J_KW:
0078   8032 00 00           .WORD $0000                                         ; 
0079   8034             
0080   8034             B_TBL_8000_K_KW:
0081   8034 81 0C           .WORD LET_K                                         ; $810C
0082   8036             
0083   8036             B_TBL_8000_L_KW:
0084   8036 81 14           .WORD LET_L                                         ; $8114
0085   8038             
0086   8038             B_TBL_8000_M_KW:
0087   8038 81 26           .WORD LET_M                                         ; $8126
0088   803A             
0089   803A             B_TBL_8000_N_KW:
0090   803A 00 00           .WORD $0000                                         ; 
0091   803C             
0092   803C             B_TBL_8000_O_KW:
0093   803C 00 00           .WORD $0000                                         ; 
0094   803E             
0095   803E             B_TBL_8000_P_KW:
0096   803E 81 3B           .WORD LET_P                                         ; $813B
0097   8040             
0098   8040             B_TBL_8000_Q_KW:
0099   8040 00 00           .WORD $0000                                         ; 
0100   8042             
0101   8042             B_TBL_8000_R_KW:
0102   8042 81 45           .WORD LET_R                                         ; $8145
0103   8044             
0104   8044             B_TBL_8000_S_KW:
0105   8044 81 5B           .WORD LET_S                                         ; $815B
0106   8046             
0107   8046             B_TBL_8000_T_KW:
0108   8046 81 6E           .WORD LET_T                                         ; $816E
0109   8048             
0110   8048             B_TBL_8000_U_KW:
0111   8048 00 00           .WORD $0000                                         ; 
0112   804A             
0113   804A             B_TBL_8000_V_KW:
0114   804A 81 78           .WORD LET_V                                         ; $8178
0115   804C             
0116   804C             B_TBL_8000_W_KW:
0117   804C 00 00           .WORD $0000                                         ; 
0118   804E             
0119   804E             B_TBL_8000_X_KW:
0120   804E 00 00           .WORD $0000                                         ; 
0121   8050             
0122   8050             B_TBL_8000_Y_KW:
0123   8050 00 00           .WORD $0000                                         ; 
0124   8052             
0125   8052             B_TBL_8000_Z_KW:
0126   8052 00 00           .WORD $0000                                         ; 
0127   8054             
0128   8054             B_TBL_8000_CMD_LST:     ;Token LB < 80 command is function, else is proceedure
0129   8054             ;Ctrl nibble    Ctrl nib calc            Name              Token  Vector
0130   8054             LET_B:  EQU ($ + 2) ; First keyword starting with 'B'. LET_B = Address of 'A' in BACKGR
0131   8054             CN1:    EQU $D6 \ CNIB($96,CN1)     \ .TEXT "BACKGR"    \ .WORD $F0DE, $9023        ; $8054
0131   8054 96          
0131   8055 42 41 43 4B 
0131   8059 47 52 
0131   805B F0 DE 90 23 
0132   805F             
0133   805F             LET_C:  EQU ($ + 2) ; First keyword starting with 'C'. LET_C = Address of 'L' in CLS
0134   805F             CN2:    EQU $C3 \ CNIB(CN1,CN2)     \ .TEXT "CLS"       \ .WORD $F088, $8974        ; $805F
0134   805F D3          
0134   8060 43 4C 53    
0134   8063 F0 88 89 74 
0135   8067             CN3:    EQU $A5 \ CNIB(CN2,CN3)     \ .TEXT "CHAIN"     \ .WORD $F0B2, $92DC        ; $8067
0135   8067 C5          
0135   8068 43 48 41 49 
0135   806C 4E 
0135   806D F0 B2 92 DC 
0136   8071             CN4:    EQU $C6 \ CNIB(CN3,CN4)     \ .TEXT "COLORV"    \ .WORD $F0EB, $914F        ; $8071
0136   8071 A6          
0136   8072 43 4F 4C 4F 
0136   8076 52 56 
0136   8078 F0 EB 91 4F 
0137   807C             CN5:    EQU $C7 \ CNIB(CN4,CN5)     \ .TEXT "CONSOLE"   \ .WORD $F0B1, $89B5        ; $807C
0137   807C C7          
0137   807D 43 4F 4E 53 
0137   8081 4F 4C 45 
0137   8084 F0 B1 89 B5 
0138   8088             CN6:    EQU $D6 \ CNIB(CN5,CN6)     \ .TEXT "CURSOR"    \ .WORD $F084, $8A49        ; $8088
0138   8088 C6          
0138   8089 43 55 52 53 
0138   808D 4F 52 
0138   808F F0 84 8A 49 
0139   8093             
0140   8093             LET_D:  EQU ($ + 2) ; First keyword starting with 'D'. LET_D = Address of 'EI' in DIR
0141   8093             CN7:    EQU $C3 \ CNIB(CN6,CN7)     \ .TEXT "DIR"       \ .WORD $F0E0, $92CA        ; $8093
0141   8093 D3          
0141   8094 44 49 52    
0141   8097 F0 E0 92 CA 
0142   809B             CN8:    EQU $53 \ CNIB(CN7,CN8)     \ .TEXT "DEC"       \ .WORD $F070, $914C        ; $809B
0142   809B C3          
0142   809C 44 45 43    
0142   809F F0 70 91 4C 
0143   80A3             
0144   80A3             LET_E:  EQU ($ + 2) ; First keyword starting with 'E'. LET_E = Address of 'D' in EDIT
0145   80A3             CN9:    EQU $C4 \ CNIB(CN8,CN9)     \ .TEXT "EDIT"      \ .WORD $F0C7, $914F        ; $80A3
0145   80A3 54          
0145   80A4 45 44 49 54 
0145   80A8 F0 C7 91 4F 
0146   80AC             CN10:   EQU $C3 \ CNIB(CN9,CN10)    \ .TEXT "ERL"       \ .WORD $F053, $9088        ; $80AC
0146   80AC C3          
0146   80AD 45 52 4C    
0146   80B0 F0 53 90 88 
0147   80B4             CN11:   EQU $D3 \ CNIB(CN10,CN11)   \ .TEXT "ERN"       \ .WORD $F052, $9082        ; $80B4
0147   80B4 C3          
0147   80B5 45 52 4E    
0147   80B8 F0 52 90 82 
0148   80BC             
0149   80BC             LET_G:  EQU ($ + 2) ; First keyword starting with 'G'. LET_G = Address of 'C' in GCLS
0150   80BC             CN12:   EQU $C4 \ CNIB(CN11,CN12)   \ .TEXT "GCLS"      \ .WORD $F0E1, $9107        ; $80BC
0150   80BC D4          
0150   80BD 47 43 4C 53 
0150   80C1 F0 E1 91 07 
0151   80C5             CN13:   EQU $C8 \ CNIB(CN12,CN13)   \ .TEXT "GVCURSOR"  \ .WORD $F0E8, $914F        ; $80C5
0151   80C5 C8          
0151   80C6 47 56 43 55 
0151   80CA 52 53 4F 52 
0151   80CE F0 E8 91 4F 
0152   80D2             CN14:   EQU $D7 \ CNIB(CN13,CN14)   \ .TEXT "GVPRINT"   \ .WORD $F0E9, $914F        ; $80D2
0152   80D2 C7          
0152   80D3 47 56 50 52 
0152   80D7 49 4E 54 
0152   80DA F0 E9 91 4F 
0153   80DE             
0154   80DE             LET_H:  EQU ($ + 2) ; First keyword starting with 'H'. LET_H = Address of 'C' in HCURSOR
0155   80DE             CN15:   EQU $C7 \ CNIB(CN14,CN15)   \ .TEXT "HCURSOR"   \ .WORD $F054, $8EFD        ; $80DE
0155   80DE D7          
0155   80DF 48 43 55 52 
0155   80E3 53 4F 52 
0155   80E6 F0 54 8E FD 
0156   80EA             CN16:   EQU $C8 \ CNIB(CN15,CN16)   \ .TEXT "HPCURSOR"  \ .WORD $F055, $8F04        ; $80EA
0156   80EA C8          
0156   80EB 48 50 43 55 
0156   80EF 52 53 4F 52 
0156   80F3 F0 55 8F 04 
0157   80F7             CN17:   EQU $B4 \ CNIB(CN16,CN17)   \ .TEXT "HEX$"      \ .WORD $F071, $8981        ; $80F7
0157   80F7 C4          
0157   80F8 48 45 58 24 
0157   80FC F0 71 89 81 
0158   8100             
0159   8100             LET_I:  EQU ($ + 2) ; First keyword starting with 'I'. LET_I = Address of 'N' in INPUT
0160   8100             CN18:   EQU $D5 \ CNIB(CN17,CN18)   \ .TEXT "INPUT"     \ .WORD $F091, $8C89        ; $8100
0160   8100 B5          
0160   8101 49 4E 50 55 
0160   8105 54 
0160   8106 F0 91 8C 89 
0161   810A             
0162   810A             LET_K:  EQU ($ + 2) ; First keyword starting with 'K'. LET_K = Address of 'E' in KEY
0163   810A             CN19:   EQU $D3 \ CNIB(CN18,CN19)   \ .TEXT "KEY"       \ .WORD $F0E2, $9308        ; $810A
0163   810A D3          
0163   810B 4B 45 59    
0163   810E F0 E2 93 08 
0164   8112             
0165   8112             LET_L:  EQU ($ + 2) ; First keyword starting with 'L'. LET_L = Address of 'I' in LIST
0166   8112             CN20:   EQU $C4 \ CNIB(CN19,CN20)   \ .TEXT "LIST"      \ .WORD $F090, $8F16        ; $8112
0166   8112 D4          
0166   8113 4C 49 53 54 
0166   8117 F0 90 8F 16 
0167   811B             CN21:   EQU $D4 \ CNIB(CN20,CN21)   \ .TEXT "LOAD"      \ .WORD $F080, $9244        ; $811B
0167   811B C4          
0167   811C 4C 4F 41 44 
0167   8120 F0 80 92 44 
0168   8124             
0169   8124             LET_M:  EQU ($ + 2) ; First keyword starting with 'M'. LET_M = Address of 'O' in MONITOR
0170   8124             CN22:   EQU $C7 \ CNIB(CN21,CN22)   \ .TEXT "MONITOR"   \ .WORD $F0E4, $8EE1        ; $8124
0170   8124 D7          
0170   8125 4D 4F 4E 49 
0170   8129 54 4F 52 
0170   812C F0 E4 8E E1 
0171   8130             CN23:   EQU $D4 \ CNIB(CN22,CN23)   \ .TEXT "MODE"      \ .WORD $F0DF, $91D3        ; $8130
0171   8130 C4          
0171   8131 4D 4F 44 45 
0171   8135 F0 DF 91 D3 
0172   8139             
0173   8139             LET_P:  EQU ($ + 2) ; First keyword starting with 'P'. LET_P = Address of 'R' in PRINT
0174   8139             CN24:   EQU $D5 \ CNIB(CN23,CN24)   \ .TEXT "PRINT"     \ .WORD $F097, $91A7        ; $8139
0174   8139 D5          
0174   813A 50 52 49 4E 
0174   813E 54 
0174   813F F0 97 91 A7 
0175   8143             
0176   8143             LET_R:  EQU ($ + 2) ; First keyword starting with 'R'. LET_R = Address of 'E' in REPKEY
0177   8143             CN25:   EQU $C6 \ CNIB(CN24,CN25)   \ .TEXT "REPKEY"    \ .WORD $F0C3, $90F1        ; $8143
0177   8143 D6          
0177   8144 52 45 50 4B 
0177   8148 45 59 
0177   814A F0 C3 90 F1 
0178   814E             CN26:   EQU $D6 \ CNIB(CN25,CN26)   \ .TEXT "REPROG"    \ .WORD $F0C5, $914F        ; $814E
0178   814E C6          
0178   814F 52 45 50 52 
0178   8153 4F 47 
0178   8155 F0 C5 91 4F 
0179   8159             
0180   8159             LET_S:  EQU ($ + 2) ; First keyword starting with 'S'. LET_S = Address of 'A' in SAVE
0181   8159             CN27:   EQU $C4 \ CNIB(CN26,CN27)   \ .TEXT "SAVE"      \ .WORD $F081, $9234        ; $8159
0181   8159 D4          
0181   815A 53 41 56 45 
0181   815E F0 81 92 34 
0182   8162             CN28:   EQU $D5 \ CNIB(CN27,CN28)   \ .TEXT "SLEEP"     \ .WORD $F0E7, $90AA        ; $8162
0182   8162 C5          
0182   8163 53 4C 45 45 
0182   8167 50 
0182   8168 F0 E7 90 AA 
0183   816C             
0184   816C             LET_T:  EQU ($ + 2) ; First keyword starting with 'T'. LET_T = Address of 'E' in TESTV
0185   816C             CN29:   EQU $D5 \ CNIB(CN28,CN29)   \ .TEXT "TESTV"     \ .WORD $F0EA, $914F        ; $816C
0185   816C D5          
0185   816D 54 45 53 54 
0185   8171 56 
0185   8172 F0 EA 91 4F 
0186   8176             
0187   8176             LET_V:  EQU ($ + 2) ; First keyword starting with 'V'. LET_V = Address of 'E' in VERIFYQ
0188   8176             CN30:   EQU $C7 \ CNIB(CN29,CN30)   \ .TEXT "VERIFYQ"   \ .WORD $F083, $92D9        ; $8176
0188   8176 D7          
0188   8177 56 45 52 49 
0188   817B 46 59 51 
0188   817E F0 83 92 D9 
0189   8182             CN31:   EQU $C7 \ CNIB(CN30,CN31)   \ .TEXT "VCURSOR"   \ .WORD $F056, $8EE4        ; $8182
0189   8182 C7          
0189   8183 56 43 55 52 
0189   8187 53 4F 52 
0189   818A F0 56 8E E4 
0190   818E             CN32:   EQU $C8 \ CNIB(CN31,CN32)   \ .TEXT "VPCURSOR"  \ .WORD $F050, $8EEB        ; $818E
0190   818E C8          
0190   818F 56 50 43 55 
0190   8193 52 53 4F 52 
0190   8197 F0 50 8E EB 
0191   819B             
0192   819B             CN33:  EQU $D0 \ .BYTE CN33
0192   819B D0          
0193   819C             
0194   819C             B_TBL_8000_END:
0195   819C             ;% B_TBL_8000 END
0196   819C             
0197   819C             
0198   819C             FILLER: ; $819C
0199   819C 00 38           .BYTE $00,$38
0200   819E             
0201   819E             ;------------------------------------------------------------------------------------------------------------
0202   819E             ; $#### XCHE_INPUT- External Character Input Routine
0203   819E             ; Called from: BR $826F, $827C, LIST:$8F8F
0204   819E             ; Arguments: 
0205   819E             ; Outputs: 
0206   819E             ; RegMod: 
0207   819E             ;------------------------------------------------------------------------------------------------------------
0208   819E             ;% LB_XCHR_INPUT START
0209   819E             XCHR_INPUT:
0210   819E FD 98           PSH  Y                          ; 
0211   81A0 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9
0212   81A4 B7 01           CPI  A,$01                      ; 
0213   81A6 89 0A           BZR  BR_81B2                    ; $81B2
0214   81A8 B5 40           LDI  A,$40                      ; 
0215   81AA AE 79 D1        STA  (OPN)                      ; 
0216   81AD FD EB 77 D9     ORI  #(VIDEORAM + $07D9),$02    ; $77D9
0216   81B1 02 
0217   81B2             
0218   81B2             BR_81B2: ; BR $81A6
0219   81B2 E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4
0220   81B6 14              LDA  YL                         ; 
0221   81B7 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4
0222   81BB A5 78 80        LDA  (DISPARAM)                 ; 
0223   81BE B7 02           CPI  A,$02                      ; 
0224   81C0 8B 6D           BZS  BR_822F                    ; $822F
0225   81C2 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0226   81C6 B7 19           CPI  A,$19                      ; 
0227   81C8 89 05           BZR  BR_81CF                    ; $81CF
0228   81CA BE 8C 57        SJP  (JMP_8C57)                 ; $8C57
0229   81CD 83 60           BCS  BR_822F                    ; $822F
0230   81CF             
0231   81CF             BR_81CF: ; BR $81C8
0232   81CF BE 88 EB        SJP  (JMP_88EB)                 ; $88EB
0233   81D2 B7 19           CPI  A,$19                      ; 
0234   81D4 81 03           BCR  BR_81D9                    ; $81D9
0235   81D6 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0236   81D9             
0237   81D9             BR_81D9: ; BR $81D4
0238   81D9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3 
0239   81DD B7 09           CPI  A,$09                      ; 
0240   81DF 89 08           BZR  BR_81E9                    ; $81E9
0241   81E1 BE 89 29        SJP  (JMP_8929)                 ; $8929
0242   81E4 81 49           BCR  BR_822F                    ; $822F
0243   81E6 BE 84 66        SJP  (BR_8466)                  ; $8466
0244   81E9             
0245   81E9             BR_81E9: ; BR $81DF
0246   81E9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0247   81ED B7 0D           CPI  A,$0D                      ; 
0248   81EF 89 03           BZR  BR_81F4                    ; $81F4
0249   81F1 BE 87 CC        SJP  (JMP_87CC)                 ; $87CC
0250   81F4             
0251   81F4             BR_81F4: ; BR $81EF
0252   81F4 BE 88 EB        SJP  (JMP_88EB)                 ; $88EB
0253   81F7 B7 19           CPI  A,$19                      ; 
0254   81F9 81 03           BCR  BR_81FE                    ; $81FE
0255   81FB BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0256   81FE             
0257   81FE             BR_81FE: ; BR $81F9
0258   81FE FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0259   8202 18              STA  YH                         ; 
0260   8203 5A 01           LDI  YL,$01                     ; 
0261   8205 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0262   8209 B7 01           CPI  A,$01                      ; 
0263   820B 89 08           BZR  BR_8215                    ; $8215
0264   820D A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
0265   8210 18              STA  YH                         ; 
0266   8211 A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
0267   8214 1A              STA  YL                         ; 
0268   8215             
0269   8215             BR_8215: ; BR $820B
0270   8215 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0271   8218 FD 18           LDX  Y                          ; 
0272   821A 58 7B           LDI  YH,HB(IN_BUF)              ; $7B
0273   821C 5A B0           LDI  YL,LB(IN_BUF)              ; $B0
0274   821E FD E9 77 D6     ANI  #(VIDEORAM + $07D6),$00    ; $77D6
0274   8222 00 
0275   8223 BE 85 2C        SJP  (JMP_852C)                 ; $852C
0276   8226 BE 86 63        SJP  (JMP_8663)                 ; $8663
0277   8229 BE 84 56        SJP  (JMP_8456)                 ; $8456
0278   822C BE 87 21        SJP  (JMP_8721)                 ; $8721
0279   822F             
0280   822F             BR_822F: ; BR $81C0, $81CD, $81E4
0281   822F E9 7B 0A 00     ANI  (APOW_CTR_H),$00           ; Auto power down counter (H)
0282   8233 E9 7B 0B 00     ANI  (APOW_CTR_M),$00           ; Auto power down counter (M)
0283   8237 E9 7B 0C 00     ANI  (APOW_CTR_L),$00           ; Auto power down counter (L)
0284   823B BE 91 50        SJP  (JMP_9150)                 ; $9150
0285   823E BE 90 DE        SJP  (JMP_90DE)                 ; $90DE
0286   8241 BE 89 63        SJP  (JMP_8963)                 ; $8963
0287   8244 FD C8           PSH  A                          ; 
0288   8246 A5 76 4E        LDA  (DISP_BUFF + $4E)          ; 
0289   8249 BB F7           ORI  A,$F7                      ; 
0290   824B B7 FF           CPI  A,$FF                      ; 
0291   824D 8B 03           BZS  BR_8252                    ; $8252
0292   824F BA 82 71        JMP  BR_8271                    ; $8271
0293   8252             
0294   8252             BR_8252: ; BR $824D
0295   8252 FD 88           PSH  X                          ; 
0296   8254 FD 98           PSH  Y                          ; 
0297   8256 FD A8           PSH  U                          ; 
0298   8258 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0299   825B FD 2A           POP  U                          ; 
0300   825D FD 1A           POP  Y                          ; 
0301   825F FD 0A           POP  X                          ; 
0302   8261 B7 09           CPI  A,$09                      ; 
0303   8263 89 0C           BZR  BR_8271                    ; $8271
0304   8265 EB 76 4E 04     ORI  (DISP_BUFF + $4E),$04      ; 
0305   8269 E9 76 4E F7     ANI  (DISP_BUFF + $4E),$F7      ; 
0306   826D FD 8A           POP  A                          ; 
0307   826F 9E D3           BCH  XCHR_INPUT                 ; $819E
0308   8271             
0309   8271             BR_8271: ; BR $824F, $8263
0310   8271 FD 8A           POP  A                          ; 
0311   8273 B7 1A           CPI  A,$1A                      ; 
0312   8275 89 07           BZR  BR_827E                    ; $827E
0313   8277 BE 8D 41        SJP  (JMP_8D41)                 ; $8D41
0314   827A FD 1A           POP  Y                          ; 
0315   827C 9E E0           BCH  XCHR_INPUT                 ; $819E
0316   827E             
0317   827E             BR_827E: ; BR $8275
0318   827E B7 0B           CPI  A,$0B                      ; 
0319   8280 89 17           BZR  BR_8299                    ; $8299
0320   8282 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0321   8286 B7 28           CPI  A,$28                      ; 
0322   8288 89 0D           BZR  BR_8297                    ; $8297
0323   828A FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0324   828E B7 03           CPI  A,$03                      ; 
0325   8290 81 05           BCR  BR_8297                    ; $8297
0326   8292 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0326   8296 FF 
0327   8297             
0328   8297             BR_8297: ; BR $8288, $8290
0329   8297 B5 0B           LDI  A,$0B                      ; 
0330   8299             
0331   8299             BR_8299: ; BR $8280
0332   8299 B7 0B           CPI  A,$0B                      ; 
0333   829B 89 4D           BZR  BR_82EA                    ; $82EA
0334   829D FD C8           PSH  A                          ; 
0335   829F BE 86 E4        SJP  (JMP_86E4)                 ; $86E4
0336   82A2 83 05           BCS  BR_82A9                    ; $82A9
0337   82A4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; 
0337   82A8 01 
0338   82A9             
0339   82A9             BR_82A9: ; BR $82A2
0340   82A9 FD 8A           POP  A                          ; 
0341   82AB FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF
0341   82AF 01 
0342   82B0 B5 0A           LDI  A,$0A                      ; 
0343   82B2 FD AE 78 00     STA  #(CRTCTRL)                 ; 
0344   82B6 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
0345   82BA FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0346   82BE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0346   82C2 FF 
0347   82C3 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0348   82C7 B7 00           CPI  A,$00                      ; 
0349   82C9 89 08           BZR  BR_82D3                    ; $82D3
0350   82CB BE 91 89        SJP  (JMP_9189)                 ; $9189
0351   82CE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0351   82D2 01 
0352   82D3             
0353   82D3             BR_82D3: ; BR $82C9
0354   82D3 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9
0355   82D7 B7 99           CPI  A,$99                      ; 
0356   82D9 89 0B           BZR  BR_82E6                    ; $82E6
0357   82DB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0357   82DF 01 
0358   82E0 B5 02           LDI  A,$02                      ; 
0359   82E2 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; $77D9
0360   82E6             
0361   82E6             BR_82E6: ; BR $82D9
0362   82E6 B5 0B           LDI  A,$0B                      ; 
0363   82E8 8E D1           BCH  BR_83BB                    ; $83BB
0364   82EA             
0365   82EA             BR_82EA: ; BR $829B
0366   82EA B7 0A           CPI  A,$0A                      ; 
0367   82EC 89 29           BZR  BR_8317                    ; $8317
0368   82EE FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0369   82F2 B7 28           CPI  A,$28                      ; 
0370   82F4 89 1F           BZR  BR_8315                    ; $8315
0371   82F6 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0372   82FA B7 17           CPI  A,$17                      ; 
0373   82FC 81 12           BCR  BR_8310                    ; $8310
0374   82FE BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
0375   8301 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0375   8305 FF 
0376   8306 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0376   830A FF 
0377   830B FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0377   830F FF 
0378   8310             
0379   8310             BR_8310: ; BR $82FC
0380   8310 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; 
0380   8314 01 
0381   8315             
0382   8315             BR_8315: ; BR $82F4
0383   8315 B5 0A           LDI  A,$0A                      ; 
0384   8317             
0385   8317             BR_8317: ; BR $82EC
0386   8317 B7 0A           CPI  A,$0A                      ; 
0387   8319 89 13           BZR  BR_832E                    ; $832E
0388   831B FD C8           PSH  A                          ; 
0389   831D BE 86 FA        SJP  (JMP_86FA)                 ; $86FA
0390   8320 83 05           BCS  BR_8327                    ; $8327
0391   8322 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0391   8326 FF 
0392   8327             
0393   8327             BR_8327: ; BR $8320
0394   8327 FD 8A           POP  A                          ; 
0395   8329 FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF
0395   832D 01 
0396   832E             
0397   832E             BR_832E: ; BR $8319
0398   832E B7 0C           CPI  A,$0C                      ; 
0399   8330 89 11           BZR  BR_8343                    ; $8343
0400   8332 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF
0400   8336 01 
0401   8337 8B 0A           BZS  BR_8343                    ; $8343
0402   8339 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
0402   833D 00 
0403   833E FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0403   8342 FF 
0404   8343             
0405   8343             BR_8343: ; BR $8330, $8337
0406   8343 B7 08           CPI  A,$08                      ; 
0407   8345 89 11           BZR  BR_8358                    ; 
0408   8347 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF
0408   834B 01 
0409   834C 8B 0A           BZS  BR_8358                    ; 
0410   834E FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
0410   8352 00 
0411   8353 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
0411   8357 FF 
0412   8358             
0413   8358             BR_8358: ; BR $8345, $834C
0414   8358 B7 0E           CPI  A,$0E                      ; 
0415   835A 89 05           BZR  BR_8361                    ; $8361
0416   835C FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ; $77D8
0416   8360 00 
0417   8361             
0418   8361             BR_8361: ; BR $835A
0419   8361 B7 1F           CPI  A,$1F                      ; 
0420   8363 89 02           BZR  BR_8367                    ; $8367
0421   8365 8E 04           BCH  BR_836B                    ; $836B
0422   8367             
0423   8367             BR_8367: ; BR $8363
0424   8367 B7 1E           CPI  A,$1E                      ; 
0425   8369 89 09           BZR  BR_8374                    ; $8374
0426   836B             
0427   836B             BR_836B: ; BR $8365
0428   836B FD C8           PSH  A                          ; 
0429   836D BE 8D 41        SJP  (JMP_8D41)                 ; $8D41
0430   8370 FD 8A           POP  A                          ; 
0431   8372 8E 47           BCH  BR_83BB                    ; $83BB
0432   8374             
0433   8374             BR_8374: ; BR $8369
0434   8374 B7 0E           CPI  A,$0E                      ; 
0435   8376 83 09           BCS  BR_8381                    ; $8381
0436   8378 B7 0A           CPI  A,$0A                      ; 
0437   837A 81 05           BCR  BR_8381                    ; $8381
0438   837C BE 83 C6        SJP  (JMP_83C6)                 ; $83C6
0439   837F 8E 3A           BCH  BR_83BB                    ; $83BB
0440   8381             
0441   8381             BR_8381: ; BR $8376,$837A
0442   8381 1A              STA  YL                         ; 
0443   8382 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0444   8386 B7 0D           CPI  A,$0D                      ; 
0445   8388 89 03           BZR  BR_838D                    ; $838D
0446   838A BE 84 2D        SJP  (JMP_842D)                 ; $842D
0447   838D             
0448   838D             BR_838D: ; BR $8388
0449   838D FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0450   8391 B7 0A           CPI  A,$0A                      ; 
0451   8393 89 03           BZR  BR_8398                    ; $8398
0452   8395 BE 84 3B        SJP  (JMP_843B)                 ; $843B
0453   8398             
0454   8398             BR_8398: ; BR $8393
0455   8398 B7 0B           CPI  A,$0B                      ; 
0456   839A 89 03           BZR  BR_839F                    ; 
0457   839C BE 84 3B        SJP  (JMP_843B)                 ; $843B
0458   839F                 
0459   839F             BR_839F:   
0460   839F 14              LDA  YL                         ; 
0461   83A0 E9 7B 0E FD     ANI  (CURS_CTRL),$FD            ; 
0462   83A4 FD C8           PSH  A                          ; 
0463   83A6 B5 55           LDI  A,$55                      ; 
0464   83A8 FD A7 77 E2     CPA  #(VIDEORAM + $07E2)        ; $77E2
0465   83AC 89 0B           BZR  BR_83B9                    ; $83B9
0466   83AE FD 88           PSH  X                          ; 
0467   83B0 FD A8           PSH  U                          ; 
0468   83B2 BE E6 69        SJP  (BCMD_BEEP_STD)            ; 
0469   83B5 FD 2A           POP  U                          ; 
0470   83B7 FD 0A           POP  X                          ; 
0471   83B9             
0472   83B9             BR_83B9: ; BR $83AC
0473   83B9 FD 8A           POP  A                          ; 
0474   83BB             
0475   83BB             BR_83BB: ; BR $82E8,$8372,$837F
0476   83BB FD 1A           POP  Y                          ;
0477   83BD FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
0478   83C1 EB 79 D4 55     ORI  (KB_BYPASS),$55            ; Set KB bypass
0479   83C5 9A              RTN                             ; Done
0480   83C6             ;% LB_xxxx_INPUT END
0481   83C6             ;------------------------------------------------------------------------------------------------------------
0482   83C6             
0483   83C6             
0484   83C6             
0485   83C6             ;------------------------------------------------------------------------------------------------------------
0486   83C6             ; $83C6- xxxx - Finds start of program?
0487   83C6             ; Called from: $837C
0488   83C6             ; Arguments: 
0489   83C6             ; Outputs: 
0490   83C6             ; RegMod: 
0491   83C6             ;------------------------------------------------------------------------------------------------------------
0492   83C6             ;% LB_xxxx START
0493   83C6             JMP_83C6:
0494   83C6 1A              STA  YL                         ; 
0495   83C7 B5 3E           LDI  A,$3E                      ; 
0496   83C9 A7 7B B0        CPA  (IN_BUF)                   ;
0497   83CC 8B 49           BZS  BR_8417                    ; $8417
0498   83CE B5 0D           LDI  A,$0D                      ;
0499   83D0 FD A7 77 D3     CPA  #(VIDEORAM + $07D3)        ; $77D3
0500   83D4 89 0F           BZR  BR_83E5                    ; $83E5
0501   83D6 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0502   83DA B7 50           CPI  A,$50                      ; 
0503   83DC 8B 12           BZS  BR_83F0                    ; $83F0
0504   83DE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0504   83E2 01 
0505   83E3 8E 32           BCH  BR_8417                    ; $8417
0506   83E5                 
0507   83E5             BR_83E5:   
0508   83E5 16              CPA  YL                         ; 
0509   83E6 8B 31           BZS  BR_8419                    ; $8419
0510   83E8 5E 08           CPI  YL,$08                     ; 
0511   83EA 8B 33           BZS  BR_841F                    ; $841F
0512   83EC 5E 0C           CPI  YL,$0C                     ; 
0513   83EE 8B 2F           BZS  BR_841F                    ; $841F
0514   83F0             
0515   83F0             BR_83F0: ; BR $83DC,$841D,$8425,$8428,$844D,$8454
0516   83F0 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0516   83F4 01 
0517   83F5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0518   83F9 B7 28           CPI  A,$28                      ; 
0519   83FB 89 1A           BZR  BR_8417                    ; $8417
0520   83FD FD 98           PSH  Y                          ; 
0521   83FF FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0522   8403 DF              DEC  A                          ; 
0523   8404 18              STA  YH                         ;
0524   8405 5A 28           LDI  YL,$28                     ;
0525   8407 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0526   840A FD 15           LDA  #(Y)                       ;
0527   840C FD 1A           POP  Y                          ;
0528   840E B7 0E           CPI  A,$0E                      ;
0529   8410 81 05           BCR  BR_8417                    ; $8417
0530   8412 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0530   8416 01 
0531   8417             
0532   8417             BR_8417: ; BR $83CC,$83E3,$83FB,$8410,$842B,$8442,$844B,$8452
0533   8417 14              LDA  YL                         ;
0534   8418 9A              RTN                             ; Done
0535   8419             
0536   8419             BR_8419: ; BR $83E6
0537   8419 5E 0D           CPI  YL,$0D                     ;
0538   841B 8B 02           BZS  BR_841F                    ; $841F
0539   841D 9E 2F           BCH  BR_83F0                    ; $83F0
0540   841F             
0541   841F             BR_841F: ; BR $841B
0542   841F FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0543   8423 B7 0A           CPI  A,$0A                      ; 
0544   8425 9B 37           BZS  BR_83F0                    ; $83F0
0545   8427 B7 0B           CPI  A,$0B                      ; 
0546   8429 9B 3B           BZS  BR_83F0                    ; $83F0
0547   842B 9E 16           BCH  BR_8417                    ; $8417
0548   842D             
0549   842D             JMP_842D: ; BR $838A
0550   842D B5 3E           LDI  A,$3E                      ; 
0551   842F A7 7B B0        CPA  (IN_BUF)                   ;
0552   8432 89 01           BZR  BR_8435                    ; $8435
0553   8434 9A              RTN                             ; Done
0554   8435             
0555   8435             BR_8435: ; BR $8432
0556   8435 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0556   8439 01 
0557   843A 9A              RTN                             ; Done
0558   843B             ;% LB_xxxx END
0559   843B             ;------------------------------------------------------------------------------------------------------------
0560   843B             
0561   843B             
0562   843B             
0563   843B             ;------------------------------------------------------------------------------------------------------------
0564   843B             ; $843B- xxxx - 
0565   843B             ; Called from: $8395,$839C
0566   843B             ; Arguments: 
0567   843B             ; Outputs: 
0568   843B             ; RegMod: 
0569   843B             ;------------------------------------------------------------------------------------------------------------
0570   843B             ;% LB_xxxx START
0571   843B             JMP_843B:
0572   843B A5 76 4F        LDA  (DISP_BUFF + $4F)          ; 
0573   843E B9 20           ANI  A,$20                      ; 
0574   8440 B7 20           CPI  A,$20                      ; 
0575   8442 99 2D           BZR  BR_8417                    ; $8417
0576   8444 5E 0A           CPI  YL,$0A                     ; 
0577   8446 89 07           BZR  BR_844F                    ; $844F
0578   8448 BE 86 FA        SJP  (JMP_86FA)                 ;  $86FA
0579   844B 91 36           BCR  BR_8417                    ; $8417
0580   844D 9E 5F           BCH  BR_83F0                    ; $83F0
0581   844F             
0582   844F             BR_844F:  ; BR $8446
0583   844F BE 86 E4        SJP  (JMP_86E4)                 ; $86E4
0584   8452 91 3D           BCR  BR_8417                    ; $8417
0585   8454 9E 66           BCH  BR_83F0                    ; $83F0
0586   8456             
0587   8456             JMP_8456: ; BR $8229
0588   8456 A5 7B B0        LDA  (IN_BUF)                   ; 
0589   8459 B7 3E           CPI  A,$3E                      ; 
0590   845B 8B 01           BZS  BR_845E                    ; $845E
0591   845D 9A              RTN                             ; Done
0592   845E             
0593   845E             BR_845E:  ; BR $845B
0594   845E A5 78 7B        LDA  (CURS_BLNK_POS)            ; $787B - Position of blink character in display, plus 8
0595   8461 B7 09           CPI  A,$09                      ; 
0596   8463 81 01           BCR  BR_8466                    ; $8466
0597   8465 9A              RTN                             ; Done
0598   8466             
0599   8466             BR_8466: ; BR $81E6,$8463,$8949
0600   8466 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0601   846A 18              STA  YH                         ; 
0602   846B 5A 01           LDI  YL,$01                     ; 
0603   846D BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
0604   8470 FD 88           PSH  X                          ; 
0605   8472 48 8E           LDI  XH,$8E                     ; In mystery table
0606   8474 4A B3           LDI  XL,$B3                     ;
0607   8476 68 0D           LDI  UH,$0D                     ; 
0608   8478 B5 40           LDI  A,$40                      ; 
0609   847A A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0610   847D B7 40           CPI  A,$40                      ; 
0611   847F 89 13           BZR  BR_8494                    ; $8494
0612   8481 FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; $77F3
0612   8485 01 
0613   8486 83 05           BCS  BR_848D                    ; $848D
0614   8488 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0614   848C 01 
0615   848D             
0616   848D             BR_848D: ; BR $8486
0617   848D FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0617   8491 00 
0618   8492 8E 27           BCH  BR_84BB                    ; $84BB
0619   8494             
0620   8494             BR_8494: ; BR $847F
0621   8494 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0621   8498 00 
0622   8499 B5 20           LDI  A,$20                      ; 
0623   849B A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0624   849E B7 20           CPI  A,$20                      ; 
0625   84A0 8B 19           BZS  BR_84BB                    ; $84BB
0626   84A2 B5 10           LDI  A,$10                      ; 
0627   84A4 A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0628   84A7 B7 10           CPI  A,$10                      ; 
0629   84A9 89 29           BZR  BR_84D4                    ; $84D4
0630   84AB B5 06           LDI  A,$06                      ; 
0631   84AD FD CA           ADR  X                          ; 
0632   84AF 6A 0D           LDI  UL,$0D                     ; 
0633   84B1 BE 88 FD        SJP  (JMP_88FD)                 ; $88FD
0634   84B4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
0634   84B8 01 
0635   84B9 8E 0A           BCH  BR_84C5                    ; $84C5
0636   84BB             
0637   84BB             BR_84BB:  ; BR $8492,$84A0
0638   84BB B7 20           CPI  A,$20                      ; 
0639   84BD 89 04           BZR  BR_84C3                    ; $84C3
0640   84BF B5 03           LDI  A,$03                      ; 
0641   84C1 FD CA           ADR  X                          ; 
0642   84C3             
0643   84C3             BR_84C3: ; BR $84BD
0644   84C3 6A 02           LDI  UL,$02                     ; 
0645   84C5             
0646   84C5             BR_84C5: ; BR $84B9
0647   84C5 B5 3E           LDI  A,$3E                      ; 
0648   84C7 FD 1E           STA  #(Y)                       ; 
0649   84C9 54              INC  Y                          ; 
0650   84CA BE 8D 64        SJP  (JMP_8D64)                 ; $8D64
0651   84CD BE 89 63        SJP  (JMP_8963)                 ; $8963
0652   84D0 54              INC  Y                          ; 
0653   84D1 A4              LDA  UH                         ; 
0654   84D2 FD 1E           STA  #(Y)                       ; 
0655   84D4             
0656   84D4             BR_84D4: ; BR $84A9
0657   84D4 FD 0A           POP  X                          ;
0658   84D6 9A              RTN                             ; Done
0659   84D7             ;% LB_XCHR_INPUT END
0660   84D7             ;------------------------------------------------------------------------------------------------------------
0661   84D7             
0662   84D7             
0663   84D7             
0664   84D7             ;------------------------------------------------------------------------------------------------------------
0665   84D7             ; $84D7- xxxx - Finds start of program?
0666   84D7             ; Called from: BR $829F,$844F
0667   84D7             ; Arguments: 
0668   84D7             ; Outputs: 
0669   84D7             ; RegMod: 
0670   84D7             ;------------------------------------------------------------------------------------------------------------
0671   84D7             ;% LB_xxxx START
0672   84D7             JMP_84D7: ; BR $819D6,$81FB,$82FE,$875F,$87C8,$8890,$8BA7,$8BEA
0673   84D7 1A              STA  YL
0674   84D8 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0675   84DC B7 28           CPI  A,$28                      ; 
0676   84DE 8B 06           BZS  BR_84E6                    ; $84E6
0677   84E0 5E 19           CPI  YL,$19                     ; 
0678   84E2 89 02           BZR  BR_84E6                    ; $84E6
0679   84E4 14              LDA  YL                         ; 
0680   84E5 9A              RTN                             ; Done
0681   84E6             
0682   84E6             BR_84E6: ; BR $84DE,$84E2
0683   84E6 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
0684   84E9 FD 18           LDX  Y                          ; 
0685   84EB FD CA           ADR  X                          ; 
0686   84ED B7 28           CPI  A,$28                      ; 
0687   84EF 89 0C           BZR  BR_84FD                    ; $84FD
0688   84F1 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
0689   84F5 B7 19           CPI  A,$19                      ; 
0690   84F7 8B 04           BZS  BR_84FD                    ; $84FD
0691   84F9 B5 28           LDI  A,$28                      ; 
0692   84FB FD CA           ADR  X                          ; 
0693   84FD             
0694   84FD             BR_84FD: ; BR $84EF,$84F7
0695   84FD 68 07           LDI  UH,$07                     ; Loop counter
0696   84FF 6A 80           LDI  UL,$80                     ; 
0697   8501             
0698   8501             BR_8501: ; BR $8507,$850B
0699   8501 FD 05           LDA  #(X)                       ; 
0700   8503 FD 1E           STA  #(Y)                       ; 
0701   8505 44              INC  X                          ; 
0702   8506 54              INC  Y                          ; 
0703   8507 88 08           LOP  UL,BR_8501                 ; $8501
0704   8509 FD 62           DEC  UH                         ; 
0705   850B 93 0C           BCS  BR_8501                    ; $8501
0706   850D B5 00           LDI  A,$00                      ; 
0707   850F 6A 4F           LDI  UL,$4F                     ; 
0708   8511             
0709   8511             BR_8511: ; BR $8514
0710   8511 FD 1E           STA  #(Y)                       ; 
0711   8513 54              INC  Y                          ;
0712   8514 88 05           LOP  UL,BR_8511                 ; $8511
0713   8516 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
0714   851A B7 28           CPI  A,$28                      ; 
0715   851C 89 04           BZR  BR_8522                    ; $8522
0716   851E B5 18           LDI  A,$18                      ; 
0717   8520 8E 02           BCH  BR_8524                    ; $8524
0718   8522             
0719   8522             BR_8522: ; BR $851c
0720   8522 B5 19           LDI  A,$19                      ; 
0721   8524             
0722   8524             BR_8524: ; BR $8520
0723   8524 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2
0724   8528 AE 77 4E        STA  (STRING_VARS + $FE)        ; 
0725   852B 9A              RTN                             ; Done
0726   852C             
0727   852C             JMP_852C: ; BR $8223
0728   852C 68 00           LDI  UH,$00                     ; 
0729   852E 6A 4F           LDI  UL,$4F                     ; 
0730   8530 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ; $77D7
0730   8534 00 
0731   8535             
0732   8535             BR_8535: ; BR $85B3,$8600
0733   8535 BE 88 54        SJP  (JMP_8854)                 ; $8854
0734   8538 14              LDA  YL                         ; 
0735   8539 FD A7 77 D4     CPA  #(VIDEORAM + $07D4)        ; $77D4
0736   853D 89 17           BZR  BR_8556                    ; $8556
0737   853F FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D5
0738   8543 B7 00           CPI  A,$00                      ; 
0739   8545 89 0F           BZR  BR_8556                    ; $8556
0740   8547 84              LDA  XH                         ; 
0741   8548 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4
0742   854C 04              LDA  XL                         ; 
0743   854D FD AE 77 D5     STA  #(VIDEORAM + $07D5)        ; $77D5
0744   8551 FD EB 77 D6     ORI  #(VIDEORAM + $07D6),$01    ; $77D6
0744   8555 01 
0745   8556             
0746   8556             BR_8556: ; BR $853D,$8545
0747   8556 FD A8           PSH  U                          ; 
0748   8558 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
0749   8559 81 60           BCR  BR_85BB                    ; $85BB
0750   855B FD 98           PSH  Y                          ; 
0751   855D FD 88           PSH  X                          ; 
0752   855F 58 7B           LDI  YH,HB(RND_VAL)             ; $7B
0753   8561 5A 00           LDI  YL,LB(RND_VAL)             ; $00
0754   8563 FD 98           PSH  Y                          ; 
0755   8565 CD 1C           VMJ  ($1C) \ ABYT($02)          ; 
0755   8567 02          
0756   8568 BE 86 56        SJP  (BR_8656)                  ; $8656
0757   856B FD 0A           POP  X                          ; 
0758   856D 59 00           ANI  (Y),$00                    ; 
0759   856F B7 00           CPI  A,$00                      ; 
0760   8571 89 03           BZR  BR_8576                    ; $8576
0761   8573 B5 FE           LDI  A,$FE                      ; 
0762   8575 0E              STA  (X)                        ; 
0763   8576             
0764   8576             BR_8576: ; BR $8571
0765   8576 14              LDA  YL                         ; 
0766   8577 2A              STA  UL                         ; 
0767   8578 FD 1A           POP  Y                          ; 
0768   857A             
0769   857A             BR_857A: ; BR $85A4
0770   857A 45              LIN  X                          ; 
0771   857B FD 1E           STA  #(Y)                       ; 
0772   857D 54              INC  Y                          ; 
0773   857E FD C8           PSH  A                          ; 
0774   8580 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0775   8584 B7 01           CPI  A,$01                      ;
0776   8586 8B 04           BZS  BR_858C                    ; $858C
0777   8588 FD 8A           POP  A                          ; 
0778   858A 8E 09           BCH  BR_8595                    ; $8595
0779   858C             
0780   858C             BR_858C: ; BR $8586
0781   858C FD 8A           POP  A                          ; 
0782   858E B7 0D           CPI  A,$0D                      ; 
0783   8590 89 03           BZR  BR_8595                    ; $8595
0784   8592 F9              REC                             ; 
0785   8593 8E 21           BCH  BR_85B6                    ; $85B6
0786   8595             
0787   8595             BR_8595: ; BR $858A,$8590
0788   8595 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0788   8599 01 
0789   859A BE 87 E7        SJP  (JMP_87E7)                 ; $87E7
0790   859D 83 17           BCS  BR_85B6                    ; $85B6
0791   859F B7 FF           CPI  A,$FF                      ; 
0792   85A1 89 01           BZR  BR_85A4                    ; $85A4
0793   85A3 56              DEC  Y                          ; 
0794   85A4             
0795   85A4             BR_85A4: ; BR $85A1
0796   85A4 88 2C           LOP  UL,BR_857A ; $857A
0797   85A6 FD 62           DEC  UH                         ; 
0798   85A8 FD 62           DEC  UH                         ; 
0799   85AA A4              LDA  UH                         ; 
0800   85AB FD 18           LDX  Y                          ; 
0801   85AD FD 1A           POP  Y                          ; 
0802   85AF FD 2A           POP  U                          ; 
0803   85B1 DD              INC  A                          ; 
0804   85B2 2A              STA  UL                         ; 
0805   85B3 88 80           LOP  UL,BR_8535                 ; $8535
0806   85B5 9A              RTN                             ; Done
0807   85B6             
0808   85B6             BR_85B6: ; BR $8593,$859D
0809   85B6 FD 1A           POP  Y                          ; 
0810   85B8 FD 2A           POP  U                          ; 
0811   85BA 9A              RTN                             ; Done
0812   85BB             
0813   85BB             BR_85BB: ; BR $8559
0814   85BB FD 2A           POP  U                          ; 
0815   85BD 6E 4B           CPI  UL,$4B                     ;
0816   85BF 81 03           BCR  BR_85C4                    ; $85C4
0817   85C1 BE 86 04        SJP  (BR_8604)                  ; $8604
0818   85C4             
0819   85C4             BR_85C4: ; BR $85BF
0820   85C4 FD 0E           STA  #(X)                       ; 
0821   85C6 44              INC  X                          ; 
0822   85C7 FD C8           PSH  A                          ; 
0823   85C9 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0824   85CD B7 01           CPI  A,$01                      ; 
0825   85CF 8B 04           BZS  BR_85D5                    ; $85D5
0826   85D1 FD 8A           POP  A                          ; 
0827   85D3 8E 1B           BCH  BR_85F0                    ; $85F0
0828   85D5             
0829   85D5             BR_85D5: ; BR $85CF
0830   85D5 FD 8A           POP  A                          ; 
0831   85D7 B7 0D           CPI  A,$0D                      ; 
0832   85D9 89 15           BZR  BR_85F0                    ; $85F0
0833   85DB FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0834   85DF B7 18           CPI  A,$18                      ; 
0835   85E1 8B 06           BZS  BR_85E9                    ; $85E9
0836   85E3 46              DEC  X                          ; 
0837   85E4 46              DEC  X                          ; 
0838   85E5 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF
0839   85E8 9A              RTN                             ; Done
0840   85E9             
0841   85E9             BR_85E9: ; BR $85E1
0842   85E9 FD 05           LDA  #(X)                       ; 
0843   85EB B7 0E           CPI  A,$0E                      ; 
0844   85ED 83 01           BCS  BR_85F0                    ; 
0845   85EF 9A              RTN                             ; Done
0846   85F0             
0847   85F0             BR_85F0: ; BR $85D3,$85D9
0848   85F0 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0848   85F4 01 
0849   85F5 BE 87 E7        SJP  (JMP_87E7)                 ; $87E7
0850   85F8 81 01           BCR  BR_85FB                    ; $85FB
0851   85FA 9A              RTN                             ; Done
0852   85FB             
0853   85FB             BR_85FB: ; BR $85F8
0854   85FB B7 FF           CPI  A,$FF                      ; 
0855   85FD 89 01           BZR  BR_8600                    ; $8600
0856   85FF 46              DEC  X                          ; 
0857   8600             
0858   8600             BR_8600: ; BR $85FD
0859   8600 88 CD           LOP  UL,BR_8535                 ; $8535
0860   8602 F9              REC                             ; 
0861   8603 9A              RTN                             ; Done
0862   8604             ;% LB_xxxx END
0863   8604             ;------------------------------------------------------------------------------------------------------------
0864   8604             
0865   8604             
0866   8604             
0867   8604             ;------------------------------------------------------------------------------------------------------------
0868   8604             ; $86E4 - xxxx - Finds start of program?
0869   8604             ; Called from: BR $829F,$844F
0870   8604             ; Arguments: 
0871   8604             ; Outputs: 
0872   8604             ; RegMod: 
0873   8604             ;------------------------------------------------------------------------------------------------------------
0874   8604             ;% LB_xxxx START
0875   8604             BR_8604: ; BR $85C1
0876   8604 6C FF           CPI  UH,$FF                     ; 
0877   8606 89 01           BZR  BR_8609                    ; $8609
0878   8608 9A              RTN                             ; Done
0879   8609             
0880   8609             BR_8609: ; BR $8606
0881   8609 B7 3A           CPI  A,$3A                      ; 
0882   860B 81 03           BCR  BR_8610                    ; $8610
0883   860D             
0884   860D             BR_860D: ; BR $8612,$861F,$862A
0885   860D 68 FF           LDI  UH,$FF                     ; 
0886   860F 9A              RTN                             ; Done
0887   8610             
0888   8610             BR_8610: ; BR $860B
0889   8610 B7 30           CPI  A,$30                      ; 
0890   8612 91 07           BCR  BR_860D                    ; $860D
0891   8614 FD C8           PSH  A                          ; 
0892   8616 B5 40           LDI  A,$40                      ; 
0893   8618 A7 78 80        CPA  (DISPARAM)                 ; Display Parameter: determines display at READY
0894   861B 89 04           BZR  BR_8621                    ; $8621
0895   861D FD 8A           POP  A                          ; 
0896   861F 9E 14           BCH  BR_860D                    ; $860D
0897   8621             
0898   8621             BR_8621: ; BR $861B
0899   8621 B5 20           LDI  A,$20                      ; 
0900   8623 A7 78 80        CPA  (DISPARAM)                 ; Display Parameter: determines display at READY
0901   8626 89 04           BZR  BR_862C                    ; $862C
0902   8628 FD 8A           POP  A                          ; 
0903   862A 9E 1F           BCH  BR_860D                    ; $860D
0904   862C             
0905   862C             BR_862C: ; BR $8626
0906   862C B5 50           LDI  A,$50                      ; 
0907   862E FB              SEC                             ; 
0908   862F 20              SBC  UL                         ; 
0909   8630 FD A8           PSH  U                          ; 
0910   8632 68 7A           LDI  UH,HB(ARZ)                 ; $7A
0911   8634 6A 08           LDI  UL,LB(ARZ)                 ; $08
0912   8636 FD EA           ADR  U                          ; 
0913   8638 25              LDA  (U)                        ; 
0914   8639 FD 2A           POP  U                          ; 
0915   863B B7 3A           CPI  A,$3A                      ; 
0916   863D 8B 07           BZS  BR_8646                    ; $8646
0917   863F B7 20           CPI  A,$20                      ; 
0918   8641 8B 03           BZS  BR_8646                    ; $8646
0919   8643 FD 8A           POP  A                          ; 
0920   8645 9A              RTN                             ; Done
0921   8646             
0922   8646             BR_8646: ; BR $863D,$8641
0923   8646 28              STA  UH                         ; 
0924   8647 FD 8A           POP  A                          ; 
0925   8649 FD 0E           STA  #(X)                       ; 
0926   864B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0926   864F 01 
0927   8650 44              INC  X                          ; 
0928   8651 62              DEC  UL                         ; 
0929   8652 A4              LDA  UH                         ; 
0930   8653 68 FF           LDI  UH,$FF                     ; 
0931   8655 9A              RTN                             ; Done
0932   8656             
0933   8656             BR_8656:
0934   8656 FD 48           LDX  S                          ; 
0935   8658 FD C8           PSH  A                          ; 
0936   865A B5 0A           LDI  A,$0A                      ; 
0937   865C FD CA           ADR  X                          ; 
0938   865E 05              LDA  (X)                        ; 
0939   865F 28              STA  UH                         ; 
0940   8660 FD 8A           POP  A                          ; 
0941   8662 9A              RTN                             ; Done
0942   8663             
0943   8663             JMP_8663: ; BR $8226
0944   8663 A5 78 80        LDA  (DISPARAM)                 ; Display Parameter: determines display at READY
0945   8666 B7 80           CPI  A,$80                      ; 
0946   8668 89 03           BZR  BR_866D                    ; $866D
0947   866A BA 89 63        JMP  JMP_8963                   ; $8963
0948   866D             
0949   866D             BR_866D: ; BR $8668
0950   866D B7 A0           CPI  A,$A0                      ; 
0951   866F 89 03           BZR  BR_8674                    ; $8674
0952   8671 BA 89 63        JMP  JMP_8963                   ; $8963
0953   8674             
0954   8674             BR_8674: ; BR $866F
0955   8674 B7 01           CPI  A,$01                      ; 
0956   8676 89 03           BZR  BR_867B                    ; $867B
0957   8678 BA 89 63        JMP  JMP_8963                   ; $8963
0958   867B             
0959   867B             
0960   867B             BR_867B: ; BR $8676
0961   867B FD A5 77 D4     LDA  #(VIDEORAM + $07D4)        ; $77D4
0962   867F 18              STA  YH                         ; 
0963   8680 FD A5 77 D5     LDA  #(VIDEORAM + $07D5)        ; $77D5
0964   8684 1A              STA  YL                         ; 
0965   8685 B5 0E           LDI  A,$0E                      ; 
0966   8687 FD AE 78 00     STA  #(CRTCTRL)                 ; 
0967   868B 94              LDA  YH                         ; 
0968   868C FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0969   8690 B5 0F           LDI  A,$0F                      ; 
0970   8692 FD AE 78 00     STA  #(CRTCTRL)                 ; 
0971   8696 14              LDA  YL                         ; 
0972   8697 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0973   869B FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
0974   869F FD 88           PSH  X                          ; 
0975   86A1 FD C8           PSH  A                          ; 
0976   86A3 48 8E           LDI  XH,$8E                     ; 
0977   86A5 4A A1           LDI  XL,$A1                     ; 
0978   86A7 B5 1C           LDI  A,$1C                      ; 
0979   86A9 FD CA           ADR  X                          ; 
0980   86AB ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
0981   86AF 8B 05           BZS  BR_86B6                    ; $86B6
0982   86B1 FD EB 77 DA     ORI  #(VIDEORAM + $07DA),$40    ; $77DA
0982   86B5 40 
0983   86B6             
0984   86B6             BR_86B6: ; BR $8668
0985   86B6 ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
0986   86BA 89 05           BZR  BR_86C1                    ; $86C1
0987   86BC FD E9 77 DA     ANI  #(VIDEORAM + $07DA),$BF    ; $77DA
0987   86C0 BF 
0988   86C1             
0989   86C1             BR_86C1: ; BR $86BA
0990   86C1 B5 0A           LDI  A,$0A                      ; 
0991   86C3 FD AE 78 00     STA  #(CRTCTRL)                 ; 
0992   86C7 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA
0993   86CB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0994   86CF B5 0B           LDI  A,$0B                      ; 
0995   86D1 FD AE 78 00     STA  #(CRTCTRL)                 ; 
0996   86D5 FD A5 77 DB     LDA  #(VIDEORAM + $07DB)        ; $77DB
0997   86D9 B9 1F           ANI  A,$1F                      ; 
0998   86DB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0999   86DF FD 8A           POP  A                          ; 
1000   86E1 FD 0A           POP  X                          ; 
1001   86E3 9A              RTN                             ; Done
1002   86E4             ;% LB_xxxx END
1003   86E4             ;------------------------------------------------------------------------------------------------------------
1004   86E4             
1005   86E4             
1006   86E4             
1007   86E4             ;------------------------------------------------------------------------------------------------------------
1008   86E4             ; $86E4 - xxxx - Finds start of program?
1009   86E4             ; Called from: BR $829F,$844F
1010   86E4             ; Arguments: 
1011   86E4             ; Outputs: 
1012   86E4             ; RegMod: 
1013   86E4             ;------------------------------------------------------------------------------------------------------------
1014   86E4             ;% LB_xxxx START
1015   86E4             JMP_86E4: 
1016   86E4 A5 78 65        LDA  (BASPRG_ST_H)              ; Start of Basic program in RAM (H)
1017   86E7 A7 78 A6        CPA  (SRCH_ADD_H)               ; Address of linefound during search (H)
1018   86EA 8B 02           BZS  BR_86EE                    ; $86EE
1019   86EC FB              SEC                             ; 
1020   86ED 9A              RTN                             ; Done
1021   86EE             
1022   86EE             BR_86EE: ; BR $86EA
1023   86EE A5 78 66        LDA  (BASPRG_ST_L)              ; Start of Basic program in RAM (L)
1024   86F1 A7 78 A7        CPA  (SRCH_ADD_L)               ; Address of linefound during search (L)
1025   86F4 8B 02           BZS  BR_86F8                    ; $86F8
1026   86F6 FB              SEC                             ; 
1027   86F7 9A              RTN                             ; Done
1028   86F8             
1029   86F8             BR_86F8: ; BR $86F4
1030   86F8 F9              REC                             ; 
1031   86F9 9A              RTN                             ; Done
1032   86FA             ;% LB_xxxx END
1033   86FA             ;------------------------------------------------------------------------------------------------------------
1034   86FA             
1035   86FA             
1036   86FA             
1037   86FA             ;------------------------------------------------------------------------------------------------------------
1038   86FA             ; xxxx
1039   86FA             ; Called from: 
1040   86FA             ; Arguments: 
1041   86FA             ; Outputs: 
1042   86FA             ; RegMod: 
1043   86FA             ;------------------------------------------------------------------------------------------------------------
1044   86FA             ;% LB_xxxx START
1045   86FA             JMP_86FA: ; BR $831D,$8448
1046   86FA FD 88           PSH  X                          ; 
1047   86FC A5 78 A6        LDA  (SRCH_ADD_H)               ; Address of linefound during search (H)
1048   86FF 08              STA  XH                         ; 
1049   8700 A5 78 A7        LDA  (SRCH_ADD_L)               ; Address of linefound during search (L)
1050   8703 0A              STA  XL                         ; 
1051   8704 44              INC  X                          ; 
1052   8705 44              INC  X                          ; 
1053   8706 45              LIN  X                          ; 
1054   8707 FD CA           ADR  X                          ; 
1055   8709 A5 78 67        LDA  (BASPRG_END_H)             ; End of Basic program in RAM (H)
1056   870C 86              CPA  XH                         ; Is search at end of program HB??
1057   870D 8B 04           BZS  BR_8713                    ; $8713
1058   870F FD 0A           POP  X                          ; 
1059   8711 FB              SEC                             ; 
1060   8712 9A              RTN                             ; Done
1061   8713             
1062   8713             BR_8713: ; BR $870D
1063   8713 A5 78 68        LDA  (BASPRG_END_L)             ; End of Basic program in RAM (L)
1064   8716 06              CPA  XL                         ; Is search at end of program LB??
1065   8717 8B 04           BZS  BR_871D                    ; $871D
1066   8719 FD 0A           POP  X                          ; 
1067   871B FB              SEC                             ; 
1068   871C 9A              RTN                             ; Done
1069   871D             
1070   871D             BR_871D: ; BR $8717
1071   871D FD 0A           POP  X                          ; 
1072   871F F9              REC                             ; 
1073   8720 9A              RTN                             ; Done
1074   8721             ;% LB_xxxx END
1075   8721             ;------------------------------------------------------------------------------------------------------------
1076   8721             
1077   8721             
1078   8721             
1079   8721             ;------------------------------------------------------------------------------------------------------------
1080   8721             ; xxxx
1081   8721             ; Called from: 
1082   8721             ; Arguments: 
1083   8721             ; Outputs: 
1084   8721             ; RegMod: 
1085   8721             ;------------------------------------------------------------------------------------------------------------
1086   8721             ;% LB_xxxx START
1087   8721             JMP_8721: ; BR $822C
1088   8721 A5 78 80        LDA  (DISPARAM)                 ; 
1089   8724 FD C8           PSH  A                          ; 
1090   8726 B7 20           CPI  A,$20                      ; Space?
1091   8728 8B 28           BZS  BR_8752                    ; $8752
1092   872A B7 80           CPI  A,$80                      ; 
1093   872C 8B 24           BZS  BR_8752                    ; $8752
1094   872E B7 A0           CPI  A,$A0                      ; 
1095   8730 8B 20           BZS  BR_8752                    ; $8752
1096   8732 B7 01           CPI  A,$01                      ; 
1097   8734 8B 1C           BZS  BR_8752                    ; $8752
1098   8736 FD 8A           POP  A                          ; 
1099   8738 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
1100   873C B7 0D           CPI  A,$0D                      ; 
1101   873E 8B 01           BZS  BR_8741                    ; $8741
1102   8740 9A              RTN                             ; Done
1103   8741             
1104   8741             BR_8741: ; BR $873E
1105   8741 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1106   8745 B7 28           CPI  A,$28                      ; 
1107   8747 8B 01           BZS  BR_874A                    ; $874A
1108   8749 9A              RTN                             ; Done
1109   874A             
1110   874A             BR_874A: ; BR $8747
1111   874A A5 7B D7        LDA  (IN_BUF + $27)             ; 
1112   874D B7 0D           CPI  A,$0D                      ; CR?
1113   874F 89 6A           BZR  BR_87BB                    ; $87BB
1114   8751 9A              RTN                             ; Done
1115   8752             
1116   8752             BR_8752: ; BR $8728,$872C,$8730,$8734
1117   8752 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
1117   8756 01 
1118   8757 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
1119   875B B7 19           CPI  A,$19                      ; 
1120   875D 81 03           BCR  BR_8762                    ; $8762
1121   875F BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1122   8762             
1123   8762             BR_8762: ; BR $875D
1124   8762 BE 87 D4        SJP  (JMP_87D4)                 ; $87D4
1125   8765 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
1126   8769 18              STA  YH                         ; 
1127   876A 5A 01           LDI  YL,$01                     ; 
1128   876C BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1129   876F 6A 4F           LDI  UL,$4F                     ; 
1130   8771 FD 8A           POP  A                          ; 
1131   8773 B7 20           CPI  A,$20                      ; 
1132   8775 89 06           BZR  BR_877D                    ; $877D
1133   8777 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
1134   8779 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
1135   877B 8E 0C           BCH  BR_8789                    ; $8789
1136   877D             
1137   877D             BR_877D: ; BR $8775
1138   877D 48 7A           LDI  XH,$7A                     ; ARZ?
1139   877F 4A 10           LDI  XL,$10                     ; 
1140   8781 6A 19           LDI  UL,$19                     ; Loop counter?
1141   8783 B5 0D           LDI  A,$0D                      ; 
1142   8785 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
1143   8789             
1144   8789             BR_8789: ; BR $877B
1145   8789 68 00           LDI  UH,$00                     ; 
1146   878B             
1147   878B             BR_878B: ; BR $
1148   878B 45              LIN  X                          ; 
1149   878C B7 00           CPI  A,$00                      ; 
1150   878E 8B 0D           BZS  BR_879D                    ; $879D
1151   8790 6C 02           CPI  UH,$02                     ; 
1152   8792 8B 09           BZS  BR_879D                    ; $879D
1153   8794 68 01           LDI  UH,$01                     ; 
1154   8796 FD 1E           STA  #(Y)                       ; 
1155   8798 54              INC  Y                          ; 
1156   8799             
1157   8799             BR_8799: ; BR $8799
1158   8799 88 10           LOP  UL,BR_878B                 ; $878B
1159   879B 8E 08           BCH  BR_87A5                    ; $87A5
1160   879D             
1161   879D             BR_879D: ; BR $878E,$8792
1162   879D 6C 01           CPI  UH,$01                     ; 
1163   879F 89 02           BZR  BR_87A3                    ; $87A3
1164   87A1 FD 60           INC  UH                         ;
1165   87A3             
1166   87A3             BR_87A3: ; BR $879F
1167   87A3 9E 0C           BCH  BR_8799                    ; $8799
1168   87A5             
1169   87A5             BR_87A5: ; BR $879B
1170   87A5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1171   87A9 B7 28           CPI  A,$28                      ;
1172   87AB 8B 01           BZS  BR_87AE                    ; $87AE
1173   87AD 9A              RTN                             ; Done
1174   87AE             
1175   87AE             BR_87AE: ; BR $87AB
1176   87AE 4C 7B           CPI  XH,$7B                     ; 
1177   87B0 8B 01           BZS  BR_87B3                    ; $87B3
1178   87B2 9A              RTN                             ; Done
1179   87B3             
1180   87B3             BR_87B3: ; BR $87B0                 
1181   87B3 A5 7B 87        LDA  (OUT_BUF + $27)            ; 
1182   87B6 B7 00           CPI  A,$00                      ; 
1183   87B8 89 01           BZR  BR_87BB                    ; $87BB
1184   87BA 9A              RTN                             ; Done
1185   87BB             
1186   87BB             BR_87BB: ; BR $874F,$87B8,$8791,$87E5
1187   87BB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2
1187   87BF 01 
1188   87C0 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
1189   87C4 B7 19           CPI  A,$19                      ; 
1190   87C6 81 03           BCR  BR_87CB                    ; $87CB
1191   87C8 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1192   87CB             
1193   87CB             BR_87CB: ; BR $87C6
1194   87CB 9A              RTN                             ; Done
1195   87CC             
1196   87CC             
1197   87CC             JMP_87CC: ; BR $81F1
1198   87CC A5 7B B0        LDA  (IN_BUF)                   ; 
1199   87CF B7 3E           CPI  A,$3E                      ; 
1200   87D1 9B 18           BZS  BR_87BB                    ; $87BB
1201   87D3 9A              RTN                             ; Done
1202   87D4             
1203   87D4             JMP_87D4: ; BR $8762
1204   87D4 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1205   87D8 B7 28           CPI  A,$28                      ; 
1206   87DA 8B 01           BZS  BR_87DD                    ; $87DD
1207   87DC 9A              RTN                             ; Done
1208   87DD             
1209   87DD             BR_87DD: ; BR $87DA
1210   87DD A5 7B D8        LDA  (IN_BUF + $28)             ; 
1211   87E0 B7 0D           CPI  A,$0D                      ; 
1212   87E2 89 01           BZR  BR_87E5                    ; $87E5
1213   87E4 9A              RTN                             ; Done
1214   87E5             
1215   87E5             BR_87E5: ; BR $87E2
1216   87E5 9E 2C           BCH  BR_87BB                    ; $87BB
1217   87E7             ;% LB_xxxx END
1218   87E7             ;------------------------------------------------------------------------------------------------------------
1219   87E7             
1220   87E7             
1221   87E7             
1222   87E7             ;------------------------------------------------------------------------------------------------------------
1223   87E7             ; xxxx
1224   87E7             ; Called from: 
1225   87E7             ; Arguments: 
1226   87E7             ; Outputs: 
1227   87E7             ; RegMod: 
1228   87E7             ;------------------------------------------------------------------------------------------------------------
1229   87E7             ;% LB_xxxx START
1230   87E7             JMP_87E7: ; BR $859A,$85F5
1231   87E7 FD A5 77 D7     LDA  #(VIDEORAM + $07D7)        ; $77D7
1232   87EB B7 50           CPI  A,$50                      ; 
1233   87ED 83 01           BCS  BR_87F0                    ; $87F0
1234   87EF 9A              RTN                             ; Done
1235   87F0             
1236   87F0             BR_87F0: ; BR $87ED
1237   87F0 A5 78 80        LDA  (DISPARAM)                 ; 
1238   87F3 B7 50           CPI  A,$50                      ; 
1239   87F5 8B 06           BZS  BR_87FD                    ; $87FD
1240   87F7 B7 54           CPI  A,$54                      ; 
1241   87F9 8B 02           BZS  BR_87FD                    ; $87FD
1242   87FB FB              SEC                             ; 
1243   87FC 9A              RTN                             ; Done
1244   87FD             
1245   87FD             BR_87FD: ; BR $87F5,$87F9
1246   87FD FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D6
1247   8801 B7 01           CPI  A,$01                      ; 
1248   8803             
1249   8803             BR_8803: ; BR $91C1
1250   8803 89 02           BZR  BR_8807                    ; $8807
1251   8805 FB              SEC                             ; 
1252   8806 9A              RTN                             ; Done
1253   8807             
1254   8807             BR_8807: ; BR $8803
1255   8807 FD 88           PSH  X                          ; 
1256   8809 FD 98           PSH  Y                          ; 
1257   880B FD A8           PSH  U                          ; 
1258   880D FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
1259   8811 18              STA  YH                         ; 
1260   8812 5A 01           LDI  YL,$01                     ; 
1261   8814 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1262   8818 B7 01           CPI  A,$01                      ; 
1263   881A 89 08           BZR  BR_8824                    ; $8824
1264   881C A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1265   881F 18              STA  YH                         ; 
1266   8820 A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
1267   8823 1A              STA  YL                         ; 
1268   8824             
1269   8824             BR_8824: ; BR $881A
1270   8824 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1271   8827 48 7B           LDI  XH,HB(IN_BUF)              ; $7B
1272   8829 4A B0           LDI  XL,LB(IN_BUF)              ; $B0
1273   882B 6A 4F           LDI  UL,$4F                     ; 
1274   882D                 
1275   882D             BR_882D:   
1276   882D 45              LIN  X                          ; 
1277   882E 54              INC  Y                          ; 
1278   882F B7 30           CPI  A,$30                      ; 
1279   8831 81 06           BCR  BR_8839                    ; $8839
1280   8833 B7 3A           CPI  A,$3A                      ; 
1281   8835 83 02           BCS  BR_8839                    ; $8839
1282   8837 88 0C           LOP  UL,BR_882D                 ; 
1283   8839             
1284   8839             BR_8839: ; BR $8331,$8335
1285   8839 FD 18           LDX  Y                          ; 
1286   883B 54              INC  Y                          ; 
1287   883C 62              DEC  UL                         ; 
1288   883D             
1289   883D             BR_883D: ; BR $8843
1290   883D FD 15           LDA  #(Y)                       ; 
1291   883F 54              INC  Y                          ; 
1292   8840 FD 0E           STA  #(X)                       ; 
1293   8842 44              INC  X                          ; 
1294   8843 88 08           LOP  UL,BR_883D                 ; $883D
1295   8845 FD 2A           POP  U                          ; 
1296   8847 FD 1A           POP  Y                          ; 
1297   8849 FD 0A           POP  X                          ; 
1298   884B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$FF    ; $77
1298   884F FF 
1299   8850 B5 FF           LDI  A,$FF                      ; 
1300   8852 F9              REC                             ; 
1301   8853 9A              RTN                             ; Done
1302   8854             
1303   8854             
1304   8854             JMP_8854: ; BR $8835
1305   8854 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1306   8858 B7 01           CPI  A,$01                      ; 
1307   885A 8B 01           BZS  BR_885D                    ; $885D
1308   885C 9A              RTN                             ; Done
1309   885D             
1310   885D             BR_885D: ; BR $885A
1311   885D A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1312   8860 B7 16           CPI  A,$16                      ; 
1313   8862 83 01           BCS  BR_8865                    ; $8865
1314   8864 9A              RTN                             ; Done
1315   8865             
1316   8865             BR_8865: ; BR $8862
1317   8865 FD 98           PSH  Y                          ; 
1318   8867 FD A8           PSH  U                          ; 
1319   8869 FD 88           PSH  X                          ; 
1320   886B 04              LDA  XL                         ; 
1321   886C FB              SEC                             ; 
1322   886D A1 70 01        SBC  (SHADOW_RAM + $01)         ; 
1323   8870 0A              STA  XL                         ; 
1324   8871 84              LDA  XH                         ; 
1325   8872 A1 70 00        SBC  (SHADOW_RAM)               ; 
1326   8875 08              STA  XH                         ; 
1327   8876 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1328   887A B7 50           CPI  A,$50                      ; 
1329   887C 89 08           BZR  BR_8886                    ; $8886
1330   887E 4C 07           CPI  XH,$07                     ; 
1331   8880 89 02           BZR  BR_8884                    ; $8884
1332   8882 4E D0           CPI  XL,$D0                     ; 
1333   8884             
1334   8884             BR_8884: ; BR $8880
1335   8884 8E 06           BCH  BR_888C                    ; $888C
1336   8886             
1337   8886             BR_8886: ; BR $887C
1338   8886 4C 03           CPI  XH,$03                     ;
1339   8888 89 02           BZR  BR_888C                    ; $888C
1340   888A 4E E8           CPI  XL,$E8                     ;
1341   888C             
1342   888C             BR_888C: ; BR $8884,$8888
1343   888C 81 20           BCR  BR_88AE                    ; $88AE
1344   888E B5 1A           LDI  A,$1A                      ; 
1345   8890 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1346   8893 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1347   8896 18              STA  YH                         ;
1348   8897 5A 01           LDI  YL,$01                     ;
1349   8899 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1350   889C FD 0A           POP  X                          ; 
1351   889E FD 98           PSH  Y                          ; 
1352   88A0 BE 88 B5        SJP  (JMP_88B5)                 ; $88B5
1353   88A3 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1354   88A7 B7 50           CPI  A,$50                      ;
1355   88A9 8B 03           BZS  BR_88AE                    ; $88AE
1356   88AB BE 88 B5        SJP  (JMP_88B5)                 ; $88B5
1357   88AE             
1358   88AE             BR_88AE: ; BR $888C,$88A9
1359   88AE FD 0A           POP  X                          ; 
1360   88B0 FD 2A           POP  U                          ; 
1361   88B2 FD 1A           POP  Y                          ; 
1362   88B4 9A              RTN                             ; Done
1363   88B5             ;% LB_xxxx END
1364   88B5             ;------------------------------------------------------------------------------------------------------------
1365   88B5             
1366   88B5             
1367   88B5             
1368   88B5             ;------------------------------------------------------------------------------------------------------------
1369   88B5             ; xxxx
1370   88B5             ; Called from: 
1371   88B5             ; Arguments: 
1372   88B5             ; Outputs: 
1373   88B5             ; RegMod: 
1374   88B5             ;------------------------------------------------------------------------------------------------------------
1375   88B5             ;% LB_xxxx START
1376   88B5             JMP_88B5: ; BR $88A0,$88AB
1377   88B5 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
1377   88B9 FF 
1378   88BA EF 77 4E FF     ADI  (STRING_VARS + $FE),$FF    ; 
1379   88BE 9A              RTN                             ; Done
1380   88BF                 ;% LB_xxxx END
1381   88BF             ;------------------------------------------------------------------------------------------------------------
1382   88BF             
1383   88BF             
1384   88BF             
1385   88BF             ;------------------------------------------------------------------------------------------------------------
1386   88BF             ; xxxx
1387   88BF             ; Called from: 
1388   88BF             ; Arguments: 
1389   88BF             ; Outputs: 
1390   88BF             ; RegMod: 
1391   88BF             ;------------------------------------------------------------------------------------------------------------
1392   88BF             ;% LB_xxxx START
1393   88BF             JMP_88BF: ; BR $85E5,$8C17
1394   88BF 04              LDA  XL                         ; 
1395   88C0 FB              SEC                             ; 
1396   88C1 A1 70 01        SBC  (SHADOW_RAM + $01)         ; 
1397   88C4 0A              STA  XL                         ; 
1398   88C5 84              LDA  XH                         ; 
1399   88C6 A1 70 00        SBC  (SHADOW_RAM)               ; 
1400   88C9 08              STA  XH                         ; 
1401   88CA 6A 01           LDI  UL,$01                     ; 
1402   88CC             
1403   88CC             BR_88CC: ; BR $88E3
1404   88CC 60              INC  UL                         ; 
1405   88CD FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1406   88D1 4C 00           CPI  XH,$00                     ; 
1407   88D3 89 05           BZR  BR_88DA                    ; $88DA
1408   88D5 06              CPA  XL                         ; 
1409   88D6 8B 02           BZS  BR_88DA                    ; $88DA
1410   88D8 83 0B           BCS  BR_88E5                    ; $88E5
1411   88DA             
1412   88DA             BR_88DA: ; BR $88D3,$88D6
1413   88DA 28              STA  UH                         ; 
1414   88DB 04              LDA  XL                         ; 
1415   88DC FB              SEC                             ; 
1416   88DD A0              SBC  UH                         ; 
1417   88DE 0A              STA  XL                         ; 
1418   88DF 84              LDA  XH                         ; 
1419   88E0 B1 00           SBI  A,$00                      ;
1420   88E2 08              STA  XH                         ; 
1421   88E3 9E 19           BCH  BR_88CC                    ; $88CC
1422   88E5             
1423   88E5             BR_88E5: ; BR $88D8
1424   88E5 24              LDA  UL
1425   88E6 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2
1426   88EA 9A              RTN                             ; Done
1427   88EB             ;% LB_xxxx END
1428   88EB             ;------------------------------------------------------------------------------------------------------------
1429   88EB             
1430   88EB             
1431   88EB             
1432   88EB             ;------------------------------------------------------------------------------------------------------------
1433   88EB             ; xxxx
1434   88EB             ; Called from: 
1435   88EB             ; Arguments: 
1436   88EB             ; Outputs: 
1437   88EB             ; RegMod: 
1438   88EB             ;------------------------------------------------------------------------------------------------------------
1439   88EB             ;% LB_xxxx START
1440   88EB             JMP_88EB: ; BR $81CF,$81F4
1441   88EB FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1442   88EF B7 01           CPI  A,$01                      ; 
1443   88F1 89 05           BZR  BR_88F8                    ; $88F8
1444   88F3 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1445   88F6 8E 04           BCH  BR_88FC                    ; $88FC
1446   88F8             
1447   88F8             BR_88F8: ; BR $88F1
1448   88F8 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2
1449   88FC             
1450   88FC             BR_88FC: ; BR $88F6
1451   88FC 9A              RTN                             ; Done
1452   88FD             ;% LB_xxxx END
1453   88FD             ;------------------------------------------------------------------------------------------------------------
1454   88FD             
1455   88FD             
1456   88FD             
1457   88FD             ;------------------------------------------------------------------------------------------------------------
1458   88FD             ; xxxx
1459   88FD             ; Called from: 
1460   88FD             ; Arguments: 
1461   88FD             ; Outputs: 
1462   88FD             ; RegMod: 
1463   88FD             ;------------------------------------------------------------------------------------------------------------
1464   88FD             ;% LB_xxxx START
1465   88FD             JMP_88FD: ; BR $84B1
1466   88FD 68 33           LDI  UH,$33                     ; 
1467   88FF B5 10           LDI  A,$10                      ; 
1468   8901 A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1469   8904 B7 10           CPI  A,$10                      ; 
1470   8906 89 01           BZR  BR_8909                    ; $8909
1471   8908 9A              RTN                             ; 
1472   8909             
1473   8909             BR_8909: ; BR $8906
1474   8909 FD 62           DEC  UH                         ;
1475   890B B5 20           LDI  A,$20                      ; 
1476   890D A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1477   8910 B7 20           CPI  A,$20                      ; 
1478   8912 89 01           BZR  BR_8915                    ; $8915
1479   8914 9A              RTN                             ; 
1480   8915             
1481   8915             BR_8915: ; BR $8912
1482   8915 FD 62           DEC  UH                         ;
1483   8917 B5 40           LDI  A,$40                      ; 
1484   8919 A9 76 4E        AND  (DISP_BUFF + $4E)          ; 
1485   891C B7 40           CPI  A,$40                      ; 
1486   891E 89 06           BZR  BR_8926                    ; $8926
1487   8920 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
1487   8924 00 
1488   8925 9A              RTN                             ; 
1489   8926             
1490   8926             BR_8926: ; BR $891E
1491   8926 68 0D           LDI  UH,$0D                     ; 
1492   8928 9A              RTN                             ; 
1493   8929             ;% LB_xxxx END
1494   8929             ;------------------------------------------------------------------------------------------------------------
1495   8929             
1496   8929             
1497   8929             
1498   8929             ;------------------------------------------------------------------------------------------------------------
1499   8929             ; xxxx
1500   8929             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1501   8929             ; Arguments: 
1502   8929             ; Outputs: 
1503   8929             ; RegMod: 
1504   8929             ;------------------------------------------------------------------------------------------------------------
1505   8929             ;% LB_xxxx START
1506   8929             JMP_8929: ; BR $81E1
1507   8929 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
1507   892D 00 
1508   892E A5 76 4F        LDA  (DISP_BUFF + $4F)          ; 
1509   8931 BF 10           BII  A,$10                      ; 
1510   8933 8B 19           BZS  BR_894E                    ; $894E
1511   8935 A5 78 80        LDA  (DISPARAM)                 ; 
1512   8938 B9 01           ANI  A,$01                      ; 
1513   893A B7 01           CPI  A,$01                      ; 
1514   893C 8B 02           BZS  BR_8940                    ; $8940
1515   893E FB              SEC                             ; 
1516   893F 9A              RTN                             ; Done
1517   8940             
1518   8940             BR_8940: ; BR $893C
1519   8940 A5 78 80        LDA  (DISPARAM)                 ;
1520   8943 B9 01           ANI  A,$01                      ; 
1521   8945 B7 01           CPI  A,$01                      ; 
1522   8947 89 05           BZR  BR_894E                    ; $894E
1523   8949 BE 84 66        SJP  (BR_8466)                  ; $8466
1524   894C F9              REC                             ; 
1525   894D 9A              RTN                             ; Done
1526   894E             
1527   894E             BR_894E: ; BR $8933,$8947
1528   894E A5 78 80        LDA  (DISPARAM)                 ; 
1529   8951 B9 01           ANI  A,$01                      ; 
1530   8953 B7 00           CPI  A,$00                      ; 
1531   8955 89 02           BZR  BR_8959                    ; $8959
1532   8957 FB              SEC                             ; 
1533   8958 9A              RTN                             ; Done
1534   8959             
1535   8959             BR_8959:
1536   8959 BE 8C 57        SJP  (JMP_8C57)                 ; $8C57
1537   895C FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2
1537   8960 FF 
1538   8961 F9              REC                             ; 
1539   8962 9A              RTN                             ; Done
1540   8963             ;% LB_xxxx END
1541   8963             ;------------------------------------------------------------------------------------------------------------
1542   8963             
1543   8963             
1544   8963             
1545   8963             ;------------------------------------------------------------------------------------------------------------
1546   8963             ; xxxx
1547   8963             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1548   8963             ; Arguments: 
1549   8963             ; Outputs: 
1550   8963             ; RegMod: 
1551   8963             ;------------------------------------------------------------------------------------------------------------
1552   8963             ;% LB_xxxx START
1553   8963             JMP_8963:
1554   8963 FD C8           PSH  A                          ; 
1555   8965 B5 0A           LDI  A,$0A                      ; 
1556   8967 FD AE 78 00     STA  #(CRTCTRL)                 ; &7800
1557   896B B5 20           LDI  A,$20                      ;
1558   896D FD AE 78 01     STA  #(CRTCTRL + $01)           ; $7801
1559   8971 FD 8A           POP  A                          ; 
1560   8973 9A              RTN                             ; 
1561   8974             ;% LB_xxxx START
1562   8974             ;------------------------------------------------------------------------------------------------------------
1563   8974             
1564   8974             
1565   8974             
1566   8974             ;------------------------------------------------------------------------------------------------------------
1567   8974             ; CLS - 
1568   8974             ; Called from 
1569   8974             ; Arguments: 
1570   8974             ; Outputs: 
1571   8974             ; RegMod: 
1572   8974             ;------------------------------------------------------------------------------------------------------------
1573   8974             ;% LB_CLS START
1574   8974             CLS: ; $8974
1575   8974 FD 98           PSH  Y                          ; 
1576   8976 BE 8D 41        SJP  (JMP_8D41)                 ; $8D41
1577   8979 FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
1577   897D 00 
1578   897E FD 1A           POP  Y                          ; 
1579   8980 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1580   8981             
1581   8981 BE DF B4        SJP  ($DFB4)                    ; ***STRBUF_OK
1582   8984 D0              VEJ  (D0) \ ABYT($00) \ ABRF(BR_89A0) ; $89A0
1582   8985 00          
1582   8986 19          
1583   8987 6C 00           CPI  UH,$00                     ; 
1584   8989 8B 04           BZS  BR_898F                    ; $898F
1585   898B A4              LDA  UH                         ; 
1586   898C BE 89 A1        SJP  (BR_8981)                  ; $89A1
1587   898F             
1588   898F             BR_898F:
1589   898F 24              LDA  UL                         ; 
1590   8990 BE 89 A1        SJP  (BR_8981)                  ; $89A1
1591   8993 6A 04           LDI  UL,$04                     ; 
1592   8995 6C 00           CPI  UH,$00                     ; 
1593   8997 89 02           BZR  BR_899B                    ; $899B
1594   8999 6A 02           LDI  UL,$02                     ; 
1595   899B             
1596   899B             BR_899B:
1597   899B BE DF C5        SJP  (ARX2STRBUF+1)             ; $DFC5
1598   899E 68 00           LDI  UH,$00                     ; 
1599   89A0             
1600   89A0             BR_89A0: 
1601   89A0 9A              RTN                             ; Done
1602   89A1             
1603   89A1             BR_8981:
1604   89A1 FD C8           PSH  A                          ; 
1605   89A3 F1              AEX                             ; 
1606   89A4 BE 89 A9        SJP  (BR_89A9)                  ; $89A9
1607   89A7 FD 8A           POP  A                          ; 
1608   89A9             
1609   89A9             BR_89A9:
1610   89A9 B9 0F           ANI  A,$0F                      ; 
1611   89AB BB 30           ORI  A,$30                      ; 
1612   89AD B7 3A           CPI  A,$3A                      ;
1613   89AF 81 02           BCR  BR_89B3                    ; $89B3
1614   89B1 B3 06           ADI  A,$06                      ; 
1615   89B3             
1616   89B3             BR_89B3: 
1617   89B3 51              SIN  Y                          ; 
1618   89B4 9A              RTN                             ;
1619   89B5             ;% LB_CLS END
1620   89B5             ;------------------------------------------------------------------------------------------------------------
1621   89B5             
1622   89B5             
1623   89B5             
1624   89B5             ;------------------------------------------------------------------------------------------------------------
1625   89B5             ; CONSOLE - 
1626   89B5             ; Called from 
1627   89B5             ; Arguments: 
1628   89B5             ; Outputs: 
1629   89B5             ; RegMod: 
1630   89B5             ;------------------------------------------------------------------------------------------------------------
1631   89B5             ;% LB_CONSOLE START
1632   89B5             CONSOLE:
1633   89B5 15              LDA  (Y)                        ; 
1634   89B6 B7 49           CPI  A,$49                      ; 
1635   89B8 89 0A           BZR  BR_89C4                    ; $89C4
1636   89BA FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$02    ; $77F4
1636   89BE 02 
1637   89BF BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1638   89C2 54              INC  Y                          ;
1639   89C3 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1640   89C4             
1641   89C4             BR_89C4:
1642   89C4 B7 4E           CPI  A,$4E                      ; 
1643   89C6 89 0A           BZR  BR_89D2                    ; $89D2
1644   89C8 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$05    ; $77F4
1644   89CC 05 
1645   89CD BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1646   89D0 54              INC  Y                          ; 
1647   89D1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1648   89D2             
1649   89D2             BR_89D2:
1650   89D2 DE              VEJ  (DE) \ ABRF(BR_8A48)       ; $8A48
1650   89D3 74          
1651   89D4 D0              VEJ  (D0) \ ABYT($06) \ ABRF(BR_8A48 ) ; $8A48
1651   89D5 06          
1651   89D6 71          
1652   89D7 24              LDA  UL                         ; 
1653   89D8 B7 01           CPI  A,$01                      ; 
1654   89DA 89 09           BZR  BR_89E5                    ; $89E5
1655   89DC FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$03    ; $77F4
1655   89E0 03 
1656   89E1 BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1657   89E4 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1658   89E5             
1659   89E5             BR_89E5:
1660   89E5 B7 02           CPI  A,$02                      ; 
1661   89E7 89 09           BZR  BR_89F2                    ; $89F2
1662   89E9 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$04    ; $77F4
1662   89ED 04 
1663   89EE BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1664   89F1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1665   89F2             
1666   89F2             BR_89F2:
1667   89F2 B7 00           CPI  A,$00                      ; 
1668   89F4 89 11           BZR  BR_8A07                    ; $8A07
1669   89F6 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$00    ; $77F4
1669   89FA 00 
1670   89FB BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1671   89FE 48 8E           LDI  XH,$8E                     ; ***In unknown table
1672   8A00 4A A1           LDI  XL,$A1                     ; 
1673   8A02 BE 8D A8        SJP  (JMP_8DA8)                 ; $8DA8
1674   8A05 9E 93           BCH  CLS                        ; 
1675   8A07             
1676   8A07             BR_8A07:
1677   8A07 24              LDA  UL                         ; 
1678   8A08 B7 50           CPI  A,$50                      ; 
1679   8A0A 8B 1B           BZS  BR_8A27                    ; $8A27
1680   8A0C B7 28           CPI  A,$28                      ; 
1681   8A0E 89 36           BZR  BR_8A46                    ; $8A46
1682   8A10 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$01    ; $77F4
1682   8A14 01 
1683   8A15 BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1684   8A18 48 8E           LDI  XH,$8E                     ; *** start of unknown table
1685   8A1A 4A 8F           LDI  XL,$8F                     ; 
1686   8A1C BE 8D A8        SJP  (JMP_8DA8)                 ; $8DA8
1687   8A1F B5 28           LDI  A,$28                      ; 
1688   8A21 FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; $77D1
1689   8A25 9E B3           BCH  CLS                        ; 
1690   8A27             
1691   8A27             BR_8A27:
1692   8A27 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$06    ; $77F4
1692   8A2B 06 
1693   8A2C BE 8A 38        SJP  (JMP_8A38)                 ; $8A38
1694   8A2F 48 8E           LDI  XH,$8E                     ; *** in unknown table
1695   8A31 4A A1           LDI  XL,$A1                     ; 
1696   8A33 BE 8D A8        SJP  (JMP_8DA8)                 ; $8DA8
1697   8A36 9E C4           BCH  CLS                        ; 
1698   8A38             
1699   8A38             JMP_8A38:
1700   8A38 FD A5 77 F4     LDA  #(VIDEORAM + $07F4)        ; $77F4
1701   8A3C FD AE D4 00     STA  #($D400)                   ; ***
1702   8A40 9A              RTN                             ; 
1703   8A41             
1704   8A41             ;$8A41: 
1705   8A41 BE 8D A8        SJP  (JMP_8DA8) $8DA8           ; Dead code?
1706   8A44 9E D2           BCH  CLS                        ;
1707   8A46             
1708   8A46             BR_8A46: ; BR $8A0E
1709   8A46 68 13           LDI  UH,$13                     ; 
1710   8A48             
1711   8A48             BR_8A48:
1712   8A48 E0              VEJ  (E0)                       ; (E0) Output error from UH
1713   8A49             ;% LB_CONSOLE ND
1714   8A49             ;------------------------------------------------------------------------------------------------------------
1715   8A49             
1716   8A49             
1717   8A49             
1718   8A49             ;------------------------------------------------------------------------------------------------------------
1719   8A49             ; CURSOR - 
1720   8A49             ; Called from 
1721   8A49             ; Arguments: 
1722   8A49             ; Outputs: 
1723   8A49             ; RegMod: 
1724   8A49             ;------------------------------------------------------------------------------------------------------------
1725   8A49             ;% LB_CURSOR START
1726   8A49             CURSOR:
1727   8A49 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; $8A8A
1727   8A4A 3F          
1728   8A4B D0              VEJ  (D0) \ ABYT($0C) \ ABRF(BR_8A8A) ; $8A8A
1728   8A4C 0C          
1728   8A4D 3C          
1729   8A4E FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1
1730   8A52 DF              DEC  A                          ; 
1731   8A53 26              CPA  UL                         ; 
1732   8A54 81 03           BCR  BR_8A59                    ; $8A59
1733   8A56 BA 8A 5D        JMP  JMP_8A5D                   ; $8A5D
1734   8A59             
1735   8A59             BR_8A59:
1736   8A59 68 13           LDI  UH,$13                     ; 
1737   8A5B 8E 2D           BCH  BR_8A8A                    ; $8A8A
1738   8A5D             
1739   8A5D             JMP_8A5D:
1740   8A5D 24              LDA  UL                         ; 
1741   8A5E DD              INC  A                          ; 
1742   8A5F FD C8           PSH  A                          ; 
1743   8A61 C2              VEJ  (C2) \ ACHR($2C) \ ABRF(BR_8A75) ; $8A75
1743   8A62 2C          
1743   8A63 11          
1744   8A64 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; $8A8A
1744   8A65 24          
1745   8A66 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_8A88) ; $8A88
1745   8A67 10          
1745   8A68 1F          
1746   8A69 24              LDA  UL                         ; 
1747   8A6A DD              INC  A                          ; 
1748   8A6B 2A              STA  UL                         ; 
1749   8A6C B7 1A           CPI  A,$1A                      ; 
1750   8A6E 89 03           BZR  BR_8A73                    ; $8A73
1751   8A70 68 13           LDI  UH,$13                     ; 
1752   8A72 E0              VEJ  (E0)                       ; (E0) Output error from UH
1753   8A73             
1754   8A73             BR_8A73:
1755   8A73 8E 09           BCH  BR_8A7E                    ; $8A7E
1756   8A75             
1757   8A75             BR_8A75:
1758   8A75 56              DEC  Y                          ; 
1759   8A76 FD C8           PSH  A                          ; 
1760   8A78 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1761   8A7B 2A              STA  UL                         ; 
1762   8A7C FD 8A           POP  A                          ; 
1763   8A7E             
1764   8A7E             BR_8A7E:
1765   8A7E 24              LDA  UL                         ; 
1766   8A7F AE 77 4E        STA  (STRING_VARS + $FE)        ; 
1767   8A82 FD 8A           POP  A                          ; 
1768   8A84 AE 77 4F        STA  (STRING_VARS + $FF)        ; 
1769   8A87 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1770   8A88             
1771   8A88             BR_8A88:
1772   8A88 FD 8A           POP  A                          ; 
1773   8A8A             
1774   8A8A             BR_8A8A:
1775   8A8A E0              VEJ  (E0)                       ; (E0) Output error from UH
1776   8A8B             ;% LB_CURSOR END
1777   8A8B             ;------------------------------------------------------------------------------------------------------------
1778   8A8B             
1779   8A8B             
1780   8A8B             
1781   8A8B             ;------------------------------------------------------------------------------------------------------------
1782   8A8B             ; xxxx - 
1783   8A8B             ; Called from 
1784   8A8B             ; Arguments: 
1785   8A8B             ; Outputs: 
1786   8A8B             ; RegMod: 
1787   8A8B             ;------------------------------------------------------------------------------------------------------------
1788   8A8B             ;% LB_xxxx START
1789   8A8B             JMP_8A8B:
1790   8A8B B5 60           LDI  A,$60                      ; 
1791   8A8D AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
1792   8A90 BE 8C 4A        SJP  (JMP_8C4A)                 ; $8C4A
1793   8A93 FD EB 77 F3     ORI  #(VIDEORAM + $07F3),$01    ; $77F3
1793   8A97 01 
1794   8A98 BE 89 63        SJP  (JMP_8963)                 ; $8963
1795   8A9B B5 00           LDI  A,$00                      ; 
1796   8A9D 6A 4F           LDI  UL,$4F                     ; 
1797   8A9F 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
1798   8AA1 4A 60           LDI  XL,LB(OUT_BUF)             ; $60 
1799   8AA3             
1800   8AA3             BR_8AA3:
1801   8AA3 41              SIN  X                          ; 
1802   8AA4 88 03           LOP  UL,BR_8AA3                 ; $8AA3
1803   8AA6             
1804   8AA6             BR_8AA6:
1805   8AA6 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
1806   8AA7 6C F0           CPI  UH,$F0                     ; 
1807   8AA9 89 02           BZR  BR_8AAD                    ; $8AAD
1808   8AAB 6E 85           CPI  UL,$85                     ; 
1809   8AAD             
1810   8AAD             BR_8AAD:
1811   8AAD 8B 03           BZS  BR_8AB2                    ; $8AB2
1812   8AAF C6              VEJ  (C6)                       ; (C6) Correct program pointer
1813   8AB0 8E 04           BCH  BR_8AB6                    ; $8AB6
1814   8AB2             
1815   8AB2             BR_8AB2:
1816   8AB2 CD 9A           VMJ  ($9A)                      ; (9A) Determines and transmits USING parameters
1817   8AB4 C3 E0           VCS  ($E0)                      ; (E0) Output error from UH
1818   8AB6             
1819   8AB6             BR_8AB6:
1820   8AB6 15              LDA  (Y)                        ; 
1821   8AB7 B7 0D           CPI  A,$0D                      ; 
1822   8AB9 8B E3           BZS  BR_8B9E                    ; $8B9E
1823   8ABB             
1824   8ABB             BR_8ABB:
1825   8ABB 15              LDA  (Y)                        ; 
1826   8ABC B7 3A           CPI  A,$3A                      ; 
1827   8ABE 8B DE           BZS  BR_8B9E                    ; $8B9E
1828   8AC0 CD 2E           VMJ  ($2E) \ ABRF(BR_8AC5)      ; $8AC5
1828   8AC2 02          
1829   8AC3 8E 03           BCH  BR_8AC8                    ; $8AC8
1830   8AC5             
1831   8AC5             BR_8AC5:
1832   8AC5 BA 8C 38        JMP  JMP_8C38                   ; $8C38
1833   8AC8             
1834   8AC8             BR_8AC8:
1835   8AC8 A5 7A 04        LDA  (ARX + $04)                ; 
1836   8ACB B7 C1           CPI  A,$C1                      ; 
1837   8ACD 8B 58           BZS  BR_8B27                    ; $8B27
1838   8ACF B7 D0           CPI  A,$D0                      ; 
1839   8AD1 8B 54           BZS  BR_8B27                    ; $8B27
1840   8AD3 A5 78 95        LDA  (USINGF)                   ; 
1841   8AD6 B7 00           CPI  A,$00                      ; 
1842   8AD8 89 1D           BZR  BR_8AF7                    ; $8AF7
1843   8ADA B5 10           LDI  A,$10                      ; 
1844   8ADC AE 78 94        STA  (STR_BUF_PTR_L)            ; 
1845   8ADF FD 98           PSH  Y                          ; 
1846   8AE1 BE D9 CF        SJP  (BCMD_STR)                 ; 
1847   8AE4 FD 1A           POP  Y                          ; 
1848   8AE6 6C 00           CPI  UH,$00                     ; 
1849   8AE8 99 25           BZR  BR_8AC5                    ; $8AC5
1850   8AEA A5 7A 01        LDA  (ARX + $01)                ; 
1851   8AED B7 00           CPI  A,$00                      ; 
1852   8AEF 89 04           BZR  BR_8AF5                    ; $8AF5
1853   8AF1 EF 78 8F 01     ADI  (OUTBUF_PTR),$01           ; $788F
1854   8AF5             
1855   8AF5             BR_8AF5:
1856   8AF5 8E 30           BCH  BR_8B27                    ; $8B27
1857   8AF7             
1858   8AF7             BR_8AF7:
1859   8AF7 FD 98           PSH  Y                          ; 
1860   8AF9 D2              VEJ  (D2) \ ABRF(BR_8AFC-1) \ ABYT($80) ; -1 hack as target calc 1 off
1860   8AFA 00          
1860   8AFB 80          
1861   8AFC             
1862   8AFC             BR_8AFC:
1863   8AFC CD 96           VMJ  ($96)                      ; 
1864   8AFE 14              LDA  YL                         ; 
1865   8AFF F9              REC                             ; 
1866   8B00 00              SBC  XL                         ; 
1867   8B01 2A              STA  UL                         ; 
1868   8B02             
1869   8B02             BR_8B02:
1870   8B02 45              LIN  X                          ; 
1871   8B03 B7 20           CPI  A,$20                      ; 
1872   8B05 89 05           BZR  BR_8B0C                    ; $8B0C
1873   8B07 88 07           LOP  UL,BR_8B02                 ; $8B02
1874   8B09 68 01           LDI  UH,$01                     ;
1875   8B0B E0              VEJ  (E0)                       ; (E0) Output error from UH
1876   8B0C             
1877   8B0C             BR_8B0C:
1878   8B0C 46              DEC  X                          ; 
1879   8B0D A5 7A 01        LDA  (ARX + $01)                ; 
1880   8B10 B7 80           CPI  A,$80                      ; 
1881   8B12 8B 01           BZS  BR_8B15                    ; $8B15
1882   8B14 46              DEC  X                          ; 
1883   8B15             
1884   8B15             BR_8B15:
1885   8B15 14              LDA  YL                         ; 
1886   8B16 FB              SEC                             ; 
1887   8B17 DD              INC  A                          ; 
1888   8B18 00              SBC  XL                         ; 
1889   8B19 DD              INC  A                          ; 
1890   8B1A 2A              STA  UL                         ; 
1891   8B1B 58 7A           LDI  YH,HB(ARX)                 ; $7A
1892   8B1D 5A 05           LDI  YL,LB(ARX+5)               ; $05
1893   8B1F 84              LDA  XH                         ; 
1894   8B20 51              SIN  Y                          ; 
1895   8B21 04              LDA  XL                         ; 
1896   8B22 51              SIN  Y                          ; 
1897   8B23 24              LDA  UL                         ; 
1898   8B24 1E              STA  (Y)                        ; 
1899   8B25 FD 1A           POP  Y                          ; 
1900   8B27             
1901   8B27             BR_8B27:
1902   8B27 FD 98           PSH  Y                          ; 
1903   8B29 DC              VEJ  (DC)                       ; (DC) Load CSI from AR-X to X-Reg
1904   8B2A A5 78 97        LDA  (USING_CHR)                ; 
1905   8B2D B7 00           CPI  A,$00                      ; 
1906   8B2F 89 04           BZR  BR_8B35                    ; $8B35
1907   8B31             
1908   8B31             BR_8B31:
1909   8B31 FD C8           PSH  A                          ; 
1910   8B33 8E 1D           BCH  BR_8B52                    ; $8B52
1911   8B35             
1912   8B35             BR_8B35:
1913   8B35 FD C8           PSH  A                          ; 
1914   8B37 A5 7A 04        LDA  (ARX + $04)                ; 
1915   8B3A B7 D0           CPI  A,$D0                      ; 
1916   8B3C 8B 06           BZS  BR_8B44                    ; $8B44
1917   8B3E FD 8A           POP  A                          ; 
1918   8B40 B5 00           LDI  A,$00                      ; 
1919   8B42 9E 13           BCH  BR_8B31                    ; $8B31
1920   8B44             
1921   8B44             BR_8B44:
1922   8B44 FD 8A           POP  A                          ; 
1923   8B46 26              CPA  UL                         ; 
1924   8B47 83 05           BCS  BR_8B4E                    ; $8B4E
1925   8B49 2A              STA  UL                         ; 
1926   8B4A B5 00           LDI  A,$00                      ; 
1927   8B4C 9E 1D           BCH  BR_8B31                    ; $8B31
1928   8B4E             
1929   8B4E             BR_8B4E:
1930   8B4E FB              SEC                             ; 
1931   8B4F 20              SBC  UL                         ; 
1932   8B50 FD C8           PSH  A                          ; 
1933   8B52             
1934   8B52             BR_8B52:
1935   8B52 CD 94           VMJ  ($94)                      ; (94) Transfers string whose address is in the X-Reg to the output buffer (*VMJ diss is wrong)
1936   8B54 FD 8A           POP  A                          ; 
1937   8B56 B7 00           CPI  A,$00                      ; 
1938   8B58 8B 0F           BZS  BR_8B69                    ; $8B69
1939   8B5A 2A              STA  UL                         ; 
1940   8B5B B5 20           LDI  A,$20                      ; 
1941   8B5D 62              DEC  UL                         ; 
1942   8B5E 6E 50           CPI  UL,$50                     ; 
1943   8B60 83 07           BCS  BR_8B69                    ; $8B69
1944   8B62             
1945   8B62             BR_8B62:
1946   8B62 5E B0           CPI  YL,$B0                     ; 
1947   8B64 83 03           BCS  BR_8B69                    ; $8B69
1948   8B66 51              SIN  Y                          ; 
1949   8B67 88 07           LOP  UL,BR_8B62                 ; $8B62
1950   8B69             
1951   8B69             BR_8B69:
1952   8B69 14              LDA  YL                         ; 
1953   8B6A AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
1954   8B6D FD 1A           POP  Y                          ;
1955   8B6F 55              LIN  Y                          ; 
1956   8B70 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
1957   8B74 B7 3B           CPI  A,$3B                      ; 
1958   8B76 9B D2           BZS  BR_8AA6                    ; $8AA6
1959   8B78 B7 2C           CPI  A,$2C                      ; 
1960   8B7A 89 15           BZR  BR_8B91                    ; $8B91
1961   8B7C B5 11           LDI  A,$11                      ; 
1962   8B7E FB              SEC                             ; 
1963   8B7F A1 7A 07        SBC  (ARX + $07)                ; 
1964   8B82 B7 11           CPI  A,$11                      ; 
1965   8B84 81 02           BCR  BR_8B88                    ; $8B88
1966   8B86 B5 01           LDI  A,$01                      ; 
1967   8B88             
1968   8B88             BR_8B88:
1969   8B88 F9              REC                             ; 
1970   8B89 A3 78 8F        ADC  (OUTBUF_PTR)               ; $788F
1971   8B8C AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
1972   8B8F 9E D6           BCH  BR_8ABB                    ; $8ABB
1973   8B91             
1974   8B91             BR_8B91:
1975   8B91 56              DEC  Y                          ; 
1976   8B92 B7 3A           CPI  A,$3A                      ; 
1977   8B94 8B 08           BZS  BR_8B9E                    ; $8B9E
1978   8B96 B7 0D           CPI  A,$0D                      ; 
1979   8B98 8B 04           BZS  BR_8B9E                    ; $8B9E
1980   8B9A 68 01           LDI  UH,$01                     ; 
1981   8B9C 8E 9A           BCH  JMP_8C38                   ; $8C38
1982   8B9E             
1983   8B9E             BR_8B9E:
1984   8B9E FD 98           PSH  Y                          ; 
1985   8BA0 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
1986   8BA3 B7 19           CPI  A,$19                      ; 
1987   8BA5 81 03           BCR  BR_8BAA                    ; $8BAA
1988   8BA7 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
1989   8BAA             
1990   8BAA             BR_8BAA:
1991   8BAA 18              STA  YH                         ; 
1992   8BAB A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
1993   8BAE 1A              STA  YL                         ; 
1994   8BAF BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
1995   8BB2 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
1996   8BB4 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
1997   8BB6 A5 78 8F        LDA  (OUTBUF_PTR)               ; $788F 
1998   8BB9 F9              REC                             ; 
1999   8BBA B1 60           SBI  A,$60                      ; 
2000   8BBC 83 01           BCS  BR_8BBF                    ; $8BBF
2001   8BBE DD              INC  A                          ; 
2002   8BBF             
2003   8BBF             BR_8BBF:
2004   8BBF 2A              STA  UL                         ; 
2005   8BC0             
2006   8BC0             BR_8BC0:
2007   8BC0 45              LIN  X                          ; 
2008   8BC1 FD 1E           STA  #(Y)                       ; 
2009   8BC3 54              INC  Y                          ; 
2010   8BC4 EF 77 4F 01     ADI  (STRING_VARS + $FF),$01    ; 
2011   8BC8 A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
2012   8BCB FD A7 77 D1     CPA  #(VIDEORAM + $07D1)        ; $77D1
2013   8BCF 81 2B           BCR  BR_8BFC                    ; $8BFC
2014   8BD1 8B 29           BZS  BR_8BFC                    ; $8BFC
2015   8BD3 E9 77 4F 01     ANI  (STRING_VARS + $FF),$01    ; 
2016   8BD7 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; 
2017   8BDB A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
2018   8BDE B7 1A           CPI  A,$1A                      ; 
2019   8BE0 81 1A           BCR  BR_8BFC                    ; $8BFC
2020   8BE2 6E 00           CPI  UL,$00                     ; 
2021   8BE4 8B 16           BZS  BR_8BFC                    ; $8BFC
2022   8BE6 FD 88           PSH  X                          ; 
2023   8BE8 FD A8           PSH  U                          ; 
2024   8BEA BE 00 00        SJP                             ; (JMP_84D7) ; $84D7
2025   8BED A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
2026   8BF0 18              STA  YH                         ; 
2027   8BF1 A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
2028   8BF4 1A              STA  YL                         ; 
2029   8BF5 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2030   8BF8 FD 2A           POP  U                          ; 
2031   8BFA FD 0A           POP  X                          ; 
2032   8BFC             
2033   8BFC             BR_8BFC:
2034   8BFC 88 3E           LOP  UL,BR_8BC0                 ; $8BC0
2035   8BFE FD 18           LDX  Y                          ; 
2036   8C00 46              DEC  X                          ; 
2037   8C01 FD 1A           POP  Y                          ; 
2038   8C03 56              DEC  Y                          ; 
2039   8C04 55              LIN  Y                          ; 
2040   8C05 B7 3B           CPI  A,$3B                      ; 
2041   8C07 8B 0E           BZS  BR_8C17                    ; $8C17
2042   8C09 B5 01           LDI  A,$01                      ; 
2043   8C0B A7 77 4F        CPA  (STRING_VARS + $FF)        ; 
2044   8C0E 8B 07           BZS  BR_8C17                    ; $8C17
2045   8C10 AE 77 4F        STA  (STRING_VARS + $FF)        ; 
2046   8C13 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; 
2047   8C17             
2048   8C17             BR_8C17:
2049   8C17 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF
2050   8C1A 68 00           LDI  UH,$00                     ; 
2051   8C1C FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
2051   8C20 00 
2052   8C21 D8              VEJ  (D8)                       ; 
2053   8C22 89 05           BZR  BR_8C29                    ; $8C29
2054   8C24 B5 03           LDI  A,$03                      ; 
2055   8C26 AE 78 71        STA  (WAIT_CFG)                 ; 
2056   8C29             
2057   8C29             BR_8C29:
2058   8C29 A5 78 71        LDA  (WAIT_CFG)                 ; 
2059   8C2C B7 02           CPI  A,$02                      ; 
2060   8C2E 8B 0F           BZS  BR_8C3F                    ; $8C3F
2061   8C30 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
2062   8C33 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2
2063   8C37 E2              VEJ  (E2)                       ; 
2064   8C38             
2065   8C38             JMP_8C38:
2066   8C38 B5 0D           LDI  A,$0D                      ; 
2067   8C3A FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
2068   8C3E E0              VEJ  (E0)                       ; 
2069   8C3F             
2070   8C3F             BR_8C3F:
2071   8C3F A5 78 72        LDA  (WAIT_CTR_H)               ;
2072   8C42 28              STA  UH                         ; 
2073   8C43 A5 78 73        LDA  (WAIT_CTR_L)               ; 
2074   8C46 2A              STA  UL                         ; 
2075   8C47 CD AC           VMJ  ($AC)                      ; 
2076   8C49 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2077   8C4A             ;% LB_xxxx END
2078   8C4A             ;------------------------------------------------------------------------------------------------------------
2079   8C4A             
2080   8C4A             
2081   8C4A             
2082   8C4A             ;------------------------------------------------------------------------------------------------------------
2083   8C4A             ; xxxx - 
2084   8C4A             ; Called from 
2085   8C4A             ; Arguments: 
2086   8C4A             ; Outputs: 
2087   8C4A             ; RegMod: 
2088   8C4A             ;------------------------------------------------------------------------------------------------------------
2089   8C4A             ;% LB_xxxx START
2090   8C4A             JMP_8C4A:
2091   8C4A B5 0A           LDI  A,$0A                      ; 
2092   8C4C FD AE 78 00     STA  #(CRTCTRL)                 ; 
2093   8C50 B5 10           LDI  A,$10                      ;
2094   8C52 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
2095   8C56 9A              RTN                             ; Done
2096   8C57             ;% LB_xxxx START
2097   8C57             ;------------------------------------------------------------------------------------------------------------
2098   8C57             
2099   8C57             
2100   8C57             
2101   8C57             ;------------------------------------------------------------------------------------------------------------
2102   8C57             ; xxxx - 
2103   8C57             ; Called from 
2104   8C57             ; Arguments: 
2105   8C57             ; Outputs: 
2106   8C57             ; RegMod: 
2107   8C57             ;------------------------------------------------------------------------------------------------------------
2108   8C57             ;% LB_xxxx START
2109   8C57             JMP_8C57:
2110   8C57 A5 78 80        LDA  (DISPARAM)                 ; 
2111   8C5A B9 01           ANI  A,$01                      ; 
2112   8C5C B7 01           CPI  A,$01                      ; 
2113   8C5E 8B 02           BZS  BR_8C62                    ; $8C62
2114   8C60 F9              REC                             ; 
2115   8C61 9A              RTN                             ; Done
2116   8C62             
2117   8C62             BR_8C62:
2118   8C62 CD 38           VMJ  ($38)                      ; 
2119   8C64 68 02           LDI  UH,$02                     ; 
2120   8C66 6A 19           LDI  UL,$19                     ; 
2121   8C68 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; 
2122   8C6C 18              STA  YH                         ; 
2123   8C6D 5A 01           LDI  YL,$01                     ; 
2124   8C6F BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2125   8C72             
2126   8C72             BR_8C72:
2127   8C72 BE 8D 64        SJP  (JMP_8D64)                 ; $8D64
2128   8C75 FD 62           DEC  UH                         ; 
2129   8C77 83 07           BCS  BR_8C80                    ; $8C80
2130   8C79 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; 
2130   8C7D 01 
2131   8C7E FB              SEC                             ; 
2132   8C7F 9A              RTN                             ; Done
2133   8C80             
2134   8C80             BR_8C80:
2135   8C80 B5 20           LDI  A,$20                      ; 
2136   8C82 FD 1E           STA  #(Y)                       ; 
2137   8C84 54              INC  Y                          ; 
2138   8C85 6A 19           LDI  UL,$19                     ; 
2139   8C87 9E 17           BCH  BR_8C72                    ; $8C72
2140   8C89             ;% LB_xxxx END
2141   8C89             ;------------------------------------------------------------------------------------------------------------
2142   8C89             
2143   8C89             
2144   8C89             
2145   8C89             ;------------------------------------------------------------------------------------------------------------
2146   8C89             ; INPUT - 
2147   8C89             ; Called from 
2148   8C89             ; Arguments: 
2149   8C89             ; Outputs: 
2150   8C89             ; RegMod: 
2151   8C89             ;------------------------------------------------------------------------------------------------------------
2152   8C89             ;% LB_INPUT START
2153   8C89             INPUT:
2154   8C89 C2              VEJ  (C2) \ ACHR($23) \ ABRF(BR_8C8F) ; $8C8F
2154   8C8A 23          
2154   8C8B 03          
2155   8C8C BA C8 FD        JMP  BCMD_CLEAR+8               ; $C8FD
2156   8C8F             
2157   8C8F             BR_8C8F:
2158   8C8F D8              VEJ  (D8)                       ; (D8) Checks calculator mode
2159   8C90 89 03           BZR  BR_8C95                    ; $8C95
2160   8C92 68 1A           LDI  UH,$1A                     ;
2161   8C94 E0              VEJ  (E0)                       ; (E0) Output error from UH
2162   8C95             
2163   8C95             BR_8C95:
2164   8C95 C6              VEJ  (C6)                       ; (C6) Correct program pointer
2165   8C96 BE D0 34        SJP  (INBUF_CLR)                ; 
2166   8C99 C2              VEJ  (C2) \ ACHR($22) \ ABRF(BR_8CFB) ; $8CFB
2166   8C9A 22          
2166   8C9B 5F          
2167   8C9C CD 0C           VMJ  ($0C)                      ; 
2168   8C9E FD 98           PSH  Y                          ; 
2169   8CA0 5A 7B           LDI  YL,HB(IN_BUF)              ; $B0
2170   8CA2 58 B0           LDI  YH,LB(IN_BUF)              ; $7B
2171   8CA4 FD C8           PSH  A                          ; 
2172   8CA6 A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
2173   8CA9 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; 
2174   8CAD FD 8A           POP  A                          ; 
2175   8CAF EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; 
2176   8CB3 A5 7A 07        LDA  (ARX + $07)                ; 
2177   8CB6 2A              STA  UL                         ; 
2178   8CB7 BE D0 49        SJP  (UL_XREG2YREG)             ; 
2179   8CBA 14              LDA  YL                         ; 
2180   8CBB AE 78 8B        STA  (INBUFPTR_L)               ; 
2181   8CBE FD 1A           POP  Y                          ; 
2182   8CC0 C2              VEJ  (C2) \ ACHR($3B) \ ABRF(BR_8CC7) ; $8CC7
2182   8CC1 3B          
2182   8CC2 04          
2183   8CC3 B5 40           LDI  A,$40                      ; 
2184   8CC5 8E 0A           BCH  BR_8CD1                    ; 
2185   8CC7             
2186   8CC7             BR_8CC7:
2187   8CC7 C4              VEJ  (C4) \ ACHR($2C) \ ABRF(BR_8D15) ; $8D15
2187   8CC8 2C          
2187   8CC9 4B          
2188   8CCA             
2189   8CCA             BR_8CCA:
2190   8CCA B5 B0           LDI  A,$B0                      ; 
2191   8CCC AE 78 8B        STA  (INBUFPTR_L)               ; 
2192   8CCF B5 00           LDI  A,$00                      ; 
2193   8CD1             
2194   8CD1             BR_8CD1:
2195   8CD1 AE 78 80        STA  (DISPARAM)
2196   8CD4 CE              VEJ  (CE) \ ABYT($58) \ ABRF($8D05) ; ***
2196   8CD5 58          
2196   8CD6 2E          
2197   8CD7 F6              VEJ  (F6) \ AWRD(LASTVARADD_H)  ;
2197   8CD8 78 86       
2198   8CDA 44              INC  X                          ; 
2199   8CDB A5 7A 07        LDA  (ARX + $07)                ; 
2200   8CDE 0E              STA  (X)                        ; 
2201   8CDF D4              VEJ  (D4) \ ABYT($A0)           ; 
2201   8CE0 A0          
2202   8CE1 D4              VEJ  (D4) \ ABYT($AC)           ; 
2202   8CE2 AC          
2203   8CE3 BE EF 67        SJP  (PREPLCDOUT)               ; 
2204   8CE6 68 20           LDI  UH,$20                     ; 
2205   8CE8 C3 E0           VCS  ($E0)                      ; 
2206   8CEA EB 78 8A 50     ORI  (BREAKPARAM),$50           ; 
2207   8CEE A5 78 8B        LDA  (INBUFPTR_L)               ; 
2208   8CF1 1A              STA  YL                         ; 
2209   8CF2 58 7B           LDI  YH,$7B                     ; 
2210   8CF4 E9 7B 0E 9F     ANI  (CURS_CTRL),$9F            ; 
2211   8CF8 BA 8D 18        JMP  JMP_8D18                   ; $8D18
2212   8CFB             
2213   8CFB             BR_8CFB:
2214   8CFB FD C8           PSH  A                          ; 
2215   8CFD A5 77 4E        LDA  (STRING_VARS + $FE)        ; 
2216   8D00 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; 
2217   8D04 FD 8A           POP  A                          ; 
2218   8D06 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; 
2219   8D0A C6              VEJ  (C6)                       ; 
2220   8D0B B5 3F           LDI  A,$3F                      ; 
2221   8D0D AE 7B B0        STA  (IN_BUF)                   ; 
2222   8D10 9E 48           BCH  BR_8CCA                    ; $8CCA
2223   8D12 68 07           LDI  UH,$07                     ; 
2224   8D14 E0              VEJ  (E0)                       ; (E0) Output error from UH
2225   8D15             
2226   8D15             BR_8D15:
2227   8D15 BA C9 E3        JMP  BCMD_DIM + $5B             ; $C9E3
2228   8D18             
2229   8D18             JMP_8D18:
2230   8D18 BE E8 CA        SJP  (PRGMDISP)                 ; 
2231   8D1B E9 78 9D 00     ANI  (CURR_LINE_L),$00          ; 
2232   8D1F E9 78 9C 00     ANI  (CURR_LINE_H),$00          ; 
2233   8D23 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ; 
2234   8D27 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; 
2235   8D2A BE E2 43        SJP  (WAIT4KB)                  ; 
2236   8D2D FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; 
2236   8D31 01 
2237   8D32 89 05           BZR  BR_8D39 ; $8D39            ; 
2238   8D34 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; 
2238   8D38 FF 
2239   8D39             
2240   8D39             BR_8D39:
2241   8D39 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; 
2241   8D3D 00 
2242   8D3E BA CA 92        JMP  $CA92                      ; $CA92 ***EDITOR + $12 
2243   8D41             
2244   8D41             JMP_8D41:
2245   8D41 68 07           LDI  UH,$07                     ; 
2246   8D43 6A CF           LDI  UL,$CF                     ; 
2247   8D45 B5 00           LDI  A,$00                      ; 
2248   8D47 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2249   8D4A             
2250   8D4A             BR_8D4A:
2251   8D4A BE 8D 5E        SJP  (BR_8D5E)                  ; $8D5E
2252   8D4D FD 62           DEC  UH                         ; 
2253   8D4F 93 07           BCS  BR_8D4A                    ; $8D4A
2254   8D51 B5 01           LDI  A,$01                      ; 
2255   8D53 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; 
2256   8D57 AE 77 4E        STA  (STRING_VARS + $FE)        ; 
2257   8D5A AE 77 4F        STA  (STRING_VARS + $FF)        ; 
2258   8D5D 9A              RTN                             ; Done
2259   8D5E             
2260   8D5E             BR_8D5E:
2261   8D5E FD 1E           STA  #(Y)                       ; 
2262   8D60 54              INC  Y                          ; 
2263   8D61 88 05           LOP  UL,BR_8D5E                 ; $8D5E
2264   8D63 9A              RTN                             ; Done
2265   8D64             
2266   8D64             JMP_8D64:
2267   8D64 45              LIN  X                          ; 
2268   8D65 FD 1E           STA  #(Y)                       ; 
2269   8D67 54              INC  Y                          ; 
2270   8D68 88 06           LOP  UL,JMP_8D64                ; $8D64
2271   8D6A 9A              RTN                             ; Done
2272   8D6B             
2273   8D6B             JMP_8D6B:
2274   8D6B FD C8           PSH  A                          ; 
2275   8D6D FD 88           PSH  X                          ; 
2276   8D6F FD A8           PSH  U                          ; 
2277   8D71 FD 18           LDX  Y                          ; 
2278   8D73 FD 42           DEC  XH                         ; 
2279   8D75 42              DEC  XL                         ; 
2280   8D76 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2281   8D79 14              LDA  YL                         ; 
2282   8D7A FB              SEC                             ; 
2283   8D7B B1 50           SBI  A,$50                      ; 
2284   8D7D 1A              STA  YL                         ; 
2285   8D7E 94              LDA  YH                         ; 
2286   8D7F B1 00           SBI  A,$00                      ; 
2287   8D81 18              STA  YH                         ; 
2288   8D82 4C 19           CPI  XH,$19                     ; 
2289   8D84 83 1D           BCS  BR_8DA3                    ; $8DA3
2290   8D86 4E 50           CPI  XL,$50                     ; 
2291   8D88 83 19           BCS  BR_8DA3                    ; $8DA3
2292   8D8A 84              LDA  XH                         ; 
2293   8D8B 2A              STA  UL                         ; 
2294   8D8C FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; 
2295   8D90 B7 28           CPI  A,$28                      ; 
2296   8D92 89 01           BZR  BR_8D95                    ; $8D95
2297   8D94 60              INC  UL                         ; 
2298   8D95             
2299   8D95             BR_8D95:
2300   8D95 FD DA           ADR  Y                          ; 
2301   8D97 88 04           LOP  UL,BR_8D95                 ; $8D95
2302   8D99 04              LDA  XL                         ; 
2303   8D9A FD DA           ADR  Y                          ; 
2304   8D9C             
2305   8D9C             BR_89DC:
2306   8D9C FD 2A           POP  U                          ; 
2307   8D9E FD 0A           POP  X                          ; 
2308   8DA0 FD 8A           POP  A                          ; 
2309   8DA2 9A              RTN                             ; Done
2310   8DA3             
2311   8DA3             BR_8DA3:
2312   8DA3 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2313   8DA6 9E 0C           BCH  BR_89DC                    ; $8D9C
2314   8DA8             
2315   8DA8             JMP_8DA8:
2316   8DA8 68 00           LDI  UH,$00                     ; 
2317   8DAA 6A 11           LDI  UL,$11                     ; 
2318   8DAC             
2319   8DAC             BR_8DAC:
2320   8DAC A4              LDA  UH                         ; 
2321   8DAD FD AE 78 00     STA  #(CRTCTRL)                 ; 
2322   8DB1 45              LIN  X                          ; 
2323   8DB2 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
2324   8DB6 FD 60           INC  UH                         ; 
2325   8DB8 88 0E           LOP  UL,BR_8DAC                 ; $8DAC
2326   8DBA B5 50           LDI  A,$50                      ; 
2327   8DBC FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; 
2328   8DC0 9A              RTN                             ; 
2329   8DC1             ;% LB_INPUT END
2330   8DC1             ;------------------------------------------------------------------------------------------------------------
2331   8DC1             
2332   8DC1             ;------------------------------------------------------------------------------------------------------------
2333   8DC1             ; $8DC1 - TBL_INIT: Called by table init vector
2334   8DC1             ; Called from 
2335   8DC1             ; Arguments: 
2336   8DC1             ; Outputs: 
2337   8DC1             ; RegMod: 
2338   8DC1             ;------------------------------------------------------------------------------------------------------------
2339   8DC1             ;% LB_TBL_INIT START
2340   8DC1             TBL_INIT: ; 
2341   8DC1 FD 88           PSH  X                          ; Save registers
2342   8DC3 FD 98           PSH  Y                          ; 
2343   8DC5 FD A8           PSH  U                          ; 
2344   8DC7 A5 E2 B7        LDA  (WAIT4KB + $74)            ; $E2B7 = $F4 (A01 ROM), $CC (A03/4 ROM)
2345   8DCA B7 CC           CPI  A,$CC                      ; Is this ROM A03/4?
2346   8DCC 89 02           BZR  BR_8DD0 ; $8DD0            ; If A <> $CC, i.e. A01 ROM
2347   8DCE 8E 33           BCH  BR_8E03 ; $8E03            ; If A = $CC
2348   8DD0             
2349   8DD0             BR_8DD0:                            ; A01 ROM Init
2350   8DD0 4A 1A           LDI  XL,$1A                     ; Length of text                    
2351   8DD2 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info 
2352   8DD4 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2353   8DD6 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2354   8DD9 BE E6 69        SJP  (BCMD_BEEP_STD)            ;
2355   8DDC 8E 0C           BCH  BR_8DEA ; $8DEA            ;
2356   8DDE             
2357   8DDE             BR_8DDE:
2358   8DDE 4A 1A           LDI  XL,$1A                     ; Length of text
2359   8DE0 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info
2360   8DE2 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2361   8DE4 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2362   8DE7 BE E6 69        SJP  (BCMD_BEEP_STD)            ;
2363   8DEA             
2364   8DEA             BR_8DEA:
2365   8DEA BE E2 43        SJP  (WAIT4KB)                  ; Waiting for character input from keyboard. Accumulator=character
2366   8DED B7 0E           CPI  A,$0E                      ; $0E is not a key
2367   8DEF 8B 03           BZS  BR_8DF4 ; $8DF4            ; If A==$0E
2368   8DF1 BA 8D F8        JMP  BR_8DF8 ; $8DF8            ; If A<>$0E
2369   8DF4             
2370   8DF4             BR_8DF4:
2371   8DF4 91 18           BCR  BR_8DDE ; $8DDE            ; If A<$0E loop back to character output, don't think this will ever be true
2372   8DF6 8E 02           BCH  BR_8DFA ; $8DFA            ; To exit
2373   8DF8             
2374   8DF8             BR_8DF8:
2375   8DF8 93 1C           BCS  BR_8DDE ; $8DDE            ; If A>$0E loop back to character output
2376   8DFA             
2377   8DFA             BR_8DFA:
2378   8DFA FD 2A           POP  U                          ; restore registers
2379   8DFC FD 1A           POP  Y                          ; 
2380   8DFE FD 0A           POP  X                          ; 
2381   8E00 BA 92 D6        JMP  JMP_92D6 ; $92D6           ; Exit where output error $1B from UH
2382   8E03             
2383   8E03             
2384   8E03             BR_8E03:                            ; ROM A03/4 Init
2385   8E03 B5 00           LDI  A,$00                      ;
2386   8E05 AE 78 5D        STA  (KATAFLAGS)                ; Turn off Katakana mode?
2387   8E08 FD AE D4 00     STA  #($D400)                   ; Some HW register on IWS board?
2388   8E0C FD AE 77 F4     STA  #(VIDEORAM + $07F4)        ; 
2389   8E10 BE 8D 41        SJP  (JMP_8D41)                 ; $8D41
2390   8E13 B5 0F           LDI  A,$0F                      ;
2391   8E15 BE 90 6A        SJP  (COLOR_FILL)                 ; $906A
2392   8E18 B5 00           LDI  A,$00                      ;
2393   8E1A BE 91 1A        SJP  (JMP_911A)                 ; $911A
2394   8E1D B5 55           LDI  A,$55                      ; 
2395   8E1F AE 79 D5        STA  ($79D5)                    ; This is an unkown bypass, perhaps used as IWS active?
2396   8E22 B5 01           LDI  A,$01                      ; 
2397   8E24 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2398   8E28 48 8E           LDI  XH,$8E                     ; Inisde mystry table
2399   8E2A 4A A1           LDI  XL,$A1                     ; 
2400   8E2C BE 8D A8        SJP  (JMP_8DA8)                 ; $8DA8
2401   8E2F B5 80           LDI  A,$80                      ; 
2402   8E31 FD AE 77 DA     STA  #(VIDEORAM + $07DA)        ;
2403   8E35 B5 07           LDI  A,$07                      ; 
2404   8E37 FD AE 77 DB     STA  #(VIDEORAM + $07DB)        ;
2405   8E3B E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4
2406   8E3F B5 81           LDI  A,HB(XCHR_INPUT)           ; $81 - Address of exernal character input routine (H)
2407   8E41 AE 78 5B        STA  (XCHRINPT_H)               ; $785B
2408   8E44 B5 9E           LDI  A,LB(XCHR_INPUT)           ; $9E - Address of exernal character input routine (L)
2409   8E46 AE 78 5C        STA  (XCHRINPT_L)               ; $785C
2410   8E49 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ;
2410   8E4D 00 
2411   8E4E FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ;
2411   8E52 00 
2412   8E53 B5 55           LDI  A,$55                      ;
2413   8E55 AE 79 D4        STA  (KB_BYPASS) ; $79D4        ; Enable KB bypass
2414   8E58 FD 2A           POP  U                          ; restore registers
2415   8E5A FD 1A           POP  Y                          ; 
2416   8E5C FD 0A           POP  X                          ; 
2417   8E5E 9A              RTN                             ; Done
2418   8E5F             ;% LB_TBL_INIT END
2419   8E5F             ;------------------------------------------------------------------------------------------------------------
2420   8E5F             
2421   8E5F             
2422   8E5F             
2423   8E5F             ;------------------------------------------------------------------------------------------------------------
2424   8E5F             ; $8E5F - Y2_VIDRAM: Reset Y to point to Video RAM -> $7000
2425   8E5F             ; Called from: $84E6, $8D47, $8D76, $8DA3, $8E5F, $8E86
2426   8E5F             ; Arguments: 
2427   8E5F             ; Outputs: 
2428   8E5F             ; RegMod: 
2429   8E5F             ;------------------------------------------------------------------------------------------------------------
2430   8E5F             ;% LB_Y2_VIDRAM START
2431   8E5F             Y2_VIDRAM: 
2432   8E5F 58 70           LDI  YH,HB(VIDEORAM)            ; $70  - video RAM
2433   8E61 5A 00           LDI  YL,LB(VIDEORAM)            ; $00 
2434   8E63 9A              RTN
2435   8E64             ;% LB_Y2_VIDRAM END
2436   8E64             ;------------------------------------------------------------------------------------------------------------
2437   8E64             
2438   8E64             
2439   8E64             
2440   8E64             ;------------------------------------------------------------------------------------------------------------
2441   8E64             ; $8E64 - CL_SCR
2442   8E64             ; Called from 
2443   8E64             ; Arguments: 
2444   8E64             ; Outputs: 
2445   8E64             ; RegMod: 
2446   8E64             ;------------------------------------------------------------------------------------------------------------
2447   8E64             ;% LB_CL_SCR START
2448   8E64             CL_SCR:
2449   8E64 FD 98           PSH  Y                          ; 
2450   8E66 BE 8E 86        SJP  (JMP_8E86)                 ; $8E86
2451   8E69 B5 00           LDI  A,$00                      ;
2452   8E6B 8E 0B           BCH  BR_8E78                    ; $8E78
2453   8E6D FD 98           PSH  Y                          ;
2454   8E6F BE 8E 86        SJP  (JMP_8E86)                 ; $8E86
2455   8E72 F9              REC                             ; 
2456   8E73 B3 08           ADI  A,$08                      ; 
2457   8E75 18              STA  YH                         ; 
2458   8E76 B5 F0           LDI  A,$F0                      ; 
2459   8E78             
2460   8E78             BR_8E78:
2461   8E78 68 07           LDI  UH,$07                     ; Size of Video RAM?
2462   8E7A 6A FF           LDI  UL,$FF                     ;
2463   8E7C             
2464   8E7C             BR_8E7C:
2465   8E7C BE 8D 5E        SJP  (BR_8D5E)                  ; $8D5E
2466   8E7F FD 62           DEC  UH                         ; 
2467   8E81 93 07           BCS  BR_8E7C                    ; $8E7C
2468   8E83 FD 1A           POP  Y                          ;
2469   8E85 9A              RTN                             ;
2470   8E86             ;% LB_CL_SCR END
2471   8E86             ;------------------------------------------------------------------------------------------------------------
2472   8E86             
2473   8E86             
2474   8E86             
2475   8E86             ;------------------------------------------------------------------------------------------------------------
2476   8E86             ; 8E86 - Sets Color RAM address based on video RAM?
2477   8E86             ; Called from 
2478   8E86             ; Arguments: 
2479   8E86             ; Outputs: 
2480   8E86             ; RegMod: 
2481   8E86             ;------------------------------------------------------------------------------------------------------------
2482   8E86             ;% LB_xxxx START
2483   8E86             JMP_8E86:
2484   8E86 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2485   8E89 94              LDA  YH                         ; A = $70
2486   8E8A F1              AEX                             ; A = $07, High nibble & low nibble swapped
2487   8E8B DF              DEC  A                          ; A = $06
2488   8E8C F1              AEX                             ; A = $60
2489   8E8D 18              STA  YH                         ; Y = $60, Color RAM
2490   8E8E 9A              RTN                             ; Done
2491   8E8F             ;% LB_xxxx END
2492   8E8F             ;------------------------------------------------------------------------------------------------------------
2493   8E8F             
2494   8E8F             
2495   8E8F             
2496   8E8F             ;------------------------------------------------------------------------------------------------------------
2497   8E8F             ;$8E8F ~ $8EEA
2498   8E8F             ; Called from 
2499   8E8F             ; Arguments: 
2500   8E8F             ; Outputs: 
2501   8E8F             ; RegMod: 
2502   8E8F             ;------------------------------------------------------------------------------------------------------------
2503   8E8F             ;% LB_xxxx START
2504   8E8F 3B 28 30 74     .BYTE  $3B,$28,$30,$74,$1C,$00,$19,$1A
2504   8E93 1C 00 19 1A 
2505   8E97 00 0A 68 00     .BYTE  $00,$0A,$68,$00,$70,$00,$00,$00
2505   8E9B 70 00 00 00 
2506   8E9F 00 00 74 50     .BYTE  $00,$00,$74,$50,$5C,$35,$1C,$00
2506   8EA3 5C 35 1C 00 
2507   8EA7 19 1A 00 0A     .BYTE  $19,$1A,$00,$0A,$68,$00,$70,$00
2507   8EAB 68 00 70 00 
2508   8EAF 00 00 00 00     .BYTE  $00,$00,$00,$00,$52,$55,$4E,$50
2508   8EB3 52 55 4E 50 
2509   8EB7 52 4F 52 45     .BYTE  $52,$4F,$52,$45,$53,$45,$52,$56
2509   8EBB 53 45 52 56 
2510   8EBF 45 20 45 42     .BYTE  $45,$20,$45,$42,$45,$4E,$45,$3A
2510   8EC3 45 4E 45 3A 
2511   8EC7 28 43 29 20     .BYTE  $28,$43,$29,$20,$62,$79,$20,$49
2511   8ECB 62 79 20 49 
2512   8ECF 6E 67 2E 42     .BYTE  $6E,$67,$2E,$42,$75,$65,$72,$6F
2512   8ED3 75 65 72 6F 
2513   8ED7 20 57 2E 53     .BYTE  $20,$57,$2E,$53,$70,$65,$69,$64
2513   8EDB 70 65 69 64 
2514   8EDF 65 6C           .BYTE  $65,$6C
2515   8EE1             ;% LB_xxxx END
2516   8EE1             ;------------------------------------------------------------------------------------------------------------
2517   8EE1             
2518   8EE1             
2519   8EE1             
2520   8EE1             ;------------------------------------------------------------------------------------------------------------
2521   8EE1             ; $8EE1 - MONITOR
2522   8EE1             ; Called from 
2523   8EE1             ; Arguments: 
2524   8EE1             ; Outputs: 
2525   8EE1             ; RegMod: 
2526   8EE1             ;------------------------------------------------------------------------------------------------------------
2527   8EE1             ;% LB_MONITOR START
2528   8EE1             MONITOR:
2529   8EE1 BA 92 D6        JMP JMP_92D6                    ; $92D6
2530   8EE4             ;% LB_MONITOR END
2531   8EE4             ;------------------------------------------------------------------------------------------------------------
2532   8EE4             
2533   8EE4             
2534   8EE4             
2535   8EE4             ;------------------------------------------------------------------------------------------------------------
2536   8EE4             ; $8EE4 - VCURSOR
2537   8EE4             ; Called from 
2538   8EE4             ; Arguments: 
2539   8EE4             ; Outputs: 
2540   8EE4             ; RegMod: 
2541   8EE4             ;------------------------------------------------------------------------------------------------------------
2542   8EE4             ;% LB_VCURSOR START
2543   8EE4             VCURSOR:
2544   8EE4 A5 77 4E        LDA  (STRING_VARS + $FE)        ;
2545   8EE7 DF              DEC  A                          ; 
2546   8EE8 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2547   8EEB             ;% LB_VCURSOR END
2548   8EEB             ;------------------------------------------------------------------------------------------------------------
2549   8EEB             
2550   8EEB             
2551   8EEB             
2552   8EEB             ;------------------------------------------------------------------------------------------------------------
2553   8EEB             ; $8EEB - VPCURSOR: 
2554   8EEB             ; Called from 
2555   8EEB             ; Arguments: 
2556   8EEB             ; Outputs: 
2557   8EEB             ; RegMod: 
2558   8EEB             ;------------------------------------------------------------------------------------------------------------
2559   8EEB             ;% LB_VPCURSOR START
2560   8EEB             VPCURSOR: ; 
2561   8EEB B5 10           LDI  A,$10                      ; 
2562   8EED FD AE 78 00     STA  #(CRTCTRL)                 ; 
2563   8EF1 FD A5 78 01     LDA  #(CRTCTRL + $01)           ; 
2564   8EF5 FD AE 77 F6     STA  #(VIDEORAM + $07F6)        ; $77F6
2565   8EF9 DF              DEC  A                          ; 
2566   8EFA BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2567   8EFD             ;% LB_VPCURSOR END
2568   8EFD             ;------------------------------------------------------------------------------------------------------------
2569   8EFD             
2570   8EFD             
2571   8EFD             
2572   8EFD             ;------------------------------------------------------------------------------------------------------------
2573   8EFD             ; $8EFD - HCURSOR:  
2574   8EFD             ; Called from 
2575   8EFD             ; Arguments: 
2576   8EFD             ; Outputs: 
2577   8EFD             ; RegMod: 
2578   8EFD             ;------------------------------------------------------------------------------------------------------------
2579   8EFD             ;% LB_HCURSOR START
2580   8EFD             HCURSOR:
2581   8EFD A5 77 4F        LDA  (STRING_VARS + $FF)        ; 
2582   8F00 DF              DEC  A                          ; 
2583   8F01 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2584   8F04             ;% LB_HCURSOR END
2585   8F04             ;------------------------------------------------------------------------------------------------------------
2586   8F04             
2587   8F04             
2588   8F04             
2589   8F04             ;------------------------------------------------------------------------------------------------------------
2590   8F04             ; $8F04 - HPCURSOR: 
2591   8F04             ; Called from 
2592   8F04             ; Arguments: 
2593   8F04             ; Outputs: 
2594   8F04             ; RegMod: 
2595   8F04             ;------------------------------------------------------------------------------------------------------------
2596   8F04             ;% LB_HPCURSOR START
2597   8F04             HPCURSOR:
2598   8F04 00              SBC  XL                         ; 
2599   8F05 11              SBC  (Y)                        ;                      
2600   8F06 FD AE 78 00     STA  #(CRTCTRL)                 ;
2601   8F0A FD A5 78 01     LDA  #(CRTCTRL + $01)           ;
2602   8F0E FD AE 77 F5     STA  #(VIDEORAM + $07F5)        ;
2603   8F12 DF              DEC  A                          ;
2604   8F13 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2605   8F16             ;% LB_HPCURSOR END
2606   8F16             ;------------------------------------------------------------------------------------------------------------
2607   8F16             
2608   8F16             
2609   8F16             
2610   8F16             ;------------------------------------------------------------------------------------------------------------
2611   8F16             ; $8F16 - LIST: 
2612   8F16             ; Called from 
2613   8F16             ; Arguments: 
2614   8F16             ; Outputs: 
2615   8F16             ; RegMod: 
2616   8F16             ;------------------------------------------------------------------------------------------------------------
2617   8F16             ;% LB_LIST START
2618   8F16             LIST:
2619   8F16 A5 76 4F        LDA  (DISP_BUFF + $4F)          ; 
2620   8F19 B9 07           ANI  A,$07                      ; 
2621   8F1B BB 20           ORI  A,$20                      ; 
2622   8F1D AE 76 4F        STA  (DISP_BUFF + $4F)          ; 
2623   8F20 15              LDA  (Y)                        ; 
2624   8F21 B7 0D           CPI  A,$0D                      ; CR = EOL
2625   8F23 89 02           BZR  BR_8F27 ; $8F27            ; A = $0D
2626   8F25 8E 1F           BCH  JMP_8F46 ; $8F46           ; A <> $0D
2627   8F27             
2628   8F27             BR_8F27:
2629   8F27 B7 50           CPI  A,$50                      ; 
2630   8F29 89 08           BZR  BR_8F33                    ; A = $$50
2631   8F2B 54              INC  Y                          ; 
2632   8F2C 15              LDA  (Y)                        ; 
2633   8F2D B7 0D           CPI  A,$0D                      ; 
2634   8F2F 89 02           BZR  BR_8F33                    ; A = $0D
2635   8F31 8E 21           BCH  BR_8F54                    ; A <> $0D
2636   8F33             
2637   8F33             BR_8F33:
2638   8F33 B7 56           CPI  A,$56                      ; 
2639   8F35 89 09           BZR  BR_8F40                    ; A = $56
2640   8F37 54              INC  Y                          ; 
2641   8F38 15              LDA  (Y)                        ; 
2642   8F39 B7 0D           CPI  A,$0D                      ;
2643   8F3B 89 03           BZR  BR_8F40                    ; A = $0D
2644   8F3D BA 92 D6        JMP  JMP_92D6                   ; A <> $0D
2645   8F40             
2646   8F40             BR_8F40:
2647   8F40 BA C9 6F        JMP  BCMD_LIST + 1              ; $C96F
2648   8F43             ;% LB_LIST START
2649   8F43             ;------------------------------------------------------------------------------------------------------------
2650   8F43             
2651   8F43             
2652   8F43             
2653   8F43             ;------------------------------------------------------------------------------------------------------------
2654   8F43             ; $8F43 - JMP_8F43: 
2655   8F43             ; Called from 
2656   8F43             ; Arguments: 
2657   8F43             ; Outputs: 
2658   8F43             ; RegMod: 
2659   8F43             ;------------------------------------------------------------------------------------------------------------
2660   8F43             ;% LB_JMP_8F43 START
2661   8F43             JMP_8F43: ; VLISTALL
2662   8F43 BA 80 00        JMP  B_TBL_8000                 ; $8000
2663   8F46             ;% LB_JMP_8F43 END
2664   8F46             ;------------------------------------------------------------------------------------------------------------
2665   8F46             
2666   8F46             
2667   8F46             
2668   8F46             ;------------------------------------------------------------------------------------------------------------
2669   8F46             ; $8F46 - xxxx: 
2670   8F46             ; Called from LIST:$8F25
2671   8F46             ; Arguments: 
2672   8F46             ; Outputs: 
2673   8F46             ; RegMod: 
2674   8F46             ;------------------------------------------------------------------------------------------------------------
2675   8F46             ;% LB_xxxx START
2676   8F46             JMP_8F46:
2677   8F46 BE 90 8E        SJP  (JMP_908E)                 ; $908E
2678   8F49 CC              VEJ  (CC) \ ABYTL(ROM_ST_H)     ; $7861
2678   8F4A 61          
2679   8F4B B5 FF           LDI  A,$FF                      ; 
2680   8F4D 86              CPA  XH                         ; 
2681   8F4E 89 04           BZR  BR_8F54                    ; $8F54
2682   8F50 CC              VEJ  (CC) \ ABYTL(BASPRG_ST_H)  ; $7865
2682   8F51 65          
2683   8F52 8E 02           BCH  BR_8F56                    ; $8F56
2684   8F54             
2685   8F54             BR_8F54:
2686   8F54 CC              VEJ  (CC) \ ABYTL(BASPRG_EDT_H) ; $7869
2686   8F55 69          
2687   8F56             
2688   8F56             BR_8F56:
2689   8F56 05              LDA  (X)                        ; 
2690   8F57 B7 FF           CPI  A,$FF                      ; 
2691   8F59 89 01           BZR  BR_8F5C                    ; $8F5C
2692   8F5B E2              VEJ  (E2)                       ; 
2693   8F5C             
2694   8F5C             BR_8F5C:
2695   8F5C B5 55           LDI  A,$55                      ; 
2696   8F5E FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2697   8F62 A5 78 71        LDA  (WAIT_CFG)                 ; WAIT setting
2698   8F65 B7 00           CPI  A,$00                      ; 
2699   8F67 89 0D           BZR  BR_8F76                    ; $8F76
2700   8F69 B5 02           LDI  A,$02                      ; 
2701   8F6B AE 78 71        STA  (WAIT_CFG)                 ; WAIT setting
2702   8F6E B5 00           LDI  A,$00                      ; 
2703   8F70 AE 78 72        STA  (WAIT_CTR_H)               ; WAIT time counter (H)
2704   8F73 AE 78 73        STA  (WAIT_CTR_L)               ; WAIT time counter (L)
2705   8F76             
2706   8F76             BR_8F76:
2707   8F76 B5 03           LDI  A,$03                      ; 
2708   8F78 FD CA           ADR  X                          ; 
2709   8F7A CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6
2709   8F7B A6          
2710   8F7C             
2711   8F7C             BR_8F7C:
2712   8F7C 46              DEC  X                          ; 
2713   8F7D 46              DEC  X                          ; 
2714   8F7E BE D2 D0        SJP  (XFRLINE2INBUF)            ; $D2D0
2715   8F81 B5 14           LDI  A,$14                      ; 
2716   8F83 AE 78 80        STA  (DISPARAM)                 ;
2717   8F86 BE E8 CA        SJP  (PRGMDISP)                 ; 
2718   8F89 B5 02           LDI  A,$02                      ; 
2719   8F8B FD AE F0 0B     STA  #(PC1500_IF_REG)           ; 
2720   8F8F BE 81 9E        SJP  (XCHR_INPUT)               ; $819E
2721   8F92 F4              VEJ  (F4) \ AWRD(WAIT_CTR_H)    ; 
2721   8F93 78 72       
2722   8F95             
2723   8F95             BR_8F95:
2724   8F95 FD A8           PSH  U                          ; 
2725   8F97             
2726   8F97             BR_8F97:
2727   8F97 38              NOP                             ;
2728   8F98 38              NOP                             ;
2729   8F99 88 04           LOP  UL,BR_8F97                 ; $8F97
2730   8F9B FD 2A           POP  U                          ;
2731   8F9D 88 0A           LOP  UL,BR_8F95                 ; $8F95
2732   8F9F 6C 00           CPI  UH,$00                     ; 
2733   8FA1 8B 04           BZS  BR_8FA7                    ; $8FA7
2734   8FA3 FD 62           DEC  UH                         ; 
2735   8FA5 9E 12           BCH  BR_8F95                    ; $8F95
2736   8FA7             
2737   8FA7             BR_8FA7:
2738   8FA7 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
2739   8FAA B7 20           CPI  A,$20                      ; 
2740   8FAC 89 02           BZR  BR_8FB0                    ; $8FB0
2741   8FAE 9E 09           BCH  BR_8FA7                    ; $8FA7
2742   8FB0             
2743   8FB0             BR_8FB0:
2744   8FB0 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
2745   8FB3 B7 0B           CPI  A,$0B                      ; 
2746   8FB5 89 08           BZR  BR_8FBF                    ; $8FBF
2747   8FB7 B5 99           LDI  A,$99                      ; 
2748   8FB9 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2749   8FBD 8E 51           BCH  BR_9010                    ; $9010
2750   8FBF             
2751   8FBF             BR_8FBF:
2752   8FBF FD A5 F0 0A     LDA  #(PC1500_MSK_REG)          ; 
2753   8FC3 B9 20           ANI  A,$20                      ; 
2754   8FC5 B7 20           CPI  A,$20                      ; 
2755   8FC7 89 0E           BZR  BR_8FD7                    ; $8FD7
2756   8FC9 B5 00           LDI  A,$00                      ; 
2757   8FCB AE 78 B5        STA  (ERR_LINE_L)               ; 
2758   8FCE FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; 
2758   8FD2 00 
2759   8FD3 BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
2760   8FD6 E2              VEJ  (E2)                       ; 
2761   8FD7             
2762   8FD7             BR_8FD7:
2763   8FD7 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; 
2764   8FDB DD              INC  A                          ; 
2765   8FDC FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; 
2766   8FE0 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6
2766   8FE1 A6          
2767   8FE2 44              INC  X                          ; 
2768   8FE3 44              INC  X                          ; 
2769   8FE4 05              LDA  (X)                        ; 
2770   8FE5 FD CA           ADR  X                          ; 
2771   8FE7 44              INC  X                          ; 
2772   8FE8 47              LDE  X                          ; 
2773   8FE9 B7 FF           CPI  A,$FF                      ; 
2774   8FEB 89 02           BZR  BR_8FEF                    ; $8FEF
2775   8FED 8E 21           BCH  BR_9010                    ; $9010
2776   8FEF             
2777   8FEF             BR_8FEF:
2778   8FEF CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6
2778   8FF0 A6          
2779   8FF1 B5 04           LDI  A,$04                      ; 
2780   8FF3 FD CA           ADR  X                          ; 
2781   8FF5 FD 5A           STX  Y                          ; 
2782   8FF7 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; 
2783   8FFB B7 55           CPI  A,$55                      ; 
2784   8FFD 89 0F           BZR  BR_900E                    ; $900E
2785   8FFF B5 00           LDI  A,$00                      ; 
2786   9001 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2787   9005 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; 
2788   9009 DF              DEC  A                          ; 
2789   900A FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ;
2790   900E             
2791   900E             BR_900E:
2792   900E 9E 94           BCH  BR_8F7C                    ; $8F7C
2793   9010             
2794   9010             BR_9010:
2795   9010 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6
2795   9011 A6          
2796   9012 B5 04           LDI  A,$04                      ; 
2797   9014 FD CA           ADR  X                          ; 
2798   9016 FD 5A           STX  Y                          ; 
2799   9018 CA              VEJ  (CA) \ ABYTL(ERR_ADD_H)    ; $78B2
2799   9019 B2          
2800   901A B5 01           LDI  A,$01                      ; 
2801   901C AE 78 B5        STA  (ERR_LINE_L)               ; 
2802   901F BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
2803   9022 E2              VEJ  (E2)                       ; 
2804   9023             ;% LB_LIST END
2805   9023             ;------------------------------------------------------------------------------------------------------------
2806   9023             
2807   9023             
2808   9023             
2809   9023             ;------------------------------------------------------------------------------------------------------------
2810   9023             ; BACKGR - 
2811   9023             ; Called from 
2812   9023             ; Arguments: 
2813   9023             ; Outputs: 
2814   9023             ; RegMod: 
2815   9023             ;------------------------------------------------------------------------------------------------------------
2816   9023             ;% LB_BACKGR START
2817   9023             BACKGR:
2818   9023 DE              VEJ  (DE) \ ABRF(BR_9081)       ; $9081
2818   9024 5C          
2819   9025 D0              VEJ  (D0) \ 
2819   9026             
2820   9026 10                   ABYT($10) \ ABRF(BR_9081)  ; $9081
2820   9027 59          
2821   9028 B7 10           CPI  A,$10                      ;
2822   902A 81 03           BCR  BR_902F                    ; $902F
2823   902C 68 13           LDI  UH,$13                     ; 
2824   902E E0              VEJ  (E0)                       ; 
2825   902F             
2826   902F             BR_902F:
2827   902F 24              LDA  UL                         ; 
2828   9030 F1              AEX                             ; 
2829   9031 FD AE 77 DD     STA  #(STRING_VARS + $18D)      ; $77DD
2830   9035 C0              VEJ  (C0)                       ; 
2831   9036 6E 0D           CPI  UL,$0D                     ; 
2832   9038 89 0B           BZR  BR_9045                    ; $9045
2833   903A FD A5 77 DD     LDA  #(STRING_VARS + $18D)      ; 
2834   903E B7 0A           CPI  A,$0A                      ; 
2835   9040 BB 0F           ORI  A,$0F                      ; 
2836   9042 2A              STA  UL                         ; 
2837   9043 8E 20           BCH  BR_9065                    ; $9065
2838   9045             
2839   9045             BR_9045:
2840   9045 B7 2C           CPI  A,$2C                      ; 
2841   9047 89 1B           BZR  BR_9064                    ; $9064
2842   9049 DE              VEJ  (DE) \ ABRF(BR_9081)       ; $9081
2842   904A 36          
2843   904B D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_9081) ; $9081
2843   904C 10          
2843   904D 33          
2844   904E B7 10           CPI  A,$10                      ; 
2845   9050 81 03           BCR  BR_9055                    ; $9055
2846   9052 68 13           LDI  UH,$13                     ; 
2847   9054 E0              VEJ  (E0)                       ; 
2848   9055             
2849   9055             BR_9055:
2850   9055 FD AE 77 DE     STA  #(VIDEORAM + $07DE)        ; $77DE
2851   9059 FD AB 77 DD     ORA  #(VIDEORAM + $07DD)        ; $77DD
2852   905D 2A              STA  UL                         ; 
2853   905E FD AE 77 DC     STA  #(VIDEORAM + $07DC)        ; $77DC
2854   9062 8E 01           BCH  BR_9065                    ; $9065
2855   9064             
2856   9064             BR_9064:
2857   9064 E4              VEJ  (E4)                       ; 
2858   9065             
2859   9065             BR_9065:
2860   9065 24              LDA  UL                         ;
2861   9066 BE 90 6A        SJP  (COLOR_FILL)               ; $906A
2862   9069 E2              VEJ  (E2)                       ;
2863   906A             ;------------------------------------------------------------------------------------------------------------
2864   906A             
2865   906A             
2866   906A             
2867   906A             ;------------------------------------------------------------------------------------------------------------
2868   906A             ; $906A - COLOR_FILL: Fills Color RAM with value passed in A
2869   906A             ; Called from: TBL_INIT:8E15, BACKGR:9066
2870   906A             ; Arguments: 
2871   906A             ; Outputs: 
2872   906A             ; RegMod: 
2873   906A             ;------------------------------------------------------------------------------------------------------------
2874   906A             ;% LB_COLOR_FILL START
2875   906A             COLOR_FILL:
2876   906A 48 60           LDI  XH,$60                     ; IWS $6000~$67FF color RAM
2877   906C 4A 00           LDI  XL,$00                     ; 
2878   906E 68 07           LDI  UH,$07                     ; Loop counter
2879   9070 6A D0           LDI  UL,$D0                     ; $6000~$67D0
2880   9072             
2881   9072             BR_9072:
2882   9072 FD 0E           STA  #(X)                       ; Store color in A to Color RAM
2883   9074 44              INC  X                          ; Inc address pointer
2884   9075 66              DEC  U                          ; Dec counter
2885   9076 6C 00           CPI  UH,$00                     ; 
2886   9078 89 05           BZR  BR_907F                    ; HB of count = 0
2887   907A 6E 00           CPI  UL,$00                     ; 
2888   907C 89 01           BZR  BR_907F                    ; LB of count = 0
2889   907E 9A              RTN                             ; Done
2890   907F             
2891   907F             BR_907F:
2892   907F 9E 0F           BCH  BR_9072                    ; $9072
2893   9081             
2894   9081             BR_9081:
2895   9081 E0              VEJ  (E0)                       ; (E0) Error according to UH
2896   9082             ;% LB_COLOR_FILL END
2897   9082             ;------------------------------------------------------------------------------------------------------------
2898   9082             
2899   9082             
2900   9082             
2901   9082             ;------------------------------------------------------------------------------------------------------------
2902   9082             ; $9082 - ERN:
2903   9082             ; Called from 
2904   9082             ; Arguments: 
2905   9082             ; Outputs: 
2906   9082             ; RegMod: 
2907   9082             ;------------------------------------------------------------------------------------------------------------
2908   9082             ;% LB_ERN START
2909   9082             ERN:
2910   9082 A5 78 9B        LDA  (ERL)                      ;
2911   9085 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2912   9088             ;% LB_ERN END
2913   9088             ;------------------------------------------------------------------------------------------------------------
2914   9088             
2915   9088             
2916   9088             
2917   9088             ;------------------------------------------------------------------------------------------------------------
2918   9088             ; $9088 - ERL:
2919   9088             ; Called from 
2920   9088             ; Arguments: 
2921   9088             ; Outputs: 
2922   9088             ; RegMod: 
2923   9088             ;------------------------------------------------------------------------------------------------------------
2924   9088             ;% LB_ERL START
2925   9088             IWS_ERL:
2926   9088 F4              VEJ  (F4) \ AWRD(ERR_LINE_H)    ;
2926   9089 78 B4       
2927   908B BA DA 6C        JMP  BCMD_MEM + $0F             ; $DA6C
2928   908E             
2929   908E             JMP_908E:
2930   908E A5 78 60        LDA  (ST_ROM_MOD)               ; $7860
2931   9091 08              STA  XH                         ; 
2932   9092 B7 FF           CPI  A,$FF                      ; 
2933   9094 89 04           BZR  BR_909A                    ; $909A
2934   9096 A5 78 63        LDA  (RAM_ST_H)                 ; 
2935   9099 08              STA  XH                         ; 
2936   909A             
2937   909A             BR_909A:
2938   909A 4A 00           LDI  XL,$00                     ; 
2939   909C 05              LDA  (X)                        ;
2940   909D B7 55           CPI  A,$55                      ; 
2941   909F 89 08           BZR  BR_90A9                    ; $90A9
2942   90A1 4A 07           LDI  XL,$07                     ; 
2943   90A3 05              LDA  (X)                        ; 
2944   90A4 B7 00           CPI  A,$00                      ; 
2945   90A6 89 01           BZR  BR_90A9                    ; $90A9
2946   90A8 E2              VEJ  (E2)                       ;
2947   90A9             
2948   90A9             BR_90A9:
2949   90A9 9A              RTN                             ; 
2950   90AA             ;% LB_ERL END
2951   90AA             ;------------------------------------------------------------------------------------------------------------
2952   90AA             
2953   90AA             
2954   90AA             
2955   90AA             ;------------------------------------------------------------------------------------------------------------
2956   90AA             ; $90AA - SLEEP:
2957   90AA             ; Called from 
2958   90AA             ; Arguments: 
2959   90AA             ; Outputs: 
2960   90AA             ; RegMod: 
2961   90AA             ;% LB_SLEEP START
2962   90AA             SLEEP:
2963   90AA 94              LDA  YH                         ;
2964   90AB B7 7B           CPI  A,$7B                      ;
2965   90AD 8B 04           BZS  BR_90B3                    ; Skip sleep if YH = $7B. Why?
2966   90AF BE E3 3F        SJP  (AUTO_OFF)                 ; Power down
2967   90B2 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2968   90B3             
2969   90B3             BR_90B3: 
2970   90B3 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; 
2971   90B6 BE CF CC        SJP  ($CFCC)                    ; (INITSYSADDR) $CFCC Init Sys Addr, turn off trace
2972   90B9 BE D0 2B        SJP  ($D02B)                    ; (INBUF_CLRINIT) $D02B Clear IN_BUF w/$0D
2973   90BC B5 3E           LDI  A,$3E                      ; 
2974   90BE 1E              STA  (Y)                        ; 
2975   90BF E9 78 8A EF     ANI  (BREAKPARAM),$EF           ;
2976   90C3 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ;
2977   90C7 B5 00           LDI  A,$00                      ; 
2978   90C9 AE 78 80        STA  (DISPARAM)                 ;
2979   90CC AE 78 9C        STA  (CURR_LINE_H)              ;
2980   90CF AE 78 9D        STA  (CURR_LINE_L)              ; 
2981   90D2 BE E8 CA        SJP  (PRGMDISP)                 ; 
2982   90D5 48 CA           LDI  XH,$CA                     ; HB(EDITOR+$12) $CA
2983   90D7 4A 92           LDI  XL,$92                     ; HB(EDITOR+$12) $92
2984   90D9 FD 88           PSH  X                          ;
2985   90DB BA E3 3F        JMP  AUTO_OFF                   ; $E33F
2986   90DE             
2987   90DE             JMP_90DE:
2988   90DE FD C8           PSH  A                          ; 
2989   90E0 A5 79 D5        LDA  ($79D5)                    ; ***mystery bypass
2990   90E3 B7 55           CPI  A,$55                      ; Check for $55 bypass flag
2991   90E5 89 07           BZR  BR_90EE                    ; If not bypassed
2992   90E7 FD 8A           POP  A                          ; If bypassed
2993   90E9 EB 7B 0E 40     ORI  (CURS_CTRL),$40            ; Cursor Control Parameter
2994   90ED 9A              RTN                             ;
2995   90EE             
2996   90EE             BR_90EE:
2997   90EE FD 8A           POP  A                          ; 
2998   90F0 9A              RTN                             ; 
2999   90F1             ;% LB_SLEEP END
3000   90F1             ;------------------------------------------------------------------------------------------------------------
3001   90F1             
3002   90F1             
3003   90F1             
3004   90F1             ;------------------------------------------------------------------------------------------------------------
3005   90F1             ; REPKEY - 
3006   90F1             ; Called from:
3007   90F1             ; Arguments: 
3008   90F1             ; Outputs: 
3009   90F1             ; RegMod: 
3010   90F1             ;------------------------------------------------------------------------------------------------------------
3011   90F1             ;% LB_REPKEY START
3012   90F1             REPKEY:
3013   90F1 C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_90FB) ; BCMD_LOG ($F165+?) \ $90FB
3013   90F2 F1 9C       
3013   90F4 06          
3014   90F5 B5 55           LDI  A,$55                      ; 
3015   90F7             
3016   90F7             BR_90F7:
3017   90F7 AE 79 D5        STA  ($79D5)                    ; ***mystery bypass
3018   90FA E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3019   90FB             
3020   90FB             BR_90FB:
3021   90FB 56              DEC  Y                          ;
3022   90FC 56              DEC  Y                          ;
3023   90FD C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_9105) ; DIVISION ($F084) \ $9105
3023   90FE F1 9E       
3023   9100 04          
3024   9101 B5 00           LDI  A,$00                      ;
3025   9103 9E 0E           BCH  BR_90F7                    ; $90F7
3026   9105             
3027   9105             BR_9105:
3028   9105 54              INC  Y                          ; 
3029   9106 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3030   9107             ;% LB_REPKEY END
3031   9107             ;------------------------------------------------------------------------------------------------------------
3032   9107             
3033   9107             
3034   9107             
3035   9107             ;------------------------------------------------------------------------------------------------------------
3036   9107             ; GCLS - Clears graphics RAM?
3037   9107             ; Called from: 
3038   9107             ; Arguments: 
3039   9107             ; Outputs: 
3040   9107             ; RegMod: 
3041   9107             ;------------------------------------------------------------------------------------------------------------
3042   9107             ;% LB_GCLS START
3043   9107             GCLS:
3044   9107 15              LDA  (Y)                        ;
3045   9108 B7 0D           CPI  A,$0D                      ; A <> $0D
3046   910A 89 04           BZR  BR_9110                    ;
3047   910C B5 00           LDI  A,$00                      ; 
3048   910E 8E 06           BCH  BR_9116                    ; $9116
3049   9110             
3050   9110             BR_9110:
3051   9110 DE              VEJ  (DE) \ ABRF(BR_914B)       ; $914B
3051   9111 39          
3052   9112 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_914B) ; $914B
3052   9113 10          
3052   9114 36          
3053   9115 24              LDA  UL                         ;
3054   9116             
3055   9116             BR_9116:
3056   9116 BE 91 1A        SJP  (JMP_911A)                 ; $911A
3057   9119 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3058   911A             
3059   911A             JMP_911A:
3060   911A B5 55           LDI  A,$55                      ; 
3061   911C FD AE 30 00     STA  #($3000)                   ; ***IWS ME1???
3062   9120 FD A7 30 00     CPA  #($3000)                   ; ***
3063   9124 89 08           BZR  BR_912E                    ; $912E
3064   9126 68 07           LDI  UH,$07                     ; Next 4 lines don't seem to do anything
3065   9128 6A D0           LDI  UL,$D0                     ; Loop counter
3066   912A 48 68           LDI  XH,HB(GRAPHRAM)            ; $68 - HB Graphics RAM
3067   912C 4A 00           LDI  XL,LB(GRAPHRAM)            ; $00 - LB Graphics RAM
3068   912E             
3069   912E             BR_912E:
3070   912E B5 00           LDI  A,$00                      ; 
3071   9130 FD AE 30 00     STA  #($3000)                   ; ***
3072   9134 68 3E           LDI  UH,$3E                     ; Why set U,X again after just set above?
3073   9136 6A 81           LDI  UL,$81                     ; 
3074   9138 48 30           LDI  XH,$30                     ;
3075   913A 4A 00           LDI  XL,$00                     ; 
3076   913C             
3077   913C             BR_913C:
3078   913C FD 0E           STA  #(X)                       ; 
3079   913E 44              INC  X                          ;
3080   913F 66              DEC  U                          ; 
3081   9140 6C 00           CPI  UH,$00                     ;
3082   9142 89 05           BZR  BR_9149                    ; $9149
3083   9144 6E 00           CPI  UL,$00                     ; 
3084   9146 89 01           BZR  BR_9149                    ; $9149
3085   9148 9A              RTN                             ; Done
3086   9149             
3087   9149             BR_9149:
3088   9149 9E 0F           BCH  BR_913C                    ; $913C
3089   914B             
3090   914B             BR_914B:
3091   914B E0              VEJ  (E0)                       ; (E0) Error according to UH
3092   914C             ;% LB_GCLS END
3093   914C             ;------------------------------------------------------------------------------------------------------------
3094   914C             
3095   914C             
3096   914C             
3097   914C             ;------------------------------------------------------------------------------------------------------------
3098   914C             ; DEC - 
3099   914C             ; Called from 
3100   914C             ; Arguments: 
3101   914C             ; Outputs: 
3102   914C             ; RegMod: 
3103   914C             ;------------------------------------------------------------------------------------------------------------
3104   914C             ;% LB_DEC START
3105   914C             DEC:
3106   914C BA 92 D6        JMP  JMP_92D6 ; $92D6
3107   914F             ;% LB_END 
3108   914F             ;------------------------------------------------------------------------------------------------------------
3109   914F             
3110   914F             
3111   914F             
3112   914F             ;------------------------------------------------------------------------------------------------------------
3113   914F             ; GVCURSOR - 
3114   914F             ; Called from 
3115   914F             ; Arguments: 
3116   914F             ; Outputs: 
3117   914F             ; RegMod: 
3118   914F             ;------------------------------------------------------------------------------------------------------------
3119   914F             ;% LB_GVCURSOR START
3120   914F             GVCURSOR:
3121   914F E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3122   9150             
3123   9150             JMP_9150:
3124   9150 A5 79 D6        LDA  ($79D6)                    ; *** unused section of PC-1500 used as flag for?
3125   9153 B7 55           CPI  A,$55                      ; 
3126   9155 89 02           BZR  BR_9159                    ; $9159
3127   9157 8E 1D           BCH  BR_9176                    ; $9176
3128   9159             
3129   9159             BR_9159:
3130   9159 B5 BE           LDI  A,$BE                      ; 
3131   915B AE 78 50        STA  (OUTSTAT_REG)              ; 
3132   915E B5 E2           LDI  A,$E2                      ; 
3133   9160 AE 78 51        STA  (CONSOLE_REG)              ; $7851
3134   9163 B5 67           LDI  A,$67                      ; 
3135   9165 AE 78 52        STA  (CONSOLE2)                 ; $7852
3136   9168             
3137   9168             BR_9168:
3138   9168 B5 9A           LDI  A,$9A                      ;
3139   916A AE 78 53        STA  (CE158_UNDEF1)             ; $7853
3140   916D B5 9A           LDI  A,$9A                      ;
3141   916F AE 78 54        STA  (CE158_UNDEF2)             ; $7854
3142   9172 BE 78 50        SJP  (OUTSTAT_REG)              ; 
3143   9175 9A              RTN                             ; Done
3144   9176             
3145   9176             BR_9176:
3146   9176 B5 BE           LDI  A,$BE                      ; 
3147   9178 AE 78 50        STA  (OUTSTAT_REG)              ; 
3148   917B A5 78 56        LDA  (ZONE_REG)                 ; $7856
3149   917E AE 78 51        STA  (CONSOLE_REG)              ; $7851
3150   9181 A5 78 57        LDA  (SETDEV_REG)               ; $7857
3151   9184 AE 78 52        STA  (CONSOLE2)                 ; $7852
3152   9187 9E 21           BCH  BR_9168                    ; $9168
3153   9189             
3154   9189             
3155   9189             JMP_9189:
3156   9189 48 77           LDI  XH,$77                     ; IWS Video RAM area
3157   918B 4A 7F           LDI  XL,$7F                     ; 
3158   918D 58 77           LDI  YH,$77                     ; IWS Video RAM area
3159   918F 5A CF           LDI  YL,$CF                     ; 
3160   9191 68 07           LDI  UH,$07                     ; Loop counter?
3161   9193 6A 80           LDI  UL,$80                     ; 
3162   9195             
3163   9195             BR_9195:
3164   9195 FD 05           LDA  #(X)                       ; Moves block of video RAM
3165   9197 FD 1E           STA  #(Y)                       ; 
3166   9199 46              DEC  X                          ; 
3167   919A 56              DEC  Y                          ; 
3168   919B 66              DEC  U                          ; 
3169   919C 6C 00           CPI  UH,$00                     ; 
3170   919E 89 05           BZR  BR_91A5                    ; $91A5
3171   91A0 6E 00           CPI  UL,$00                     ; 
3172   91A2 89 01           BZR  BR_91A5                    ; $91A5
3173   91A4 9A              RTN                             ; 
3174   91A5             
3175   91A5             BR_91A5:
3176   91A5 9E 12           BCH  BR_9195                    ; $9195
3177   91A7             ;% LB_GVCURSOR END
3178   91A7             ;------------------------------------------------------------------------------------------------------------
3179   91A7             
3180   91A7             
3181   91A7             
3182   91A7             ;------------------------------------------------------------------------------------------------------------
3183   91A7             ; PRINT - 
3184   91A7             ; Called from 
3185   91A7             ; Arguments: 
3186   91A7             ; Outputs: 
3187   91A7             ; RegMod: 
3188   91A7             ;------------------------------------------------------------------------------------------------------------
3189   91A7             ;% LB_PRINT START
3190   91A7             PRINT:
3191   91A7 C2              VEJ  (C2) \ ACHR($23) \ ABRF(BR_91B1) ; $91B1
3191   91A8 23          
3191   91A9 07          
3192   91AA C2              VEJ  (C2) \ ACHR($2D) \ ABRF(BR_91BB) ; $91BB
3192   91AB 2D          
3192   91AC 0E          
3193   91AD C6              VEJ  (C6)                       ; (C6) Correct program pointer
3194   91AE BA E4 EE        JMP  BCMD_PRINT + $03           ; $E4EE 
3195   91B1             
3196   91B1             BR_91B1:
3197   91B1 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3198   91B2 D8              VEJ  (D8)                       ; (D8) Checks calculator mode
3199   91B3 89 03           BZR  BR_91B8                    ; $91B8
3200   91B5 BA E4 EB        JMP  BCMD_PRINT                 ; $E4EB
3201   91B8             
3202   91B8             BR_91B8:
3203   91B8 BA 8A 8B        JMP  JMP_8A8B                   ; $8A8B
3204   91BB             
3205   91BB             BR_91BB:
3206   91BB C6              VEJ  (C6)                       ; (C6) Correct program pointer
3207   91BC DE              VEJ  (DE) \ ABRF(BR_91D2)       ; $91D2
3207   91BD 14          
3208   91BE D0              VEJ  (D0) \ ABYT($80) \ ABRF(BR_91D2) ; $91D2
3208   91BF 80          
3208   91C0 11          
3209   91C1 F4              VEJ  (F4) \ AWRD(BR_8803)       ; $8803
3209   91C2 88 03       
3210   91C4 6C 44           CPI  UH,$44                     ; 
3211   91C6 89 07           BZR  BR_91CF                    ; $91CF
3212   91C8 6E 49           CPI  UL,$49                     ; 
3213   91CA 89 03           BZR  BR_91CF                    ; $91CF
3214   91CC BA 88 F7        JMP  $88F7                      ; ***bug? seems to jump to middle of line
3215   91CF             
3216   91CF             BR_91CF:
3217   91CF 68 1B           LDI  UH,$1B                     ; 
3218   91D1 E0              VEJ  (E0)                       ; (E0) Error according to UH
3219   91D2             
3220   91D2             BR_91D2:
3221   91D2 E0              VEJ  (E0)                       ; (E0) Error according to UH
3222   91D3             ;% LB_PRINT END
3223   91D3             ;------------------------------------------------------------------------------------------------------------
3224   91D3             
3225   91D3             
3226   91D3             
3227   91D3             ;------------------------------------------------------------------------------------------------------------
3228   91D3             ; MODE - 
3229   91D3             ; Called from 
3230   91D3             ; Arguments: 
3231   91D3             ; Outputs: 
3232   91D3             ; RegMod: 
3233   91D3             ;------------------------------------------------------------------------------------------------------------
3234   91D3             ;% LB_MODE START
3235   91D3             MODE: ; $91D3
3236   91D3 FD E9 77 E0     ANI  #(VIDEORAM + $07E0),$00    ; $77E0
3236   91D7 00 
3237   91D8             
3238   91D8             BR_91D8:
3239   91D8 C2               VEJ  (C2) \ ACHR($4D) \ ABRF(BR_9219) ; $9219
3239   91D9 4D          
3239   91DA 3E          
3240   91DB BE 91 EF         SJP  (BR_91EF)                 ; $91EF
3241   91DE 15               LDA  (Y)                       ; 
3242   91DF B7 2C            CPI  A,$2C                     ; 
3243   91E1 89 03            BZR  BR_91E6                   ; $91E6
3244   91E3 54               INC  Y                         ; 
3245   91E4 9E 0E            BCH  BR_91D8                   ; $91D8
3246   91E6             
3247   91E6             BR_91E6:
3248   91E6 FD A5 77 E0     LDA  #(VIDEORAM + $07E0)        ; 
3249   91EA FD AE D8 00     STA  #($D800)                   ; ***IWS??
3250   91EE E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3251   91EF             
3252   91EF             BR_91EF:
3253   91EF DE              VEJ  (DE) \ ABRF(BR_9218)       ; $9218
3253   91F0 27          
3254   91F1 D0              VEJ  (D0) \ ABYT($10) \ ABRF(BR_9218) ; $9218
3254   91F2 10          
3254   91F3 24          
3255   91F4 6C 01           CPI  UH,$01                     ; 
3256   91F6 81 03           BCR  BR_91FB                    ; $91FB
3257   91F8 68 13           LDI  UH,$13                     ; 
3258   91FA E0              VEJ  (E0)                       ; (E0) Error according to UH
3259   91FB             
3260   91FB             BR_91FB:
3261   91FB 6E 09           CPI  UL,$09                     ; 
3262   91FD 89 03           BZR  BR_9202                    ; $9202
3263   91FF 68 13           LDI  UH,$13                     ; 
3264   9201 E0              VEJ  (E0)                       ; (E0) Error according to UH
3265   9202             
3266   9202             BR_9202: 
3267   9202 6E 00           CPI  UL,$00                     ; 
3268   9204 89 02           BZR  BR_9208                    ; $9208
3269   9206 6A 09           LDI  UL,$09                     ; 
3270   9208             
3271   9208             BR_9208:
3272   9208 62              DEC  UL                         ; 
3273   9209 B5 00           LDI  A,$00                      ; 
3274   920B FB              SEC                             ; 
3275   920C             
3276   920C             BR_920C:
3277   920C DB              ROL                             ; 
3278   920D 88 03           LOP  UL,BR_920C                 ; $920C
3279   920F FD AB 77 E0     ORA  #(VIDEORAM + $07E0)        ; 
3280   9213 FD AE 77 E0     STA  #(VIDEORAM + $07E0)        ; 
3281   9217 9A              RTN
3282   9218             
3283   9218             BR_9218:
3284   9218 E0              VEJ  (E0)                       ; (E0) Error according to UH
3285   9219             
3286   9219             BR_9219:
3287   9219 56              DEC  Y
3288   921A 15              LDA  (Y)
3289   921B CD 04           VMJ  ($04) \ ABRF(BR_921F)      ; 921F
3289   921D 01          
3290   921E E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3291   921F             
3292   921F             BR_921F:
3293   921F B7 22           CPI  A,$22                      ; 
3294   9221 89 02           BZR  BR_9225                    ; $9225
3295   9223 9E 4D           BCH  BR_91D8                    ; $91D8
3296   9225             
3297   9225             BR_9225:
3298   9225 C2              VEJ  (C2) \ ACHR($53) \ ABRF(BR_9232) ; $9232
3298   9226 53          
3298   9227 0A          
3299   9228 DE              VEJ  (DE) \ ABRF($9233)         ; 
3299   9229 09          
3300   922A D0              VEJ  (D0) \ ABYT($08) \ ABRF(BR_9233) ; $9233
3300   922B 08          
3300   922C 06          
3301   922D 24              LDA  UL                         ; 
3302   922E FD CC           ATP                             ; 
3303   9230 9E 5A           BCH  BR_91D8                    ; $91D8
3304   9232             
3305   9232             BR_9232:
3306   9232 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3307   9233             
3308   9233             BR_9233:
3309   9233 E0              VEJ  (E0)                       ; (E0) Error according to UH
3310   9234             ;% LB_MODE END
3311   9234             ;------------------------------------------------------------------------------------------------------------
3312   9234             
3313   9234             
3314   9234             
3315   9234             ;------------------------------------------------------------------------------------------------------------
3316   9234             ; SAVE - 
3317   9234             ; Called from 
3318   9234             ; Arguments: 
3319   9234             ; Outputs: 
3320   9234             ; RegMod: 
3321   9234             ;------------------------------------------------------------------------------------------------------------
3322   9234             ;% LB_SAVE START
3323   9234             SAVE:
3324   9234 15              LDA  (Y)                        ;
3325   9235 54              INC  Y                          ;
3326   9236 CD 34           VMJ  ($34) \ ABYT($04) \            ;
3326   9238 04          
3326   9239             
3327   9239 43                    ABYT($43) \ ABRF(BR_9277) \   ;
3327   923A 3C          
3327   923B             
3328   923B 46                    ABYT($46) \ ABRF(BR_9287) \   ;
3328   923C 4A          
3328   923D             
3329   923D 51                    ABYT($51) \ ABRF(BR_9297) \   ;
3329   923E 58          
3329   923F             
3330   923F 44                    ABYT($44) \ ABRF(BR_929A) \   ;
3330   9240 59          
3330   9241             
3331   9241 52                    ABYT($52) \ ABRF(BR_92B2)     ;
3331   9242 6F          
3332   9243 E4              VEJ  (E4)                           ; (E4) Output Error 1 and return to the editor
3333   9244             ;% LB_SAVE END
3334   9244             ;------------------------------------------------------------------------------------------------------------
3335   9244             
3336   9244             
3337   9244             
3338   9244             ;------------------------------------------------------------------------------------------------------------
3339   9244             ; LOAD - 
3340   9244             ; Called from 
3341   9244             ; Arguments: 
3342   9244             ; Outputs: 
3343   9244             ; RegMod: 
3344   9244             ;------------------------------------------------------------------------------------------------------------
3345   9244             ;% LB_LOAD START
3346   9244             LOAD:
3347   9244 15               LDA  (Y)                       ; 
3348   9245 54               INC  Y                         ; 
3349   9246 CD 34            VMJ  ($34) \ ABYT($04) \           ; 
3349   9248 04          
3349   9249             
3350   9249 43                     ABYT($43) \ ABRF(BR_9254) \  ;  
3350   924A 09          
3350   924B             
3351   924B 46                     ABYT($46) \ ABRF(BR_9264) \  ;  
3351   924C 17          
3351   924D             
3352   924D 51                     ABYT($51) \ ABRF(BR_9274) \  ; 
3352   924E 25          
3352   924F             
3353   924F 44                     ABYT($44) \ ABRF(BR_92A6) \  ; 
3353   9250 55          
3353   9251             
3354   9251 52                     ABYT($52) \ ABRF(BR_92BE)    ; 
3354   9252 6B          
3355   9253 E4               VEJ  (E4)                      ; (E4) Output Error 1 and return to the editor
3356   9254             
3357   9254             BR_9254:
3358   9254 F4              VEJ  (F4) \ AWRD($B802)         ; ***CMT_PNAME $B800 CMT Periph name
3358   9255 B8 02       
3359   9257 6C 43           CPI  UH,$43                     ; 
3360   9259 89 07           BZR  BR_9262                    ; $9262
3361   925B 6E 4D           CPI  UL,$4D                     ; 
3362   925D 89 03           BZR  BR_9262                    ; $9262
3363   925F BA B8 F9        JMP  CLOAD_150                  ; $B8F9 
3364   9262             
3365   9262             BR_9262:
3366   9262 8E 72           BCH  JMP_92D6                   ; $92D6
3367   9264             
3368   9264             BR_9264:
3369   9264 F4              VEJ  (F4) \ AWRD($A805)         ; *** PRINT_150 $A781
3369   9265 A8 05       
3370   9267 6C 4C           CPI  UH,$4C                     ;
3371   9269 89 07           BZR  BR_9272                    ; $9272
3372   926B 6E 32           CPI  UL,$32                     ;
3373   926D 89 03           BZR  BR_9272                    ; $9272
3374   926F BA AD BB        JMP  GRAPH + $E8                ; $ADBB (CE150)
3375   9272             
3376   9272             BR_9272:
3377   9272 8E 62           BCH  JMP_92D6                   ; $92D6
3378   9274             
3379   9274             BR_9274:
3380   9274 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3381   9277             
3382   9277             BR_9277:
3383   9277 F4              VEJ  (F4) \ AWRD($B802)         ; ***CMT Perips name $B800
3383   9278 B8 02       
3384   927A 6C 43           CPI  UH,$43                     ; 
3385   927C 89 07           BZR  BR_9285                    ; $9285
3386   927E 6E 4D           CPI  UL,$4D                     ; 
3387   9280 89 03           BZR  BR_9285                    ; $9285
3388   9282 BA B8 A6        JMP  CSAVE_150                  ; $B8A6
3389   9285             
3390   9285             BR_9285:
3391   9285 8E 4F           BCH  JMP_92D6                   ; $92D6
3392   9287             
3393   9287             BR_9287:
3394   9287 F4              VEJ  (F4) \ AWRD($A805)         ; *** PRINT_150 $A781
3394   9288 A8 05       
3395   928A 6C 4C           CPI  UH,$4C                     ; 
3396   928C 89 07           BZR  BR_9295                    ; $9295
3397   928E 6E 32           CPI  UL,$32                     ;
3398   9290 89 03           BZR  BR_9295                    ; $9295
3399   9292 BA AB 8F        JMP  PENUPDOWN + $AC            ; $AB8F CE150 
3400   9295             
3401   9295             BR_9295:
3402   9295 8E 3F           BCH  JMP_92D6                   ; $92D6
3403   9297             
3404   9297             BR_9297:
3405   9297 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3406   929A             
3407   929A             BR_929A:
3408   929A F4              VEJ  (F4) \ AWRD($A803)         ; *** PRINT_150 $A781
3408   929B A8 03       
3409   929D 6C 44           CPI  UH,$44                     ;
3410   929F 89 03           BZR  BR_92A4                    ; $92A4
3411   92A1 BA A8 F1        JMP  MOTDRV + $14               ; $A8F4 CE150 
3412   92A4             
3413   92A4             BR_92A4:
3414   92A4 8E 30           BCH  JMP_92D6                   ; $92D6
3415   92A6             
3416   92A6             BR_92A6:
3417   92A6 F4              VEJ  (F4) \ AWRD($A803)         ; ***PRINT_150
3417   92A7 A8 03       
3418   92A9 6C 44           CPI  UH,$44                     ; 
3419   92AB 89 03           BZR  BR_92B0                    ; $92B0
3420   92AD BA A8 F1        JMP PRINT_150 + $170            ; $A8F1 CE150
3421   92B0             
3422   92B0             BR_92B0:
3423   92B0 8E 24           BCH  JMP_92D6                   ; $92D6
3424   92B2             
3425   92B2             BR_92B2:
3426   92B2 F4              VEJ  (F4) \ AWRD($A803)         ; ***PRINT_150
3426   92B3 A8 03       
3427   92B5 6C 44           CPI  UH,$44                     ;
3428   92B7 89 03           BZR  BR_92BC                    ; $92BC
3429   92B9 BA A8 EE        JMP  MOTDRV + $11               ; $A8EE CE150
3430   92BC             
3431   92BC             BR_92BC:
3432   92BC 8E 18           BCH  JMP_92D6                   ; $92D6
3433   92BE             
3434   92BE             BR_92BE:
3435   92BE F4              VEJ  (F4) \ AWRD($A803)         ; ***
3435   92BF A8 03       
3436   92C1 6C 44           CPI  UH,$44                     ; 
3437   92C3 89 03           BZR  BR_92C8                    ; $92C8
3438   92C5 BA A8 EB        JMP  MOTDRV + $0E               ; $A8EB CE150
3439   92C8             
3440   92C8             BR_92C8:
3441   92C8 8E 0C           BCH  JMP_92D6                   ; $92D6
3442   92CA F4              VEJ  (F4) \ AWRD($A803)         ; ***
3442   92CB A8 03       
3443   92CD 6C 44           CPI  UH,$44                     ; 
3444   92CF 89 03           BZR  BR_92D4                    ; $92D4
3445   92D1 BA A8 E8        JMP  MOTDRV + $0B               ; $A8E8 CE150
3446   92D4             
3447   92D4             BR_92D4:
3448   92D4                 ;BCH  JMP_92D6 ; $92D6
3449   92D4 9E 00           .BYTE $9E,$00                   ; asessembler calcualtes  wrong direction on 0 lenght branch
3450   92D6             
3451   92D6             JMP_92D6:
3452   92D6 68 1B           LDI  UH,$1B                     ; 
3453   92D8 E0              VEJ  (E0)                       ; (E0) Error according to UH
3454   92D9             ;% LB_LOAD END
3455   92D9             ;------------------------------------------------------------------------------------------------------------
3456   92D9             
3457   92D9             
3458   92D9             
3459   92D9             ;------------------------------------------------------------------------------------------------------------
3460   92D9             ; VERIFYQ - 
3461   92D9             ; Called from 
3462   92D9             ; Arguments: 
3463   92D9             ; Outputs: 
3464   92D9             ; RegMod: 
3465   92D9             ;------------------------------------------------------------------------------------------------------------
3466   92D9             ;% LB_VERIFYQ START
3467   92D9             VERIFYQ:
3468   92D9 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3469   92DC             ;% LB_VERIFYQ END
3470   92DC             ;------------------------------------------------------------------------------------------------------------
3471   92DC             
3472   92DC             
3473   92DC             
3474   92DC             ;------------------------------------------------------------------------------------------------------------
3475   92DC             ; CHAIN - 
3476   92DC             ; Called from 
3477   92DC             ; Arguments: 
3478   92DC             ; Outputs: 
3479   92DC             ; RegMod: 
3480   92DC             ;------------------------------------------------------------------------------------------------------------
3481   92DC             ;% LB_CHAIN START
3482   92DC             CHAIN:
3483   92DC 55              LIN  Y                          ;
3484   92DD CD 34           VMJ  ($34) \ ABYT($01) \            ;
3484   92DF 01          
3484   92E0             
3485   92E0 43                    ABYT($43) \ ABRF(BR_92F5) \   ;
3485   92E1 13          
3485   92E2             
3486   92E2 51                    ABYT($51) \ ABRF(BR_9305)     ;
3486   92E3 21          
3487   92E4 F4              VEJ  (F4) \ AWRD($B802)         ; 
3487   92E5 B8 02       
3488   92E7 6C 43           CPI  UH,$43                     ; 
3489   92E9 89 08           BZR  BR_92F3                    ; $92F3
3490   92EB 6E 4D           CPI  UL,$4D                     ; 
3491   92ED 89 04           BZR  BR_92F3                    ; $92F3
3492   92EF 56              DEC  Y                          ; 
3493   92F0 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
3494   92F3             
3495   92F3             BR_92F3:
3496   92F3 9E 1F           BCH  JMP_92D6                   ; $92D6
3497   92F5             
3498   92F5             BR_92F5:
3499   92F5 F4              VEJ  (F4) \ AWRD($B802)         ; ***CMT Periph name $B800
3499   92F6 B8 02       
3500   92F8 6C 43           CPI  UH,$43                     ;
3501   92FA 89 07           BZR  BR_9303                    ; $9303
3502   92FC 6E 4D           CPI  UL,$4D                     ;
3503   92FE 89 03           BZR  BR_9303                    ; $9303
3504   9300 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
3505   9303             
3506   9303             BR_9303:
3507   9303 9E 2F           BCH  JMP_92D6                   ; $92D6
3508   9305             
3509   9305             BR_9305:
3510   9305 BA 92 D6        JMP  JMP_92D6                   ; $92D6
3511   9308             ;% LB_CHAIN END
3512   9308             ;------------------------------------------------------------------------------------------------------------
3513   9308             
3514   9308             
3515   9308             
3516   9308             ;------------------------------------------------------------------------------------------------------------
3517   9308             ; KEY - 
3518   9308             ; Called from 
3519   9308             ; Arguments: 
3520   9308             ; Outputs: 
3521   9308             ; RegMod: 
3522   9308             ;------------------------------------------------------------------------------------------------------------
3523   9308             ;% LB_KEY START
3524   9308             KEY:
3525   9308 C2              VEJ  (C2) \ AWRD($F182) \ ABRF(BR_9323) ; $9323
3525   9309 F1 82       
3525   930B 17          
3526   930C C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_9317) ; $9317
3526   930D F1 9C       
3526   930F 07          
3527   9310 B5 55           LDI  A,$55
3528   9312 FD AE 77 E2     STA  #(VIDEORAM + $07E2) ; $77E2
3529   9316 E2              VEJ  (E2)
3530   9317             
3531   9317             BR_9317:
3532   9317 C6              VEJ  (C6)
3533   9318 C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_9322) ; $9322
3533   9319 F1 9E       
3533   931B 06          
3534   931C FD E9 77 E2     ANI  #(VIDEORAM + $07E2),$00
3534   9320 00 
3535   9321 E2              VEJ  (E2)
3536   9322             
3537   9322             BR_9322:
3538   9322 E4              VEJ  (E4)
3539   9323             
3540   9323             BR_9323:
3541   9323 C6              VEJ  (C6)
3542   9324 C2              VEJ  (C2) \ AWRD($F19C) \ ABRF(BR_9339) ; $9339
3542   9325 F1 9C       
3542   9327 11          
3543   9328 F4              VEJ  (F4) \ AWRD($A803) ; ***PRINT_150
3543   9329 A8 03       
3544   932B 6C 44           CPI  UH,$44
3545   932D 89 07           BZR  BR_9336 ; $9336
3546   932F 6E 49           CPI  UL,$49
3547   9331 89 03           BZR  BR_9336 ; $9336
3548   9333 BA A8 FD        JMP  $A8FD ; ***MOTDRV
3549   9336             
3550   9336             BR_9336:
3551   9336 68 1B           LDI  UH,$1B
3552   9338 E0              VEJ  (E0)
3553   9339             
3554   9339             BR_9339:
3555   9339 C6              VEJ  (C6)
3556   933A C2              VEJ  (C2) \ AWRD($F19E) \ ABRF(BR_934F) ; $934F
3556   933B F1 9E       
3556   933D 11          
3557   933E F4              VEJ  (F4) \ AWRD($A803) ; ***
3557   933F A8 03       
3558   9341 6C 44           CPI  UH,$44
3559   9343 89 07           BZR  BR_934C ; $934C
3560   9345 6E 49           CPI  UL,$49
3561   9347 89 03           BZR  BR_934C ; $934C
3562   9349 BA A8 FA        JMP  $A8FA ; ***MOTDRV
3563   934C             
3564   934C             BR_934C: 
3565   934C 68 1B           LDI  UH,$1B
3566   934E E0              VEJ  (E0)
3567   934F             
3568   934F             BR_934F:
3569   934F E4              VEJ  (E4)
3570   9350 FD C8           PSH  A
3571   9352 FD A5 77 F0     LDA  #(VIDEORAM + $07F0) ; $77F0
3572   9356 B7 55           CPI  A,$55
3573   9358 89 0E           BZR  BR_9368 ; $9368
3574   935A FD A5 77 F1     LDA  #(VIDEORAM + $07F1)
3575   935E 08              STA  XH
3576   935F FD A5 77 F2     LDA  #(VIDEORAM + $07F2)
3577   9363 0A              STA  XL
3578   9364 FD 8A           POP  A
3579   9366 FD 5E           STX  P
3580   9368             
3581   9368             BR_9368:
3582   9368 FD 8A           POP  A
3583   936A BA C4 AF        JMP  TRCROUTINE ; $C4AF
3584   936D             ;% LB_KEY END
3585   936D             ;------------------------------------------------------------------------------------------------------------
3586   936D             
3587   936D             
3588   936D             
3589   936D             ;------------------------------------------------------------------------------------------------------------
3590   936D             ; $936D-$9394 - IWS Spalsh screen text
3591   936D             ;------------------------------------------------------------------------------------------------------------
3592   936D             ;% LB_IWS_SPLASH START
3593   936D             IWS_SPLASH:
3594   936D 54 45 4C 2E     .TEXT  "TEL. 071"
3594   9371 20 30 37 31 
3595   9375 36 31 2F 37     .TEXT  "61/79021"
3595   9379 39 30 32 31 
3596   937D 20 61 6E 72     .TEXT  " anrufen"
3596   9381 75 66 65 6E 
3597   9385 20 21 48 4F     .TEXT  " !HO V.1"
3597   9389 20 56 2E 31 
3598   938D 2E 30 20 38     .TEXT  ".0 859  "
3598   9391 35 39 20 20 
3599   9395             ;% LB_IWS_SPLASH END
3600   9395             ;------------------------------------------------------------------------------------------------------------
3601   9395             
3602   9395             
3603   9395             
3604   9395             ;------------------------------------------------------------------------------------------------------------
3605   9395             ; $9395 - $93FF Unknown table
3606   9395             ;------------------------------------------------------------------------------------------------------------
3607   9395             ;% LB_IWS_xxxx START
3608   9395 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3608   9399 00 00 00 00 
3609   939D 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3609   93A1 00 00 00 00 
3610   93A5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3610   93A9 00 00 00 00 
3611   93AD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3611   93B1 00 00 00 00 
3612   93B5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3612   93B9 00 00 00 00 
3613   93BD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3613   93C1 00 00 00 00 
3614   93C5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3614   93C9 00 00 00 00 
3615   93CD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3615   93D1 00 00 00 00 
3616   93D5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3616   93D9 00 00 00 00 
3617   93DD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3617   93E1 00 00 00 00 
3618   93E5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3618   93E9 00 00 00 00 
3619   93ED 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3619   93F1 00 00 00 00 
3620   93F5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
3620   93F9 00 00 00 00 
3621   93FD 00 00 00        .BYTE  $00,$00,$00
3622   9400             ;% LB_IWS_xxxx END
3623   9400             ;------------------------------------------------------------------------------------------------------------
3624   9400             
3625   9400             
3626   9400             ;------------------------------------------------------------------------------------------------------------
3627   9400             ; last character of name has bit 7 set. Use macro EOW to accomplish this.
3628   9400             ; $9400 - $9F80
3629   9400             ;------------------------------------------------------------------------------------------------------------
3630   9400             ;% LB_IWS_xxxx START
3631   9400             ;         NAME              BIT 7 SET      ADDRESS
3632   9400 56 4C 49 53     .TEXT "VLIS"         \  EOW('T')  \  .WORD $8000
3632   9404 D4          
3632   9405 80 00       
3633   9407 4F 50 4E 43     .TEXT "OPNCR"        \  EOW('T')  \  .WORD $0040
3633   940B 52 
3633   940C D4          
3633   940D 00 40       
3634   940F 54 45 53 54     .TEXT "TESTEN"       \  EOW('D')  \  .WORD $0004
3634   9413 45 4E 
3634   9415 C4          
3634   9416 00 04       
3635   9418 43 48 41 4E     .TEXT "CHANGETOKE"   \  EOW('N')  \  .WORD $001C
3635   941C 47 45 54 4F 
3635   9420 4B 45 
3635   9422 CE          
3635   9423 00 1C       
3636   9425 53 45 41 52     .TEXT "SEARCHENTE"   \  EOW('R')  \  .WORD $0020
3636   9429 43 48 45 4E 
3636   942D 54 45 
3636   942F D2          
3636   9430 00 20       
3637   9432 4D 41 4B 45     .TEXT "MAKEPARAME"   \  EOW('T')  \  .WORD $002E
3637   9436 50 41 52 41 
3637   943A 4D 45 
3637   943C D4          
3637   943D 00 2E       
3638   943F 4D 45 48 52     .TEXT "MEHRFACHVE"   \  EOW('R')  \  .WORD $0034
3638   9443 46 41 43 48 
3638   9447 56 45 
3638   9449 D2          
3638   944A 00 34       
3639   944C 4C 44 58 52     .TEXT "LDXRESERVE"   \  EOW('S')  \  .WORD $0038
3639   9450 45 53 45 52 
3639   9454 56 45 
3639   9456 D3          
3639   9457 00 38       
3640   9459 52 53 48 49     .TEXT "RSHIFT7BY"    \  EOW('T')  \  .WORD $0074
3640   945D 46 54 37 42 
3640   9461 59 
3640   9462 D4          
3640   9463 00 74       
3641   9465 4D 4F 56 45     .TEXT "MOVESTROUT"   \  EOW('P')  \  .WORD $0094
3641   9469 53 54 52 4F 
3641   946D 55 54 
3641   946F D0          
3641   9470 00 94       
3642   9472 44 49 53 50     .TEXT "DISPLAYTEX"   \  EOW('T')  \  .WORD $0092
3642   9476 4C 41 59 54 
3642   947A 45 58 
3642   947C D4          
3642   947D 00 92       
3643   947F 4D 41 4B 45     .TEXT "MAKEUSIN"     \  EOW('G')  \  .WORD $0096
3643   9483 55 53 49 4E 
3643   9487 C7          
3643   9488 00 96       
3644   948A 57 41 52 54     .TEXT "WARTEULAN"    \  EOW('G')  \  .WORD $00AC
3644   948E 45 55 4C 41 
3644   9492 4E 
3644   9493 C7          
3644   9494 00 AC       
3645   9496 4C 44 55 5A     .TEXT "LDUZEICHE"    \  EOW('N')  \  .WORD $00C0
3645   949A 45 49 43 48 
3645   949E 45 
3645   949F CE          
3645   94A0 00 C0       
3646   94A2 54 45 53 54     .TEXT "TESTTOKZE"    \  EOW('I')  \  .WORD $00C2
3646   94A6 54 4F 4B 5A 
3646   94AA 45 
3646   94AB C9          
3646   94AC 00 C2       
3647   94AE 54 45 53 54     .TEXT "TESTUTOKZ"    \  EOW('E')  \  .WORD $00C4
3647   94B2 55 54 4F 4B 
3647   94B6 5A 
3647   94B7 C5          
3647   94B8 00 C4       
3648   94BA 44 45 43 59     .TEXT "DECYTOKZE"    \  EOW('I')  \  .WORD $00C6
3648   94BE 54 4F 4B 5A 
3648   94C2 45 
3648   94C3 C9          
3648   94C4 00 C6       
3649   94C6 4E 4F 45 4E     .TEXT "NOENDTES"     \  EOW('T')  \  .WORD $00C8
3649   94CA 44 54 45 53 
3649   94CE D4          
3649   94CF 00 C8       
3650   94D1 4C 41 44 45     .TEXT "LADE78NN"     \  EOW('X')  \  .WORD $00CA
3650   94D5 37 38 4E 4E 
3650   94D9 D8          
3650   94DA 00 CA       
3651   94DC 4C 41 44 45     .TEXT "LADEXAUS7"    \  EOW('8')  \  .WORD $00CC
3651   94E0 58 41 55 53 
3651   94E4 37 
3651   94E5 B8          
3651   94E6 00 CC       
3652   94E8 41 52 49 54     .TEXT "ARITMETI"     \  EOW('K')  \  .WORD $00D0
3652   94EC 4D 45 54 49 
3652   94F0 CB          
3652   94F1 00 D0       
3653   94F3 54 45 53 54     .TEXT "TESTSTRNU"    \  EOW('M')  \  .WORD $00D2
3653   94F7 53 54 52 4E 
3653   94FB 55 
3653   94FC CD          
3653   94FD 00 D2       
3654   94FF 54 45 53 54     .TEXT "TESTBASICRU"  \  EOW('N')  \  .WORD $00D8
3654   9503 42 41 53 49 
3654   9507 43 52 55 
3654   950A CE          
3654   950B 00 D8       
3655   950D 53 54 52 49     .TEXT "STRINGINF"    \  EOW('O')  \  .WORD $00DC
3655   9511 4E 47 49 4E 
3655   9515 46 
3655   9516 CF          
3655   9517 00 DC       
3656   9519 41 55 53 44     .TEXT "AUSDRUC"      \  EOW('K')  \  .WORD $00DE
3656   951D 52 55 43 
3656   9520 CB          
3656   9521 00 DE       
3657   9523 45 52 52 4F     .TEXT "ERRO"         \  EOW('R')  \  .WORD $00E0
3657   9527 D2          
3657   9528 00 E0       
3658   952A 49 4E 54 45     .TEXT "INTERPRETE"   \  EOW('R')  \  .WORD $00E2
3658   952E 52 50 52 45 
3658   9532 54 45 
3658   9534 D2          
3658   9535 00 E2       
3659   9537 45 52 52 4F     .TEXT "ERROR"        \  EOW('1')  \  .WORD $00E4
3659   953B 52 
3659   953C B1          
3659   953D 00 E4       
3660   953F 43 4C 45 41     .TEXT "CLEARLC"      \  EOW('D')  \  .WORD $00F2
3660   9543 52 4C 43 
3660   9546 C4          
3660   9547 00 F2       
3661   9549 4C 41 44 45     .TEXT "LADEUAUSNNN"  \  EOW('N')  \  .WORD $00F4
3661   954D 55 41 55 53 
3661   9551 4E 4E 4E 
3661   9554 CE          
3661   9555 00 F4       
3662   9557 54 45 53 54     .TEXT "TESTKE"       \  EOW('Y')  \  .WORD $E42C
3662   955B 4B 45 
3662   955D D9          
3662   955E E4 2C       
3663   9560 53 54 4F 52     .TEXT "STORESTRIN"   \  EOW('G')  \  .WORD $DFB4
3663   9564 45 53 54 52 
3663   9568 49 4E 
3663   956A C7          
3663   956B DF B4       
3664   956D 53 54 4F 52     .TEXT "STOREINDST"   \  EOW('R')  \  .WORD $DFC5
3664   9571 45 49 4E 44 
3664   9575 53 54 
3664   9577 D2          
3664   9578 DF C5       
3665   957A 46 41 52 42     .TEXT "FARBRA"       \  EOW('M')  \  .WORD $6000
3665   957E 52 41 
3665   9580 CD          
3665   9581 60 00       
3666   9583 47 52 41 50     .TEXT "GRAPHIKRA"    \  EOW('M')  \  .WORD $3000
3666   9587 48 49 4B 52 
3666   958B 41 
3666   958C CD          
3666   958D 30 00       
3667   958F 56 49 44 45     .TEXT "VIDEORA"      \  EOW('M')  \  .WORD $7000
3667   9593 4F 52 41 
3667   9596 CD          
3667   9597 70 00       
3668   9599 56 49 44 45     .TEXT "VIDEOPROZE"   \  EOW('S')  \  .WORD $7800
3668   959D 4F 50 52 4F 
3668   95A1 5A 45 
3668   95A3 D3          
3668   95A4 78 00       
3669   95A6 42 41 53 49     .TEXT "BASICEND"     \  EOW('H')  \  .WORD $7867
3669   95AA 43 45 4E 44 
3669   95AE C8          
3669   95AF 78 67       
3670   95B1 42 41 53 49     .TEXT "BASICEND"     \  EOW('L')  \  .WORD $7868
3670   95B5 43 45 4E 44 
3670   95B9 CC          
3670   95BA 78 68       
3671   95BC 42 41 53 49     .TEXT "BASICANF"     \  EOW('H')  \  .WORD $7865
3671   95C0 43 41 4E 46 
3671   95C4 C8          
3671   95C5 78 65       
3672   95C7 42 41 53 49     .TEXT "BASICANF"     \  EOW('L')  \  .WORD $7866
3672   95CB 43 41 4E 46 
3672   95CF CC          
3672   95D0 78 66       
3673   95D2 53 54 41 54     .TEXT "STATUS"       \  EOW('H')  \  .WORD $764E
3673   95D6 55 53 
3673   95D8 C8          
3673   95D9 76 4E       
3674   95DB 53 54 41 54     .TEXT "STATUS"       \  EOW('L')  \  .WORD $764F
3674   95DF 55 53 
3674   95E1 CC          
3674   95E2 76 4F       
3675   95E4 49 4E 50 55     .TEXT "INPUTBUFFE"   \  EOW('R')  \  .WORD $7BB0
3675   95E8 54 42 55 46 
3675   95EC 46 45 
3675   95EE D2          
3675   95EF 7B B0       
3676   95F1 54 41 53 54     .TEXT "TASTUMLEI"    \  EOW('T')  \  .WORD $79D4
3676   95F5 55 4D 4C 45 
3676   95F9 49 
3676   95FA D4          
3676   95FB 79 D4       
3677   95FD 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('H')  \  .WORD $785B
3677   9601 55 4D 50 4F 
3677   9605 49 
3677   9606 C8          
3677   9607 78 5B       
3678   9609 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('L')  \  .WORD $785C
3678   960D 55 4D 50 4F 
3678   9611 49 
3678   9612 CC          
3678   9613 78 5C       
3679   9615 57 41 49 54     .TEXT "WAITY"        \  EOW('N')  \  .WORD $7871
3679   9619 59 
3679   961A CE          
3679   961B 78 71       
3680   961D 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('H')  \  .WORD $7872
3680   9621 43 4F 55 4E 
3680   9625 54 
3680   9626 C8          
3680   9627 78 72       
3681   9629 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('L')  \  .WORD $7873
3681   962D 43 4F 55 4E 
3681   9631 54 
3681   9632 CC          
3681   9633 78 73       
3682   9635 42 4C 49 4E     .TEXT "BLINKFLA"     \  EOW('G')  \  .WORD $787C
3682   9639 4B 46 4C 41 
3682   963D C7          
3682   963E 78 7C       
3683   9640 4F 55 54 50     .TEXT "OUTPBUFFP"    \  EOW('O')  \  .WORD $788F
3683   9644 42 55 46 46 
3683   9648 50 
3683   9649 CF          
3683   964A 78 8F       
3684   964C 53 54 52 49     .TEXT "STRIBUFFP"    \  EOW('O')  \  .WORD $7894
3684   9650 42 55 46 46 
3684   9654 50 
3684   9655 CF          
3684   9656 78 94       
3685   9658 55 53 49 4E     .TEXT "USINGFORMA"   \  EOW('T')  \  .WORD $7895
3685   965C 47 46 4F 52 
3685   9660 4D 41 
3685   9662 D4          
3685   9663 78 95       
3686   9665 55 53 49 4E     .TEXT "USINGLAEN"    \  EOW('G')  \  .WORD $7896
3686   9669 47 4C 41 45 
3686   966D 4E 
3686   966E C7          
3686   966F 78 96       
3687   9671 55 53 49 4E     .TEXT "USINGSTRIN"   \  EOW('G')  \  .WORD $7897
3687   9675 47 53 54 52 
3687   9679 49 4E 
3687   967B C7          
3687   967C 78 97       
3688   967E 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('H')  \  .WORD $78A6
3688   9682 43 48 41 44 
3688   9686 52 
3688   9687 C8          
3688   9688 78 A6       
3689   968A 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('L')  \  .WORD $78A7
3689   968E 43 48 41 44 
3689   9692 52 
3689   9693 CC          
3689   9694 78 A7       
3690   9696 4D 4F 44 55     .TEXT "MODULS"       \  EOW('W')  \  .WORD $D800
3690   969A 4C 53 
3690   969C D7          
3690   969D D8 00       
3691   969F 4D 4F 44 55     .TEXT "MODU"         \  EOW('L')  \  .WORD $77E0
3691   96A3 CC          
3691   96A4 77 E0       
3692   96A6 4B 45 59 42     .TEXT "KEYBEE"       \  EOW('P')  \  .WORD $77E2
3692   96AA 45 45 
3692   96AC D0          
3692   96AD 77 E2       
3693   96AF 4C 52 45 43     .TEXT "LREC"         \  EOW('L')  \  .WORD $77D1
3693   96B3 CC          
3693   96B4 77 D1       
3694   96B6 55 50           .TEXT "UP"           \  EOW('L')  \  .WORD $77D2
3694   96B8 CC          
3694   96B9 77 D2       
3695   96BB 49 4E           .TEXT "IN"           \  EOW('P')  \  .WORD $77D3
3695   96BD D0          
3695   96BE 77 D3       
3696   96C0 43 55 52        .TEXT "CUR"          \  EOW('H')  \  .WORD $77D4
3696   96C3 C8          
3696   96C4 77 D4       
3697   96C6 43 55 52        .TEXT "CUR"          \  EOW('L')  \  .WORD $77D5
3697   96C9 CC          
3697   96CA 77 D5       
3698   96CC 43 55 52 50     .TEXT "CURP"         \  EOW('1')  \  .WORD $77D6
3698   96D0 B1          
3698   96D1 77 D6       
3699   96D3 4D 4F 4D 45     .TEXT "MOMENTVCU"    \  EOW('R')  \  .WORD $774E
3699   96D7 4E 54 56 43 
3699   96DB 55 
3699   96DC D2          
3699   96DD 77 4E       
3700   96DF 4D 4F 4D 45     .TEXT "MOMENTHCU"    \  EOW('R')  \  .WORD $774F
3700   96E3 4E 54 48 43 
3700   96E7 55 
3700   96E8 D2          
3700   96E9 77 4F       
3701   96EB 4B 4F 4D        .TEXT "KOM"          \  EOW('P')  \  .WORD $77D7
3701   96EE D0          
3701   96EF 77 D7       
3702   96F1 49 4E 50        .TEXT "INP"          \  EOW('P')  \  .WORD $77D8
3702   96F4 D0          
3702   96F5 77 D8       
3703   96F7 56 41 52 49     .TEXT "VARIABL"      \  EOW('E')  \  .WORD $77D9
3703   96FB 41 42 4C 
3703   96FE C5          
3703   96FF 77 D9       
3704   9701 43 55 52 53     .TEXT "CURSORAR"     \  EOW('T')  \  .WORD $77DA
3704   9705 4F 52 41 52 
3704   9709 D4          
3704   970A 77 DA       
3705   970C 43 55 52 53     .TEXT "CURSORART"    \  EOW('L')  \  .WORD $77DB
3705   9710 4F 52 41 52 
3705   9714 54 
3705   9715 CC          
3705   9716 77 DB       
3706   9718 46 41 52 42     .TEXT "FARB"         \  EOW('E')  \  .WORD $77DC
3706   971C C5          
3706   971D 77 DC       
3707   971F 48 49 4E 54     .TEXT "HINTERG"      \  EOW('R')  \  .WORD $77DD
3707   9723 45 52 47 
3707   9726 D2          
3707   9727 77 DD       
3708   9729 5A 45 49 43     .TEXT "ZEICHFARB"    \  EOW('E')  \  .WORD $77DE
3708   972D 48 46 41 52 
3708   9731 42 
3708   9732 C5          
3708   9733 77 DE       
3709   9735 56 41 52        .TEXT "VAR"          \  EOW('2')  \  .WORD $77DF
3709   9738 B2          
3709   9739 77 DF       
3710   973B 55 53 52 54     .TEXT "USRT"         \  EOW('R')  \  .WORD $77F0
3710   973F D2          
3710   9740 77 F0       
3711   9742 55 53 52 54     .TEXT "USRTR"        \  EOW('1')  \  .WORD $77F1
3711   9746 52 
3711   9747 B1          
3711   9748 77 F1       
3712   974A 55 53 52 54     .TEXT "USRTR"        \  EOW('2')  \  .WORD $77F2
3712   974E 52 
3712   974F B2          
3712   9750 77 F2       
3713   9752 50 52 49 4E     .TEXT "PRINTFLA"     \  EOW('G')  \  .WORD $77F3
3713   9756 54 46 4C 41 
3713   975A C7          
3713   975B 77 F3       
3714   975D 49 4E 46 4F     .TEXT "INFOR"        \  EOW('M')  \  .WORD $77F4
3714   9761 52 
3714   9762 CD          
3714   9763 77 F4       
3715   9765 49 4E 50 46     .TEXT "INPFLA"       \  EOW('G')  \  .WORD $77E1
3715   9769 4C 41 
3715   976B C7          
3715   976C 77 E1       
3716   976E 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('1')  \  .WORD $F0DD
3716   9772 4E 30 
3716   9774 B1          
3716   9775 F0 DD       
3717   9777 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('2')  \  .WORD $F0DE
3717   977B 4E 30 
3717   977D B2          
3717   977E F0 DE       
3718   9780 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('3')  \  .WORD $F0DF
3718   9784 4E 30 
3718   9786 B3          
3718   9787 F0 DF       
3719   9789 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('4')  \  .WORD $F088
3719   978D 4E 30 
3719   978F B4          
3719   9790 F0 88       
3720   9792 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('5')  \  .WORD $F0EB
3720   9796 4E 30 
3720   9798 B5          
3720   9799 F0 EB       
3721   979B 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('6')  \  .WORD $F0B1
3721   979F 4E 30 
3721   97A1 B6          
3721   97A2 F0 B1       
3722   97A4 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('7')  \  .WORD $F084
3722   97A8 4E 30 
3722   97AA B7          
3722   97AB F0 84       
3723   97AD 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('8')  \  .WORD $F0E0
3723   97B1 4E 30 
3723   97B3 B8          
3723   97B4 F0 E0       
3724   97B6 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('9')  \  .WORD $F070
3724   97BA 4E 30 
3724   97BC B9          
3724   97BD F0 70       
3725   97BF 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('0')  \  .WORD $F0C7
3725   97C3 4E 31 
3725   97C5 B0          
3725   97C6 F0 C7       
3726   97C8 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('1')  \  .WORD $F053
3726   97CC 4E 31 
3726   97CE B1          
3726   97CF F0 53       
3727   97D1 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('2')  \  .WORD $F052
3727   97D5 4E 31 
3727   97D7 B2          
3727   97D8 F0 52       
3728   97DA 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('3')  \  .WORD $F0E1
3728   97DE 4E 31 
3728   97E0 B3          
3728   97E1 F0 E1       
3729   97E3 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('4')  \  .WORD $F0E8
3729   97E7 4E 31 
3729   97E9 B4          
3729   97EA F0 E8       
3730   97EC 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('5')  \  .WORD $F0E9
3730   97F0 4E 31 
3730   97F2 B5          
3730   97F3 F0 E9       
3731   97F5 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('6')  \  .WORD $F054
3731   97F9 4E 31 
3731   97FB B6          
3731   97FC F0 54       
3732   97FE 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('7')  \  .WORD $F055
3732   9802 4E 31 
3732   9804 B7          
3732   9805 F0 55       
3733   9807 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('8')  \  .WORD $F071
3733   980B 4E 31 
3733   980D B8          
3733   980E F0 71       
3734   9810 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('9')  \  .WORD $F091
3734   9814 4E 31 
3734   9816 B9          
3734   9817 F0 91       
3735   9819 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('0')  \  .WORD $F0E2
3735   981D 4E 32 
3735   981F B0          
3735   9820 F0 E2       
3736   9822 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('1')  \  .WORD $F0B2
3736   9826 4E 32 
3736   9828 B1          
3736   9829 F0 B2       
3737   982B 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('2')  \  .WORD $F090
3737   982F 4E 32 
3737   9831 B2          
3737   9832 F0 90       
3738   9834 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('3')  \  .WORD $F080
3738   9838 4E 32 
3738   983A B3          
3738   983B F0 80       
3739   983D 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('4')  \  .WORD $F0E4
3739   9841 4E 32 
3739   9843 B4          
3739   9844 F0 E4       
3740   9846 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('5')  \  .WORD $F097
3740   984A 4E 32 
3740   984C B5          
3740   984D F0 97       
3741   984F 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('6')  \  .WORD $F0C3
3741   9853 4E 32 
3741   9855 B6          
3741   9856 F0 C3       
3742   9858 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('7')  \  .WORD $F0C5
3742   985C 4E 32 
3742   985E B7          
3742   985F F0 C5       
3743   9861 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('8')  \  .WORD $F081
3743   9865 4E 32 
3743   9867 B8          
3743   9868 F0 81       
3744   986A 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('9')  \  .WORD $F0E7
3744   986E 4E 32 
3744   9870 B9          
3744   9871 F0 E7       
3745   9873 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('0')  \  .WORD $F0EA
3745   9877 4E 33 
3745   9879 B0          
3745   987A F0 EA       
3746   987C 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('1')  \  .WORD $F056
3746   9880 4E 33 
3746   9882 B1          
3746   9883 F0 56       
3747   9885 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('2')  \  .WORD $F050
3747   9889 4E 33 
3747   988B B2          
3747   988C F0 50       
3748   988E 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('3')  \  .WORD $F083
3748   9892 4E 33 
3748   9894 B3          
3748   9895 F0 83       
3749   9897 54              .TEXT "T"            \  EOW('B')  \  .WORD $8055
3749   9898 C2          
3749   9899 80 55       
3750   989B 54              .TEXT "T"            \  EOW('C')  \  .WORD $8060
3750   989C C3          
3750   989D 80 60       
3751   989F 54              .TEXT "T"            \  EOW('D')  \  .WORD $8094
3751   98A0 C4          
3751   98A1 80 94       
3752   98A3 54              .TEXT "T"            \  EOW('E')  \  .WORD $80A4
3752   98A4 C5          
3752   98A5 80 A4       
3753   98A7 54              .TEXT "T"            \  EOW('G')  \  .WORD $80BD
3753   98A8 C7          
3753   98A9 80 BD       
3754   98AB 54              .TEXT "T"            \  EOW('H')  \  .WORD $80DF
3754   98AC C8          
3754   98AD 80 DF       
3755   98AF 54              .TEXT "T"            \  EOW('I')  \  .WORD $8101
3755   98B0 C9          
3755   98B1 81 01       
3756   98B3 54              .TEXT "T"            \  EOW('K')  \  .WORD $810B
3756   98B4 CB          
3756   98B5 81 0B       
3757   98B7 54              .TEXT "T"            \  EOW('L')  \  .WORD $8113
3757   98B8 CC          
3757   98B9 81 13       
3758   98BB 54              .TEXT "T"            \  EOW('M')  \  .WORD $8125
3758   98BC CD          
3758   98BD 81 25       
3759   98BF 54              .TEXT "T"            \  EOW('P')  \  .WORD $813A
3759   98C0 D0          
3759   98C1 81 3A       
3760   98C3 54              .TEXT "T"            \  EOW('R')  \  .WORD $8144
3760   98C4 D2          
3760   98C5 81 44       
3761   98C7 54              .TEXT "T"            \  EOW('S')  \  .WORD $815A
3761   98C8 D3          
3761   98C9 81 5A       
3762   98CB 54              .TEXT "T"            \  EOW('T')  \  .WORD $816D
3762   98CC D4          
3762   98CD 81 6D       
3763   98CF 54              .TEXT "T"            \  EOW('V')  \  .WORD $8177
3763   98D0 D6          
3763   98D1 81 77       
3764   98D3 41 4E 46 41     .TEXT "ANFAN"        \  EOW('G')  \  .WORD $819E
3764   98D7 4E 
3764   98D8 C7          
3764   98D9 81 9E       
3765   98DB 41 4E 46        .TEXT "ANF"          \  EOW('1')  \  .WORD $81F4
3765   98DE B1          
3765   98DF 81 F4       
3766   98E1 4B 45           .TEXT "KE"           \  EOW('Y')  \  .WORD $822F
3766   98E3 D9          
3766   98E4 82 2F       
3767   98E6 4D 4F 44 45     .TEXT "MODE"         \  EOW('T')  \  .WORD $836B
3767   98EA D4          
3767   98EB 83 6B       
3768   98ED 41 4C 54 45     .TEXT "ALTE"         \  EOW('R')  \  .WORD $8381
3768   98F1 D2          
3768   98F2 83 81       
3769   98F4 42 41 53 49     .TEXT "BASI"         \  EOW('C')  \  .WORD $83BB
3769   98F8 C3          
3769   98F9 83 BB       
3770   98FB 4E 45 58 54     .TEXT "NEXT"         \  EOW('L')  \  .WORD $83C6
3770   98FF CC          
3770   9900 83 C6       
3771   9902 4E 45 58 54     .TEXT "NEXT"         \  EOW('0')  \  .WORD $83F0
3771   9906 B0          
3771   9907 83 F0       
3772   9909 4E 45 58 54     .TEXT "NEXT"         \  EOW('E')  \  .WORD $8417
3772   990D C5          
3772   990E 84 17       
3773   9910 45 4E 54 45     .TEXT "ENTE"         \  EOW('R')  \  .WORD $8419
3773   9914 D2          
3773   9915 84 19       
3774   9917 4E 45 58 54     .TEXT "NEXT"         \  EOW('C')  \  .WORD $841F
3774   991B C3          
3774   991C 84 1F       
3775   991E 4E 45 58 54     .TEXT "NEXT"         \  EOW('D')  \  .WORD $842D
3775   9922 C4          
3775   9923 84 2D       
3776   9925 4E 45 58 54     .TEXT "NEXT"         \  EOW('2')  \  .WORD $843B
3776   9929 B2          
3776   992A 84 3B       
3777   992C 4D 4F 44 55     .TEXT "MODU"         \  EOW('S')  \  .WORD $8456
3777   9930 D3          
3777   9931 84 56       
3778   9933 4D 4F 44        .TEXT "MOD"          \  EOW('1')  \  .WORD $8466
3778   9936 B1          
3778   9937 84 66       
3779   9939 52 50 4D 4F     .TEXT "RPMOD"        \  EOW('E')  \  .WORD $84BB
3779   993D 44 
3779   993E C5          
3779   993F 84 BB       
3780   9941 4D 4F 44        .TEXT "MOD"          \  EOW('C')  \  .WORD $84C5
3780   9944 C3          
3780   9945 84 C5       
3781   9947 4D 4F 44 45     .TEXT "MODEN"        \  EOW('D')  \  .WORD $84D4
3781   994B 4E 
3781   994C C4          
3781   994D 84 D4       
3782   994F 53 43 52 4F     .TEXT "SCROL"        \  EOW('L')  \  .WORD $84D7
3782   9953 4C 
3782   9954 CC          
3782   9955 84 D7       
3783   9957 53 43 52        .TEXT "SCR"          \  EOW('1')  \  .WORD $84E6
3783   995A B1          
3783   995B 84 E6       
3784   995D 53 43 52        .TEXT "SCR"          \  EOW('2')  \  .WORD $84FD
3784   9960 B2          
3784   9961 84 FD       
3785   9963 53 43 52 4F     .TEXT "SCROL"        \  EOW('1')  \  .WORD $8501
3785   9967 4C 
3785   9968 B1          
3785   9969 85 01       
3786   996B 53 43 52 4F     .TEXT "SCRO"         \  EOW('2')  \  .WORD $8511
3786   996F B2          
3786   9970 85 11       
3787   9972 53 43 52 45     .TEXT "SCREN"        \  EOW('D')  \  .WORD $8524
3787   9976 4E 
3787   9977 C4          
3787   9978 85 24       
3788   997A 44 45 43 4F     .TEXT "DECOD"        \  EOW('E')  \  .WORD $852C
3788   997E 44 
3788   997F C5          
3788   9980 85 2C       
3789   9982 44 45 43 4F     .TEXT "DECOD"        \  EOW('1')  \  .WORD $8535
3789   9986 44 
3789   9987 B1          
3789   9988 85 35       
3790   998A 44 45 43 4F     .TEXT "DECOD1"       \  EOW('A')  \  .WORD $8556
3790   998E 44 31 
3790   9990 C1          
3790   9991 85 56       
3791   9993 44 45 43 4F     .TEXT "DECOD"        \  EOW('2')  \  .WORD $8576
3791   9997 44 
3791   9998 B2          
3791   9999 85 76       
3792   999B 44 45 43 4F     .TEXT "DECOD"        \  EOW('3')  \  .WORD $857A
3792   999F 44 
3792   99A0 B3          
3792   99A1 85 7A       
3793   99A3 44 43 44        .TEXT "DCD"          \  EOW('3')  \  .WORD $8595
3793   99A6 B3          
3793   99A7 85 95       
3794   99A9 54 52 55 4E     .TEXT "TRUN"         \  EOW('K')  \  .WORD $85B6
3794   99AD CB          
3794   99AE 85 B6       
3795   99B0 4E 4F 43 4F     .TEXT "NOCOD"        \  EOW('E')  \  .WORD $85BB
3795   99B4 44 
3795   99B5 C5          
3795   99B6 85 BB       
3796   99B8 4E 43           .TEXT "NC"           \  EOW('D')  \  .WORD $85F0
3796   99BA C4          
3796   99BB 85 F0       
3797   99BD 54 52 45 4E     .TEXT "TREN"         \  EOW('N')  \  .WORD $8604
3797   99C1 CE          
3797   99C2 86 04       
3798   99C4 54 52 45 4E     .TEXT "TRENRE"       \  EOW('T')  \  .WORD $860D
3798   99C8 52 45 
3798   99CA D4          
3798   99CB 86 0D       
3799   99CD 54 52 45 4E     .TEXT "TREN"         \  EOW('E')  \  .WORD $8643
3799   99D1 C5          
3799   99D2 86 43       
3800   99D4 54 52 45 4E     .TEXT "TREN"         \  EOW('1')  \  .WORD $8646
3800   99D8 B1          
3800   99D9 86 46       
3801   99DB 54 52 55 4E     .TEXT "TRUN"         \  EOW('C')  \  .WORD $8656
3801   99DF C3          
3801   99E0 86 56       
3802   99E2 43 55 52 53     .TEXT "CURSO"        \  EOW('R')  \  .WORD $8663
3802   99E6 4F 
3802   99E7 D2          
3802   99E8 86 63       
3803   99EA 54 4F           .TEXT "TO"           \  EOW('F')  \  .WORD $86E4
3803   99EC C6          
3803   99ED 86 E4       
3804   99EF 45 4F           .TEXT "EO"           \  EOW('F')  \  .WORD $86FA
3804   99F1 C6          
3804   99F2 86 FA       
3805   99F4 4F 42           .TEXT "OB"           \  EOW('F')  \  .WORD $8721
3805   99F6 C6          
3805   99F7 87 21       
3806   99F9 4F 55 42 46     .TEXT "OUBF"         \  EOW('1')  \  .WORD $8752
3806   99FD B1          
3806   99FE 87 52       
3807   9A00 4F 55 42 46     .TEXT "OUBF"         \  EOW('0')  \  .WORD $878B
3807   9A04 B0          
3807   9A05 87 8B       
3808   9A07 4F 55 42 46     .TEXT "OUBF"         \  EOW('2')  \  .WORD $8799
3808   9A0B B2          
3808   9A0C 87 99       
3809   9A0E 4F 55 42 46     .TEXT "OUBF"         \  EOW('3')  \  .WORD $879D
3809   9A12 B3          
3809   9A13 87 9D       
3810   9A15 4F 55 42 46     .TEXT "OUBF"         \  EOW('4')  \  .WORD $87A5
3810   9A19 B4          
3810   9A1A 87 A5       
3811   9A1C 4F 42 46        .TEXT "OBF"          \  EOW('5')  \  .WORD $87BB
3811   9A1F B5          
3811   9A20 87 BB       
3812   9A22 53 54 45        .TEXT "STE"          \  EOW('P')  \  .WORD $87CC
3812   9A25 D0          
3812   9A26 87 CC       
3813   9A28 4C 45 4E 47     .TEXT "LENGT"        \  EOW('H')  \  .WORD $87D4
3813   9A2C 54 
3813   9A2D C8          
3813   9A2E 87 D4       
3814   9A30 4F 56 45 52     .TEXT "OVERF"        \  EOW('L')  \  .WORD $87E7
3814   9A34 46 
3814   9A35 CC          
3814   9A36 87 E7       
3815   9A38 4F 56 46 4C     .TEXT "OVFL"         \  EOW('0')  \  .WORD $87FD
3815   9A3C B0          
3815   9A3D 87 FD       
3816   9A3F 4F 56 46        .TEXT "OVF"          \  EOW('0')  \  .WORD $882D
3816   9A42 B0          
3816   9A43 88 2D       
3817   9A45 4F 56 46        .TEXT "OVF"          \  EOW('1')  \  .WORD $8839
3817   9A48 B1          
3817   9A49 88 39       
3818   9A4B 4F 56 46        .TEXT "OVF"          \  EOW('2')  \  .WORD $883D
3818   9A4E B2          
3818   9A4F 88 3D       
3819   9A51 4F 55 54 53     .TEXT "OUTSC"        \  EOW('R')  \  .WORD $8854
3819   9A55 43 
3819   9A56 D2          
3819   9A57 88 54       
3820   9A59 4F 55 54 53     .TEXT "OUTSC"        \  EOW('1')  \  .WORD $885D
3820   9A5D 43 
3820   9A5E B1          
3820   9A5F 88 5D       
3821   9A61 4F 55 54 53     .TEXT "OUTSC"        \  EOW('2')  \  .WORD $8865
3821   9A65 43 
3821   9A66 B2          
3821   9A67 88 65       
3822   9A69 4F 55 54 53     .TEXT "OUTSC"        \  EOW('E')  \  .WORD $88AE
3822   9A6D 43 
3822   9A6E C5          
3822   9A6F 88 AE       
3823   9A71 44 43 55        .TEXT "DCU"          \  EOW('V')  \  .WORD $88B5
3823   9A74 D6          
3823   9A75 88 B5       
3824   9A77 4F 42 54 55     .TEXT "OBTUP"        \  EOW('L')  \  .WORD $88BF
3824   9A7B 50 
3824   9A7C CC          
3824   9A7D 88 BF       
3825   9A7F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('0')  \  .WORD $88CC
3825   9A83 50 
3825   9A84 B0          
3825   9A85 88 CC       
3826   9A87 4F 42 54 55     .TEXT "OBTUP"        \  EOW('1')  \  .WORD $88DA
3826   9A8B 50 
3826   9A8C B1          
3826   9A8D 88 DA       
3827   9A8F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('E')  \  .WORD $88E5
3827   9A93 50 
3827   9A94 C5          
3827   9A95 88 E5       
3828   9A97 55 4F           .TEXT "UO"           \  EOW('V')  \  .WORD $88EB
3828   9A99 D6          
3828   9A9A 88 EB       
3829   9A9C 52 50 4C 41     .TEXT "RPLAN"        \  EOW('E')  \  .WORD $88FD
3829   9AA0 4E 
3829   9AA1 C5          
3829   9AA2 88 FD       
3830   9AA4 52 45 53 4D     .TEXT "RESMO"        \  EOW('D')  \  .WORD $8929
3830   9AA8 4F 
3830   9AA9 C4          
3830   9AAA 89 29       
3831   9AAC 52 53 4D        .TEXT "RSM"          \  EOW('0')  \  .WORD $8940
3831   9AAF B0          
3831   9AB0 89 40       
3832   9AB2 52 53 4D        .TEXT "RSM"          \  EOW('1')  \  .WORD $894E
3832   9AB5 B1          
3832   9AB6 89 4E       
3833   9AB8 43 55 52 4F     .TEXT "CUROF"        \  EOW('F')  \  .WORD $8963
3833   9ABC 46 
3833   9ABD C6          
3833   9ABE 89 63       
3834   9AC0 56 43 4C        .TEXT "VCL"          \  EOW('S')  \  .WORD $8974
3834   9AC3 D3          
3834   9AC4 89 74       
3835   9AC6 48 45           .TEXT "HE"           \  EOW('X')  \  .WORD $8981
3835   9AC8 D8          
3835   9AC9 89 81       
3836   9ACB 56 48           .TEXT "VH"           \  EOW('1')  \  .WORD $898F
3836   9ACD B1          
3836   9ACE 89 8F       
3837   9AD0 56 48 41 53     .TEXT "VHAS"         \  EOW('C')  \  .WORD $89A1
3837   9AD4 C3          
3837   9AD5 89 A1       
3838   9AD7 56 48 41 53     .TEXT "VHAS"         \  EOW('1')  \  .WORD $89A9
3838   9ADB B1          
3838   9ADC 89 A9       
3839   9ADE 56 48 41 53     .TEXT "VHAS"         \  EOW('2')  \  .WORD $89B3
3839   9AE2 B2          
3839   9AE3 89 B3       
3840   9AE5 43 4F 4E 53     .TEXT "CONSOL"       \  EOW('E')  \  .WORD $89B5
3840   9AE9 4F 4C 
3840   9AEB C5          
3840   9AEC 89 B5       
3841   9AEE 56 53 49 5A     .TEXT "VSIZ"         \  EOW('1')  \  .WORD $8A27
3841   9AF2 B1          
3841   9AF3 8A 27       
3842   9AF5 44 49           .TEXT "DI"           \  EOW('P')  \  .WORD $8A38
3842   9AF7 D0          
3842   9AF8 8A 38       
3843   9AFA 56 53 49 5A     .TEXT "VSIZ"         \  EOW('F')  \  .WORD $8A46
3843   9AFE C6          
3843   9AFF 8A 46       
3844   9B01 56 53 49 5A     .TEXT "VSIZF"        \  EOW('A')  \  .WORD $8A48
3844   9B05 46 
3844   9B06 C1          
3844   9B07 8A 48       
3845   9B09 56 43 55 52     .TEXT "VCUR"         \  EOW('S')  \  .WORD $8A49
3845   9B0D D3          
3845   9B0E 8A 49       
3846   9B10 43 55 52 53     .TEXT "CURS1"        \  EOW('W')  \  .WORD $8A75
3846   9B14 31 
3846   9B15 D7          
3846   9B16 8A 75       
3847   9B18 43 55 52 53     .TEXT "CURS2"        \  EOW('W')  \  .WORD $8A7E
3847   9B1C 32 
3847   9B1D D7          
3847   9B1E 8A 7E       
3848   9B20 45 52 52 43     .TEXT "ERRCU"        \  EOW('R')  \  .WORD $8A88
3848   9B24 55 
3848   9B25 D2          
3848   9B26 8A 88       
3849   9B28 45 52 52 43     .TEXT "ERRCURSO"     \  EOW('R')  \  .WORD $8A8A
3849   9B2C 55 52 53 4F 
3849   9B30 D2          
3849   9B31 8A 8A       
3850   9B33 56 50 52 49     .TEXT "VPRIN"        \  EOW('T')  \  .WORD $8A8B
3850   9B37 4E 
3850   9B38 D4          
3850   9B39 8A 8B       
3851   9B3B 43 4C 4F        .TEXT "CLO"          \  EOW('B')  \  .WORD $8AA3
3851   9B3E C2          
3851   9B3F 8A A3       
3852   9B41 56 50 41        .TEXT "VPA"          \  EOW('N')  \  .WORD $8AA6
3852   9B44 CE          
3852   9B45 8A A6       
3853   9B47 56 50 41 4E     .TEXT "VPAN"         \  EOW('0')  \  .WORD $8AB6
3853   9B4B B0          
3853   9B4C 8A B6       
3854   9B4E 56 50 52        .TEXT "VPR"          \  EOW('0')  \  .WORD $8ABB
3854   9B51 B0          
3854   9B52 8A BB       
3855   9B54 50 52 46        .TEXT "PRF"          \  EOW('0')  \  .WORD $8AC5
3855   9B57 B0          
3855   9B58 8A C5       
3856   9B5A 56 50 52        .TEXT "VPR"          \  EOW('1')  \  .WORD $8AC8
3856   9B5D B1          
3856   9B5E 8A C8       
3857   9B60 55 53 49 4E     .TEXT "USIN"         \  EOW('G')  \  .WORD $8AF7
3857   9B64 C7          
3857   9B65 8A F7       
3858   9B67 55 53           .TEXT "US"           \  EOW('1')  \  .WORD $8B02
3858   9B69 B1          
3858   9B6A 8B 02       
3859   9B6C 55 53           .TEXT "US"           \  EOW('2')  \  .WORD $8B0C
3859   9B6E B2          
3859   9B6F 8B 0C       
3860   9B71 50 52 41 53     .TEXT "PRAS"         \  EOW('C')  \  .WORD $8B27
3860   9B75 C3          
3860   9B76 8B 27       
3861   9B78 50 52 53 43     .TEXT "PRSC"         \  EOW('0')  \  .WORD $8B31
3861   9B7C B0          
3861   9B7D 8B 31       
3862   9B7F 50 52 53 43     .TEXT "PRSC"         \  EOW('1')  \  .WORD $8B52
3862   9B83 B1          
3862   9B84 8B 52       
3863   9B86 50 52 53 43     .TEXT "PRSC"         \  EOW('2')  \  .WORD $8B62
3863   9B8A B2          
3863   9B8B 8B 62       
3864   9B8D 50 52 53 43     .TEXT "PRSC"         \  EOW('3')  \  .WORD $8B69
3864   9B91 B3          
3864   9B92 8B 69       
3865   9B94 56 50 52        .TEXT "VPR"          \  EOW('2')  \  .WORD $8B91
3865   9B97 B2          
3865   9B98 8B 91       
3866   9B9A 4F 55 54 42     .TEXT "OUTBU"        \  EOW('F')  \  .WORD $8B9E
3866   9B9E 55 
3866   9B9F C6          
3866   9BA0 8B 9E       
3867   9BA2 4F 42 46        .TEXT "OBF"          \  EOW('0')  \  .WORD $8BC0
3867   9BA5 B0          
3867   9BA6 8B C0       
3868   9BA8 4F 42 46        .TEXT "OBF"          \  EOW('1')  \  .WORD $8BFC
3868   9BAB B1          
3868   9BAC 8B FC       
3869   9BAE 50 52 54 45     .TEXT "PRTEN"        \  EOW('D')  \  .WORD $8C17
3869   9BB2 4E 
3869   9BB3 C4          
3869   9BB4 8C 17       
3870   9BB6 50 52 46 45     .TEXT "PRFEH"        \  EOW('L')  \  .WORD $8C38
3870   9BBA 48 
3870   9BBB CC          
3870   9BBC 8C 38       
3871   9BBE 57 41 49        .TEXT "WAI"          \  EOW('T')  \  .WORD $8C3F
3871   9BC1 D4          
3871   9BC2 8C 3F       
3872   9BC4 4E 4F 56        .TEXT "NOV"          \  EOW('C')  \  .WORD $8C4A
3872   9BC7 C3          
3872   9BC8 8C 4A       
3873   9BCA 4B 4F 4D        .TEXT "KOM"          \  EOW('L')  \  .WORD $8C57
3873   9BCD CC          
3873   9BCE 8C 57       
3874   9BD0 4B 4F 4D 4C     .TEXT "KOML"         \  EOW('1')  \  .WORD $8C72
3874   9BD4 B1          
3874   9BD5 8C 72       
3875   9BD7 49 4E 50 55     .TEXT "INPU"         \  EOW('T')  \  .WORD $8C89
3875   9BDB D4          
3875   9BDC 8C 89       
3876   9BDE 58 49 4E 50     .TEXT "XINP"         \  EOW('1')  \  .WORD $8C8F
3876   9BE2 B1          
3876   9BE3 8C 8F       
3877   9BE5 58 49 4E 50     .TEXT "XINP"         \  EOW('3')  \  .WORD $8CC7
3877   9BE9 B3          
3877   9BEA 8C C7       
3878   9BEC 58 49 4E 50     .TEXT "XINP"         \  EOW('6')  \  .WORD $8CCA
3878   9BF0 B6          
3878   9BF1 8C CA       
3879   9BF3 58 49 4E 50     .TEXT "XINP"         \  EOW('4')  \  .WORD $8CD1
3879   9BF7 B4          
3879   9BF8 8C D1       
3880   9BFA 58 49 4E 50     .TEXT "XINP"         \  EOW('2')  \  .WORD $8CFB
3880   9BFE B2          
3880   9BFF 8C FB       
3881   9C01 58 49 4E 50     .TEXT "XINP"         \  EOW('5')  \  .WORD $8D15
3881   9C05 B5          
3881   9C06 8D 15       
3882   9C08 45 44 49 54     .TEXT "EDITO"        \  EOW('R')  \  .WORD $8D18
3882   9C0C 4F 
3882   9C0D D2          
3882   9C0E 8D 18       
3883   9C10 43 4C 45 41     .TEXT "CLEARSC"      \  EOW('R')  \  .WORD $8D41
3883   9C14 52 53 43 
3883   9C17 D2          
3883   9C18 8D 41       
3884   9C1A 43 4C           .TEXT "CL"           \  EOW('1')  \  .WORD $8D4A
3884   9C1C B1          
3884   9C1D 8D 4A       
3885   9C1F 57 52 49 54     .TEXT "WRITE"        \  EOW('1')  \  .WORD $8D5E
3885   9C23 45 
3885   9C24 B1          
3885   9C25 8D 5E       
3886   9C27 57 52 49 54     .TEXT "WRITE"        \  EOW('2')  \  .WORD $8D64
3886   9C2B 45 
3886   9C2C B2          
3886   9C2D 8D 64       
3887   9C2F 4F 42 54 41     .TEXT "OBTAI"        \  EOW('N')  \  .WORD $8D6B
3887   9C33 49 
3887   9C34 CE          
3887   9C35 8D 6B       
3888   9C37 4F 42 54        .TEXT "OBT"          \  EOW('1')  \  .WORD $8D95
3888   9C3A B1          
3888   9C3B 8D 95       
3889   9C3D 4F 42 54        .TEXT "OBT"          \  EOW('2')  \  .WORD $8D99
3889   9C40 B2          
3889   9C41 8D 99       
3890   9C43 4F 42 54 45     .TEXT "OBTEN"        \  EOW('D')  \  .WORD $8D9C
3890   9C47 4E 
3890   9C48 C4          
3890   9C49 8D 9C       
3891   9C4B 4F 42 54        .TEXT "OBT"          \  EOW('F')  \  .WORD $8DA3
3891   9C4E C6          
3891   9C4F 8D A3       
3892   9C51 49 4E 49 54     .TEXT "INITIA"       \  EOW('L')  \  .WORD $8DA8
3892   9C55 49 41 
3892   9C57 CC          
3892   9C58 8D A8       
3893   9C5A 49 4E 49 54     .TEXT "INITIA"       \  EOW('1')  \  .WORD $8DAC
3893   9C5E 49 41 
3893   9C60 B1          
3893   9C61 8D AC       
3894   9C63 46 49 52 53     .TEXT "FIRS"         \  EOW('T')  \  .WORD $8DC1
3894   9C67 D4          
3894   9C68 8D C1       
3895   9C6A 57 41 52 54     .TEXT "WARTE"        \  EOW('V')  \  .WORD $8DD0
3895   9C6E 45 
3895   9C6F D6          
3895   9C70 8D D0       
3896   9C72 41 4E           .TEXT "AN"           \  EOW('Z')  \  .WORD $8DDE
3896   9C74 DA          
3896   9C75 8D DE       
3897   9C77 54 41           .TEXT "TA"           \  EOW('S')  \  .WORD $8DEA
3897   9C79 D3          
3897   9C7A 8D EA       
3898   9C7C 46 49 52 53     .TEXT "FIRST"        \  EOW('1')  \  .WORD $8E03
3898   9C80 54 
3898   9C81 B1          
3898   9C82 8E 03       
3899   9C84 53 54 52 54     .TEXT "STRTA"        \  EOW('D')  \  .WORD $8E5F
3899   9C88 41 
3899   9C89 C4          
3899   9C8A 8E 5F       
3900   9C8C 43 4C 53        .TEXT "CLS"          \  EOW('0')  \  .WORD $8E64
3900   9C8F B0          
3900   9C90 8E 64       
3901   9C92 43 4C 53        .TEXT "CLS"          \  EOW('1')  \  .WORD $8E6D
3901   9C95 B1          
3901   9C96 8E 6D       
3902   9C98 43 4C 53        .TEXT "CLS"          \  EOW('A')  \  .WORD $8E78
3902   9C9B C1          
3902   9C9C 8E 78       
3903   9C9E 43 4C 53 41     .TEXT "CLSA"         \  EOW('0')  \  .WORD $8E7C
3903   9CA2 B0          
3903   9CA3 8E 7C       
3904   9CA5 53 54 4F        .TEXT "STO"          \  EOW('R')  \  .WORD $8E86
3904   9CA8 D2          
3904   9CA9 8E 86       
3905   9CAB 44 41 54        .TEXT "DAT"          \  EOW('1')  \  .WORD $8E8F
3905   9CAE B1          
3905   9CAF 8E 8F       
3906   9CB1 44 41 54        .TEXT "DAT"          \  EOW('2')  \  .WORD $8EA1
3906   9CB4 B2          
3906   9CB5 8E A1       
3907   9CB7 4D 4F 44        .TEXT "MOD"          \  EOW('T')  \  .WORD $8EB3
3907   9CBA D4          
3907   9CBB 8E B3       
3908   9CBD 54 58 54        .TEXT "TXT"          \  EOW('5')  \  .WORD $8EC7
3908   9CC0 B5          
3908   9CC1 8E C7       
3909   9CC3 4D 4F 4E 49     .TEXT "MONITO"       \  EOW('R')  \  .WORD $8EE1
3909   9CC7 54 4F 
3909   9CC9 D2          
3909   9CCA 8E E1       
3910   9CCC 56 43 55 52     .TEXT "VCURSO"       \  EOW('R')  \  .WORD $8EE4
3910   9CD0 53 4F 
3910   9CD2 D2          
3910   9CD3 8E E4       
3911   9CD5 56 50 43 55     .TEXT "VPCURSO"      \  EOW('R')  \  .WORD $8EEB
3911   9CD9 52 53 4F 
3911   9CDC D2          
3911   9CDD 8E EB       
3912   9CDF 48 43 55 52     .TEXT "HCURSO"       \  EOW('R')  \  .WORD $8EFD
3912   9CE3 53 4F 
3912   9CE5 D2          
3912   9CE6 8E FD       
3913   9CE8 48 50 43 55     .TEXT "HPCURSO"      \  EOW('R')  \  .WORD $8F04
3913   9CEC 52 53 4F 
3913   9CEF D2          
3913   9CF0 8F 04       
3914   9CF2 4C 49 53        .TEXT "LIS"          \  EOW('T')  \  .WORD $8F16
3914   9CF5 D4          
3914   9CF6 8F 16       
3915   9CF8 56 4C 49 53     .TEXT "VLISTAL"      \  EOW('L')  \  .WORD $8F43
3915   9CFC 54 41 4C 
3915   9CFF CC          
3915   9D00 8F 43       
3916   9D02 4C 49 53 54     .TEXT "LISTAL"       \  EOW('L')  \  .WORD $8F46
3916   9D06 41 4C 
3916   9D08 CC          
3916   9D09 8F 46       
3917   9D0B 50 4C 49 53     .TEXT "PLISTAL"      \  EOW('L')  \  .WORD $8F54
3917   9D0F 54 41 4C 
3917   9D12 CC          
3917   9D13 8F 54       
3918   9D15 4C 49 53 54     .TEXT "LISTCR"       \  EOW('T')  \  .WORD $8F56
3918   9D19 43 52 
3918   9D1B D4          
3918   9D1C 8F 56       
3919   9D1E 4C 49 53 54     .TEXT "LISTSCROL"    \  EOW('L')  \  .WORD $8F76
3919   9D22 53 43 52 4F 
3919   9D26 4C 
3919   9D27 CC          
3919   9D28 8F 76       
3920   9D2A 4C 49 53 54     .TEXT "LISTLABE"     \  EOW('L')  \  .WORD $8F7C
3920   9D2E 4C 41 42 45 
3920   9D32 CC          
3920   9D33 8F 7C       
3921   9D35 48 4F 4C 44     .TEXT "HOLD"         \  EOW('1')  \  .WORD $8F95
3921   9D39 B1          
3921   9D3A 8F 95       
3922   9D3C 48 4F 4C 44     .TEXT "HOLD"         \  EOW('2')  \  .WORD $8F97
3922   9D40 B2          
3922   9D41 8F 97       
3923   9D43 57 41 52 54     .TEXT "WART"         \  EOW('E')  \  .WORD $8FA7
3923   9D47 C5          
3923   9D48 8F A7       
3924   9D4A 4C 49 53 54     .TEXT "LISTEDI"      \  EOW('T')  \  .WORD $9010
3924   9D4E 45 44 49 
3924   9D51 D4          
3924   9D52 90 10       
3925   9D54 42 41 43 4B     .TEXT "BACKG"        \  EOW('R')  \  .WORD $9023
3925   9D58 47 
3925   9D59 D2          
3925   9D5A 90 23       
3926   9D5C 42 41 43 4B     .TEXT "BACKGRS"      \  EOW('T')  \  .WORD $9065
3926   9D60 47 52 53 
3926   9D63 D4          
3926   9D64 90 65       
3927   9D66 42 41 43 4B     .TEXT "BACKGRB"      \  EOW('E')  \  .WORD $906A
3927   9D6A 47 52 42 
3927   9D6D C5          
3927   9D6E 90 6A       
3928   9D70 42 41 43 4B     .TEXT "BACKGRLADE"   \  EOW('N')  \  .WORD $9072
3928   9D74 47 52 4C 41 
3928   9D78 44 45 
3928   9D7A CE          
3928   9D7B 90 72       
3929   9D7D 45 52 52 42     .TEXT "ERRBACKG"     \  EOW('R')  \  .WORD $9081
3929   9D81 41 43 4B 47 
3929   9D85 D2          
3929   9D86 90 81       
3930   9D88 45 52           .TEXT "ER"           \  EOW('N')  \  .WORD $9082
3930   9D8A CE          
3930   9D8B 90 82       
3931   9D8D 45 52           .TEXT "ER"           \  EOW('L')  \  .WORD $9088
3931   9D8F CC          
3931   9D90 90 88       
3932   9D92 53 43 48 55     .TEXT "SCHUT"        \  EOW('Z')  \  .WORD $908E
3932   9D96 54 
3932   9D97 DA          
3932   9D98 90 8E       
3933   9D9A 53 4C 45 45     .TEXT "SLEE"         \  EOW('P')  \  .WORD $90AA
3933   9D9E D0          
3933   9D9F 90 AA       
3934   9DA1 52 45 50 5A     .TEXT "REPZE"        \  EOW('I')  \  .WORD $90DE
3934   9DA5 45 
3934   9DA6 C9          
3934   9DA7 90 DE       
3935   9DA9 52 45 50 4B     .TEXT "REPKE"        \  EOW('Y')  \  .WORD $90F1
3935   9DAD 45 
3935   9DAE D9          
3935   9DAF 90 F1       
3936   9DB1 4C 44 52 45     .TEXT "LDRE"         \  EOW('P')  \  .WORD $90F7
3936   9DB5 D0          
3936   9DB6 90 F7       
3937   9DB8 52 45 50 4F     .TEXT "REPOF"        \  EOW('F')  \  .WORD $90FB
3937   9DBC 46 
3937   9DBD C6          
3937   9DBE 90 FB       
3938   9DC0 45 52 52 52     .TEXT "ERRRE"        \  EOW('P')  \  .WORD $9105
3938   9DC4 45 
3938   9DC5 D0          
3938   9DC6 91 05       
3939   9DC8 47 43 4C        .TEXT "GCL"          \  EOW('S')  \  .WORD $9107
3939   9DCB D3          
3939   9DCC 91 07       
3940   9DCE 43 4C 45 41     .TEXT "CLEARG"       \  EOW('R')  \  .WORD $9116
3940   9DD2 52 47 
3940   9DD4 D2          
3940   9DD5 91 16       
3941   9DD7 43 4C 52 47     .TEXT "CLRGRAP"      \  EOW('H')  \  .WORD $911A
3941   9DDB 52 41 50 
3941   9DDE C8          
3941   9DDF 91 1A       
3942   9DE1 43 4C 52 47     .TEXT "CLRGS"        \  EOW('T')  \  .WORD $913C
3942   9DE5 53 
3942   9DE6 D4          
3942   9DE7 91 3C       
3943   9DE9 45 52 52 47     .TEXT "ERRGCL"       \  EOW('S')  \  .WORD $914B
3943   9DED 43 4C 
3943   9DEF D3          
3943   9DF0 91 4B       
3944   9DF2 44 45           .TEXT "DE"           \  EOW('Z')  \  .WORD $914C
3944   9DF4 DA          
3944   9DF5 91 4C       
3945   9DF7 54 45 53        .TEXT "TES"          \  EOW('T')  \  .WORD $914F
3945   9DFA D4          
3945   9DFB 91 4F       
3946   9DFD 43 4F 4C 4F     .TEXT "COLO"         \  EOW('R')  \  .WORD $914F
3946   9E01 D2          
3946   9E02 91 4F       
3947   9E04 45 44 49        .TEXT "EDI"          \  EOW('T')  \  .WORD $914F
3947   9E07 D4          
3947   9E08 91 4F       
3948   9E0A 47 43 55 52     .TEXT "GCURSO"       \  EOW('R')  \  .WORD $914F
3948   9E0E 53 4F 
3948   9E10 D2          
3948   9E11 91 4F       
3949   9E13 47 50 52 49     .TEXT "GPRIN"        \  EOW('T')  \  .WORD $914F
3949   9E17 4E 
3949   9E18 D4          
3949   9E19 91 4F       
3950   9E1B 52 45 50 52     .TEXT "REPRO"        \  EOW('G')  \  .WORD $914F
3950   9E1F 4F 
3950   9E20 C7          
3950   9E21 91 4F       
3951   9E23 4B 45 59 52     .TEXT "KEYRA"        \  EOW('M')  \  .WORD $9150
3951   9E27 41 
3951   9E28 CD          
3951   9E29 91 50       
3952   9E2B 53 45 54 50     .TEXT "SETP"         \  EOW('V')  \  .WORD $9168
3952   9E2F D6          
3952   9E30 91 68       
3953   9E32 4B 45 59 42     .TEXT "KEYBOUMLEI"   \  EOW('T')  \  .WORD $9176
3953   9E36 4F 55 4D 4C 
3953   9E3A 45 49 
3953   9E3C D4          
3953   9E3D 91 76       
3954   9E3F 53 43 52 4F     .TEXT "SCROLLMINU"   \  EOW('S')  \  .WORD $9189
3954   9E43 4C 4C 4D 49 
3954   9E47 4E 55 
3954   9E49 D3          
3954   9E4A 91 89       
3955   9E4C 43 4F 50        .TEXT "COP"          \  EOW('Y')  \  .WORD $9195
3955   9E4F D9          
3955   9E50 91 95       
3956   9E52 50 52 49 4E     .TEXT "PRIN"         \  EOW('T')  \  .WORD $91A7
3956   9E56 D4          
3956   9E57 91 A7       
3957   9E59 50 52 49 4E     .TEXT "PRINTNOKREU"  \  EOW('Z')  \  .WORD $91B1
3957   9E5D 54 4E 4F 4B 
3957   9E61 52 45 55 
3957   9E64 DA          
3957   9E65 91 B1       
3958   9E67 50 52 49 4E     .TEXT "PRINTDIS"     \  EOW('K')  \  .WORD $91BB
3958   9E6B 54 44 49 53 
3958   9E6F CB          
3958   9E70 91 BB       
3959   9E72 45 52 52 50     .TEXT "ERRPRK"       \  EOW('R')  \  .WORD $91D2
3959   9E76 52 4B 
3959   9E78 D2          
3959   9E79 91 D2       
3960   9E7B 4D 4F 44        .TEXT "MOD"          \  EOW('E')  \  .WORD $91D3
3960   9E7E C5          
3960   9E7F 91 D3       
3961   9E81 4D 4F 44 45     .TEXT "MODEC"        \  EOW('L')  \  .WORD $91D8
3961   9E85 43 
3961   9E86 CC          
3961   9E87 91 D8       
3962   9E89 53 55 42 4D     .TEXT "SUBM"         \  EOW('O')  \  .WORD $91EF
3962   9E8D CF          
3962   9E8E 91 EF       
3963   9E90 4D 4F 44 55     .TEXT "MODULBI"      \  EOW('T')  \  .WORD $920C
3963   9E94 4C 42 49 
3963   9E97 D4          
3963   9E98 92 0C       
3964   9E9A 4D 45 52        .TEXT "MER"          \  EOW('R')  \  .WORD $9218
3964   9E9D D2          
3964   9E9E 92 18       
3965   9EA0 53 50 45 45     .TEXT "SPEEDS"       \  EOW('W')  \  .WORD $9219
3965   9EA4 44 53 
3965   9EA6 D7          
3965   9EA7 92 19       
3966   9EA9 53 50 45 45     .TEXT "SPEED"        \  EOW('2')  \  .WORD $921F
3966   9EAD 44 
3966   9EAE B2          
3966   9EAF 92 1F       
3967   9EB1 53 45 52        .TEXT "SER"          \  EOW('R')  \  .WORD $9232
3967   9EB4 D2          
3967   9EB5 92 32       
3968   9EB7 53 45 52 52     .TEXT "SERR"         \  EOW('2')  \  .WORD $9233
3968   9EBB B2          
3968   9EBC 92 33       
3969   9EBE 53 41 56        .TEXT "SAV"          \  EOW('E')  \  .WORD $9234
3969   9EC1 C5          
3969   9EC2 92 34       
3970   9EC4 4C 4F 41        .TEXT "LOA"          \  EOW('D')  \  .WORD $9244
3970   9EC7 C4          
3970   9EC8 92 44       
3971   9ECA 4C 4F 41 44     .TEXT "LOAD"         \  EOW('C')  \  .WORD $9254
3971   9ECE C3          
3971   9ECF 92 54       
3972   9ED1 4C 4F 41 44     .TEXT "LOAD"         \  EOW('F')  \  .WORD $9264
3972   9ED5 C6          
3972   9ED6 92 64       
3973   9ED8 4C 4F 41 44     .TEXT "LOAD"         \  EOW('Q')  \  .WORD $9274
3973   9EDC D1          
3973   9EDD 92 74       
3974   9EDF 53 41 56 45     .TEXT "SAVE"         \  EOW('C')  \  .WORD $9277
3974   9EE3 C3          
3974   9EE4 92 77       
3975   9EE6 53 41 56 45     .TEXT "SAVE"         \  EOW('F')  \  .WORD $9287
3975   9EEA C6          
3975   9EEB 92 87       
3976   9EED 53 41 56 45     .TEXT "SAVE"         \  EOW('Q')  \  .WORD $9297
3976   9EF1 D1          
3976   9EF2 92 97       
3977   9EF4 53 41 56 45     .TEXT "SAVE"         \  EOW('D')  \  .WORD $929A
3977   9EF8 C4          
3977   9EF9 92 9A       
3978   9EFB 4C 4F 41 44     .TEXT "LOAD"         \  EOW('D')  \  .WORD $92A6
3978   9EFF C4          
3978   9F00 92 A6       
3979   9F02 53 41 56 45     .TEXT "SAVE"         \  EOW('R')  \  .WORD $92B2
3979   9F06 D2          
3979   9F07 92 B2       
3980   9F09 4C 4F 41 44     .TEXT "LOAD"         \  EOW('R')  \  .WORD $92BE
3980   9F0D D2          
3980   9F0E 92 BE       
3981   9F10 44 49           .TEXT "DI"           \  EOW('R')  \  .WORD $92CA
3981   9F12 D2          
3981   9F13 92 CA       
3982   9F15 4E 4F 44 45     .TEXT "NODER"        \  EOW('R')  \  .WORD $92D6
3982   9F19 52 
3982   9F1A D2          
3982   9F1B 92 D6       
3983   9F1D 56 45 52 49     .TEXT "VERI"         \  EOW('Q')  \  .WORD $92D9
3983   9F21 D1          
3983   9F22 92 D9       
3984   9F24 43 48 41 49     .TEXT "CHAI"         \  EOW('N')  \  .WORD $92DC
3984   9F28 CE          
3984   9F29 92 DC       
3985   9F2B 43 48 41 49     .TEXT "CHAI"         \  EOW('C')  \  .WORD $92F5
3985   9F2F C3          
3985   9F30 92 F5       
3986   9F32 43 48 41 49     .TEXT "CHAI"         \  EOW('Q')  \  .WORD $9305
3986   9F36 D1          
3986   9F37 93 05       
3987   9F39 4B 45 59 42     .TEXT "KEYBOAR"      \  EOW('D')  \  .WORD $9308
3987   9F3D 4F 41 52 
3987   9F40 C4          
3987   9F41 93 08       
3988   9F43 4B 42 45 45     .TEXT "KBEEOF"       \  EOW('F')  \  .WORD $9317
3988   9F47 4F 46 
3988   9F49 C6          
3988   9F4A 93 17       
3989   9F4C 4B 42 45 52     .TEXT "KBER"         \  EOW('R')  \  .WORD $9322
3989   9F50 D2          
3989   9F51 93 22       
3990   9F53 4B 54 41 53     .TEXT "KTAS"         \  EOW('T')  \  .WORD $9323
3990   9F57 D4          
3990   9F58 93 23       
3991   9F5A 4B 54 41 53     .TEXT "KTASOF"       \  EOW('F')  \  .WORD $9339
3991   9F5E 4F 46 
3991   9F60 C6          
3991   9F61 93 39       
3992   9F63 4B 54 41 45     .TEXT "KTAER"        \  EOW('R')  \  .WORD $934F
3992   9F67 52 
3992   9F68 D2          
3992   9F69 93 4F       
3993   9F6B 54 52 41 43     .TEXT "TRAC"         \  EOW('E')  \  .WORD $9350
3993   9F6F C5          
3993   9F70 93 50       
3994   9F72 54 45 4C 45     .TEXT "TELEFO"       \  EOW('N')  \  .WORD $936D
3994   9F76 46 4F 
3994   9F78 CE          
3994   9F79 93 6D       
3995   9F7B             ;% LB_IWS_xxxx START
3996   9F7B             ;------------------------------------------------------------------------------------------------------------
3997   9F7B             
3998   9F7B             
3999   9F7B             
4000   9F7B             ;------------------------------------------------------------------------------------------------------------
4001   9F7B             ; Unknown
4002   9F7B FF 00 C5 14     .BYTE $FF,$00,$C5,$14,$00,$51,$D5
4002   9F7F 00 51 D5 
4003   9F82             ;------------------------------------------------------------------------------------------------------------
4004   9F82             
4005   9F82             
4006   9F82             
4007   9F82             ;------------------------------------------------------------------------------------------------------------
4008   9F82             ; $9F82 - $9FFF Filler
4009   9F82             ;------------------------------------------------------------------------------------------------------------
4010   9F82             ;% LB_xxxx START
4011   9F82 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4011   9F86 00 00 00 00 
4012   9F8A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4012   9F8E 00 00 00 00 
4013   9F92 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4013   9F96 00 00 00 00 
4014   9F9A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4014   9F9E 00 00 00 00 
4015   9FA2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4015   9FA6 00 00 00 00 
4016   9FAA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4016   9FAE 00 00 00 00 
4017   9FB2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4017   9FB6 00 00 00 00 
4018   9FBA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4018   9FBE 00 00 00 00 
4019   9FC2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4019   9FC6 00 00 00 00 
4020   9FCA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4020   9FCE 00 00 00 00 
4021   9FD2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4021   9FD6 00 00 00 00 
4022   9FDA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4022   9FDE 00 00 00 00 
4023   9FE2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4023   9FE6 00 00 00 00 
4024   9FEA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4024   9FEE 00 00 00 00 
4025   9FF2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4025   9FF6 00 00 00 00 
4026   9FFA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00
4026   9FFE 00 00 
4027   A000             ;% LB_xxxx END
4028   A000             ;------------------------------------------------------------------------------------------------------------
4029   A000             
4030   A000             .END
tasm: Number of errors = 0
