0001   0000             ; IWS-Video_H16_V1.0.asm
0002   0000             ; IWS Video Interface
0003   0000             ;
0004   0000             
0005   0000             #define EOW(n8)        .BYTE n8 | $80    ; Sets bit 7 of character
0006   0000             
0007   0000             #INCLUDE    "lib/PC-1500.lib"
0001+  0000              ; PC-1500 library file
0002+  0000             RAM_ST            = $4000 ; Start of RAM w/o RAM expansion
0003+  0000             RESMEM_ST         = $4008 ; Reserve memroy area area w/o RAM expansion (4008-40C4)
0004+  0000             PRGMEM_ST         = $40C5 ; Start of program memory w/o RAM expansion
0005+  0000             RAM_END           = $47FF ; End of RAM for stock, CE-151, CE-159
0006+  0000             SHADOW_RAM        = $7000 ; Shadow RAM. 7600-77FF mirrored at 7000-71FF, 7200-73FF, 7400-75FF
0007+  0000             SHADOW_RAM_SIZE   = $0600 ; 
0008+  0000             DISP_BUFF         = $7600 ; Display Buffer (7600-774F)
0009+  0000             DISP_BUFF_SIZE    = $0150 ; 
0010+  0000             STRING_VARS       = $7650 ; Fixed String variables (7650-77AF)
0011+  0000             STRING_VARS_SIZE  = $01AF ; 
0012+  0000             CPU_STACK         = $7800 ; CPU stack (7800-784F)
0013+  0000             CPU_STACK_SIZE    = $50   ; 
0014+  0000             XCHRINPT_H        = $785B ; Address of exernal character input routine (H)
0015+  0000             XCHRINPT_L        = $785C ; Address of exernal character input routine (L)
0016+  0000             KATAFLAGS         = $785D ; Katakana displayed flags
0017+  0000             KATACHAR          = $785E ; Address of Katakana character codes (H)
0018+  0000             ST_ROM_MOD        = $7860 ; Start of ROM in module (H)
0019+  0000             ROM_ST_H          = $7861 ; Start of Basic program in ROM module (H)
0020+  0000             ROM_ST_L          = $7862 ; Start of Basic program in ROM module (L)
0021+  0000             RAM_ST_H          = $7863 ; Start of RAM pointer (H)
0022+  0000             RAM_END_H         = $7864 ; End of RAM pointer (H)
0023+  0000             BASPRG_ST_H       = $7865 ; Start of Basic program in RAM (H)
0024+  0000             BASPRG_ST_L       = $7866 ; Start of Basic program in RAM (L)
0025+  0000             BASPRG_END_H      = $7867 ; End of Basic program in RAM (H)
0026+  0000             BASPRG_END_L      = $7868 ; End of Basic program in RAM (L)
0027+  0000             BASPRG_EDT_H      = $7869 ; Start of Basic program edit (H)
0028+  0000             BASPRG_EDT_L      = $786A ; Start of Basic program edit (L)
0029+  0000             BEEP_PTR          = $786B ; BEEP and RMT flags
0030+  0000             RCLTEMPBUFF       = $786C ; RCL Temp buffer (786C-7870)
0031+  0000             RCLTEMPBUFF_SIZE  = $05   ; 
0032+  0000             WAIT_CFG          = $7871 ; WAIT setting
0033+  0000             WAIT_CTR_H        = $7872 ; WAIT time counter (H)
0034+  0000             WAIT_CTR_L        = $7873 ; WAIT time counter (L)
0035+  0000             CURSOR_ENA        = $7874 ; Flags: 01=Cursor enabled, 80=display currently saved 7B10-7BAB
0036+  0000             CURSOR_PTR        = $7875 ; CURSOR POINTER (current display column number)
0037+  0000             CHARPOS_LCD       = $7876 ; Character position number in display, with INPUT statement
0038+  0000             BEEP_FREQ         = $7878 ; BEEP frequency
0039+  0000             CASS_FLAG         = $7879 ; Cassette Operation Parameter (tape interface flag)
0040+  0000             CURS_BLNK_POS     = $787B ; Position of blink character in display, plus 8
0041+  0000             CURSOR_BLNK       = $787C ; Flags: 01=blink cursor enabled, 80=a character is now blinked
0042+  0000             BLNKD_CHAR_CODE   = $787D ; Code of character blinked
0043+  0000             CURS_POS_NBUF_H   = $787E ; Position of blink cursor in buffer (H)
0044+  0000             CURS_POS_NBUF_L   = $787F ; Position of blink cursor in buffer (L)
0045+  0000             DISPARAM          = $7880 ; Display Parameter: determines display at READY
0046+  0000             STK_PTR_GSB_FOR   = $7882 ; Stack pointer for GOSUB and FOR
0047+  0000             CURVARADD_H       = $7883 ; Current variable address (H)
0048+  0000             CURVARADD_L       = $7884 ; Current variable address (L)
0049+  0000             CURVARTYPE        = $7885 ; Current variable type
0050+  0000             LASTVARADD_H      = $7886 ; Last variable address (H)
0051+  0000             LASTVARADD_L      = $7887 ; Last variable address (L)
0052+  0000             LASTVARTYPE       = $7888 ; Last variable type
0053+  0000             BREAKPARAM        = $788A ; BREAK flag parameter
0054+  0000             INBUFPTR_L        = $788B ; Input Buffer pointer (L)
0055+  0000             NUMARGS           = $788C ; Number of function input arguments, array dim 1/2
0056+  0000             TRACE_ON          = $788D ; TRACE ON/OFF pointer: 00=OFF, >0=ON 
0057+  0000             TRACE_PARAM       = $788E ; TRACE Parameter
0058+  0000             OUTBUF_PTR        = $788F ; Output Buffer pointer (L)
0059+  0000             FORNXT_STK_PTR    = $7890 ; FOR/NEXT stack pointer (L)
0060+  0000             GOSB_STK_PTR_L    = $7891 ; GOSUB stack pointer (L)
0061+  0000             BAS_DATA_STK_L    = $7892 ; BASIC DATA STACK pointer (L)
0062+  0000             BAS_PENOP_STK_L   = $7893 ; BASIC PENDING OP STACK pointer (L)
0063+  0000             STR_BUF_PTR_L     = $7894 ; String Buffer Pointer (L)
0064+  0000             USINGF            = $7895 ; USING F/F (format, decimal, comma, etc.)
0065+  0000             USINGM            = $7896 ; USING M integer part
0066+  0000             USING_CHR         = $7897 ; USING & character string
0067+  0000             USINGMD           = $7898 ; USING m decimal part
0068+  0000             VAR_START_H       = $7899 ; START OF VARIABLES in main memory (H)
0069+  0000             VAR_START_L       = $789A ; START OF VARIABLES in main memory (L)
0070+  0000             ERL               = $789B ; ERL, Error code
0071+  0000             CURR_LINE_H       = $789C ; Current line number (H)
0072+  0000             CURR_LINE_L       = $789D ; Current line number (L)
0073+  0000             CURR_TOP_H        = $789E ; Beginning address of current program (H)
0074+  0000             CURR_TOP_L        = $789F ; Beginning address of current program (L)
0075+  0000             PREV_ADD_H        = $78A0 ; Previous address (of preceeding line) (H)
0076+  0000             PREV_ADD_L        = $78A1 ; Previous address (of preceeding line) (L)
0077+  0000             PREV_LINE_H       = $78A2 ; Previous line number (H)
0078+  0000             PREV_LINE_L       = $78A3 ; Previous line number (L)
0079+  0000             PREV_TOP_H        = $78A4 ; Begginning of program containing previous line (H)
0080+  0000             PREV_TOP_L        = $78A5 ; Begginning of program containing previous line (L)
0081+  0000             SRCH_ADD_H        = $78A6 ; Address of linefound during search (H)
0082+  0000             SRCH_ADD_L        = $78A7 ; Address of linefound during search (L)
0083+  0000             SRCH_LINE_H       = $78A8 ; Line number found after search (H)
0084+  0000             SRCH_LINE_L       = $78A9 ; Line number found after search (L)
0085+  0000             SRCH_TOP_H        = $78AA ; Beginning of program containing SEARCH line (H)
0086+  0000             SRCH_TOP_L        = $78AB ; Beginning of program containing SEARCH line (L)
0087+  0000             BRK_ADD_H         = $78AC ; Break address (H)
0088+  0000             BRK_ADD_L         = $78AD ; Break address (L)
0089+  0000             BRK_LINE_H        = $78AE ; Break line number (H)
0090+  0000             BRK_LINE_L        = $78AF ; Break line number (L)
0091+  0000             BRK_TOP_H         = $78B0 ; Beginning of program containing BREAK line
0092+  0000             BRK_TOP_L         = $78B1 ; Beginning of program containing BREAK line
0093+  0000             ERR_ADD_H         = $78B2 ; Error address (H)
0094+  0000             ERR_ADD_L         = $78B3 ; Error address (L)
0095+  0000             ERR_LINE_H        = $78B4 ; Error line number (H)
0096+  0000             ERR_LINE_L        = $78B5 ; Error line number (L)
0097+  0000             ERR_TOP_H         = $78B6 ; Beginning address of program containing ERROR line (H)
0098+  0000             ERR_TOP_L         = $78B7 ; Beginning address of program containing ERROR line (L)
0099+  0000             ON_ERR_ADD_H      = $78B8 ; Address jumped to when error occures (H)
0100+  0000             ON_ERR_ADD_L      = $78B9 ; Address jumped to when error occures (L)
0101+  0000             ON_ERR_LINE_H     = $78BA ; Line number jumped to when error occures (H)
0102+  0000             ON_ERR_LINE_L     = $78BB ; Line number jumped to when error occures (L)
0103+  0000             ON_ERR_TOP_H      = $78BC ; Beginning of program containing ON ERROR line (H)
0104+  0000             ON_ERR_TOP_L      = $78BD ; Beginning of program containing ON ERROR line (L)
0105+  0000             DATA_PTR_H        = $78BE ; Pointer for data statement (H)
0106+  0000             DATA_PTR_L        = $78BF ; Pointer for data statement (H)
0107+  0000             FIXED_VARS        = $78C0 ; Fixed Variables (78C0-79CF)
0108+  0000             FIXED_VARS_SIZE   = $0110 ; 
0109+  0000             PU_PV             = $79D0 ; PU/PV flag, ROM Bank: 00=ROM 1, 01=ROM 2
0110+  0000             OPN               = $79D1 ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0111+  0000             CLK_BYPASS        = $79D3 ; 55=bypass setting of modulation clock freq, serial output
0112+  0000             KB_BYPASS         = $79D4 ; 55=bypass keyboard scan, obtain input from external device
0113+  0000             UNDEF_REG_79FF    = $79FF ; LOCK mode: 00=LOCK, FF=UNLOCK
0114+  0000             ARX               = $7A00 ; Floating-Point accumulator
0115+  0000             ARX_SIZE          = $08   ; 
0116+  0000             ARZ               = $7A08 ; Scratch register (7A00-7A07)
0117+  0000             ARZ_SIZE          = $08   ; 
0118+  0000             ARY               = $7A10 ; Second operand (7A10-7A17)
0119+  0000             ARY_SIZE          = $08   ; 
0120+  0000             ARU               = $7A18 ; Scratch register (7A18-7A1F)
0121+  0000             ARU_SIZE          = $08   ; 
0122+  0000             ARV               = $7A20 ; Scratch register (7A2-7A27)
0123+  0000             ARV_SIZE          = $08   ; 
0124+  0000             ARW               = $7A28 ; Scratch register (7A28-7A2F)
0125+  0000             ARW_SIZE          = $08   ; 
0126+  0000             ARS               = $7A30 ; Temporary storage register (7A30-7A37)
0127+  0000             ARS_SIZE          = $08   ; 
0128+  0000             B_STACK           = $7A38 ; Basic Stack (7838-7AFF)
0129+  0000             B_STACK_SIZE      = $C8   ; 
0130+  0000             RND_VAL           = $7B00 ; Contain Random number value (7B00-7B07)
0131+  0000             RND_VAL_SIZE      =       ; S
0132+  0000             KEY_REPEAT        = $7B09 ; Key repeat speed
0133+  0000             APOW_CTR_H        = $7B0A ; Auto power down counter (H)
0134+  0000             APOW_CTR_M        = $7B0B ; Auto power down counter (M)
0135+  0000             APOW_CTR_L        = $7B0C ; Auto power down counter (L)
0136+  0000             CURS_BLNK_CTR     = $7B0D ; Cursor blink counter
0137+  0000             CURS_CTRL         = $7B0E ; Cursor Control Parameter
0138+  0000             KEY_LAST          = $7B0F ; Last pressed key code
0139+  0000             STR_BUF           = $7B10 ; String Buffer (7B10-7B5F)
0140+  0000             STR_BUF_SIZE      = $50   ; 
0141+  0000             OUT_BUF           = $7B60 ; Output Buffer (7B60-7BAF)
0142+  0000             OUT_BUF_SIZE      = $50   ; 
0143+  0000             IN_BUF            = $7BB0 ; Input Buffer (7BB0-7BFF)
0144+  0000             IN_BUF_SIZE       = $80   ; 
0145+  0000             ST_MAIN_ROM       = $C000 ; Start of PC-1500 ROM, 55
0146+  0000             SA_XREG_2RAM      = $C001 ; Save X-Reg to 78xx. D1 defines low byte xx.
0147+  0000             SAVEVARPTR_ARX    = $C00E ; Save variable pointer. Address from U-Reg, length from AR-X (7A07).
0148+  0000             SAVEVARPTR_A      = $C011 ; Save variable pointer. Address from U-Reg, length from A.
0149+  0000             TRACE_VEC         = $C01D ; Not used (C01C-C01F)
0150+  0000             ST_BAS_TBL        = $C020 ; Start of Basic table
0151+  0000             TOKEN_TBL         = $C054 ; B5: AREAD F1 80:C684
0152+  0000             SM_NEW0           = $C34F ;  'NEW0?' (C350-C354) (Start of system messages)
0153+  0000             SM_NEW0_SIZE      = $05   ; 
0154+  0000             SM_CHECK          = $C355 ;  ':CHECK' (C355-C35B)
0155+  0000             SM_BREAK          = $C35C ;  'BREAK' (C35C-C361)
0156+  0000             SM_IN             = $C362 ;  'IN' (C362-C364)
0157+  0000             SM_IN_SIZE        = $05   ; 
0158+  0000             SM_ERROR          = $C365 ;  'ERROR' (C365-C36A)
0159+  0000             SM_ERROR_SIZE     = $05   ; 
0160+  0000             DEFKEY_TBL        = $C36B ; Occupied DEF key table (C36B-C38A)
0161+  0000             DEFKEY_TBL_SIZE   = $05   ; 
0162+  0000             EDCTRL_TBL        = $C38B ; Address table for editor control characters (C38B-C3A9)
0163+  0000             EDCTRL_TBL_SIZE   = $05   ; 
0164+  0000             FVAL_TBLE         = $C3A8 ; Operator table for formula eval of subs (C3A8-C3FF)  (DE) (D6DF)
0165+  0000             FVAL_TBLE_SIZE    = $05   ; 
0166+  0000             BASIC_INT         = $C400 ; Basic interpreter, Y-Ref points to next char/token
0167+  0000             BCMD_LET          = $C458 ; Basic command LET
0168+  0000             TRCROUTINE        = $C4AF ; Trace Routine
0169+  0000             BCMD_STOP         = $C4B6 ; Basic command STOP
0170+  0000             BCMD_END          = $C50D ; Basic Command END
0171+  0000             BCMD_GOTO         = $C515 ; Basic Command GOTO
0172+  0000             DEFKEY_EVAL       = $C529 ; Evaluate def keys
0173+  0000             BCMD_IF           = $C5B4 ; Basic Command IF
0174+  0000             BCMD_ON           = $C5E0 ; Basic Command ON
0175+  0000             BCMD_GOSUB        = $C64E ; Basic Command GOSUB
0176+  0000             BCMD_REM          = $C676 ; Basic Command REM
0177+  0000             BCMD_USING        = $C67C ; Basic Command USING
0178+  0000             BCMD_DATA         = $C684 ; Basic Command DATA / ARUN / AREAD
0179+  0000             BCMD_TRON         = $C68C ; Basic Command TRON
0180+  0000             BCMD_TROFF        = $C693 ; Basic Command TROFF
0181+  0000             BCMD_DEGREE       = $C697 ; Basic Command DEGREE
0182+  0000             BCMD_RADIAN       = $C6A4 ; Basic Command RADIAN
0183+  0000             BCMD_GRAD         = $C6A8 ; Basic Command GRAD
0184+  0000             BCMD_RETURN       = $C6AC ; Basic Command RETURN
0185+  0000             BCMD_NEXT         = $C704 ; Basic Command NEXT
0186+  0000             BCMD_FOR          = $C711 ; Basic Command FOR
0187+  0000             BCMD_POKE         = $C777 ; Basic Command POKE
0188+  0000             BCMD_POKE#        = $C778 ; Basic Command POKE#
0189+  0000             BCMD_RESTORE      = $C7A2 ; Basic Command RESTORE
0190+  0000             BCMD_READ         = $C7BB ; Basic Command READ
0191+  0000             BCMD_NEW          = $C8A0 ; Basic Command NEW
0192+  0000             BCMD_CLEAR        = $C8F5 ; Basic Command CLEAR
0193+  0000             BCMD_CALL         = $CB63 ; Basic Command CALL
0194+  0000             BCMD_RUN          = $C884 ; Basic Command RUN
0195+  0000             BCMD_CONT         = $C8C7 ; Basic Command CONT
0196+  0000             BCMD_INPUT        = $C8FA ; Basic Command INPUT
0197+  0000             BCMD_LOCK         = $C968 ; Basic Command LOCK
0198+  0000             BCMD_UNLOCK       = $C96A ; Basic Command UNLOCK
0199+  0000             BCMD_LIST         = $C96E ; Basic Command LIST
0200+  0000             BCMD_DIM          = $C988 ; Basic Command DIM
0201+  0000             COLD_START        = $C9E4 ; Editor Cold Start
0202+  0000             BTN_SHCL          = $CA55 ; SHIFT CL (Clear All)
0203+  0000             WARM_START        = $CA58 ; Editor Warm Start
0204+  0000             BUTTON_CL         = $CA64 ; CL Button (Clear LCD )
0205+  0000             EDITOR            = $CA80 ; Editor
0206+  0000             BTN_RCL           = $CB61 ; RCL Button
0207+  0000             RSV_CHNG          = $CB69 ; Change RESERVE level
0208+  0000             BTN_SHMODE        = $CB9C ; SHIFT MODE Button (RESERVE mode)
0209+  0000             BTN_MODE          = $CBA0 ; MODE Button
0210+  0000             BTN_INS           = $CBC7 ; INS Button
0211+  0000             BTN_DEL           = $CBCF ; DEL Button
0212+  0000             BTN_RIGHT         = $CBE4 ; CURSOR RIGHT Button
0213+  0000             PRG_ENTER         = $CC1D ; "@", Programmatic ENTER
0214+  0000             BTN_LRFT          = $CC22 ; CURSOR LEFT Button
0215+  0000             BTN_UP            = $CC38 ; CURSOR UP Button
0216+  0000             BTN_DOWN          = $CC48 ; CURSOR DOWN Button
0217+  0000             BTN_ENTER         = $CCC1 ; ENTER Button
0218+  0000             UNLOCK            = $CD6A ; UNLOCK
0219+  0000             BTN_OFF           = $CD71 ; OFF Button
0220+  0000             ERR1              = $CD89 ; Display ERROR 1, return to editor.
0221+  0000             ERRN              = $CD8B ; Display ERROR N, from UH or do 'ON-ERROR' routine.
0222+  0000             INS2INBUF         = $CDE6 ; INSERT - Insert one character into the Input Buffer.
0223+  0000             CHAR2INBUF        = $CE10 ; Enter characters into the Input Buffer.
0224+  0000             DELFRMINBUF       = $CE38 ; DELETE - Delete one character from the Input Buffer.
0225+  0000             DEFEVAL           = $CE4A ; Evaluate DEF key
0226+  0000             RESKEY_SRCH       = $CEC4 ; Searches for reserve key code in Reserve memory
0227+  0000             TXFR_RSV_KEY      = $CED0 ; Transfers reserve key assignment to Reserve memory.
0228+  0000             PRGLINE_TDI       = $CF27 ; Transfer, delete, insert program line from Input Buffer
0229+  0000             INITSYSADDR       = $CFCC ; Initializes System Addresses, turn off TRACE.
0230+  0000             INBUF_CLRRST      = $D021 ; Clear rest of the input buffer (0D).
0231+  0000             INBUF_CLRINIT     = $D02B ; Clear Input Buffer with '0D', init Input Buffer pointer
0232+  0000             INBUF_INIT        = $D030 ; Clear Input Buffer, Y-Reg points to start of Input Buffer
0233+  0000             INBUF_CLR         = $D034 ; Clears Input buffer with $0D
0234+  0000             SYSMSG            = $D046 ; Send System Messages.
0235+  0000             UL_XREG2YREG      = $D049 ; Transfers UL bytes from X-Reg to Y-Reg
0236+  0000             VARONBSTK         = $D04C ; Find variable on Basic Stack, if not found C = 0.
0237+  0000             POPBSTK           = $D065 ; Pop address from Basic Stack.
0238+  0000             PSHBSTK           = $D071 ; Push U-Reg to Basic Stack
0239+  0000             DELSVARS          = $D080 ; Deletes all standard variables
0240+  0000             DELDVARS          = $D091 ; Deletes dimensioned variables
0241+  0000             DEL_DIM_VARS      = $D09C ; Deletes dimensioned variables if program and variable memory overlap C=1
0242+  0000             BCD_Y2ARX         = $D14F ; Pass BCD number pointed to by Y-Reg to AR-X
0243+  0000             XFRLINE2INBUF     = $D2D0 ; Transfer line pointed to by X-Reg to Input Buffer
0244+  0000             LINESEARCH        = $D2EA ; Searches for line number according to U-Reg from start of program.
0245+  0000             SRCHPRGLINE       = $D2EC ; Searches program line in U-REG from X-REG
0246+  0000             DELU_FROMX        = $D3C4 ; Deletes (U + 1) bytes from X-Reg.
0247+  0000             DEC2HEX           = $D3D5 ; Convert from decimal to hexadecimal.
0248+  0000             BCMD_PEEK         = $D993 ; Basic commands PEEK/PEEK#
0249+  0000             BCMD_NOT          = $D99E ; Basic command NOT
0250+  0000             BCMD_INKY         = $D9AA ; Basic command INKEY$
0251+  0000             BCMD_CHR          = $D9B1 ; Basic command CHR$
0252+  0000             BCMD_STR          = $D9CF ; Basic command STR$
0253+  0000             BCMD_LEN          = $D9D7 ; Basic command LEN / ASC
0254+  0000             ARUINT2ARX        = $D9E7 ; Transfers U-Reg as an integer to AR-X in the format '82 UH UL '.
0255+  0000             BCMD_RLM_STR      = $D9F3 ; Basic commands RIGHT$ / LEFT$ / MID$
0256+  0000             BCMD_STATUS       = $DA44 ; Basic command STATUS
0257+  0000             BCMD_MEM          = $DA5D ; Basic command MEM
0258+  0000             MULT16B           = $DA71 ; 16-Bit Multiplication: X-Reg=Y-Reg*U-Reg.
0259+  0000             TWOSCOMP          = $DAA8 ; Forms two's complement of U-Reg.
0260+  0000             EVAL_USING        = $DAB2 ; Evaluation of USING paramters from Y-Reg
0261+  0000             ISARXBCD          = $DB87 ; Check AR-X for BCD format
0262+  0000             LOAD_NEXT         = $DCD4 ; Load next Token / character
0263+  0000             BCMD_TIME         = $DE82 ; Basic command TIME
0264+  0000             XREG2STRBUF       = $DFA1 ; Inserts string pointed to by X-Reg into string buffer. Jump if overflow.
0265+  0000             STRBUF_OK         = $DFB4 ; Checks if string buffer can hold #chars in Accumulator. No C=1.
0266+  0000             ARX2STRBUF        = $DFC4 ; Loads AR-X with a pointer to the string buffer.
0267+  0000             U_MINUS_X         = $DFE2 ; U-Reg = U-Reg - X-Reg. If overflow occurs C=0 and UH=16
0268+  0000             MEM_IN_UREG       = $DFEE ; Calculates the available memory space (MEM) in U-Reg.
0269+  0000             PRGST2XREG        = $DFF3 ; X-Reg = Program Start Address. U-Reg = STATUS 1-2
0270+  0000             RESET             = $E000 ; Reset-Routine
0271+  0000             IO_INT            = $E153 ; Initializes I/O module with table from E168.
0272+  0000             IO_TBL            = $E168 ; Paramaters for I/O init. (Byte table)
0273+  0000             ISR_HANDLER       = $E171 ; Maskable Interrupt Routine
0274+  0000             NMI_HANDLER       = $E22B ; Non-Maskable Interrupt Routine
0275+  0000             TIMER_ISR         = $E22C ; Timer Interrupt
0276+  0000             PVBANK            = $E234 ; PV banking. Using status of bit 0 in 7900. If 0, PV=1.
0277+  0000             WAITNOKEYS        = $E23D ; Waits until no more keys are pressed.
0278+  0000             WAIT4KB           = $E243 ; Waiting for character input from keyboard. Accumulator=character
0279+  0000             AUTO_OFF          = $E33F ; Auto-Power-Off routine
0280+  0000             ISKEY_1           = $E418 ; Keyboard query. Z=1 if no key pressed.
0281+  0000             ISKEY_0           = $E41A ; Keyboard query. Z=0 if no key pressed.
0282+  0000             KEY2ASCII         = $E42C ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0283+  0000             CHK_BRK           = $E451 ; Checks whether Break was pressed. Yes: Z=0, no Z=1.
0284+  0000             STR_COMP          = $E4A0 ; Compare two strings: pointer in Y-Reg and AR-Y. AR-X=1 is true.
0285+  0000             TOK_TABL_SRCH     = $E4A8 ; Searches for token table below C000. CE-158 C=1, UH-1. CE-150 C=1, UH=2
0286+  0000             BCMD_INPUTNUM     = $E4E7 ; Basic command INPUT#
0287+  0000             BCMD_PRINT        = $E4EB ; Basic command PRINT
0288+  0000             WRITE2CLOCK       = $E52B ; Write to clock  chip.
0289+  0000             TIMEMODE          = $E573 ; Timer mode select according to Accumulator
0290+  0000             ARX2TIME          = $E59A ; Write TIME from AR-X to clock chip
0291+  0000             TIME2ARX          = $E5B4 ; Read TIME from clock chip into AR-X.
0292+  0000             BEEP_ON-OFF       = $E655 ; Beep ON/OFF. Beep on/off pointer 7868 80=1 beep off, 80=0 beep on.
0293+  0000             BCMD_BEEP_STD     = $E669 ; Basic command BEEP - Standard beep.
0294+  0000             BCMD_BEEP         = $E66F ; Basic command BEEP - Duration in X-Reg, Pitch in UL.
0295+  0000             BCMD_PAUSE        = $E6A5 ; Basic command PAUSE
0296+  0000             BCMD_GPRINT       = $E7AC ; Basic command GPRINT
0297+  0000             BCMD_GCURSOR      = $E83E ; Basic command GCURSOR
0298+  0000             BCMD_CURSOR       = $E846 ; Basic command CURSOR
0299+  0000             BCMD_CLS          = $E865 ; Basic command CLS
0300+  0000             BCMD_WAIT         = $E86A ; Basic command WAIT
0301+  0000             TIMEDELAY         = $E88C ; Time delay 15.625 ms * number in U-Reg. BREAK is possible.
0302+  0000             PRGMDISP          = $E8CA ; Display program.
0303+  0000             STATUSCHK         = $E9EB ; Checks display and input status.
0304+  0000             USING_FRMT        = $EA78 ; USING formatting. If error C = 1.
0305+  0000             ARX2ASCII         = $EB40 ; Converts AR-X to ASCII according to USING parameters.
0306+  0000             TRUNCDEC          = $EC2F ; Truncation of the decimal places
0307+  0000             BCMD_DEC9         = $EC3C ; Checks if value in AR-X can be represented in 9 decimal places. If not, C=1.
0308+  0000             X_STROUT          = $EC5C ; Transfers string in X-Reg to output buffer. If error C=1.
0309+  0000             IF_ARX2BCD        = $EC6C ; If AR-X numerical convert to BCD. C=0. If CSI contine w/Distance Address D1.
0310+  0000             ARXBCD2ASCII      = $EC74 ; Converts AR-X from BCD to ASCII and transfers to output buffer.
0311+  0000             XP_STROUT         = $EC82 ; Transmits string X-Reg points to into output buffer. C=1 if buffer full
0312+  0000             CLRNOCURSOR       = $EC9C ; Clears LCD if cursor not allowed and sets the matrix column pointer to 00.
0313+  0000             INIT_CURS         = $ECAE ; Initializes cursor parameters.
0314+  0000             INIT_MTRX         = $ECB2 ; Initializes matrix column pointer (0).
0315+  0000             ARX2OUTBUF        = $ECB7 ; Transfers value in AR-X to output buffer.
0316+  0000             ARX2OUTBUF_F      = $ECD6 ; Tranfer AR-X foramtted to Ouput Buffer
0317+  0000             ARXASCII2OUTBUF   = $ECE3 ; Convert AR-X to ASCII and sent to Output Buffer
0318+  0000             USING_PARAM       = $ECEB ; Determine and transer USING paramaters
0319+  0000             OUTBUF2LCD        = $ECFA ; Output 26 characters in Output Buffer to LCD
0320+  0000             TEXTUREG_A        = $ED00 ; Output of text on LCD. U-Reg=start address; A=length.
0321+  0000             TEXTUREG_XL       = $ED3B ; Outputs text from U-Reg. XL = number of characters
0322+  0000             CHAR2COL          = $ED4D ; Output character at next matrix column
0323+  0000             CHARA2COL         = $ED57 ; Output character in A to next matrix column.
0324+  0000             CHARA2COLX        = $ED5B ; Output character in A to matrix column X-Reg points to.
0325+  0000             A2HEX             = $ED7D ; Convert character in A to HEX nibble
0326+  0000             ASCII2HEX         = $ED95 ; Convert two ASCII characters from X-Reg into HEX
0327+  0000             MTRXNRANGE        = $EDAB ; Checks if matrix pointer still in permissible range 0-155. No, C=1
0328+  0000             MTRXINC           = $EDB1 ; Increase matrix pointer if in permissible range 0-155. No, C=1
0329+  0000             LCDCACHE          = $EDC1 ; Cache LCD display of 7810-7BFF
0330+  0000             BCMD_BFF          = $EDD8 ; Retrieve LCD display of 7610-7BFF
0331+  0000             HEX2COL           = $EDEF ; Output HEX value from A to next matrix column
0332+  0000             GPRNT_A_2LCD      = $EDF6 ; Output of A as a GRPRINT (bit pattern) on LCD 
0333+  0000             MATRIX_PTR2XREG   = $EE1F ; Calculates matrix column address from matrix pointer, to X-Reg.
0334+  0000             MATRIX_A2XREG     = $EE22 ; Calculated matrix column address from A, to X-Reg
0335+  0000             CHAR2ADDR         = $EE48 ; Retrive address in Character Set Table for characters in A
0336+  0000             LCDCLR            = $EE71 ; Clears the LCD display.
0337+  0000             LCDCLRRNG         = $EE78 ; Clears the range from (UH00-UH40).
0338+  0000             SAVELCD2BUF       = $EE80 ; Save LCD to buffer
0339+  0000             BUF2LCD           = $EE99 ; Transfer buffer to LCD
0340+  0000             LCDCHRLEFT        = $EEB0 ; Determines number of empty characters left on LCD, to A.
0341+  0000             BCMD_POINT        = $EECB ; Basic command POINT
0342+  0000             CURSOR_OFF        = $EF00 ; Turns off blinking cursor.
0343+  0000             USING2STK         = $EF05 ; Saves USING parameters on processor stack (7895-7897)
0344+  0000             ARX2STRNG         = $EF1B ; Convert AR-X to string
0345+  0000             STK2USING         = $EF35 ; Get USING parameters from processor stack.
0346+  0000             TXT2LCD           = $EF44 ; Output text on LCD display.
0347+  0000             TXT2LCD_ARY       = $EF5B ; Output text on LCD from AR-Y to 7AXL
0348+  0000             PREPLCDOUT        = $EF67 ; Prepare the LCD output
0349+  0000             OUTBUFCLR         = $EF81 ; Clear output buffer.
0350+  0000             SUBTR             = $EFB6 ; AR-X = AR-X - AR-Y (Subtraction).
0351+  0000             ADDIT             = $EFBA ; AR-X = AR-X + AR-Y (Addition).
0352+  0000             PC1500_DIV_RESET  = $F004 ; PC1500_DIVIDER_RESET (CE1)
0353+  0000             PC1500_UREG_OUTP  = $F005 ; PC1500_U_REG_OUTPUT (CE1)
0354+  0000             PC1500_SER_XFR    = $F006 ; PC1500_SERIAL_XFR (CE1)
0355+  0000             PC1500_F_REG      = $F007 ; PC1500_F_REG_LD/DIV (CE1)
0356+  0000             PC1500_PRT_C      = $F008 ; PC1500_PRT_C (CE1)
0357+  0000             PC1500_G_REG      = $F009 ; PC1500_G_REG (CE1)
0358+  0000             PC1500_MSK_REG    = $F00A ; PC1500_MSK_REG (CE1)
0359+  0000             PC1500_IF_REG     = $F00B ; PC1500_IF_REG (CE1)
0360+  0000             PC1500_PRT_A_DIR  = $F00C ; PC1500_PRT_A_DIR (CE1)
0361+  0000             PC1500_PRT_B_DIR  = $F00D ; PC1500_PRT_B_DIR (CE1)
0362+  0000             PC1500_PRT_A      = $F00E ; PC1500_PRT_A (CE1)
0363+  0000             PC1500_PRT_B      = $F00F ; PC1500_PRT_B (CE1)
0364+  0000             SQUARE            = $F019 ; AR-X = AR-X * AR-X (Square)
0365+  0000             MULTIPLY          = $F01A ; AR-X = AR-X * AR-Y (Multiplication)
0366+  0000             ADDMANY           = $F067 ; Add multiple ARs to AR-X if proper bit set in A
0367+  0000             RECIPRICAL        = $F080 ; AR-X = 1 /AR- X (Reciprocal)
0368+  0000             DIVISION          = $F084 ; AR-X = AR-X / AR-Y (Division)
0369+  0000             SQR_ROOT          = $F0E9 ; AR-X = SQR (AR-X) (Square Root)
0370+  0000             BCMD_LN           = $F161 ; Basic command LN, AR-X = LN (AR-X)
0371+  0000             BCMD_LOG          = $F165 ; Basic command LOG, AR-X = LOG (AR-X)
0372+  0000             BCMD_EXP          = $F1CB ; Basic command EXP
0373+  0000             EXPONENT          = $F1D4 ; AR-X = 10 ^ AR-X
0374+  0000             BCMD_COS          = $F391 ; Basic command COS
0375+  0000             BCMD_TAN          = $F39E ; Basic command TAN
0376+  0000             BCMD_SIN          = $F3A2 ; Basic command SIN
0377+  0000             BCMD_ACS          = $F492 ; Basic command ACS
0378+  0000             BCMD_ATN          = $F496 ; Basic command ATN
0379+  0000             BCMD_ASN          = $F49A ; Basic command ASN
0380+  0000             BCMD_DEG          = $F531 ; Basic command DEG
0381+  0000             BCMD_DMS          = $F564 ; Basic command DMS
0382+  0000             BCMD_ABS          = $F597 ; Basic command ABS
0383+  0000             BCMD_SGN          = $F590 ; Basic command SGN
0384+  0000             BCMD_PI           = $F5B5 ; Basic command PI (in AR-Y)
0385+  0000             BCMD_INT          = $F5BE ; Basic command INT
0386+  0000             BCMD_RND          = $F5D0 ; Basic command RND
0387+  0000             RANDGEN           = $F5EB ; Generates randon number in AR-X
0388+  0000             ARX_              = $F63C ; Sets digits 11 and 12 in AR-X to 00. Used at end of (5C)
0389+  0000             BCMD_RANDOM       = $F641 ; Basic command RANDOM
0390+  0000             ARX2BCD_ABS       = $F65D ; Converts AR-X into BCD form.
0391+  0000             ARX2BCD           = $F663 ; Converts the result in the AR-X into the correct BCD format.
0392+  0000             XFER_DEC_ARX2ARY  = $F6B4 ; Transfers decimal places from AR-X to AR-Y.
0393+  0000             SIGN_TEST         = $F6E6 ; Push result of sign combination (AR-X and AR-Y) on the stack.
0394+  0000             LDA_SGN_ARX       = $F6FB ; Load A with sign from AR-X, clears signs AR-X.
0395+  0000             XFER_ARY2ARS      = $F701 ; Transfer AR-Y to AR-S
0396+  0000             XFER_ARX2ARS      = $F707 ; Transfer AR-X to AR-S.
0397+  0000             XFER_ARX2ARY      = $F70D ; Transfer AR-X to AR-Y.
0398+  0000             XFER_ARS2ARY      = $F715 ; Transfer AR-S to AR-Y.
0399+  0000             XFER_SM_ARY2ARX   = $F71B ; Transfer sign and mantissa from AR-Y to AR-X.
0400+  0000             XFER_SM_ARZ2ARX   = $F71F ; Transfer sign and mantissa from AR-Z to AR-X.
0401+  0000             XFER_SM_ARY2ARZ   = $F725 ; Transfer sign and mantissa from AR-Y to AR-Z.
0402+  0000             XFER_SM_ARX2ARY   = $F729 ; Transfer sign and mantissa from AR-X to AR-Y
0403+  0000             XFER_SM_ARX2ARZ   = $F72F ; Transfer sign and mantissa from AR-X to AR-Z (7A09 - 7A0F).
0404+  0000             XREG2YREG         = $F733 ; Block shift 7 bytes from X-Reg to Y-Reg.
0405+  0000             XFER_ARS2ARX      = $F737 ; Transfer AR-S to AR-X.
0406+  0000             XFER_ARY2ARX      = $F73D ; Transfer AR-Y to AR-X.
0407+  0000             CLR_SM_ARY        = $F747 ; Clear sign and mantissa of AR-Y.
0408+  0000             CLR_SM_ARZ        = $F74B ; Clear sign and mantissa of AR-Z.
0409+  0000             CLR_SM_ARW        = $F74F ; Clear sign and mantissa of AR-W.
0410+  0000             CLR_ARY           = $F753 ; Clear AR-Y
0411+  0000             CLR_ARX           = $F757 ; Clear AR-X.
0412+  0000             CLR_ARZ           = $F75B ; Clear AR-Z.
0413+  0000             CLR_SM_XREG       = $F75F ; Clear sign and mantissa in AR-X
0414+  0000             CLR_7_XREG        = $F761 ; Clear 7 bytes from X-Reg.
0415+  0000             CLR_N_XREG        = $F763 ; Clear UL + 1 byte from X-Reg.
0416+  0000             ARW_SHR_4BITS     = $F769 ; Shift AR-W one nibble right (/10)
0417+  0000             ARZ_SHR_4BITS     = $F76D ; Shift AR-Z one nibb;e right (/10)
0418+  0000             ARY_SHR_4BITS     = $F771 ; Shift AR-Y one nibble right (/10)
0419+  0000             ARX_SHR_4BITS     = $F775 ; Shift AR-X one nibble right (/10)
0420+  0000             X_REG_SHR_4BITS   = $F777 ; Shift X-Reg one nibble right (/10)
0421+  0000             ARS_SHL_4BITS     = $F78C ; Shift AR-S one nibble left (*10).
0422+  0000             ARW_SHL_4BITS     = $F794 ; Shift AR-W one nibble left (*10).
0423+  0000             ARZ_SHL_4BITS     = $F798 ; Shift AR-Z one nibble left (*10).
0424+  0000             ARX_SHL_4BITS     = $F79C ; Shift AR-X one nibble left (*10).
0425+  0000             RND2ARX           = $F7A7 ; Transfer random number from RND to AR-X.
0426+  0000             SET_HB_XYREGS     = $F7B0 ; Set high bytes in X-Reg and Y-Reg to 7A (to AR register).
0427+  0000             SWAP_AARX_ARY     = $F7B5 ; Swap AR-X with AR-S.
0428+  0000             SWAP_ARX_ARY      = $F7B9 ; Swap AR-X with AR-Y.
0429+  0000             SWAP_BYTES        = $F7BF ; Swap bytes (UL+1)
0430+  0000             ADD_ARU_ARX       = $F7C8 ; AR-X = AR-X + AR-U.
0431+  0000             TOKENIZE_INBUF    = $F957 ; Tokenizer. Convert input buffer to program line.
0432+  0000             VAR_TYPE          = $F97B ; Convert input buffer into tokens and use formula interpreter
0433+  0000             DEC_OPN           = $FA58 ; Decrement the OPN byte in A in 2K steps
0434+  0000             SET_PV            = $FA65 ; Sets PV bit and PV byte according to Carry flag
0435+  0000             TOKEN_CHECK       = $FA74 ; Checks if token table exists, right-shifted HB address in A. No, C=0.
0436+  0000             TOKEN_PROCESS     = $FA89 ; Processes tokens according to data bytes.
0437+  0000             PVBANK_A          = $FB2A ; Performs PV banking according to A (79D0).
0438+  0000             TRACE             = $FB9D ; Trace
0439+  0000             STRXFR            = $FBCB ; Save string to output buffer or output to string buffer
0440+  0000             AUX_CONST         = $FBE9 ; Auxiliary constants for arithmetic routines
0441+  0000             CHARSET           = $FCA0 ; Character set table
0442+  0000             KB_LAYOUT_NORM    = $FE80 ; Keyborad layout (standard function)
0443+  0000             KB_LAYOUT_SH      = $FEC0 ; Keyborad layout (shifted function)
0444+  0000             CALL_VECTORS      = $FF00 ; Table for CALL vectors
0008   0000             #INCLUDE    "lib/CE-158.lib"
0001+  0000              ; CE-158 library file
0002+  0000             OUTSTAT_REG       = $7850 ; CE-158 OUTSTAT value
0003+  0000             CONSOLE_REG       = $7851 ; CE-158 CONSOLE. Number of characters/line. Default=0=unlimited
0004+  0000             CONSOLE2          = $7852 ; CE-158 Console 1 (//)
0005+  0000             CE158_UNDEF1      = $7853 ; CE-158 Undefined
0006+  0000             CE158_UNDEF2      = $7854 ; CE-158 Undefined
0007+  0000             CRLF_REG          = $7855 ; CE-158 EOL Character(s) used i.e. CR/LF. HB for LPT, LB for COM
0008+  0000             ZONE_REG          = $7856 ; CE-158 ZONE
0009+  0000             SETDEV_REG        = $7857 ; CE-158 SETDEV value
0010+  0000             SETCOM_REG        = $7858 ; CE-158 SETCOM
0011+  0000             CE158_7859_UNDEF  = $7859 ; CE-158 Undefined
0012+  0000             CE158_785A_UNDEF  = $785A ; CE-158 Undefined
0013+  0000             CE158_REG_79DD    = $79DD ; Used for BPD command flags
0014+  0000             CE158_REG_79DE    = $79DE ; Unknown use
0015+  0000             CE158_REG_79DF    = $79DF ; Used for CLOAD/CSAVE BUSY annunciator blink counter
0016+  0000             CE158_REG_79FA    = $79FA ; Used by CE-158
0017+  0000             CE158_REG_79FB    = $79FB ; Used by CE-158
0018+  0000             CE158_REG_79FC    = $79FC ; Used by CE-158
0019+  0000             CE158_REG_79FD    = $79FD ; Used by CE-158
0020+  0000             CE158_REG_79FE    = $79FE ; Used by CE-158
0021+  0000             CE158_7B08        = $7B08 ; Used in CE-158 Low Bank
0022+  0000             CE158_DIV_RESET   = $D004 ; CE158_DIVIDER_RESET (ME1)
0023+  0000             CE158_UREG_OUTP   = $D005 ; CE158_U_REG_OUTPUT  (ME1)
0024+  0000             CE158_SER_XFR     = $D006 ; CE158_SERIAL_XFR  (ME1)
0025+  0000             CE158_FREG_LDIV   = $D007 ; CE158_F_REG_LD/DIV  (ME1)
0026+  0000             CE158_PRT_C       = $D008 ; CE158_PRT_C  (ME1)
0027+  0000             CE158_G_REG       = $D009 ; CE158_G_REG  (ME1)
0028+  0000             CE158_MSK_REG     = $D00A ; CE158_MSK_REG  (ME1)
0029+  0000             CE158_IF_REG      = $D00B ; CE158_IF_REG  (ME1)
0030+  0000             CE158_PRT_A_DIR   = $D00C ; CE158_PRT_A_DIR  (ME1)
0031+  0000             CE158_PRT_B_DIR   = $D00D ; CE158_PRT_B_DIR  (ME1)
0032+  0000             CE158_PRT_A       = $D00E ; CE158_PRT_A  (ME1)
0033+  0000             CE158_PRT_B       = $D00F ; CE158_PRT_B  (ME1)
0034+  0000             CE158_UART_DATAW  = $D200 ; UART_DATA_W
0035+  0000             CE158_UART_REGW   = $D201 ; UART_REG_W
0036+  0000             CE158_UART_DATAR  = $D202 ; UART_DATA_R
0037+  0000             CE158_UART_REGR   = $D203 ; UART_REG_R
0038+  0000             CE-158_IR_PING    = $DC00 ; PC-1500 pings this address every ISR cycle (does nothing)
0039+  0000             CE158_IR_REG      = $DE00 ; Interrupt ID register, Bit 7 0 = INT, 1 = No INT.
0009   0000             ;#INCLUDE    "lib/CE-158N.lib"
0010   0000             #INCLUDE    "lib/CE-150.lib"
0001+  0000              ; CE-150 library file
0002+  0000             USER_CTRX_H       = $79E0 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (H)
0003+  0000             USER_CTRX_L       = $79E1 ; CE-150, USER COUNTER X (Counter for X coord. of pen) (L)
0004+  0000             USER_CTRY_H       = $79E2 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (H)
0005+  0000             USER_CTRY_L       = $79E3 ; CE-150, USER COUNTER Y (Counter for Y coord. of pen) (L)
0006+  0000             SCIS_CTRY_H       = $79E4 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (H)
0007+  0000             SCIS_CTRY_L       = $79E5 ; CE-150, SCISSORING COUNTER Y (Y dir scissoring counter) (L)
0008+  0000             ABS_POSX          = $79E6 ; CE-150, ABSOLUTE POSITION X (X dir absolute point counter)
0009+  0000             SCIS_EXTY_H       = $79E7 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (H)
0010+  0000             SCIS_EXTY_L       = $79E8 ; CE-150, SCISSORING COUNTER X (X dir scissoring counter) (L)
0011+  0000             PEN_UPDOWN        = $79E9 ; CE-150, Pen UP/DOWN
0012+  0000             LINE_TYPE         = $79EA ; CE-150, LINE TYPE (0 to 9), GRAPH mode
0013+  0000             DOT_LINE_CTR      = $79EB ; CE-150, Dotted line counter
0014+  0000             CURR_PEN          = $79EC ; CE-150, Current Pen position: 00=up, 01=down
0015+  0000             XMTR_HLD_CTR      = $79ED ; CE-150, X-motor hold counter
0016+  0000             MTR_PHASE         = $79EE ; CE-150, Motor Phase: stored in Port C
0017+  0000             YMTR_HLD_CTR      = $79EF ; CE-150, Y-Motor hold counter
0018+  0000             PRNT_MODE         = $79F0 ; CE-150, Print Mode: 00=TEXT, FF=GRAPH
0019+  0000             PRNT_DISABLE      = $79F1 ; CE-150, Printer disable
0020+  0000             PRNT_ROTATE       = $79F2 ; CE-150, ROTATE setting (0 to 3)
0021+  0000             PRNT_COLOR        = $79F3 ; CE-150, COLOR setting (0 to 3)
0022+  0000             PRNT_CSIZE        = $79F4 ; CE-150, CSIZE setting (0 to 3)
0023+  0000             PRNT_LLPARAM      = $79F5 ; CE-150, LPRINT/LLIST Parameter
0024+  0000             PRNT_TEMPM        = $79F6 ; CE-150, LINE=dir. param. LLIST=determine LF. COLOR=Pen location.
0025+  0000             PRNT_DTYPE        = $79F7 ; CE-150, Type of data LRPINTed: 00=numeric, FF=character string
0026+  0000             PRNT_TEMPP        = $79F8 ; CE-150, Temp storage of Pen location during paper feed
0027+  0000             PRNT_PWRINT       = $79F9 ; CE-150, Flag indicating power up/interrupt in progress
0028+  0000             PRNT_VEC          = $A000 ; CE-150 Character vectors (A000-A28A)
0029+  0000             PRNT_VEC_SIZE     = $028B ; 
0030+  0000             MGP1_150          = $A28B ; Start of MGP 1 program block
0031+  0000             COLDES            = $A519 ; CE-150 Color Designation
0032+  0000             MOTOFF            = $A769 ; CE-150 Printer motor OFF
0033+  0000             PRINT_150         = $A781 ; CE-150 Print ASCII character (no LF)
0034+  0000             MOTDRV            = $A8DD ; CE-150 Motor Drive, move pen
0035+  0000             LFEED             = $A951 ; CE-150 Line Feed
0036+  0000             NLFEED            = $AA04 ; CE-150 send #n line feeds to printer
0037+  0000             PENUPDOWN         = $AAE3 ; CE-150 Pen Up/Down
0038+  0000             GRPHPREP          = $ABEF ; CE-150 Switch from tect to graphics mode
0039+  0000             TEXT              = $ACA6 ; CE-150 TEXT
0040+  0000             TEXTPREP          = $ACD3 ; CE-150 Text mode preperation
0041+  0000             GRAPH             = $ACD3 ; CE-150 GRAPH
0042+  0000             CE150_MSK_REG     = $B00A ; (ME1)
0043+  0000             CE150_IF_REG      = $B00B ; (ME1)
0044+  0000             CE150_PRT_A_DIR   = $B00C ; (ME1)
0045+  0000             CE150_PRT_B_DIR   = $B00D ; (ME1)
0046+  0000             CE150_PRT_A       = $B00E ; (ME1)
0047+  0000             CE150_PRT_B       = $B00F ; (ME1)
0048+  0000             SORGN             = $B153 ; CE-150 SORGN
0049+  0000             ROTATE            = $B15A ; CE-150 ROTATE
0050+  0000             COLOR             = $B16A ; CE-150 COLOR
0051+  0000             CSIZE             = $B180 ; CE-150 CSIZE
0052+  0000             GLCURSOR          = $B191 ; CE-150 GLCURSOR
0053+  0000             LF                = $B1B4 ; CE-150 LF
0054+  0000             LINE              = $B222 ; CE-150 LINE
0055+  0000             RLINE             = $B224 ; CE-150 RLINE
0056+  0000             LPRINT_150        = $B2EC ; CE-150 LPRINT
0057+  0000             LLIST_150         = $B754 ; CE-150 LLIST
0058+  0000             CMT_PNAME         = $B800 ; CMT Periph name (B800-B809), 55 01 43 4D 54 0D 0D 0D 0D 0D, U CMT /CR
0059+  0000             SBRA4             = $B888 ; SBR A4 Start of program block CMT 2
0060+  0000             SBRA8             = $B88B ; SBR A8
0061+  0000             SBRAA             = $B88E ; SBR AA
0062+  0000             SBRAE             = $B891 ; SBR AE
0063+  0000             SBRB0             = $B894 ; SBR B0
0064+  0000             SBRB2             = $B897 ; SBR B2
0065+  0000             SBRB4             = $B89A ; SBR B4
0066+  0000             SBRB6             = $B89D ; SBR B6
0067+  0000             SBRB8             = $B8A0 ; SBR B8
0068+  0000             PCJUMP01          = $B8A3 ; Direct PC load from &E524
0069+  0000             CSAVE_150         = $B8A6 ; CE-150 CSAVE
0070+  0000             CLOAD_150         = $B8F9 ; CE-150 CLOAD
0071+  0000             MERGE_150         = $B994 ; CE-150 MERGE
0072+  0000             CHAIN_150         = $BB6A ; CE-150 CHAIN
0073+  0000             HEADERCREATE      = $BBD6 ; CE-150 Write tape synchronisation header
0074+  0000             TERMCMTIO         = $BBF5 ; CE-150 Finalisation of tape I/O control
0075+  0000             HEADERIO          = $BCE8 ; CE-150 Read tape synchronisation feader / Searh for filename
0076+  0000             FILETRSF          = $BD3C ; CE-150 Read / Write file to tape
0077+  0000             SAVEONECHR        = $BDCC ; CE-150 Send a character to tape
0078+  0000             LOADONECHR        = $BDF0 ; CE-150 Read a character from tape
0079+  0000             RMT               = $BEF9 ; CE-150 RMT
0080+  0000             REMOTEON          = $BF11 ; CE-150 Remote ON
0081+  0000             REMOTEOFF         = $BF43 ; CE-150 Remote OFF
0011   0000             #INCLUDE    "lib/PC-1500_Macros.lib"
0001+  0000             ; PC-1500 Macros
0002+  0000             ;------------------------------------------------------------------------------------------------------------
0003+  0000             ; Assembly macros used to encode arguments for lh5801 'macros' that take arguments inline after CALL
0004+  0000             
0005+  0000             #define EQU .EQU
0006+  0000             .MSFIRST
0007+  0000             
0008+  0000             COMMA:      EQU $2C                         ; ',' used for macros
0009+  0000             CR:         EQU $0D                         ; '/CR' used for macros
0010+  0000             DASH:       EQU $2D                         ; '-' used for macros
0011+  0000             EQUALS:     EQU $3D                         ; '-' used for macros
0012+  0000             HASH:       EQU $23                         ; '#' used for macros
0013+  0000             SEMI:       EQU $3B                         ; ';' used for macros
0014+  0000             QUOTE:      EQU $22                         ; '-' used for macros
0015+  0000             DOLLAR:     EQU $24                         ; '#' used for macros
0016+  0000             PERCENT:    EQU $25                         ; ';' used for macros
0017+  0000             
0018+  0000             
0019+  0000             TOK_OFF:    EQU $F19E                       ; OFF   command token
0020+  0000             TOK_ON:     EQU $F19C                       ; ON    command token
0021+  0000             TOK_TAB:    EQU $F0BB                       ; TAB   command token
0022+  0000             TOK_USING:  EQU $F085                       ; USING command token
0023+  0000             
0024+  0000             
0025+  0000             #define ABRF(n8)        .BYTE n8 - $ - 1    ; calculate forward branch
0026+  0000             #define ABYT(n8)        .BYTE n8            ; use byte verbatium
0027+  0000             #define ABYTL(n16)      .BYTE n16 & $FF     ; use byte verbatium
0028+  0000             #define ACHR(ch)        .BYTE ch            ; character
0029+  0000             #define AWRD(n16)       .WORD n16           ; use word value verbatum
0030+  0000             #define CNIB(n81,n82)   .BYTE ((n81 & $F0) | (n82 & $0F))   ; calculates control nibble
0031+  0000             #define HB(n16)         (n16 >> 8)          ; Return HB of 16bit value
0032+  0000             #define LB(n16)         (n16 & $FF)         ; Return HB of 16bit value
0033+  0000             #define HBO(n16,n8)     ((n16 + n8) >> 8)   ; Return HB of 16bit value
0034+  0000             #define LBO(n16,n8)     ((n16 + n8) & $FF)  ; Return HB of 16bit value
0035+  0000             
0036+  0000             ; CE-158 related
0037+  0000             #define HIGH_BANK       SPU \ SPV           ; Switch to High Bank
0038+  0000             #define LOW_BANK        RPU \ SPV           ; Switch to High Bank
0039+  0000             #define SETCOM_M        LDI A,$F9 \ STA (SETCOM_REG)    ; SETDEV to 2400,8,N,1
0040+  0000             #define SETDEV_M(n8)    LDI A,n8 \ STA (SETDEV_REG)     ; SETCOM to device passed
0041+  0000             #define SETOPN_M(n8)    LDI A,n8 \ STA (OPN)            ; Set OPN to n8 table
0042+  0000             
0043+  0000             KI:                 EQU $01                     ;
0044+  0000             DO:                 EQU $02                     ;
0045+  0000             PO:                 EQU $04                     ;
0046+  0000             CI:                 EQU $08                     ;
0047+  0000             CO:                 EQU $10                     ;
0048+  0000             U1:                 EQU $20                     ; U1, use UART 1 (Bit5=0=UART0, Bit5=1=UART1)
0049+  0000             PN:                 EQU $40                     ; PN, LPT port to input
0050+  0000             BP:                 EQU $80                     ; BP, enable BDP mode with U0
0051+  0000             
0052+  0000             #define ADDRCHK(add,location)        #if ($ > add)    ; check address
0053+  0000             #DEFCONT                     \!over_run
0054+  0000             #DEFCONT                     \.ECHO location
0055+  0000             #DEFCONT                     \.ECHO " address over run by "
0056+  0000             #DEFCONT                     \.ECHO ($ - add)
0057+  0000             #DEFCONT                     \.ECHO " bytes\r\n"
0058+  0000             #DEFCONT                     \#endif
0012   0000             
0013   0000             ; IWS Videointerface RAM map
0014   0000             COLORRAM = $6000 ; $6000~$67FF ME1
0015   0000             GRAPHRAM = $6800 ; $6800~$67FF ME1
0016   0000             VIDEORAM = $7000 ; $7000-$77FF ME1
0017   0000             CRTCTRL  = $7800 ; $7800-$7801 ME1
0018   0000             NOTUSED  = $7802 ; $7802~$7FFF ME1
0019   0000             KYREPEAT = $79D5 ; Key repeat flag
0020   0000             
0021   8000             .ORG $8000
0022   8000             
0023   8000             ;------------------------------------------------------------------------------------------------------------
0024   8000             ; BASIC Command Table 8000
0025   8000             ;------------------------------------------------------------------------------------------------------------
0026   8000             ;% B_TBL_8000 START
0027   8000             B_TBL_8000:
0028   8000 55              .BYTE  $55                                          ; Marker that BASIC Table follows 
0029   8001             
0030   8001             B_TBL_8000_TNUM:
0031   8001 05              .BYTE  $05                                          ; Table number
0032   8002             
0033   8002             B_TBL_8000_NAME:
0034   8002 43 52 54 0D     .TEXT  "CRT\r" \ .BYTE $9A,$9A,$9A,$9A              ; Table name
0034   8006 9A 9A 9A 9A 
0035   800A             
0036   800A             B_TBL_8000_INIT:
0037   800A BA 8D C1        JMP     TBL_INIT                                    ; $8DC1 - Table initilization vector
0038   800D             
0039   800D             B_TBL_8000_INPUT_NUM:
0040   800D BA 92 D6        JMP     ERR_27_EXIT ; $92D6                         ; 82C5 - Table INPUT# vector
0041   8010             
0042   8010             B_TBL_8000_PRINT_NUM:
0043   8010 BA 92 D6        JMP     ERR_27_EXIT ; $92D6                         ; 82C9 - Table PRINT# vector
0044   8013             
0045   8013             B_TBL_8000_JMPS:
0046   8013 9A 9A 9A 9A     .BYTE  $9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A,$9A      ; Unused jumps 
0046   8017 9A 9A 9A 9A 
0046   801B 9A 9A 
0047   801D             
0048   801D             B_TBL_8000_TRACE:
0049   801D 93 50 FF        .BYTE $93,$50,$FF                                   ; Unusual
0050   8020             
0051   8020             B_TBL_8000_A_KW:
0052   8020 00 00           .WORD $0000                                         ;
0053   8022             
0054   8022             B_TBL_8000_B_KW:
0055   8022 80 56           .WORD LET_B                                         ; $8056
0056   8024             
0057   8024             B_TBL_8000_C_KW:
0058   8024 80 61           .WORD LET_C                                         ; $8061
0059   8026             
0060   8026             B_TBL_8000_D_KW:
0061   8026 80 95           .WORD LET_D                                         ; $8095
0062   8028             
0063   8028             B_TBL_8000_E_KW:
0064   8028 80 A5           .WORD LET_E                                         ; $80A5
0065   802A             
0066   802A             B_TBL_8000_F_KW:
0067   802A 00 00           .WORD $0000                                         ;
0068   802C             
0069   802C             B_TBL_8000_G_KW:
0070   802C 80 BE           .WORD LET_G                                         ; $80BE
0071   802E             
0072   802E             B_TBL_8000_H_KW:
0073   802E 80 E0           .WORD LET_H                                         ; $80E0
0074   8030             
0075   8030             B_TBL_8000_I_KW:
0076   8030 81 02           .WORD LET_I                                         ; $8102
0077   8032             
0078   8032             B_TBL_8000_J_KW:
0079   8032 00 00           .WORD $0000                                         ; 
0080   8034             
0081   8034             B_TBL_8000_K_KW:
0082   8034 81 0C           .WORD LET_K                                         ; $810C
0083   8036             
0084   8036             B_TBL_8000_L_KW:
0085   8036 81 14           .WORD LET_L                                         ; $8114
0086   8038             
0087   8038             B_TBL_8000_M_KW:
0088   8038 81 26           .WORD LET_M                                         ; $8126
0089   803A             
0090   803A             B_TBL_8000_N_KW:
0091   803A 00 00           .WORD $0000                                         ; 
0092   803C             
0093   803C             B_TBL_8000_O_KW:
0094   803C 00 00           .WORD $0000                                         ; 
0095   803E             
0096   803E             B_TBL_8000_P_KW:
0097   803E 81 3B           .WORD LET_P                                         ; $813B
0098   8040             
0099   8040             B_TBL_8000_Q_KW:
0100   8040 00 00           .WORD $0000                                         ; 
0101   8042             
0102   8042             B_TBL_8000_R_KW:
0103   8042 81 45           .WORD LET_R                                         ; $8145
0104   8044             
0105   8044             B_TBL_8000_S_KW:
0106   8044 81 5B           .WORD LET_S                                         ; $815B
0107   8046             
0108   8046             B_TBL_8000_T_KW:
0109   8046 81 6E           .WORD LET_T                                         ; $816E
0110   8048             
0111   8048             B_TBL_8000_U_KW:
0112   8048 00 00           .WORD $0000                                         ; 
0113   804A             
0114   804A             B_TBL_8000_V_KW:
0115   804A 81 78           .WORD LET_V                                         ; $8178
0116   804C             
0117   804C             B_TBL_8000_W_KW:
0118   804C 00 00           .WORD $0000                                         ; 
0119   804E             
0120   804E             B_TBL_8000_X_KW:
0121   804E 00 00           .WORD $0000                                         ; 
0122   8050             
0123   8050             B_TBL_8000_Y_KW:
0124   8050 00 00           .WORD $0000                                         ; 
0125   8052             
0126   8052             B_TBL_8000_Z_KW:
0127   8052 00 00           .WORD $0000                                         ; 
0128   8054             
0129   8054             B_TBL_8000_CMD_LST:     ;Token LB < 80 command is function, else is proceedure
0130   8054             ;Ctrl nibble    Ctrl nib calc            Name              Token  Vector
0131   8054             LET_B:  EQU ($ + 2) ; First keyword starting with 'B'. LET_B = Address of 'A' in BACKGR
0132   8054             CN1:    EQU $D6 \ CNIB($96,CN1)     \ .TEXT "BACKGR"    \ .WORD $F0DE, $9023        ; $8054
0132   8054 96          
0132   8055 42 41 43 4B 
0132   8059 47 52 
0132   805B F0 DE 90 23 
0133   805F             
0134   805F             LET_C:  EQU ($ + 2) ; First keyword starting with 'C'. LET_C = Address of 'L' in CLS
0135   805F             CN2:    EQU $C3 \ CNIB(CN1,CN2)     \ .TEXT "CLS"       \ .WORD $F088, $8974        ; $805F
0135   805F D3          
0135   8060 43 4C 53    
0135   8063 F0 88 89 74 
0136   8067             CN3:    EQU $A5 \ CNIB(CN2,CN3)     \ .TEXT "CHAIN"     \ .WORD $F0B2, $92DC        ; $8067
0136   8067 C5          
0136   8068 43 48 41 49 
0136   806C 4E 
0136   806D F0 B2 92 DC 
0137   8071             CN4:    EQU $C6 \ CNIB(CN3,CN4)     \ .TEXT "COLORV"    \ .WORD $F0EB, $914F        ; $8071
0137   8071 A6          
0137   8072 43 4F 4C 4F 
0137   8076 52 56 
0137   8078 F0 EB 91 4F 
0138   807C             CN5:    EQU $C7 \ CNIB(CN4,CN5)     \ .TEXT "CONSOLE"   \ .WORD $F0B1, $89B5        ; $807C
0138   807C C7          
0138   807D 43 4F 4E 53 
0138   8081 4F 4C 45 
0138   8084 F0 B1 89 B5 
0139   8088             CN6:    EQU $D6 \ CNIB(CN5,CN6)     \ .TEXT "CURSOR"    \ .WORD $F084, $8A49        ; $8088
0139   8088 C6          
0139   8089 43 55 52 53 
0139   808D 4F 52 
0139   808F F0 84 8A 49 
0140   8093             
0141   8093             LET_D:  EQU ($ + 2) ; First keyword starting with 'D'. LET_D = Address of 'EI' in DIR
0142   8093             CN7:    EQU $C3 \ CNIB(CN6,CN7)     \ .TEXT "DIR"       \ .WORD $F0E0, $92CA        ; $8093
0142   8093 D3          
0142   8094 44 49 52    
0142   8097 F0 E0 92 CA 
0143   809B             CN8:    EQU $53 \ CNIB(CN7,CN8)     \ .TEXT "DEC"       \ .WORD $F070, $914C        ; $809B
0143   809B C3          
0143   809C 44 45 43    
0143   809F F0 70 91 4C 
0144   80A3             
0145   80A3             LET_E:  EQU ($ + 2) ; First keyword starting with 'E'. LET_E = Address of 'D' in EDIT
0146   80A3             CN9:    EQU $C4 \ CNIB(CN8,CN9)     \ .TEXT "EDIT"      \ .WORD $F0C7, $914F        ; $80A3
0146   80A3 54          
0146   80A4 45 44 49 54 
0146   80A8 F0 C7 91 4F 
0147   80AC             CN10:   EQU $C3 \ CNIB(CN9,CN10)    \ .TEXT "ERL"       \ .WORD $F053, $9088        ; $80AC
0147   80AC C3          
0147   80AD 45 52 4C    
0147   80B0 F0 53 90 88 
0148   80B4             CN11:   EQU $D3 \ CNIB(CN10,CN11)   \ .TEXT "ERN"       \ .WORD $F052, $9082        ; $80B4
0148   80B4 C3          
0148   80B5 45 52 4E    
0148   80B8 F0 52 90 82 
0149   80BC             
0150   80BC             LET_G:  EQU ($ + 2) ; First keyword starting with 'G'. LET_G = Address of 'C' in GCLS
0151   80BC             CN12:   EQU $C4 \ CNIB(CN11,CN12)   \ .TEXT "GCLS"      \ .WORD $F0E1, $9107        ; $80BC
0151   80BC D4          
0151   80BD 47 43 4C 53 
0151   80C1 F0 E1 91 07 
0152   80C5             CN13:   EQU $C8 \ CNIB(CN12,CN13)   \ .TEXT "GVCURSOR"  \ .WORD $F0E8, $914F        ; $80C5
0152   80C5 C8          
0152   80C6 47 56 43 55 
0152   80CA 52 53 4F 52 
0152   80CE F0 E8 91 4F 
0153   80D2             CN14:   EQU $D7 \ CNIB(CN13,CN14)   \ .TEXT "GVPRINT"   \ .WORD $F0E9, $914F        ; $80D2
0153   80D2 C7          
0153   80D3 47 56 50 52 
0153   80D7 49 4E 54 
0153   80DA F0 E9 91 4F 
0154   80DE             
0155   80DE             LET_H:  EQU ($ + 2) ; First keyword starting with 'H'. LET_H = Address of 'C' in HCURSOR
0156   80DE             CN15:   EQU $C7 \ CNIB(CN14,CN15)   \ .TEXT "HCURSOR"   \ .WORD $F054, $8EFD        ; $80DE
0156   80DE D7          
0156   80DF 48 43 55 52 
0156   80E3 53 4F 52 
0156   80E6 F0 54 8E FD 
0157   80EA             CN16:   EQU $C8 \ CNIB(CN15,CN16)   \ .TEXT "HPCURSOR"  \ .WORD $F055, $8F04        ; $80EA
0157   80EA C8          
0157   80EB 48 50 43 55 
0157   80EF 52 53 4F 52 
0157   80F3 F0 55 8F 04 
0158   80F7             CN17:   EQU $B4 \ CNIB(CN16,CN17)   \ .TEXT "HEX$"      \ .WORD $F071, $8981        ; $80F7
0158   80F7 C4          
0158   80F8 48 45 58 24 
0158   80FC F0 71 89 81 
0159   8100             
0160   8100             LET_I:  EQU ($ + 2) ; First keyword starting with 'I'. LET_I = Address of 'N' in INPUT
0161   8100             CN18:   EQU $D5 \ CNIB(CN17,CN18)   \ .TEXT "INPUT"     \ .WORD $F091, $8C89        ; $8100
0161   8100 B5          
0161   8101 49 4E 50 55 
0161   8105 54 
0161   8106 F0 91 8C 89 
0162   810A             
0163   810A             LET_K:  EQU ($ + 2) ; First keyword starting with 'K'. LET_K = Address of 'E' in KEY
0164   810A             CN19:   EQU $D3 \ CNIB(CN18,CN19)   \ .TEXT "KEY"       \ .WORD $F0E2, $9308        ; $810A
0164   810A D3          
0164   810B 4B 45 59    
0164   810E F0 E2 93 08 
0165   8112             
0166   8112             LET_L:  EQU ($ + 2) ; First keyword starting with 'L'. LET_L = Address of 'I' in LIST
0167   8112             CN20:   EQU $C4 \ CNIB(CN19,CN20)   \ .TEXT "LIST"      \ .WORD $F090, $8F16        ; $8112
0167   8112 D4          
0167   8113 4C 49 53 54 
0167   8117 F0 90 8F 16 
0168   811B             CN21:   EQU $D4 \ CNIB(CN20,CN21)   \ .TEXT "LOAD"      \ .WORD $F080, $9244        ; $811B
0168   811B C4          
0168   811C 4C 4F 41 44 
0168   8120 F0 80 92 44 
0169   8124             
0170   8124             LET_M:  EQU ($ + 2) ; First keyword starting with 'M'. LET_M = Address of 'O' in MONITOR
0171   8124             CN22:   EQU $C7 \ CNIB(CN21,CN22)   \ .TEXT "MONITOR"   \ .WORD $F0E4, $8EE1        ; $8124
0171   8124 D7          
0171   8125 4D 4F 4E 49 
0171   8129 54 4F 52 
0171   812C F0 E4 8E E1 
0172   8130             CN23:   EQU $D4 \ CNIB(CN22,CN23)   \ .TEXT "MODE"      \ .WORD $F0DF, $91D3        ; $8130
0172   8130 C4          
0172   8131 4D 4F 44 45 
0172   8135 F0 DF 91 D3 
0173   8139             
0174   8139             LET_P:  EQU ($ + 2) ; First keyword starting with 'P'. LET_P = Address of 'R' in PRINT
0175   8139             CN24:   EQU $D5 \ CNIB(CN23,CN24)   \ .TEXT "PRINT"     \ .WORD $F097, $91A7        ; $8139
0175   8139 D5          
0175   813A 50 52 49 4E 
0175   813E 54 
0175   813F F0 97 91 A7 
0176   8143             
0177   8143             LET_R:  EQU ($ + 2) ; First keyword starting with 'R'. LET_R = Address of 'E' in REPKEY
0178   8143             CN25:   EQU $C6 \ CNIB(CN24,CN25)   \ .TEXT "REPKEY"    \ .WORD $F0C3, $90F1        ; $8143
0178   8143 D6          
0178   8144 52 45 50 4B 
0178   8148 45 59 
0178   814A F0 C3 90 F1 
0179   814E             CN26:   EQU $D6 \ CNIB(CN25,CN26)   \ .TEXT "REPROG"    \ .WORD $F0C5, $914F        ; $814E
0179   814E C6          
0179   814F 52 45 50 52 
0179   8153 4F 47 
0179   8155 F0 C5 91 4F 
0180   8159             
0181   8159             LET_S:  EQU ($ + 2) ; First keyword starting with 'S'. LET_S = Address of 'A' in SAVE
0182   8159             CN27:   EQU $C4 \ CNIB(CN26,CN27)   \ .TEXT "SAVE"      \ .WORD $F081, $9234        ; $8159
0182   8159 D4          
0182   815A 53 41 56 45 
0182   815E F0 81 92 34 
0183   8162             CN28:   EQU $D5 \ CNIB(CN27,CN28)   \ .TEXT "SLEEP"     \ .WORD $F0E7, $90AA        ; $8162
0183   8162 C5          
0183   8163 53 4C 45 45 
0183   8167 50 
0183   8168 F0 E7 90 AA 
0184   816C             
0185   816C             LET_T:  EQU ($ + 2) ; First keyword starting with 'T'. LET_T = Address of 'E' in TESTV
0186   816C             CN29:   EQU $D5 \ CNIB(CN28,CN29)   \ .TEXT "TESTV"     \ .WORD $F0EA, $914F        ; $816C
0186   816C D5          
0186   816D 54 45 53 54 
0186   8171 56 
0186   8172 F0 EA 91 4F 
0187   8176             
0188   8176             LET_V:  EQU ($ + 2) ; First keyword starting with 'V'. LET_V = Address of 'E' in VERIFYQ
0189   8176             CN30:   EQU $C7 \ CNIB(CN29,CN30)   \ .TEXT "VERIFYQ"   \ .WORD $F083, $92D9        ; $8176
0189   8176 D7          
0189   8177 56 45 52 49 
0189   817B 46 59 51 
0189   817E F0 83 92 D9 
0190   8182             CN31:   EQU $C7 \ CNIB(CN30,CN31)   \ .TEXT "VCURSOR"   \ .WORD $F056, $8EE4        ; $8182
0190   8182 C7          
0190   8183 56 43 55 52 
0190   8187 53 4F 52 
0190   818A F0 56 8E E4 
0191   818E             CN32:   EQU $C8 \ CNIB(CN31,CN32)   \ .TEXT "VPCURSOR"  \ .WORD $F050, $8EEB        ; $818E
0191   818E C8          
0191   818F 56 50 43 55 
0191   8193 52 53 4F 52 
0191   8197 F0 50 8E EB 
0192   819B             
0193   819B             CN33:  EQU $D0 \ .BYTE CN33
0193   819B D0          
0194   819C             
0195   819C             B_TBL_8000_END:
0196   819C             ;% B_TBL_8000 END
0197   819C             
0198   819C             
0199   819C             FILLER: ; $819C
0200   819C 00 38           .BYTE $00,$38
0201   819E             
0202   819E             ;------------------------------------------------------------------------------------------------------------
0203   819E             ; $81DE XCHR_INPUT - External Character Input Routine
0204   819E             ; Called from: BR $826F, $827C, LIST:$8F8F
0205   819E             ; Arguments: 
0206   819E             ; Outputs: 
0207   819E             ; RegMod: 
0208   819E             ;------------------------------------------------------------------------------------------------------------
0209   819E             ;% LB_XCHR_INPUT START
0210   819E             XCHR_INPUT:
0211   819E FD 98           PSH  Y                          ; 
0212   81A0 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9 - BASIC Program resident?
0213   81A4 B7 01           CPI  A,$01                      ; Only Bit 0 set
0214   81A6 89 0A           BZR  BR_81B2                    ; A <> $01
0215   81A8             
0216   81A8 B5 40           LDI  A,$40                      ; Set OPN to $40. What device is OPN $40
0217   81AA AE 79 D1        STA  (OPN)                      ; OPN device code: 60=LCD, 5C=CMT, 58=MGP. C4=LPRT, C0=COM
0218   81AD FD EB 77 D9     ORI  #(VIDEORAM + $07D9),$02    ; $77D9 - Set Bit 1
0218   81B1 02 
0219   81B2             
0220   81B2             BR_81B2: ; BR $81A6
0221   81B2 E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4 - Turn off keyboard bypass
0222   81B6 14              LDA  YL                         ; Y is address of 1st char/token in line to process
0223   81B7 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4 - used as temp token storage in BASIC line processing?
0224   81BB A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
0225   81BE B7 02           CPI  A,$02                      ; Bit 1: Program waits for Enter after a print command
0226   81C0 8B 6D           BZS  BR_822F                    ; A == $02
0227   81C2             
0228   81C2 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3 - set to $00 after CLS, text row??
0229   81C6 B7 19           CPI  A,$19                      ; $19 == 25d == last line?
0230   81C8 89 05           BZR  BR_81CF                    ; A <> $19
0231   81CA             
0232   81CA BE 8C 57        SJP  (JMP_8C57)                 ; $8C57 - something to do with reserve memory
0233   81CD 83 60           BCS  BR_822F                    ; Branch if JMP_8C57 returns fail (Carry set)
0234   81CF             
0235   81CF             BR_81CF: ; BR $81C8
0236   81CF BE 88 EB        SJP  (JMP_88EB)                 ; $88EB - Returns Y cursor or text row in A
0237   81D2 B7 19           CPI  A,$19                      ; $19 == 25d == last row
0238   81D4 81 03           BCR  BR_81D9                    ; A < $19
0239   81D6             
0240   81D6 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7 - block copies video RAM? Scroll screeen?
0241   81D9             
0242   81D9             BR_81D9: ; BR $81D4
0243   81D9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3 - set to $00 after CLS, text row??
0244   81DD B7 09           CPI  A,$09                      ; 
0245   81DF 89 08           BZR  BR_81E9                    ; A <> $09
0246   81E1             
0247   81E1 BE 89 29        SJP  (JMP_8929)                 ; $8929 - no idea
0248   81E4 81 49           BCR  BR_822F                    ; JMP_8929 returned success (Carry reset)
0249   81E6             
0250   81E6 BE 84 66        SJP  (JMP_8466)                 ; $8466 - no idea
0251   81E9             
0252   81E9             BR_81E9: ; BR $81DF
0253   81E9 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3 - set to $00 after CLS, text row??
0254   81ED B7 0D           CPI  A,$0D                      ; CR?
0255   81EF 89 03           BZR  BR_81F4                    ; A <> $0D
0256   81F1             
0257   81F1 BE 87 CC        SJP  (JMP_87CC)                 ; $87CC - no idea
0258   81F4             
0259   81F4             BR_81F4: ; BR $81EF
0260   81F4 BE 88 EB        SJP  (JMP_88EB)                 ; $88EB - no idea
0261   81F7 B7 19           CPI  A,$19                      ; $19 == 25d == last row
0262   81F9 81 03           BCR  BR_81FE                    ; A < $19
0263   81FB             
0264   81FB BE 84 D7        SJP  (JMP_84D7)                 ; $84D7 - block copies video RAM? Scroll screen?
0265   81FE             
0266   81FE             BR_81FE: ; BR $81F9
0267   81FE FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0268   8202 18              STA  YH                         ; 
0269   8203 5A 01           LDI  YL,$01                     ; 
0270   8205 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0271   8209 B7 01           CPI  A,$01                      ; 
0272   820B 89 08           BZR  BR_8215                    ; A <> $01
0273   820D             
0274   820D A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
0275   8210 18              STA  YH                         ; 
0276   8211 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
0277   8214 1A              STA  YL                         ; 
0278   8215             
0279   8215             BR_8215: ; BR $820B
0280   8215 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - Sets Y-reg to point to char under cursor?
0281   8218 FD 18           LDX  Y                          ; Move Y to X
0282   821A 58 7B           LDI  YH,HB(IN_BUF)              ; $7B
0283   821C 5A B0           LDI  YL,LB(IN_BUF)              ; $B0
0284   821E FD E9 77 D6     ANI  #(VIDEORAM + $07D6),$00    ; $77D6 - clear unknown register
0284   8222 00 
0285   8223 BE 85 2C        SJP  (JMP_852C)                 ; $852C - no idea, seem to process program line
0286   8226 BE 86 63        SJP  (JMP_8663)                 ; $8663 - manipulates screen
0287   8229 BE 84 56        SJP  (JMP_8456)                 ; $8456 - no idea
0288   822C BE 87 21        SJP  (JMP_8721)                 ; $8721 - manipulates screen
0289   822F             
0290   822F             BR_822F: ; BR $81C0: Waiting for enter after PRINT, $81CD, $81E4
0291   822F E9 7B 0A 00     ANI  (APOW_CTR_H),$00           ; Auto power down counter (H)
0292   8233 E9 7B 0B 00     ANI  (APOW_CTR_M),$00           ; Auto power down counter (M)
0293   8237 E9 7B 0C 00     ANI  (APOW_CTR_L),$00           ; Auto power down counter (L)
0294   823B BE 91 50        SJP  (KEYRAM)                   ; $9150 - Poke a SJP into RAM as vector to KB input in ROM
0295   823E BE 90 DE        SJP  (KEY_REPEAT_ON)            ; $90DE - Turn key repeat back on
0296   8241 BE 89 63        SJP  (CRTC_CSR_STRT20)          ; $8963 CRTC - Cursor start raster register
0297   8244 FD C8           PSH  A                          ; 
0298   8246 A5 76 4E        LDA  (DISP_BUFF + $4E)          ; $764F
0299   8249 BB F7           ORI  A,$F7                      ; Set all but Bit 3
0300   824B B7 FF           CPI  A,$FF                      ; Are all bits set?
0301   824D 8B 03           BZS  BR_8252                    ; A == $FF
0302   824F             
0303   824F BA 82 71        JMP  BR_8271                    ; $8271
0304   8252             
0305   8252             BR_8252: ; BR $824D
0306   8252 FD 88           PSH  X                          ; Save registers modified by KEY2ASCII
0307   8254 FD 98           PSH  Y                          ; 
0308   8256 FD A8           PSH  U                          ; 
0309   8258 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
0310   825B FD 2A           POP  U                          ; Restore saved registers
0311   825D FD 1A           POP  Y                          ; 
0312   825F FD 0A           POP  X                          ; 
0313   8261 B7 09           CPI  A,$09                      ; 
0314   8263 89 0C           BZR  BR_8271                    ; A <> $$09
0315   8265             
0316   8265 EB 76 4E 04     ORI  (DISP_BUFF + $4E),$04      ; $764E - Set bit 2
0317   8269 E9 76 4E F7     ANI  (DISP_BUFF + $4E),$F7      ; Clear bit 3
0318   826D FD 8A           POP  A                          ; 
0319   826F 9E D3           BCH  XCHR_INPUT                 ; $819E
0320   8271             
0321   8271             BR_8271: ; BR $824F, $8263
0322   8271 FD 8A           POP  A                          ; 
0323   8273 B7 1A           CPI  A,$1A                      ; 
0324   8275 89 07           BZR  BR_827E                    ; A <> $1A
0325   8277             
0326   8277 BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
0327   827A FD 1A           POP  Y                          ; 
0328   827C 9E E0           BCH  XCHR_INPUT                 ; $819E
0329   827E             
0330   827E             BR_827E: ; BR $8275
0331   827E B7 0B           CPI  A,$0B                      ; 
0332   8280 89 17           BZR  BR_8299                    ; A <> $0B
0333   8282             
0334   8282 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0335   8286 B7 28           CPI  A,$28                      ; 
0336   8288 89 0D           BZR  BR_8297                    ; A <> $28, i.e. 40col
0337   828A             
0338   828A FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0339   828E B7 03           CPI  A,$03                      ; 
0340   8290 81 05           BCR  BR_8297                    ; A < $03
0341   8292             
0342   8292 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row set to $FF?
0342   8296 FF 
0343   8297             
0344   8297             BR_8297: ; BR $8288, $8290
0345   8297 B5 0B           LDI  A,$0B                      ; 
0346   8299             
0347   8299             BR_8299: ; BR $8280
0348   8299 B7 0B           CPI  A,$0B                      ; 
0349   829B 89 4D           BZR  BR_82EA                    ; A <> $0B
0350   829D             
0351   829D FD C8           PSH  A                          ; 
0352   829F BE 86 E4        SJP  (AT_PRGSTRT)               ; $86E4 - find start of program?
0353   82A2 83 05           BCS  BR_82A9                    ; AT_PRGSTRT returned failure (Carry set)
0354   82A4             
0355   82A4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0355   82A8 01 
0356   82A9             
0357   82A9             BR_82A9: ; BR $82A2
0358   82A9 FD 8A           POP  A                          ; 
0359   82AB FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF - Set bit 0
0359   82AF 01 
0360   82B0 B5 0A           LDI  A,$0A                      ; 
0361   82B2 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor Start Raster
0362   82B6 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA - Init $80 - Cursor Start Raster?
0363   82BA FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
0364   82BE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - current text row? Set to $FF
0364   82C2 FF 
0365   82C3 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0366   82C7 B7 00           CPI  A,$00                      ; 
0367   82C9 89 08           BZR  BR_82D3                    ; A <> $00
0368   82CB             
0369   82CB BE 91 89        SJP  (JMP_9189)                 ; $9189 - Scroll screen?
0370   82CE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0370   82D2 01 
0371   82D3             
0372   82D3             BR_82D3: ; BR $82C9
0373   82D3 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; $77D9 - BASIC Program resident?
0374   82D7 B7 99           CPI  A,$99                      ; 
0375   82D9 89 0B           BZR  BR_82E6                    ; A <> $99
0376   82DB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0376   82DF 01 
0377   82E0 B5 02           LDI  A,$02                      ; 
0378   82E2 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; $77D9 - BASIC Program resident?
0379   82E6             
0380   82E6             BR_82E6: ; BR $82D9
0381   82E6 B5 0B           LDI  A,$0B                      ; 
0382   82E8 8E D1           BCH  BR_83BB                    ; $83BB
0383   82EA             
0384   82EA             BR_82EA: ; BR $829B
0385   82EA B7 0A           CPI  A,$0A                      ; 
0386   82EC 89 29           BZR  BR_8317                    ; A <> $0A
0387   82EE             
0388   82EE FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0389   82F2 B7 28           CPI  A,$28                      ; ?$40col mode
0390   82F4 89 1F           BZR  BR_8315                    ; A <> $28
0391   82F6             
0392   82F6 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0393   82FA B7 17           CPI  A,$17                      ; 
0394   82FC 81 12           BCR  BR_8310                    ; A < $17
0395   82FE BE 84 D7        SJP  (JMP_84D7)                 ; $84D7 - Block copies video RAM?
0396   8301 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0396   8305 FF 
0397   8306 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0397   830A FF 
0398   830B FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0398   830F FF 
0399   8310             
0400   8310             BR_8310: ; BR $82FC
0401   8310 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0401   8314 01 
0402   8315             
0403   8315             BR_8315: ; BR $82F4
0404   8315 B5 0A           LDI  A,$0A                      ; 
0405   8317             
0406   8317             BR_8317: ; BR $82EC
0407   8317 B7 0A           CPI  A,$0A                      ; 
0408   8319 89 13           BZR  BR_832E                    ; A <> $0A
0409   831B             
0410   831B FD C8           PSH  A                          ; 
0411   831D BE 86 FA        SJP  (LAST_LINE)                ; $86FA - finds program line?
0412   8320 83 05           BCS  BR_8327                    ; LAST_LINE returned failure (Carry set)
0413   8322             
0414   8322 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0414   8326 FF 
0415   8327             
0416   8327             BR_8327: ; BR $8320
0417   8327 FD 8A           POP  A                          ; 
0418   8329 FD EB 77 DF     ORI  #(VIDEORAM + $07DF),$01    ; $77DF
0418   832D 01 
0419   832E             
0420   832E             BR_832E: ; BR $8319
0421   832E B7 0C           CPI  A,$0C                      ; 
0422   8330 89 11           BZR  BR_8343                    ; A <> $0C
0423   8332             
0424   8332 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF - FLAGS = (pp) & n (ME1)
0424   8336 01 
0425   8337 8B 0A           BZS  BR_8343                    ; Bit 0 not set
0426   8339             
0427   8339 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF - Clear
0427   833D 00 
0428   833E FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0428   8342 FF 
0429   8343             
0430   8343             BR_8343: ; BR $8330, $8337
0431   8343 B7 08           CPI  A,$08                      ; 
0432   8345 89 11           BZR  BR_8358                    ; A <> $08
0433   8347             
0434   8347 FD ED 77 DF     BII  #(VIDEORAM + $07DF),$01    ; $77DF - FLAGS = (pp) & n (ME1)
0434   834B 01 
0435   834C 8B 0A           BZS  BR_8358                    ; Bit 0 of #$77DF was set
0436   834E             
0437   834E FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; Clear $77DF
0437   8352 00 
0438   8353 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
0438   8357 FF 
0439   8358             
0440   8358             BR_8358: ; BR $8345, $834C
0441   8358 B7 0E           CPI  A,$0E                      ; 
0442   835A 89 05           BZR  BR_8361                    ; A <> $0E
0443   835C             
0444   835C FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ; $77D8 - Clear
0444   8360 00 
0445   8361             
0446   8361             BR_8361: ; BR $835A
0447   8361 B7 1F           CPI  A,$1F                      ; 
0448   8363 89 02           BZR  BR_8367                    ; A <> $1F
0449   8365 8E 04           BCH  BR_836B                    ; 
0450   8367             
0451   8367             BR_8367: ; BR $8363
0452   8367 B7 1E           CPI  A,$1E                      ; 
0453   8369 89 09           BZR  BR_8374                    ; A <> $1E
0454   836B             
0455   836B             BR_836B: ; BR $8365
0456   836B FD C8           PSH  A                          ; 
0457   836D BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
0458   8370 FD 8A           POP  A                          ; 
0459   8372 8E 47           BCH  BR_83BB                    ; $83BB
0460   8374             
0461   8374             BR_8374: ; BR $8369
0462   8374 B7 0E           CPI  A,$0E                      ; 
0463   8376 83 09           BCS  BR_8381                    ; A >= $0E
0464   8378             
0465   8378 B7 0A           CPI  A,$0A                      ; 
0466   837A 81 05           BCR  BR_8381                    ; A < $0A
0467   837C             
0468   837C BE 83 C6        SJP  (JMP_83C6)                 ; $83C6 - char input related
0469   837F 8E 3A           BCH  BR_83BB                    ; $83BB
0470   8381             
0471   8381             BR_8381: ; BR $8376,$837A
0472   8381 1A              STA  YL                         ; 
0473   8382 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0474   8386 B7 0D           CPI  A,$0D                      ; 
0475   8388 89 03           BZR  BR_838D                    ; A <> $0D
0476   838A             
0477   838A BE 84 2D        SJP  (JMP_842D)                 ; $842D - Exit path
0478   838D             
0479   838D             BR_838D: ; BR $8388
0480   838D FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0481   8391 B7 0A           CPI  A,$0A                      ; 
0482   8393 89 03           BZR  BR_8398                    ; A <> $0A
0483   8395             
0484   8395 BE 84 3B        SJP  (JMP_843B)                 ; $843B - not sure
0485   8398             
0486   8398             BR_8398: ; BR $8393
0487   8398 B7 0B           CPI  A,$0B                      ; 
0488   839A 89 03           BZR  BR_839F                    ; A <> $0B
0489   839C             
0490   839C BE 84 3B        SJP  (JMP_843B)                 ; $843B - not sure
0491   839F                 
0492   839F             BR_839F:   
0493   839F 14              LDA  YL                         ; 
0494   83A0 E9 7B 0E FD     ANI  (CURS_CTRL),$FD            ; Clear Bit 1
0495   83A4 FD C8           PSH  A                          ; 
0496   83A6 B5 55           LDI  A,$55                      ; 
0497   83A8 FD A7 77 E2     CPA  #(VIDEORAM + $07E2)        ; $77E2 - External KB flag
0498   83AC 89 0B           BZR  BR_83B9                    ; A <> $77E2
0499   83AE             
0500   83AE FD 88           PSH  X                          ; 
0501   83B0 FD A8           PSH  U                          ; 
0502   83B2 BE E6 69        SJP  (BCMD_BEEP_STD)            ; 
0503   83B5 FD 2A           POP  U                          ; 
0504   83B7 FD 0A           POP  X                          ; 
0505   83B9             
0506   83B9             BR_83B9: ; BR $83AC
0507   83B9 FD 8A           POP  A                          ; 
0508   83BB             
0509   83BB             BR_83BB: ; BR $82E8,$8372,$837F
0510   83BB FD 1A           POP  Y                          ;
0511   83BD FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
0512   83C1 EB 79 D4 55     ORI  (KB_BYPASS),$55            ; Set KB bypass
0513   83C5 9A              RTN                             ; Done
0514   83C6             ;% LB_xxxx_INPUT END
0515   83C6             ;------------------------------------------------------------------------------------------------------------
0516   83C6             
0517   83C6             
0518   83C6             
0519   83C6             ;------------------------------------------------------------------------------------------------------------
0520   83C6             ; $83C6- xxxx - 
0521   83C6             ; Called from: XCHRINPUT:$837C
0522   83C6             ; Arguments: A
0523   83C6             ; Outputs: 
0524   83C6             ; RegMod: A, YL
0525   83C6             ;------------------------------------------------------------------------------------------------------------
0526   83C6             ;% LB_xxxx START
0527   83C6             JMP_83C6:
0528   83C6 1A              STA  YL                         ; 
0529   83C7 B5 3E           LDI  A,$3E                      ; '>'
0530   83C9 A7 7B B0        CPA  (IN_BUF)                   ; $7BB0
0531   83CC 8B 49           BZS  BR_8417                    ; $3E == IN_BUF
0532   83CE             
0533   83CE B5 0D           LDI  A,$0D                      ; '\CR'
0534   83D0 FD A7 77 D3     CPA  #(VIDEORAM + $07D3)        ; $77D3
0535   83D4 89 0F           BZR  BR_83E5                    ; $0D <> ($77D3)
0536   83D6             
0537   83D6 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
0538   83DA B7 50           CPI  A,$50                      ; 
0539   83DC 8B 12           BZS  BR_83F0                    ; A == $50 == 80col mode
0540   83DE             
0541   83DE FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0541   83E2 01 
0542   83E3 8E 32           BCH  BR_8417                    ; $8417
0543   83E5                 
0544   83E5             BR_83E5:   
0545   83E5 16              CPA  YL                         ; A == #(VIDEORAM + $07D3) $77D3, YL == original A
0546   83E6 8B 31           BZS  BR_8419                    ; A == YL
0547   83E8             
0548   83E8 5E 08           CPI  YL,$08                     ; 
0549   83EA 8B 33           BZS  BR_841F                    ; YL == $08
0550   83EC             
0551   83EC 5E 0C           CPI  YL,$0C                     ; 
0552   83EE 8B 2F           BZS  BR_841F                    ; YL == $0C
0553   83F0             
0554   83F0             BR_83F0: ; BR $83DC,$841D,$8425,$8428,$844D,$8454
0555   83F0 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row, (pp) = (pp) + n (ME1)
0555   83F4 01 
0556   83F5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0557   83F9 B7 28           CPI  A,$28                      ; 
0558   83FB 89 1A           BZR  BR_8417                    ; A <> $28, not 40 col mode
0559   83FD             
0560   83FD FD 98           PSH  Y                          ; 
0561   83FF FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0562   8403 DF              DEC  A                          ; 
0563   8404 18              STA  YH                         ;
0564   8405 5A 28           LDI  YL,$28                     ;
0565   8407 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - maniulates (scrolls?) screen?
0566   840A FD 15           LDA  #(Y)                       ;
0567   840C FD 1A           POP  Y                          ;
0568   840E B7 0E           CPI  A,$0E                      ; 
0569   8410 81 05           BCR  BR_8417                    ; A < $0E
0570   8412             
0571   8412 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0571   8416 01 
0572   8417             
0573   8417             BR_8417: ; BR $83CC,$83E3,$83FB,$8410,$842B,$8442,$844B,$8452
0574   8417 14              LDA  YL                         ;
0575   8418 9A              RTN                             ; Done
0576   8419             
0577   8419             BR_8419: ; BR $83E6
0578   8419 5E 0D           CPI  YL,$0D                     ;
0579   841B 8B 02           BZS  BR_841F                    ; YL == $0D
0580   841D 9E 2F           BCH  BR_83F0                    ; $83F0
0581   841F             
0582   841F             BR_841F: ; BR $841B
0583   841F FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0584   8423 B7 0A           CPI  A,$0A                      ; 
0585   8425 9B 37           BZS  BR_83F0                    ; A == $0A
0586   8427             
0587   8427 B7 0B           CPI  A,$0B                      ; 
0588   8429 9B 3B           BZS  BR_83F0                    ; A == $0B
0589   842B 9E 16           BCH  BR_8417                    ; $8417
0590   842D             
0591   842D             JMP_842D: ; BR $838A
0592   842D B5 3E           LDI  A,$3E                      ; '>'
0593   842F A7 7B B0        CPA  (IN_BUF)                   ; $7BB0
0594   8432 89 01           BZR  BR_8435                    ; A == $3E <> (IN_BUF)
0595   8434             
0596   8434 9A              RTN                             ; Done
0597   8435             
0598   8435             BR_8435: ; BR $8432
0599   8435 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0599   8439 01 
0600   843A 9A              RTN                             ; Done
0601   843B             ;% LB_xxxx END
0602   843B             ;------------------------------------------------------------------------------------------------------------
0603   843B             
0604   843B             
0605   843B             
0606   843B             ;------------------------------------------------------------------------------------------------------------
0607   843B             ; $843B- xxxx - 
0608   843B             ; Called from: XCHR_INPUT:$8395, XCHR_INPUT:$839C
0609   843B             ; Arguments: 
0610   843B             ; Outputs: 
0611   843B             ; RegMod: 
0612   843B             ;------------------------------------------------------------------------------------------------------------
0613   843B             ;% LB_xxxx START
0614   843B             JMP_843B:
0615   843B A5 76 4F        LDA  (DISP_BUFF + $4F)          ; $764F
0616   843E B9 20           ANI  A,$20                      ; A = A & n, keep only bit 5
0617   8440 B7 20           CPI  A,$20                      ; 
0618   8442 99 2D           BZR  BR_8417                    ; Bit 5 of $764F was set. Exit thourgh: (LDA YL, RTN)
0619   8444             
0620   8444 5E 0A           CPI  YL,$0A                     ; 
0621   8446 89 07           BZR  BR_844F                    ; YL <> $0A
0622   8448             
0623   8448 BE 86 FA        SJP  (LAST_LINE)                ; $86FA - finds program line?
0624   844B 91 36           BCR  BR_8417                    ; $8417 - REC = success from abaove call? Exit thourgh: (LDA YL, RTN)
0625   844D 9E 5F           BCH  BR_83F0                    ; $83F0
0626   844F             
0627   844F             BR_844F:  ; BR $8446
0628   844F BE 86 E4        SJP  (AT_PRGSTRT)               ; $86E4 - Finds start of program?
0629   8452 91 3D           BCR  BR_8417                    ; $8417 - REC = success from abaove call?
0630   8454 9E 66           BCH  BR_83F0                    ; $83F0
0631   8456             
0632   8456             JMP_8456: ; BR $8229
0633   8456 A5 7B B0        LDA  (IN_BUF)                   ; 
0634   8459 B7 3E           CPI  A,$3E                      ; '>'
0635   845B 8B 01           BZS  BR_845E                    ; A <> $3E
0636   845D             
0637   845D 9A              RTN                             ; Done
0638   845E             
0639   845E             BR_845E:  ; BR $845B
0640   845E A5 78 7B        LDA  (CURS_BLNK_POS)            ; $787B - Position of blink character in display, plus 8
0641   8461 B7 09           CPI  A,$09                      ; 
0642   8463 81 01           BCR  JMP_8466                   ; A < $09
0643   8465             
0644   8465 9A              RTN                             ; Done
0645   8466             ;% LB_xxxx_INPUT END
0646   8466             ;------------------------------------------------------------------------------------------------------------
0647   8466             
0648   8466             
0649   8466             
0650   8466             ;------------------------------------------------------------------------------------------------------------
0651   8466             ; $8466- xxxx - 
0652   8466             ; Called from: XCHR_INPUT:$81E6, JMP_843B:$8463, JMP_8929:$8929, JMP_8929:$8949
0653   8466             ; Arguments: 
0654   8466             ; Outputs: 
0655   8466             ; RegMod: A,Y
0656   8466             ;------------------------------------------------------------------------------------------------------------
0657   8466             ;% LB_xxxx START
0658   8466             JMP_8466: ; BR $81E6,$8463,$8949
0659   8466 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0660   846A 18              STA  YH                         ; 
0661   846B 5A 01           LDI  YL,$01                     ; 
0662   846D BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - Sets Y-reg to point to char under curosr?
0663   8470             
0664   8470 FD 88           PSH  X                          ; 
0665   8472 48 8E           LDI  XH,HB(CONFIG_TBL + $24)    ; $8EB3 In mystery table
0666   8474 4A B3           LDI  XL,LB((CONFIG_TBL) + $24)  ; 
0667   8476 68 0D           LDI  UH,$0D                     ; 
0668   8478 B5 40           LDI  A,$40                      ; 
0669   847A A9 76 4F        AND  (DISP_BUFF + $4F)          ; $764F - A = A & 01001111
0670   847D B7 40           CPI  A,$40                      ; Only Bit 6 set
0671   847F 89 13           BZR  BR_8494                    ; A <> $40
0672   8481             
0673   8481 FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; FLAGS = (pp) & n (ME1)
0673   8485 01 
0674   8486 83 05           BCS  BR_848D                    ; $848D
0675   8488             
0676   8488 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0676   848C 01 
0677   848D             
0678   848D             BR_848D: ; BR $8486
0679   848D FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0679   8491 00 
0680   8492 8E 27           BCH  BR_84BB                    ; $84BB
0681   8494             
0682   8494             BR_8494: ; BR $847F
0683   8494 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; $77F3
0683   8498 00 
0684   8499 B5 20           LDI  A,$20                      ; 
0685   849B A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0686   849E B7 20           CPI  A,$20                      ; Bit 5 set?
0687   84A0 8B 19           BZS  BR_84BB                    ; $84BB
0688   84A2             
0689   84A2 B5 10           LDI  A,$10                      ; 
0690   84A4 A9 76 4F        AND  (DISP_BUFF + $4F)          ; 
0691   84A7 B7 10           CPI  A,$10                      ; Bit 4 set?
0692   84A9 89 29           BZR  BR_84D4                    ; $84D4
0693   84AB             
0694   84AB B5 06           LDI  A,$06                      ; 
0695   84AD FD CA           ADR  X                          ; X = X + A + Carry
0696   84AF 6A 0D           LDI  UL,$0D                     ; 
0697   84B1 BE 88 FD        SJP  (JMP_88FD)                 ; Checks bits set in (DISP_BUFF + $4E) $764E
0698   84B4 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row
0698   84B8 01 
0699   84B9 8E 0A           BCH  BR_84C5                    ; $84C5
0700   84BB             
0701   84BB             BR_84BB:  ; BR $8492,$84A0
0702   84BB B7 20           CPI  A,$20                      ; 
0703   84BD 89 04           BZR  BR_84C3                    ; $84C3 A <> $20
0704   84BF             
0705   84BF B5 03           LDI  A,$03                      ; 
0706   84C1 FD CA           ADR  X                          ; X = X + A + Carry
0707   84C3             
0708   84C3             BR_84C3: ; BR $84BD
0709   84C3 6A 02           LDI  UL,$02                     ; 
0710   84C5             
0711   84C5             BR_84C5: ; BR $84B9
0712   84C5 B5 3E           LDI  A,$3E                      ; 
0713   84C7 FD 1E           STA  #(Y)                       ; 
0714   84C9 54              INC  Y                          ; 
0715   84CA BE 8D 64        SJP  (CPY_X2Y)                  ; $8D64 - Copies UL bytes from X to Y
0716   84CD BE 89 63        SJP  (CRTC_CSR_STRT20)          ; $8963 - CRTC Cursor start raster
0717   84D0 54              INC  Y                          ; 
0718   84D1 A4              LDA  UH                         ; 
0719   84D2 FD 1E           STA  #(Y)                       ; 
0720   84D4             
0721   84D4             BR_84D4: ; BR $84A9
0722   84D4 FD 0A           POP  X                          ;
0723   84D6 9A              RTN                             ; Done
0724   84D7             ;% LB_XCHR_INPUT END
0725   84D7             ;------------------------------------------------------------------------------------------------------------
0726   84D7             
0727   84D7             
0728   84D7             
0729   84D7             ;------------------------------------------------------------------------------------------------------------
0730   84D7             ; $84D7- xxxx - Block copies video RAM?
0731   84D7             ; Called from: 
0732   84D7             ; Arguments: A,YL
0733   84D7             ; Outputs: 
0734   84D7             ; RegMod: X,Y
0735   84D7             ;------------------------------------------------------------------------------------------------------------
0736   84D7             ;% LB_xxxx START
0737   84D7             JMP_84D7: ; BR $819D6,$81FB,$82FE,$875F,$87C8,$8890,$8BA7,$8BEA
0738   84D7 1A              STA  YL
0739   84D8 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0740   84DC B7 28           CPI  A,$28                      ; 
0741   84DE 8B 06           BZS  BR_84E6                    ; If A == $28, 40 col mode?
0742   84E0             
0743   84E0 5E 19           CPI  YL,$19                     ; 
0744   84E2 89 02           BZR  BR_84E6                    ; If A <> $19, 25th line
0745   84E4             
0746   84E4 14              LDA  YL                         ; If in 80col at line 25
0747   84E5 9A              RTN                             ; Done
0748   84E6             
0749   84E6             BR_84E6: ; BR $84DE,$84E2
0750   84E6 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM $7000
0751   84E9 FD 18           LDX  Y                          ; X = Y
0752   84EB FD CA           ADR  X                          ; X = X + A + Carry 
0753   84ED B7 28           CPI  A,$28                      ; Column 40
0754   84EF 89 0C           BZR  BR_84FD                    ; If A <> $28
0755   84F1             
0756   84F1 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0757   84F5 B7 19           CPI  A,$19                      ; Line 25
0758   84F7 8B 04           BZS  BR_84FD                    ; If A == $19
0759   84F9             
0760   84F9 B5 28           LDI  A,$28                      ; 
0761   84FB FD CA           ADR  X                          ; X = X + A + Carry
0762   84FD             
0763   84FD             BR_84FD: ; BR $84EF,$84F7
0764   84FD 68 07           LDI  UH,$07                     ; Loop counter
0765   84FF 6A 80           LDI  UL,$80                     ; U = $0780
0766   8501             
0767   8501             BR_8501: ; BR $8507,$850B
0768   8501 FD 05           LDA  #(X)                       ; 
0769   8503 FD 1E           STA  #(Y)                       ; 
0770   8505 44              INC  X                          ; 
0771   8506 54              INC  Y                          ; 
0772   8507 88 08           LOP  UL,BR_8501                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
0773   8509             
0774   8509 FD 62           DEC  UH                         ; 
0775   850B 93 0C           BCS  BR_8501                    ; Loop back if not zero
0776   850D                 
0777   850D B5 00           LDI  A,$00                      ; 
0778   850F 6A 4F           LDI  UL,$4F                     ; 
0779   8511             
0780   8511             BR_8511: ; BR $8514
0781   8511 FD 1E           STA  #(Y)                       ; 
0782   8513 54              INC  Y                          ;
0783   8514 88 05           LOP  UL,BR_8511                 ; $8511
0784   8516             
0785   8516 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
0786   851A B7 28           CPI  A,$28                      ; 
0787   851C 89 04           BZR  BR_8522                    ; A <> $28
0788   851E             
0789   851E B5 18           LDI  A,$18                      ; 
0790   8520 8E 02           BCH  BR_8524                    ; $8524
0791   8522             
0792   8522             BR_8522: ; BR $851c
0793   8522 B5 19           LDI  A,$19                      ; 
0794   8524             
0795   8524             BR_8524: ; BR $8520
0796   8524 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
0797   8528 AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
0798   852B 9A              RTN                             ; Done
0799   852C             ;% LB_xxxx END
0800   852C             ;------------------------------------------------------------------------------------------------------------
0801   852C             
0802   852C             
0803   852C             
0804   852C             ;------------------------------------------------------------------------------------------------------------
0805   852C             ; $825C xxxx - 
0806   852C             ; Called from: $8223
0807   852C             ; Arguments: 
0808   852C             ; Outputs: 
0809   852C             ; RegMod: 
0810   852C             ;------------------------------------------------------------------------------------------------------------
0811   852C             ;% LB_xxxx START
0812   852C             JMP_852C: 
0813   852C 68 00           LDI  UH,$00                     ; U == $004F
0814   852E 6A 4F           LDI  UL,$4F                     ; 
0815   8530 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ; Clear $77D7
0815   8534 00 
0816   8535             
0817   8535             BR_8535: ; BR $85B3,$8600
0818   8535 BE 88 54        SJP  (JMP_8854)                 ; $8854 - manipulates screen
0819   8538 14              LDA  YL                         ; 
0820   8539 FD A7 77 D4     CPA  #(VIDEORAM + $07D4)        ; $77D4 - used as temp token storage in BASIC line processing?
0821   853D 89 17           BZR  BR_8556                    ; A <> ($77D4)
0822   853F             
0823   853F FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D6
0824   8543 B7 00           CPI  A,$00                      ; 
0825   8545 89 0F           BZR  BR_8556                    ; A == $00
0826   8547             
0827   8547 84              LDA  XH                         ; 
0828   8548 FD AE 77 D4     STA  #(VIDEORAM + $07D4)        ; $77D4 - used as temp token storage in BASIC line processing?
0829   854C 04              LDA  XL                         ; 
0830   854D FD AE 77 D5     STA  #(VIDEORAM + $07D5)        ; $77D5
0831   8551 FD EB 77 D6     ORI  #(VIDEORAM + $07D6),$01    ; $77D6
0831   8555 01 
0832   8556             
0833   8556             BR_8556: ; BR $853D,$8545
0834   8556 FD A8           PSH  U                          ; 
0835   8558 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
0836   8559                                                 ; Carry=0 for characters and 1 for tokens
0837   8559 81 60           BCR  BR_85BB                    ; $85BB
0838   855B             
0839   855B FD 98           PSH  Y                          ; Token handling path
0840   855D FD 88           PSH  X                          ; 
0841   855F 58 7B           LDI  YH,HB(RND_VAL)             ; $7B
0842   8561 5A 00           LDI  YL,LB(RND_VAL)             ; $00
0843   8563 FD 98           PSH  Y                          ; 
0844   8565 CD 1C           VMJ  ($1C) \ ABYT($02)          ; (1C) Processes tokens corresponding to data bytes
0844   8567 02          
0845   8568 BE 86 56        SJP  (STACK_10BACK)             ; $8656 - returns value (in UH) 10 places back in stack
0846   856B FD 0A           POP  X                          ; 
0847   856D 59 00           ANI  (Y),$00                    ; clear
0848   856F B7 00           CPI  A,$00                      ; 
0849   8571 89 03           BZR  BR_8576                    ; A <> $00
0850   8573             
0851   8573 B5 FE           LDI  A,$FE                      ; 
0852   8575 0E              STA  (X)                        ; 
0853   8576             
0854   8576             BR_8576: ; BR $8571
0855   8576 14              LDA  YL                         ; 
0856   8577 2A              STA  UL                         ; 
0857   8578 FD 1A           POP  Y                          ; 
0858   857A             
0859   857A             BR_857A: ; BR $85A4
0860   857A 45              LIN  X                          ; A = (X) then INC X
0861   857B FD 1E           STA  #(Y)                       ; 
0862   857D 54              INC  Y                          ; 
0863   857E FD C8           PSH  A                          ; 
0864   8580 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0865   8584 B7 01           CPI  A,$01                      ;
0866   8586 8B 04           BZS  BR_858C                    ; A == $01
0867   8588             
0868   8588 FD 8A           POP  A                          ; 
0869   858A 8E 09           BCH  BR_8595                    ; $8595
0870   858C             
0871   858C             BR_858C: ; BR $8586
0872   858C FD 8A           POP  A                          ; 
0873   858E B7 0D           CPI  A,$0D                      ; 
0874   8590 89 03           BZR  BR_8595                    ; A <> $0D
0875   8592             
0876   8592 F9              REC                             ; 
0877   8593 8E 21           BCH  BR_85B6                    ; $85B6
0878   8595             
0879   8595             BR_8595: ; BR $858A,$8590
0880   8595 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0880   8599 01 
0881   859A BE 87 E7        SJP  (JMP_87E7)                 ; $87E7 - not sure
0882   859D 83 17           BCS  BR_85B6                    ; JMP_87E7 rerturned failure (Carry set)
0883   859F             
0884   859F B7 FF           CPI  A,$FF                      ; 
0885   85A1 89 01           BZR  BR_85A4                    ; A <> $FF
0886   85A3             
0887   85A3 56              DEC  Y                          ; 
0888   85A4             
0889   85A4             BR_85A4: ; BR $85A1
0890   85A4 88 2C           LOP  UL,BR_857A                 ; $857A
0891   85A6 FD 62           DEC  UH                         ; 
0892   85A8 FD 62           DEC  UH                         ; 
0893   85AA A4              LDA  UH                         ; 
0894   85AB FD 18           LDX  Y                          ; 
0895   85AD FD 1A           POP  Y                          ; 
0896   85AF FD 2A           POP  U                          ; 
0897   85B1 DD              INC  A                          ; 
0898   85B2 2A              STA  UL                         ; 
0899   85B3 88 80           LOP  UL,BR_8535                 ; $8535
0900   85B5 9A              RTN                             ; Done
0901   85B6             
0902   85B6             BR_85B6: ; BR $8593,$859D
0903   85B6 FD 1A           POP  Y                          ; 
0904   85B8 FD 2A           POP  U                          ; 
0905   85BA 9A              RTN                             ; Done
0906   85BB             
0907   85BB             BR_85BB: ; BR $8559 
0908   85BB FD 2A           POP  U                          ; char handling path
0909   85BD 6E 4B           CPI  UL,$4B                     ;
0910   85BF 81 03           BCR  BR_85C4                    ; UL < $4B
0911   85C1             
0912   85C1 BE 86 04        SJP  (BR_8604)                  ; $8604 - no idea
0913   85C4             
0914   85C4             BR_85C4: ; BR $85BF
0915   85C4 FD 0E           STA  #(X)                       ; 
0916   85C6 44              INC  X                          ; 
0917   85C7 FD C8           PSH  A                          ; 
0918   85C9 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
0919   85CD B7 01           CPI  A,$01                      ; 
0920   85CF 8B 04           BZS  BR_85D5                    ; A == $01
0921   85D1             
0922   85D1 FD 8A           POP  A                          ; 
0923   85D3 8E 1B           BCH  BR_85F0                    ; $85F0
0924   85D5             
0925   85D5             BR_85D5: ; BR $85CF
0926   85D5 FD 8A           POP  A                          ; 
0927   85D7 B7 0D           CPI  A,$0D                      ; 
0928   85D9 89 15           BZR  BR_85F0                    ; A <> $0D
0929   85DB             
0930   85DB FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
0931   85DF B7 18           CPI  A,$18                      ; 
0932   85E1 8B 06           BZS  BR_85E9                    ; A == $18
0933   85E3             
0934   85E3 46              DEC  X                          ; 
0935   85E4 46              DEC  X                          ; 
0936   85E5 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF - no idea
0937   85E8 9A              RTN                             ; Done
0938   85E9             
0939   85E9             BR_85E9: ; BR $85E1
0940   85E9 FD 05           LDA  #(X)                       ; 
0941   85EB B7 0E           CPI  A,$0E                      ; 
0942   85ED 83 01           BCS  BR_85F0                    ; A >= $0E
0943   85EF             
0944   85EF 9A              RTN                             ; Done
0945   85F0             
0946   85F0             BR_85F0: ; BR $85D3,$85D9
0947   85F0 FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
0947   85F4 01 
0948   85F5 BE 87 E7        SJP  (JMP_87E7)                 ; $87E7 - no idea
0949   85F8 81 01           BCR  BR_85FB                    ; JMP_87E7 returned success (Carry clear)
0950   85FA             
0951   85FA 9A              RTN                             ; Done
0952   85FB             
0953   85FB             BR_85FB: ; BR $85F8
0954   85FB B7 FF           CPI  A,$FF                      ; 
0955   85FD 89 01           BZR  BR_8600                    ; A <> $FF
0956   85FF             
0957   85FF 46              DEC  X                          ; 
0958   8600             
0959   8600             BR_8600: ; BR $85FD
0960   8600 88 CD           LOP  UL,BR_8535                 ; $8535
0961   8602 F9              REC                             ; 
0962   8603 9A              RTN                             ; Done
0963   8604             ;% LB_xxxx END
0964   8604             ;------------------------------------------------------------------------------------------------------------
0965   8604             
0966   8604             
0967   8604             
0968   8604             ;------------------------------------------------------------------------------------------------------------
0969   8604             ; $86E4 - xxxx - 
0970   8604             ; Called from: JMP_852C:$85C1
0971   8604             ; Arguments: UH, UL, A
0972   8604             ; Outputs: 
0973   8604             ; RegMod: UH
0974   8604             ;------------------------------------------------------------------------------------------------------------
0975   8604             ;% LB_xxxx START
0976   8604             BR_8604: ; BR $85C1
0977   8604 6C FF           CPI  UH,$FF                     ; 
0978   8606 89 01           BZR  BR_8609                    ; UH <> $FF
0979   8608             
0980   8608 9A              RTN                             ; Done
0981   8609             
0982   8609             BR_8609: ; BR $8606
0983   8609 B7 3A           CPI  A,$3A                      ; ':'
0984   860B 81 03           BCR  BR_8610                    ; A < $3A
0985   860D             
0986   860D             BR_860D: ; BR $8612,$861F,$862A
0987   860D 68 FF           LDI  UH,$FF                     ; 
0988   860F 9A              RTN                             ; Done
0989   8610             
0990   8610             BR_8610: ; BR $860B
0991   8610 B7 30           CPI  A,$30                      ; '0'
0992   8612 91 07           BCR  BR_860D                    ; A < $30 - exit
0993   8614             
0994   8614 FD C8           PSH  A                          ; 
0995   8616 B5 40           LDI  A,$40                      ; Bit 6: The display program shows from (Y-Reg)
0996   8618 A7 78 80        CPA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
0997   861B 89 04           BZR  BR_8621                    ; A <> DISPARAM
0998   861D             
0999   861D FD 8A           POP  A                          ; 
1000   861F 9E 14           BCH  BR_860D                    ; $860D - exit
1001   8621             
1002   8621             BR_8621: ; BR $861B
1003   8621 B5 20           LDI  A,$20                      ; Bit 5: Result from AR-X is displayed
1004   8623 A7 78 80        CPA  (DISPARAM)                 ; Display Parameter: determines display at READY
1005   8626 89 04           BZR  BR_862C                    ; DISPARAM <> $20
1006   8628             
1007   8628 FD 8A           POP  A                          ; 
1008   862A 9E 1F           BCH  BR_860D                    ; $860D - exit
1009   862C             
1010   862C             BR_862C: ; BR $8626
1011   862C B5 50           LDI  A,$50                      ; 
1012   862E FB              SEC                             ; Set Carry Flag
1013   862F 20              SBC  UL                         ; A = A - UL. Subtract with Carry
1014   8630 FD A8           PSH  U                          ; 
1015   8632 68 7A           LDI  UH,HB(ARZ)                 ; $7A
1016   8634 6A 08           LDI  UL,LB(ARZ)                 ; $08
1017   8636 FD EA           ADR  U                          ; U = U + A + Carry
1018   8638 25              LDA  (U)                        ; 
1019   8639 FD 2A           POP  U                          ; 
1020   863B B7 3A           CPI  A,$3A                      ; 
1021   863D 8B 07           BZS  BR_8646                    ; A <> $3A
1022   863F             
1023   863F B7 20           CPI  A,$20                      ; 
1024   8641 8B 03           BZS  BR_8646                    ; A <> $20
1025   8643             
1026   8643 FD 8A           POP  A                          ; 
1027   8645 9A              RTN                             ; Done
1028   8646             
1029   8646             BR_8646: ; BR $863D,$8641
1030   8646 28              STA  UH                         ; 
1031   8647 FD 8A           POP  A                          ; 
1032   8649 FD 0E           STA  #(X)                       ; 
1033   864B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$01    ; $77D7
1033   864F 01 
1034   8650 44              INC  X                          ; 
1035   8651 62              DEC  UL                         ; 
1036   8652 A4              LDA  UH                         ; 
1037   8653 68 FF           LDI  UH,$FF                     ; 
1038   8655 9A              RTN                             ; Done
1039   8656             ;% LB_xxxx END
1040   8656             ;------------------------------------------------------------------------------------------------------------
1041   8656             
1042   8656             
1043   8656             
1044   8656             ;------------------------------------------------------------------------------------------------------------
1045   8656             ; $8656 STACK_10BACK - Retives value 10 positions back in the stack
1046   8656             ; Called from: 
1047   8656             ; Arguments: 
1048   8656             ; Outputs: UH value 10 back in stack
1049   8656             ; RegMod: UH,X
1050   8656             ;------------------------------------------------------------------------------------------------------------
1051   8656             ;% LB_xxxx START
1052   8656             STACK_10BACK:
1053   8656 FD 48           LDX  S                          ; Load X with stack pointer
1054   8658 FD C8           PSH  A                          ; Save A
1055   865A B5 0A           LDI  A,$0A                      ; 
1056   865C FD CA           ADR  X                          ; Add $0A to X (stack pointer)
1057   865E 05              LDA  (X)                        ; grap value off of stack
1058   865F 28              STA  UH                         ; 
1059   8660 FD 8A           POP  A                          ; Restore A
1060   8662 9A              RTN                             ; Done
1061   8663             ;% LB_xxxx END
1062   8663             ;------------------------------------------------------------------------------------------------------------
1063   8663             
1064   8663             
1065   8663             
1066   8663             ;------------------------------------------------------------------------------------------------------------
1067   8663             ; $8663 - xxxx - Manipulates screen
1068   8663             ; Called from: XCHR_INPUT:$8226
1069   8663             ; Arguments: 
1070   8663             ; Outputs: 
1071   8663             ; RegMod: 
1072   8663             ;------------------------------------------------------------------------------------------------------------
1073   8663             ;% LB_xxxx START
1074   8663             JMP_8663: ; BR $8226
1075   8663 A5 78 80        LDA  (DISPARAM)                 ; Display Parameter: determines display at READY
1076   8666 B7 80           CPI  A,$80                      ; Bit 7: Error message is in the display
1077   8668 89 03           BZR  BR_866D                    ; $866D
1078   866A             
1079   866A BA 89 63        JMP  CRTC_CSR_STRT20            ; $8963 CRTC - Cursor start raster
1080   866D             
1081   866D             BR_866D: ; BR $8668
1082   866D B7 A0           CPI  A,$A0                      ; Bit 7: Error message is in the display, Bit 5: Result from AR-X is displayed
1083   866F 89 03           BZR  BR_8674                    ; A <> $A0
1084   8671             
1085   8671 BA 89 63        JMP  CRTC_CSR_STRT20            ; $8963 CRTC - Cursor start raster
1086   8674             
1087   8674             BR_8674: ; BR $866F
1088   8674 B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. A system message or a reserve text is shown in the display
1089   8676 89 03           BZR  BR_867B                    ; A <> $01
1090   8678             
1091   8678 BA 89 63        JMP  CRTC_CSR_STRT20            ; $8963 CRTC - Cursor start raster
1092   867B             
1093   867B             
1094   867B             BR_867B: ; BR $8676
1095   867B FD A5 77 D4     LDA  #(VIDEORAM + $07D4)        ; $77D4
1096   867F 18              STA  YH                         ; 
1097   8680 FD A5 77 D5     LDA  #(VIDEORAM + $07D5)        ; $77D5
1098   8684 1A              STA  YL                         ; 
1099   8685 B5 0E           LDI  A,$0E                      ; 
1100   8687 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor H (horizontal)
1101   868B 94              LDA  YH                         ; 
1102   868C FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1103   8690 B5 0F           LDI  A,$0F                      ; 
1104   8692 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor L (vertical)
1105   8696 14              LDA  YL                         ; 
1106   8697 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1107   869B FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA - Init $80 - Cursor Start Raster?
1108   869F FD 88           PSH  X                          ; 
1109   86A1 FD C8           PSH  A                          ; 
1110   86A3 48 8E           LDI  XH,$8E                     ; CONFIG_TBL:  $8E8F
1111   86A5 4A A1           LDI  XL,$A1                     ; 
1112   86A7 B5 1C           LDI  A,$1C                      ; 
1113   86A9 FD CA           ADR  X                          ; X = X + A + Carry
1114   86AB ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
1115   86AF 8B 05           BZS  BR_86B6                    ; $86B6
1116   86B1             
1117   86B1 FD EB 77 DA     ORI  #(VIDEORAM + $07DA),$40    ; $77DA - Init $80 - Cursor Start Raster?
1117   86B5 40 
1118   86B6             
1119   86B6             BR_86B6: ; BR $8668
1120   86B6 ED 78 7C 01     BII  (CURSOR_BLNK),$01          ; 
1121   86BA 89 05           BZR  BR_86C1                    ; $86C1
1122   86BC             
1123   86BC FD E9 77 DA     ANI  #(VIDEORAM + $07DA),$BF    ; $77DA - Init $80 - Cursor Start Raster?
1123   86C0 BF 
1124   86C1             
1125   86C1             BR_86C1: ; BR $86BA
1126   86C1 B5 0A           LDI  A,$0A                      ; 
1127   86C3 FD AE 78 00     STA  #(CRTCTRL)                 ; Cusor Start Raster
1128   86C7 FD A5 77 DA     LDA  #(VIDEORAM + $07DA)        ; $77DA - Init $80 - Cursor Start Raster?
1129   86CB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1130   86CF B5 0B           LDI  A,$0B                      ; 
1131   86D1 FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor End Raster
1132   86D5 FD A5 77 DB     LDA  #(VIDEORAM + $07DB)        ; $77DB
1133   86D9 B9 1F           ANI  A,$1F                      ; 
1134   86DB FD AE 78 01     STA  #(CRTCTRL + $01)           ; 
1135   86DF FD 8A           POP  A                          ; 
1136   86E1 FD 0A           POP  X                          ; 
1137   86E3 9A              RTN                             ; Done
1138   86E4             ;% LB_xxxx END
1139   86E4             ;------------------------------------------------------------------------------------------------------------
1140   86E4             
1141   86E4             
1142   86E4             
1143   86E4             ;------------------------------------------------------------------------------------------------------------
1144   86E4             ; $86E4 - AT_PRGSTRT - Are we at start of program?
1145   86E4             ; Called from: BR $829F,$844F
1146   86E4             ; Arguments: 
1147   86E4             ; Outputs: 
1148   86E4             ; RegMod: 
1149   86E4             ;------------------------------------------------------------------------------------------------------------
1150   86E4             ;% LB_AT_PRGSTRT START
1151   86E4             AT_PRGSTRT: 
1152   86E4 A5 78 65        LDA  (BASPRG_ST_H)              ; Start of Basic program in RAM (H)
1153   86E7 A7 78 A6        CPA  (SRCH_ADD_H)               ; Address of line found during search (H)
1154   86EA 8B 02           BZS  BR_86EE                    ; If A == SRCH_ADD_H
1155   86EC             
1156   86EC FB              SEC                             ; Carry set indicates failure
1157   86ED 9A              RTN                             ; Done
1158   86EE             
1159   86EE             BR_86EE: ; BR $86EA
1160   86EE A5 78 66        LDA  (BASPRG_ST_L)              ; Start of Basic program in RAM (L)
1161   86F1 A7 78 A7        CPA  (SRCH_ADD_L)               ; Address of linefound during search (L)
1162   86F4 8B 02           BZS  BR_86F8                    ; If A == SRCH_ADD_L
1163   86F6             
1164   86F6 FB              SEC                             ; Carry set indicates failure
1165   86F7 9A              RTN                             ; Done
1166   86F8             
1167   86F8             BR_86F8: ; BR $86F4
1168   86F8 F9              REC                             ; Carry clear indicates match
1169   86F9 9A              RTN                             ; Done
1170   86FA             ;% LB_AT_PRGSTRT END
1171   86FA             ;------------------------------------------------------------------------------------------------------------
1172   86FA             
1173   86FA             
1174   86FA             
1175   86FA             ;------------------------------------------------------------------------------------------------------------
1176   86FA             ; $86FA LAST_LINE - Returns Carry clear if at end of program, else Carry set
1177   86FA             ; Called from: $831D,$8448
1178   86FA             ; Arguments: 
1179   86FA             ; Outputs: Returns Carry clar if at end of program, else Carry set
1180   86FA             ;------------------------------------------------------------------------------------------------------------
1181   86FA             ;% LB_LAST_LINE START
1182   86FA             LAST_LINE: ;
1183   86FA FD 88           PSH  X                          ; 
1184   86FC A5 78 A6        LDA  (SRCH_ADD_H)               ; Address of line found during search (H)
1185   86FF 08              STA  XH                         ; 
1186   8700 A5 78 A7        LDA  (SRCH_ADD_L)               ; Address of line found during search (L)
1187   8703 0A              STA  XL                         ; 
1188   8704 44              INC  X                          ; 
1189   8705 44              INC  X                          ; Move past line #
1190   8706 45              LIN  X                          ; A = (X) then INC X (A == line length)
1191   8707 FD CA           ADR  X                          ; X = X + A + Carry. X points to start of next line
1192   8709 A5 78 67        LDA  (BASPRG_END_H)             ; End of Basic program in RAM (H)
1193   870C 86              CPA  XH                         ; Are we at the end of the program?
1194   870D 8B 04           BZS  BR_8713                    ; A == XH
1195   870F             
1196   870F FD 0A           POP  X                          ; 
1197   8711 FB              SEC                             ; Failure
1198   8712 9A              RTN                             ; Done
1199   8713             
1200   8713             BR_8713: ; BR $870D
1201   8713 A5 78 68        LDA  (BASPRG_END_L)             ; End of Basic program in RAM (L)
1202   8716 06              CPA  XL                         ; Are we at the end of the program?
1203   8717 8B 04           BZS  BR_871D                    ; A == XL
1204   8719             
1205   8719 FD 0A           POP  X                          ; 
1206   871B FB              SEC                             ; 
1207   871C 9A              RTN                             ; Done
1208   871D             
1209   871D             BR_871D: ; BR $8717
1210   871D FD 0A           POP  X                          ; 
1211   871F F9              REC                             ; Success (at end of program)?
1212   8720 9A              RTN                             ; Done
1213   8721             ;% LB_LAST_LINE END
1214   8721             ;------------------------------------------------------------------------------------------------------------
1215   8721             
1216   8721             
1217   8721             
1218   8721             ;------------------------------------------------------------------------------------------------------------
1219   8721             ; $8271 xxxx - 
1220   8721             ; Called from: XCHR_INPUT:$822C
1221   8721             ; Arguments: 
1222   8721             ; Outputs: 
1223   8721             ; RegMod: 
1224   8721             ;------------------------------------------------------------------------------------------------------------
1225   8721             ;% LB_xxxx START
1226   8721             JMP_8721: ; BR $822C
1227   8721 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1228   8724 FD C8           PSH  A                          ; 
1229   8726 B7 20           CPI  A,$20                      ; Bit 5: Result from AR-X is displayed
1230   8728 8B 28           BZS  BR_8752                    ; A == $20
1231   872A             
1232   872A B7 80           CPI  A,$80                      ; Bit 7: Error message is in the display
1233   872C 8B 24           BZS  BR_8752                    ; A == $80
1234   872E             
1235   872E B7 A0           CPI  A,$A0                      ; Bit 7: Error message is in the display, Bit 5: Result from AR-X is displayed
1236   8730 8B 20           BZS  BR_8752                    ; A == $A0
1237   8732             
1238   8732 B7 01           CPI  A,$01                      ; Bit 1: Program waits for Enter after a print command
1239   8734 8B 1C           BZS  BR_8752                    ; A == $01
1240   8736             
1241   8736 FD 8A           POP  A                          ; 
1242   8738 FD A5 77 D3     LDA  #(VIDEORAM + $07D3)        ; $77D3
1243   873C B7 0D           CPI  A,$0D                      ; 
1244   873E 8B 01           BZS  BR_8741                    ; A == $0D
1245   8740             
1246   8740 9A              RTN                             ; Done
1247   8741             
1248   8741             BR_8741: ; BR $873E
1249   8741 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
1250   8745 B7 28           CPI  A,$28                      ; 
1251   8747 8B 01           BZS  BR_874A                    ; A == $28
1252   8749             
1253   8749 9A              RTN                             ; Done
1254   874A             
1255   874A             BR_874A: ; BR $8747
1256   874A A5 7B D7        LDA  (IN_BUF + $27)             ; 
1257   874D B7 0D           CPI  A,$0D                      ; CR?
1258   874F 89 6A           BZR  BR_87BB                    ; A <> $0D
1259   8751             
1260   8751 9A              RTN                             ; Done
1261   8752             
1262   8752             BR_8752: ; BR $8728,$872C,$8730,$8734
1263   8752 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row, (pp) = (pp) + n (ME0)
1263   8756 01 
1264   8757 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1265   875B B7 19           CPI  A,$19                      ; $19 == 25d == last row
1266   875D 81 03           BCR  BR_8762                    ; A < $19
1267   875F             
1268   875F BE 84 D7        SJP  (JMP_84D7)                 ; $84D7 - block copies video RAM?
1269   8762             
1270   8762             BR_8762: ; BR $875D
1271   8762 BE 87 D4        SJP  (JMP_87D4)                 ; $87D4 - no idea
1272   8765 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1273   8769 18              STA  YH                         ; 
1274   876A 5A 01           LDI  YL,$01                     ; 
1275   876C BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - no idea
1276   876F 6A 4F           LDI  UL,$4F                     ; 
1277   8771 FD 8A           POP  A                          ; 
1278   8773 B7 20           CPI  A,$20                      ; 
1279   8775 89 06           BZR  BR_877D                    ; $877D
1280   8777             
1281   8777 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
1282   8779 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
1283   877B 8E 0C           BCH  BR_8789                    ; $8789
1284   877D             
1285   877D             BR_877D: ; BR $8775
1286   877D 48 7A           LDI  XH,$7A                     ; ARZ?
1287   877F 4A 10           LDI  XL,$10                     ; 
1288   8781 6A 19           LDI  UL,$19                     ; Loop counter?
1289   8783 B5 0D           LDI  A,$0D                      ; 
1290   8785 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
1291   8789             
1292   8789             BR_8789: ; BR $877B
1293   8789 68 00           LDI  UH,$00                     ; 
1294   878B             
1295   878B             BR_878B: ; BR $
1296   878B 45              LIN  X                          ; 
1297   878C B7 00           CPI  A,$00                      ; 
1298   878E 8B 0D           BZS  BR_879D                    ; A == $00
1299   8790             
1300   8790 6C 02           CPI  UH,$02                     ; 
1301   8792 8B 09           BZS  BR_879D                    ; A == $02
1302   8794             
1303   8794 68 01           LDI  UH,$01                     ; 
1304   8796 FD 1E           STA  #(Y)                       ; 
1305   8798 54              INC  Y                          ; 
1306   8799             
1307   8799             BR_8799: ; BR $8799
1308   8799 88 10           LOP  UL,BR_878B                 ; $878B
1309   879B 8E 08           BCH  BR_87A5                    ; $87A5
1310   879D             
1311   879D             BR_879D: ; BR $878E,$8792
1312   879D 6C 01           CPI  UH,$01                     ; 
1313   879F 89 02           BZR  BR_87A3                    ; A <> $01
1314   87A1             
1315   87A1 FD 60           INC  UH                         ;
1316   87A3             
1317   87A3             BR_87A3: ; BR $879F
1318   87A3 9E 0C           BCH  BR_8799                    ; $8799
1319   87A5             
1320   87A5             BR_87A5: ; BR $879B
1321   87A5 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1322   87A9 B7 28           CPI  A,$28                      ; 40col
1323   87AB 8B 01           BZS  BR_87AE                    ; A == $28
1324   87AD             
1325   87AD 9A              RTN                             ; Done
1326   87AE             
1327   87AE             BR_87AE: ; BR $87AB
1328   87AE 4C 7B           CPI  XH,$7B                     ; 
1329   87B0 8B 01           BZS  BR_87B3                    ; XH == $7B
1330   87B2             
1331   87B2 9A              RTN                             ; Done
1332   87B3             
1333   87B3             BR_87B3: ; BR $87B0                 
1334   87B3 A5 7B 87        LDA  (OUT_BUF + $27)            ; 
1335   87B6 B7 00           CPI  A,$00                      ; 
1336   87B8 89 01           BZR  BR_87BB                    ; A <> $00
1337   87BA             
1338   87BA 9A              RTN                             ; Done
1339   87BB             
1340   87BB             BR_87BB: ; BR $874F,$87B8,$8791,$87E5
1341   87BB FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - inc text row
1341   87BF 01 
1342   87C0 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1343   87C4 B7 19           CPI  A,$19                      ; 
1344   87C6 81 03           BCR  BR_87CB                    ; A < $19
1345   87C8             
1346   87C8 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7 - block copies video RAM?
1347   87CB             
1348   87CB             BR_87CB: ; BR $87C6
1349   87CB 9A              RTN                             ; Done
1350   87CC             
1351   87CC             
1352   87CC             JMP_87CC: ; BR $81F1
1353   87CC A5 7B B0        LDA  (IN_BUF)                   ; 
1354   87CF B7 3E           CPI  A,$3E                      ; 
1355   87D1 9B 18           BZS  BR_87BB                    ; A == $3E
1356   87D3             
1357   87D3 9A              RTN                             ; Done
1358   87D4             
1359   87D4             JMP_87D4: ; BR $8762
1360   87D4 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1361   87D8 B7 28           CPI  A,$28                      ; 
1362   87DA 8B 01           BZS  BR_87DD                    ; A == $28
1363   87DC             
1364   87DC 9A              RTN                             ; Done
1365   87DD             
1366   87DD             BR_87DD: ; BR $87DA
1367   87DD A5 7B D8        LDA  (IN_BUF + $28)             ; 
1368   87E0 B7 0D           CPI  A,$0D                      ; 
1369   87E2 89 01           BZR  BR_87E5                    ; A <> $0D
1370   87E4             
1371   87E4 9A              RTN                             ; Done
1372   87E5             
1373   87E5             BR_87E5: ; BR $87E2
1374   87E5 9E 2C           BCH  BR_87BB                    ; $87BB
1375   87E7             ;% LB_xxxx END
1376   87E7             ;------------------------------------------------------------------------------------------------------------
1377   87E7             
1378   87E7             
1379   87E7             
1380   87E7             ;------------------------------------------------------------------------------------------------------------
1381   87E7             ; $87E7 xxxx - 
1382   87E7             ; Called from: JMP_852C:$859A, JMP_852C:$85F5
1383   87E7             ; Arguments: 
1384   87E7             ; Outputs: 
1385   87E7             ; RegMod: 
1386   87E7             ;------------------------------------------------------------------------------------------------------------
1387   87E7             ;% LB_xxxx START
1388   87E7             JMP_87E7: ; BR $859A,$85F5
1389   87E7 FD A5 77 D7     LDA  #(VIDEORAM + $07D7)        ; $77D7
1390   87EB B7 50           CPI  A,$50                      ; 80col?
1391   87ED 83 01           BCS  BR_87F0                    ; A >= $50
1392   87EF             
1393   87EF 9A              RTN                             ; Done
1394   87F0             
1395   87F0             BR_87F0: ; BR $87ED
1396   87F0 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1397   87F3 B7 50           CPI  A,$50                      ; Bit 6: The display program shows from (Y-Reg), 
1398   87F5 8B 06           BZS  BR_87FD                    ; If A == $50
1399   87F7             
1400   87F7 B7 54           CPI  A,$54                      ; Bit 4: Program line is displayed
1401   87F9 8B 02           BZS  BR_87FD                    ; If A == $54
1402   87FB             
1403   87FB FB              SEC                             ; 
1404   87FC 9A              RTN                             ; Done
1405   87FD             
1406   87FD             BR_87FD: ; BR $87F5,$87F9
1407   87FD FD A5 77 D6     LDA  #(VIDEORAM + $07D6)        ; $77D6
1408   8801 B7 01           CPI  A,$01                      ; 
1409   8803             
1410   8803             BR_8803: ; BR $91C1
1411   8803 89 02           BZR  BR_8807                    ; If A <> $01
1412   8805             
1413   8805 FB              SEC                             ; 
1414   8806 9A              RTN                             ; Done
1415   8807             
1416   8807             BR_8807: ; BR $8803
1417   8807 FD 88           PSH  X                          ; 
1418   8809 FD 98           PSH  Y                          ; 
1419   880B FD A8           PSH  U                          ; 
1420   880D FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1421   8811 18              STA  YH                         ; 
1422   8812 5A 01           LDI  YL,$01                     ; 
1423   8814 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1424   8818 B7 01           CPI  A,$01                      ; 
1425   881A 89 08           BZR  BR_8824                    ; If A <> $01
1426   881C             
1427   881C A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1428   881F 18              STA  YH                         ; 
1429   8820 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
1430   8823 1A              STA  YL                         ; 
1431   8824             
1432   8824             BR_8824: ; BR $881A
1433   8824 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - no idea
1434   8827 48 7B           LDI  XH,HB(IN_BUF)              ; $7B
1435   8829 4A B0           LDI  XL,LB(IN_BUF)              ; $B0
1436   882B 6A 4F           LDI  UL,$4F                     ; 
1437   882D                 
1438   882D             BR_882D:   
1439   882D 45              LIN  X                          ; 
1440   882E 54              INC  Y                          ; 
1441   882F B7 30           CPI  A,$30                      ; 
1442   8831 81 06           BCR  BR_8839                    ; If A < $30
1443   8833             
1444   8833 B7 3A           CPI  A,$3A                      ; 
1445   8835 83 02           BCS  BR_8839                    ; If A >= $3A
1446   8837             
1447   8837 88 0C           LOP  UL,BR_882D                 ; 
1448   8839             
1449   8839             BR_8839: ; BR $8331,$8335
1450   8839 FD 18           LDX  Y                          ; 
1451   883B 54              INC  Y                          ; 
1452   883C 62              DEC  UL                         ; 
1453   883D             
1454   883D             BR_883D: ; BR $8843
1455   883D FD 15           LDA  #(Y)                       ; 
1456   883F 54              INC  Y                          ; 
1457   8840 FD 0E           STA  #(X)                       ; 
1458   8842 44              INC  X                          ; 
1459   8843 88 08           LOP  UL,BR_883D                 ; $883D
1460   8845 FD 2A           POP  U                          ; 
1461   8847 FD 1A           POP  Y                          ; 
1462   8849 FD 0A           POP  X                          ; 
1463   884B FD EF 77 D7     ADI  #(VIDEORAM + $07D7),$FF    ; $77
1463   884F FF 
1464   8850 B5 FF           LDI  A,$FF                      ; 
1465   8852 F9              REC                             ; 
1466   8853 9A              RTN                             ; Done
1467   8854             ;% LB_xxxx END
1468   8854             ;------------------------------------------------------------------------------------------------------------
1469   8854             
1470   8854             
1471   8854             
1472   8854             ;------------------------------------------------------------------------------------------------------------
1473   8854             ; $8854 xxxx - 
1474   8854             ; Called from: 
1475   8854             ; Arguments: 
1476   8854             ; Outputs: 
1477   8854             ; RegMod: 
1478   8854             ;------------------------------------------------------------------------------------------------------------
1479   8854             ;% LB_xxxx START
1480   8854             JMP_8854: ; BR $8835
1481   8854 FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1482   8858 B7 01           CPI  A,$01                      ; 
1483   885A 8B 01           BZS  BR_885D                    ; If A == $01
1484   885C             
1485   885C 9A              RTN                             ; Done
1486   885D             
1487   885D             BR_885D: ; BR $885A
1488   885D A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
1489   8860 B7 16           CPI  A,$16                      ; 
1490   8862 83 01           BCS  BR_8865                    ; If A >= $16
1491   8864             
1492   8864 9A              RTN                             ; Done
1493   8865             
1494   8865             BR_8865: ; BR $8862
1495   8865 FD 98           PSH  Y                          ; 
1496   8867 FD A8           PSH  U                          ; 
1497   8869 FD 88           PSH  X                          ; 
1498   886B 04              LDA  XL                         ; 
1499   886C FB              SEC                             ; 
1500   886D A1 70 01        SBC  (SHADOW_RAM + $01)         ; $7001 - A = A - (pp). Subtract with Carry (ME0)
1501   8870 0A              STA  XL                         ; 
1502   8871 84              LDA  XH                         ; 
1503   8872 A1 70 00        SBC  (SHADOW_RAM)               ; $7000 - A = A - (pp). Subtract with Carry (ME0)
1504   8875 08              STA  XH                         ; 
1505   8876 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1506   887A B7 50           CPI  A,$50                      ; 
1507   887C 89 08           BZR  BR_8886                    ; If A <> $50
1508   887E             
1509   887E 4C 07           CPI  XH,$07                     ; 
1510   8880 89 02           BZR  BR_8884                    ; If A <> $50
1511   8882             
1512   8882 4E D0           CPI  XL,$D0                     ; 
1513   8884             
1514   8884             BR_8884: ; BR $8880
1515   8884 8E 06           BCH  BR_888C                    ; $888C
1516   8886             
1517   8886             BR_8886: ; BR $887C
1518   8886 4C 03           CPI  XH,$03                     ;
1519   8888 89 02           BZR  BR_888C                    ; If A <> $03
1520   888A             
1521   888A 4E E8           CPI  XL,$E8                     ;
1522   888C             
1523   888C             BR_888C: ; BR $8884,$8888
1524   888C 81 20           BCR  BR_88AE                    ; $88AE
1525   888E B5 1A           LDI  A,$1A                      ; 
1526   8890 BE 84 D7        SJP  (JMP_84D7)                 ; Block copies video RAM?
1527   8893             
1528   8893 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E DISPLAY BUFFER, Y cursor position
1529   8896 18              STA  YH                         ;
1530   8897 5A 01           LDI  YL,$01                     ;
1531   8899 BE 8D 6B        SJP  (JMP_8D6B)                 ; Not sure, twiddles video
1532   889C             
1533   889C FD 0A           POP  X                          ; 
1534   889E FD 98           PSH  Y                          ; 
1535   88A0 BE 88 B5        SJP  (JMP_88B5)                 ; Sets #$77D2 (Current text row??), $774E (Y cursor position) to $FF??
1536   88A3             
1537   88A3 FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1538   88A7 B7 50           CPI  A,$50                      ;
1539   88A9 8B 03           BZS  BR_88AE                    ; If A == $50
1540   88AB             
1541   88AB BE 88 B5        SJP  (JMP_88B5)                 ; Sets #$77D2 (Current text row??), $774E (Y cursor position) to $FF??
1542   88AE             
1543   88AE             BR_88AE: ; BR $888C,$88A9
1544   88AE FD 0A           POP  X                          ; 
1545   88B0 FD 2A           POP  U                          ; 
1546   88B2 FD 1A           POP  Y                          ; 
1547   88B4 9A              RTN                             ; Done
1548   88B5             ;% LB_xxxx END
1549   88B5             ;------------------------------------------------------------------------------------------------------------
1550   88B5             
1551   88B5             
1552   88B5             
1553   88B5             ;------------------------------------------------------------------------------------------------------------
1554   88B5             ; $88B5 xxxx - Sets $77D2 (ME1) and $774E (ME0) to $FF
1555   88B5             ; Called from: $88A0,$88AB
1556   88B5             ; Arguments: 
1557   88B5             ; Outputs: 
1558   88B5             ; RegMod: 
1559   88B5             ;------------------------------------------------------------------------------------------------------------
1560   88B5             ;% LB_xxxx START
1561   88B5             JMP_88B5: 
1562   88B5 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row, (pp) = (pp) + n (ME1) 
1562   88B9 FF 
1563   88BA EF 77 4E FF     ADI  (STRING_VARS + $FE),$FF    ; $774E in DISPLAY BUFFER, Y cursor position, (pp) = (pp) + n (ME0)
1564   88BE 9A              RTN                             ; Done
1565   88BF             ;% LB_xxxx END
1566   88BF             ;------------------------------------------------------------------------------------------------------------
1567   88BF             
1568   88BF             
1569   88BF             
1570   88BF             ;------------------------------------------------------------------------------------------------------------
1571   88BF             ; $88BF xxxx - 
1572   88BF             ; Called from: $85E5,$8C17
1573   88BF             ; Arguments: X
1574   88BF             ; Outputs: 
1575   88BF             ; RegMod: 
1576   88BF             ;------------------------------------------------------------------------------------------------------------
1577   88BF             ;% LB_xxxx START
1578   88BF             JMP_88BF: 
1579   88BF 04              LDA  XL                         ; 
1580   88C0 FB              SEC                             ; Set carry
1581   88C1 A1 70 01        SBC  (SHADOW_RAM + $01)         ; $7001 - A = A - (pp). Subtract with Carry (ME0)
1582   88C4 0A              STA  XL                         ; 
1583   88C5 84              LDA  XH                         ; 
1584   88C6 A1 70 00        SBC  (SHADOW_RAM)               ; $7000 - A = A - (pp). Subtract with Carry (ME0)
1585   88C9 08              STA  XH                         ; 
1586   88CA 6A 01           LDI  UL,$01                     ; 
1587   88CC             
1588   88CC             BR_88CC: ; BR $88E3
1589   88CC 60              INC  UL                         ; 
1590   88CD FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
1591   88D1 4C 00           CPI  XH,$00                     ; 
1592   88D3 89 05           BZR  BR_88DA                    ; If A <> $00
1593   88D5             
1594   88D5 06              CPA  XL                         ; 
1595   88D6 8B 02           BZS  BR_88DA                    ; If A == XL
1596   88D8 83 0B           BCS  BR_88E5                    ; If A >= XL
1597   88DA             
1598   88DA             BR_88DA: ; BR $88D3,$88D6
1599   88DA 28              STA  UH                         ; 
1600   88DB 04              LDA  XL                         ; 
1601   88DC FB              SEC                             ; 
1602   88DD A0              SBC  UH                         ; A = A - UH. Subtract with Carry
1603   88DE 0A              STA  XL                         ; 
1604   88DF 84              LDA  XH                         ; 
1605   88E0 B1 00           SBI  A,$00                      ; A = A - N
1606   88E2 08              STA  XH                         ; 
1607   88E3 9E 19           BCH  BR_88CC                    ; $88CC
1608   88E5             
1609   88E5             BR_88E5: ; BR $88D8
1610   88E5 24              LDA  UL
1611   88E6 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1612   88EA 9A              RTN                             ; Done
1613   88EB             ;% LB_xxxx END
1614   88EB             ;------------------------------------------------------------------------------------------------------------
1615   88EB             
1616   88EB             
1617   88EB             
1618   88EB             ;------------------------------------------------------------------------------------------------------------
1619   88EB             ; $88EB xxxx -
1620   88EB             ; Called from: XCHR_INPUT:$81CF, XCHR_INPUT:$81F4
1621   88EB             ; Arguments: 
1622   88EB             ; Outputs: A
1623   88EB             ; RegMod: A
1624   88EB             ;------------------------------------------------------------------------------------------------------------
1625   88EB             ;% LB_xxxx START
1626   88EB             JMP_88EB: 
1627   88EB FD A5 77 D8     LDA  #(VIDEORAM + $07D8)        ; $77D8
1628   88EF B7 01           CPI  A,$01                      ; 
1629   88F1 89 05           BZR  BR_88F8                    ; If A == $01
1630   88F3             
1631   88F3 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E  DISPLAY BUFFER, Y cursor position
1632   88F6 8E 04           BCH  BR_88FC                    ; $88FC *** PRINT:$823B Jumps to second byte here $04 LDA XL
1633   88F8             
1634   88F8             BR_88F8: ; BR $88F1
1635   88F8 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
1636   88FC             
1637   88FC             BR_88FC: ; BR $88F6
1638   88FC 9A              RTN                             ; Done
1639   88FD             ;% LB_xxxx END
1640   88FD             ;------------------------------------------------------------------------------------------------------------
1641   88FD             
1642   88FD             
1643   88FD             
1644   88FD             ;------------------------------------------------------------------------------------------------------------
1645   88FD             ; $88FD xxxx - 
1646   88FD             ; Called from: JMP_8466:$84B1
1647   88FD             ; Arguments: 
1648   88FD             ; Outputs: 
1649   88FD             ; RegMod: UH, A
1650   88FD             ;------------------------------------------------------------------------------------------------------------
1651   88FD             ;% LB_xxxx START
1652   88FD             JMP_88FD: ; BR $84B1
1653   88FD 68 33           LDI  UH,$33                     ; 
1654   88FF B5 10           LDI  A,$10                      ; 
1655   8901 A9 76 4E        AND  (DISP_BUFF + $4E)          ; $764E A = A & (pp) (ME0)
1656   8904 B7 10           CPI  A,$10                      ; Was Bit 4 set
1657   8906 89 01           BZR  BR_8909                    ; If A <> $10
1658   8908             
1659   8908 9A              RTN                             ; 
1660   8909             
1661   8909             BR_8909: ; BR $8906
1662   8909 FD 62           DEC  UH                         ; UH == $32
1663   890B B5 20           LDI  A,$20                      ; 
1664   890D A9 76 4E        AND  (DISP_BUFF + $4E)          ; $764E A = A & (pp) (ME0)
1665   8910 B7 20           CPI  A,$20                      ; Was bit 5 set
1666   8912 89 01           BZR  BR_8915                    ; If A <> $20
1667   8914             
1668   8914 9A              RTN                             ; 
1669   8915             
1670   8915             BR_8915: ; BR $8912
1671   8915 FD 62           DEC  UH                         ; UH == $31
1672   8917 B5 40           LDI  A,$40                      ; 
1673   8919 A9 76 4E        AND  (DISP_BUFF + $4E)          ; $764E A = A & (pp) (ME0)
1674   891C B7 40           CPI  A,$40                      ; Was Bit 6 set
1675   891E 89 06           BZR  BR_8926                    ; If A <> $40
1676   8920             
1677   8920 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF - Clear
1677   8924 00 
1678   8925 9A              RTN                             ; 
1679   8926             
1680   8926             BR_8926: ; BR $891E
1681   8926 68 0D           LDI  UH,$0D                     ; 
1682   8928 9A              RTN                             ; 
1683   8929             ;% LB_xxxx END
1684   8929             ;------------------------------------------------------------------------------------------------------------
1685   8929             
1686   8929             
1687   8929             
1688   8929             ;------------------------------------------------------------------------------------------------------------
1689   8929             ; $8929 xxxx - 
1690   8929             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1691   8929             ; Arguments: 
1692   8929             ; Outputs: 
1693   8929             ; RegMod: 
1694   8929             ;------------------------------------------------------------------------------------------------------------
1695   8929             ;% LB_xxxx START
1696   8929             JMP_8929: ; BR $81E1
1697   8929 FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; $77DF
1697   892D 00 
1698   892E A5 76 4F        LDA  (DISP_BUFF + $4F)          ; $764F
1699   8931 BF 10           BII  A,$10                      ; FLAGS = A & n
1700   8933 8B 19           BZS  BR_894E                    ; If Bit 6 of A was not set
1701   8935             
1702   8935 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1703   8938 B9 01           ANI  A,$01                      ; FLAGS = A & n
1704   893A B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. 
1705   893C                                                 ; A system message or a reserve text is shown in the display.
1706   893C 8B 02           BZS  BR_8940                    ; If A == $01
1707   893E             
1708   893E FB              SEC                             ; Failure ? 
1709   893F 9A              RTN                             ; Done
1710   8940             
1711   8940             BR_8940: ; BR $893C
1712   8940 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1713   8943 B9 01           ANI  A,$01                      ; 
1714   8945 B7 01           CPI  A,$01                      ; Bit 0: The input buffer was temporarily stored. 
1715   8947                                                 ; A system message or a reserve text is shown in the display.
1716   8947 89 05           BZR  BR_894E                    ; If A <> $01
1717   8949             
1718   8949 BE 84 66        SJP  (JMP_8466)                 ; $8466 - screen related
1719   894C F9              REC                             ; Success?
1720   894D 9A              RTN                             ; Done
1721   894E             
1722   894E             BR_894E: ; BR $8933,$8947
1723   894E A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
1724   8951 B9 01           ANI  A,$01                      ; FLAGS = A & n
1725   8953 B7 00           CPI  A,$00                      ; Nothing but Bit 0 was set
1726   8955 89 02           BZR  BR_8959                    ; If A <> $00
1727   8957             
1728   8957 FB              SEC                             ;  
1729   8958 9A              RTN                             ; Done
1730   8959             
1731   8959             BR_8959:
1732   8959 BE 8C 57        SJP  (JMP_8C57)                 ; $8C57 - Something to do with reserve memory
1733   895C FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
1733   8960 FF 
1734   8961 F9              REC                             ; 
1735   8962 9A              RTN                             ; Done
1736   8963             ;% LB_xxxx END
1737   8963             ;------------------------------------------------------------------------------------------------------------
1738   8963             
1739   8963             
1740   8963             
1741   8963             ;------------------------------------------------------------------------------------------------------------
1742   8963             ; $8963 CRTC_CSR_STRT20 - CRTC - Cursor start raster register
1743   8963             ; Called from: BR $8241,$84CD,$866A,$8671,$8678,$8A98
1744   8963             ; Arguments: 
1745   8963             ; Outputs: 
1746   8963             ; RegMod: 
1747   8963             ;------------------------------------------------------------------------------------------------------------
1748   8963             ;% LB_CRTC_CSR_STRT20 START
1749   8963             CRTC_CSR_STRT20:
1750   8963 FD C8           PSH  A                          ; 
1751   8965 B5 0A           LDI  A,$0A                      ; CRTC - Cursor start raster register
1752   8967 FD AE 78 00     STA  #(CRTCTRL)                 ; &7800
1753   896B B5 20           LDI  A,$20                      ;
1754   896D FD AE 78 01     STA  #(CRTCTRL + $01)           ; $7801
1755   8971 FD 8A           POP  A                          ; 
1756   8973 9A              RTN                             ; 
1757   8974             ;% LB_CRTC_CSR_STRT20 START
1758   8974             ;------------------------------------------------------------------------------------------------------------
1759   8974             
1760   8974             
1761   8974             
1762   8974             ;------------------------------------------------------------------------------------------------------------
1763   8974             ; $8974 CLS - Clears screen
1764   8974             ; Called from: CONSOLE:$8A05,$8A25,$8A36,$8A44 
1765   8974             ; Arguments: 
1766   8974             ; Outputs: 
1767   8974             ; RegMod: 
1768   8974             ;------------------------------------------------------------------------------------------------------------
1769   8974             ;% LB_CLS START
1770   8974             CLS: 
1771   8974 FD 98           PSH  Y                          ; 
1772   8976 BE 8D 41        SJP  (CLR_VID_RAM)              ; $8D41
1773   8979 FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
1773   897D 00 
1774   897E FD 1A           POP  Y                          ; 
1775   8980 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1776   8981             ;% LB_CLS END
1777   8981             ;------------------------------------------------------------------------------------------------------------
1778   8981             
1779   8981             
1780   8981             
1781   8981             ;------------------------------------------------------------------------------------------------------------
1782   8981             ; $8981 HEXSTR (HEX$) - Convert int to hex string
1783   8981             ; Called from: 
1784   8981             ; Arguments: A, AR-X
1785   8981             ; Outputs: 
1786   8981             ; RegMod: 
1787   8981             ;------------------------------------------------------------------------------------------------------------
1788   8981             ;% LB_HEXSTR START
1789   8981             HEXSTR:
1790   8981 BE DF B4        SJP  (STRBUF_OK)                ; $DFB4 Checks if string buffer can hold #chars in A. No C=1.
1791   8984             
1792   8984 D0              VEJ  (D0) \ 
1792   8985             
1793   8985 00                  ABYT($00) \ ABRF(BR_89A0)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range D1 (65535), if exceeded branch
1793   8986 19          
1794   8987 6C 00           CPI  UH,$00                     ; 
1795   8989 8B 04           BZS  BR_898F                    ; Branch if UH == $00 (low nibble only)
1796   898B             
1797   898B A4              LDA  UH                         ; 
1798   898C BE 89 A1        SJP  (BYTE_2STR)                ; Convert UH to string (in ARX)
1799   898F             
1800   898F             BR_898F:
1801   898F 24              LDA  UL                         ; 
1802   8990 BE 89 A1        SJP  (BYTE_2STR)                ; Convert UL to string
1803   8993             
1804   8993 6A 04           LDI  UL,$04                     ; 
1805   8995 6C 00           CPI  UH,$00                     ; 
1806   8997 89 02           BZR  BR_899B                    ; Branch if UH == $00 (in ARX)
1807   8999             
1808   8999 6A 02           LDI  UL,$02                     ; Length in UL
1809   899B             
1810   899B             BR_899B:
1811   899B BE DF C5        SJP  (ARX2STRBUF+1)             ; $DFC5 - Save String buffer pointer to X-Reg and AR-X. Update pointer with YL
1812   899E             
1813   899E 68 00           LDI  UH,$00                     ; 
1814   89A0             
1815   89A0             BR_89A0: 
1816   89A0 9A              RTN                             ; Done
1817   89A1             ;% LB_HEXSTR END
1818   89A1             ;------------------------------------------------------------------------------------------------------------
1819   89A1             
1820   89A1             
1821   89A1             
1822   89A1             ;------------------------------------------------------------------------------------------------------------
1823   89A1             ; $89A1 BYTE_2STR - Convert byte to hex string
1824   89A1             ; Called from: HEXSTR:$8981 
1825   89A1             ; Arguments: A,Y
1826   89A1             ; Outputs: 
1827   89A1             ; RegMod: A,Y
1828   89A1             ;------------------------------------------------------------------------------------------------------------
1829   89A1             ;% LB_BYTE_2STR START
1830   89A1             BYTE_2STR: 
1831   89A1 FD C8           PSH  A                          ; 
1832   89A3 F1              AEX                             ; Accumulator High nibble & low nibble swapped
1833   89A4 BE 89 A9        SJP  (BR_89A9)                  ; $89A9 - directly below, tail recursion
1834   89A7             
1835   89A7 FD 8A           POP  A                          ; 
1836   89A9             
1837   89A9             BR_89A9:
1838   89A9 B9 0F           ANI  A,$0F                      ; Keep only low nibble
1839   89AB BB 30           ORI  A,$30                      ; Set bits 4&5 (ASCII 0)
1840   89AD B7 3A           CPI  A,$3A                      ; $3A == ':', just past '9'
1841   89AF 81 02           BCR  BR_89B3                    ; Bracnch if A < $3A
1842   89B1             
1843   89B1 B3 06           ADI  A,$06                      ; Add $06 to jump to to 'A-F'
1844   89B3             
1845   89B3             BR_89B3: 
1846   89B3 51              SIN  Y                          ; (Y) = A. Then Y = Y + 1
1847   89B4 9A              RTN                             ;
1848   89B5             ;% LB_BYTE_2STR END
1849   89B5             ;------------------------------------------------------------------------------------------------------------
1850   89B5             
1851   89B5             
1852   89B5             
1853   89B5             ;------------------------------------------------------------------------------------------------------------
1854   89B5             ; $89B5 CONSOLE - Sets 40 or 80 column mode
1855   89B5             ; USAGE: 'CONSOLE 40', 'CONSOLE 80'
1856   89B5             ; Called from: 
1857   89B5             ; Arguments: X-REG=Address BASIC Table pointed to. Y-Reg points to address of 1st command to be processed in program line
1858   89B5             ; Outputs: 
1859   89B5             ; RegMod: 
1860   89B5             ;------------------------------------------------------------------------------------------------------------
1861   89B5             ;% LB_CONSOLE START
1862   89B5             CONSOLE:
1863   89B5 15              LDA  (Y)                        ; Y-Reg points to address of 1st command to be processed in program line
1864   89B6 B7 49           CPI  A,$49                      ; 
1865   89B8 89 0A           BZR  BR_89C4                    ; A <> $49 'I'
1866   89BA             
1867   89BA FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$02    ; $77F4 - Some sort of video mode flags
1867   89BE 02 
1868   89BF BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4) to #($D400)
1869   89C2             
1870   89C2 54              INC  Y                          ; INC to next token in line
1871   89C3 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1872   89C4             
1873   89C4             BR_89C4:
1874   89C4 B7 4E           CPI  A,$4E                      ; 
1875   89C6 89 0A           BZR  BR_89D2                    ; A <> $4E 'N'
1876   89C8             
1877   89C8 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$05    ; $77F4 - Some sort of video mode flags
1877   89CC 05 
1878   89CD BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1879   89D0             
1880   89D0 54              INC  Y                          ; INC to next token in line
1881   89D1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1882   89D2             
1883   89D2             BR_89D2:
1884   89D2 DE              VEJ  (DE) \ ABRF(BR_8A48)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1884   89D3 74          
1885   89D4 D0              VEJ  (D0) \ 
1885   89D5             
1886   89D5 06                  ABYT($06) \ ABRF(BR_8A48)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range check D1 (32767), if exceeded branch
1886   89D6 71          
1887   89D7 24              LDA  UL                         ; 
1888   89D8 B7 01           CPI  A,$01                      ; 
1889   89DA 89 09           BZR  BR_89E5                    ; A <> $01
1890   89DC             
1891   89DC FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$03    ; $77F4 - Some sort of video mode flags
1891   89E0 03 
1892   89E1 BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1893   89E4             
1894   89E4 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1895   89E5             
1896   89E5             BR_89E5:
1897   89E5 B7 02           CPI  A,$02                      ; 
1898   89E7 89 09           BZR  BR_89F2                    ; A <> $02
1899   89E9             
1900   89E9 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$04    ; $77F4 - Some sort of video mode flags
1900   89ED 04 
1901   89EE BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1902   89F1             
1903   89F1 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
1904   89F2             
1905   89F2             BR_89F2:
1906   89F2 B7 00           CPI  A,$00                      ; 
1907   89F4 89 11           BZR  BR_8A07                    ; A <> $07
1908   89F6             
1909   89F6 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$00    ; $77F4 - Some sort of video mode flags
1909   89FA 00 
1910   89FB BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1911   89FE             
1912   89FE 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8E
1913   8A00 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; $A1
1914   8A02 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8
1915   8A05             
1916   8A05 9E 93           BCH  CLS                        ; 
1917   8A07             
1918   8A07             BR_8A07:                            ; Look for 40 or 80 argument from here
1919   8A07 24              LDA  UL                         ; 
1920   8A08 B7 50           CPI  A,$50                      ; 
1921   8A0A 8B 1B           BZS  BR_8A27                    ; A == $50 == 80col
1922   8A0C             
1923   8A0C B7 28           CPI  A,$28                      ; 
1924   8A0E 89 36           BZR  BR_8A46                    ; A <> $28 == 40col
1925   8A10             
1926   8A10 FD EB 77 F4     ORI  #(VIDEORAM + $07F4),$01    ; $77F4 - Some sort of video mode flags, 40 col mode
1926   8A14 01 
1927   8A15 BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)
1928   8A18             
1929   8A18 48 8E           LDI  XH,HB(CONFIG_TBL)          ; $8E  
1930   8A1A 4A 8F           LDI  XL,LB(CONFIG_TBL)          ; $8F, X == $8E8F
1931   8A1C BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8 - Config CRTC for 40 col
1932   8A1F             
1933   8A1F B5 28           LDI  A,$28                      ; 
1934   8A21 FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
1935   8A25 9E B3           BCH  CLS                        ; exit though clear screen
1936   8A27             
1937   8A27             BR_8A27:
1938   8A27 FD E9 77 F4     ANI  #(VIDEORAM + $07F4),$06    ; $77F4, Some sort of video mode flags, 80 col mode
1938   8A2B 06 
1939   8A2C BE 8A 38        SJP  (JMP_8A38)                 ; Stores #(VIDEORAM + $07F4)  to #($D400)  
1940   8A2F             
1941   8A2F 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8E
1942   8A31 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; $A1, X == $8EA1
1943   8A33 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8 - Config CRTC for 80 col
1944   8A36             
1945   8A36 9E C4           BCH  CLS                        ; exit though clear screen
1946   8A38             
1947   8A38             
1948   8A38             JMP_8A38:
1949   8A38 FD A5 77 F4     LDA  #(VIDEORAM + $07F4)        ; $77F4 - Some sort of video mode flags
1950   8A3C FD AE D4 00     STA  #($D400)                   ;  Video mode HW register?
1951   8A40 9A              RTN                             ; 
1952   8A41             
1953   8A41             
1954   8A41             ;$8A41: 
1955   8A41 BE 8D A8        SJP  (CRTC_INIT)                ; $8DA8 Dead code?
1956   8A44 9E D2           BCH  CLS                        ;       Dead code?
1957   8A46             
1958   8A46             BR_8A46: ; BR $8A0E
1959   8A46 68 13           LDI  UH,$13                     ; 
1960   8A48             
1961   8A48             BR_8A48:
1962   8A48 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
1963   8A49             ;% LB_CONSOLE END
1964   8A49             ;------------------------------------------------------------------------------------------------------------
1965   8A49             
1966   8A49             
1967   8A49             
1968   8A49             ;------------------------------------------------------------------------------------------------------------
1969   8A49             ; CURSOR - Positions cursor on sreen
1970   8A49             ; Usage: CURSOR Num.Exp 1, Num.Exp 2
1971   8A49             ; Called from: 
1972   8A49             ; Arguments: Num.Exp_1 Specifies horizontal position (value:0-79 80col, 0-39 40col)
1973   8A49             ;            Num.Exp_2 Specified vertical position 
1974   8A49             ; Outputs: 
1975   8A49             ; RegMod: 
1976   8A49             ;------------------------------------------------------------------------------------------------------------
1977   8A49             ;% LB_CURSOR START
1978   8A49             CURSOR:
1979   8A49 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1979   8A4A 3F          
1980   8A4B D0              VEJ  (D0) \ 
1980   8A4C             
1981   8A4C 0C                  ABYT($0C) \ ABRF(BR_8A8A)   ; (D0) Convert AR-X to Int, load in U-Reg. If range of D1 (80d) exceeded branch
1981   8A4D 3C          
1982   8A4E FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
1983   8A52 DF              DEC  A                          ; 
1984   8A53 26              CPA  UL                         ; # columns < new X position?
1985   8A54 81 03           BCR  BR_8A59                    ; Error exit
1986   8A56             
1987   8A56 BA 8A 5D        JMP  JMP_8A5D                   ; Keep going
1988   8A59             
1989   8A59             BR_8A59:
1990   8A59 68 13           LDI  UH,$13                     ; Error code
1991   8A5B 8E 2D           BCH  BR_8A8A                    ; $8A8A
1992   8A5D             
1993   8A5D             JMP_8A5D:
1994   8A5D 24              LDA  UL                         ; 
1995   8A5E DD              INC  A                          ; A == X pos+1
1996   8A5F FD C8           PSH  A                          ; Save new X position?
1997   8A61 C2              VEJ  (C2) \ 
1997   8A62             
1998   8A62 2C                  ACHR($2C) \ ABRF(BR_8A75)   ; Checks for $2C char. ',' (commma) If (not) found, branch to BR_8A75
1998   8A63 11          
1999   8A64 DE              VEJ  (DE) \ ABRF(BR_8A8A)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
1999   8A65 24          
2000   8A66 D0              VEJ  (D0) \ 
2000   8A67             
2001   8A67 10                  ABYT($10) \ ABRF(BR_8A88)   ; (D0) Convert AR-X to Integer & load in U-Reg. If > 25d branch
2001   8A68 1F          
2002   8A69 24              LDA  UL                         ; UL = Y position?
2003   8A6A DD              INC  A                          ; 
2004   8A6B 2A              STA  UL                         ; UL == Y pos+1
2005   8A6C B7 1A           CPI  A,$1A                      ; $1A == line 26
2006   8A6E 89 03           BZR  BR_8A73                    ; A <> $1A
2007   8A70             
2008   8A70 68 13           LDI  UH,$13                     ; Error #19
2009   8A72 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2010   8A73             
2011   8A73             BR_8A73:
2012   8A73 8E 09           BCH  BR_8A7E                    ; $8A7E
2013   8A75             
2014   8A75             BR_8A75:
2015   8A75 56              DEC  Y                          ; 
2016   8A76 FD C8           PSH  A                          ; 
2017   8A78 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2018   8A7B 2A              STA  UL                         ; 
2019   8A7C FD 8A           POP  A                          ; 
2020   8A7E             
2021   8A7E             BR_8A7E:
2022   8A7E 24              LDA  UL                         ; 
2023   8A7F AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2024   8A82 FD 8A           POP  A                          ; 
2025   8A84 AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2026   8A87 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2027   8A88             
2028   8A88             BR_8A88:
2029   8A88 FD 8A           POP  A                          ; 
2030   8A8A             
2031   8A8A             BR_8A8A:
2032   8A8A E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2033   8A8B             ;% LB_CURSOR END
2034   8A8B             ;------------------------------------------------------------------------------------------------------------
2035   8A8B             
2036   8A8B             
2037   8A8B             
2038   8A8B             ;------------------------------------------------------------------------------------------------------------
2039   8A8B             ; $8A8B xxxx - Something to do with PRINT USING?
2040   8A8B             ; Called from: PRINT:$91B8
2041   8A8B             ; Arguments: 
2042   8A8B             ; Outputs: 
2043   8A8B             ; RegMod: 
2044   8A8B             ;------------------------------------------------------------------------------------------------------------
2045   8A8B             ;% LB_xxxx START
2046   8A8B             JMP_8A8B:
2047   8A8B B5 60           LDI  A,$60                      ; Set pointer to start of OUT_BUF
2048   8A8D AE 78 8F        STA  (OUTBUF_PTR)               ; $788F Pointer into OUT_BUF
2049   8A90 BE 8C 4A        SJP  (CRTC_CSR_STRT10)          ; $8C4A - Set Cursor Start Raster register to $10
2050   8A93             
2051   8A93 FD EB 77 F3     ORI  #(VIDEORAM + $07F3),$01    ; $77F3 Set Bit 0
2051   8A97 01 
2052   8A98 BE 89 63        SJP  (CRTC_CSR_STRT20)          ; $8963 - Set Cursor Start Raster register to $20
2053   8A9B B5 00           LDI  A,$00                      ; value writtne to OUT_BUF
2054   8A9D 6A 4F           LDI  UL,$4F                     ; $00~$4F == whole OUT_BUF
2055   8A9F 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B X=$7B60 start of OUT_BUF
2056   8AA1 4A 60           LDI  XL,LB(OUT_BUF)             ; $60 
2057   8AA3             
2058   8AA3             BR_8AA3:
2059   8AA3 41              SIN  X                          ; (X) = A. Then X = X + 1 . Zero out OUT_BUF
2060   8AA4 88 03           LOP  UL,BR_8AA3                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
2061   8AA6             
2062   8AA6             BR_8AA6:
2063   8AA6 C0              VEJ  (C0)                       ; (C0) Load next character/token into U-REG
2064   8AA7 6C F0           CPI  UH,$F0                     ; 
2065   8AA9 89 02           BZR  BR_8AAD                    ; UH <> $F0
2066   8AAB 6E 85           CPI  UL,$85                     ; $F085 is USING token
2067   8AAD             
2068   8AAD             BR_8AAD:
2069   8AAD 8B 03           BZS  BR_8AB2                    ; UL == $85, is USING token
2070   8AAF C6              VEJ  (C6)                       ; (C6) Correct program pointer if token not USING
2071   8AB0 8E 04           BCH  BR_8AB6                    ; $8AB6
2072   8AB2             
2073   8AB2             BR_8AB2:
2074   8AB2 CD 9A           VMJ  ($9A)                      ; (9A) Determines and transmits USING parameters
2075   8AB4 C3 E0           VCS  ($E0)                      ; (E0) return to BASIC, Gives an error message if UH is not "00".
2076   8AB6             
2077   8AB6             BR_8AB6:
2078   8AB6 15              LDA  (Y)                        ; Continues here if not USING token
2079   8AB7 B7 0D           CPI  A,$0D                      ; CR? Checking for end of line
2080   8AB9 8B E3           BZS  BR_8B9E                    ; A == $0D
2081   8ABB             
2082   8ABB             BR_8ABB:
2083   8ABB 15              LDA  (Y)                        ; 
2084   8ABC B7 3A           CPI  A,$3A                      ; ':'? Checking for end of segment
2085   8ABE 8B DE           BZS  BR_8B9E                    ; A == $3A
2086   8AC0             
2087   8AC0 CD 2E           VMJ  ($2E) \ ABRF(BR_8AC5)      ; Line/segment not ending so keep going.
2087   8AC2 02          
2088   8AC3 8E 03           BCH  BR_8AC8                    ; Calculates expression, result to AR-X. Branch on error
2089   8AC5             
2090   8AC5             BR_8AC5:
2091   8AC5 BA 8C 38        JMP  JMP_8C38                   ; Exit path
2092   8AC8             
2093   8AC8             BR_8AC8:
2094   8AC8 A5 7A 04        LDA  (ARX + $04)                ; $7A04
2095   8ACB B7 C1           CPI  A,$C1                      ; No idea what $C1 indicates
2096   8ACD 8B 58           BZS  BR_8B27                    ; A == $C1
2097   8ACF             
2098   8ACF B7 D0           CPI  A,$D0                      ; String or Variable
2099   8AD1 8B 54           BZS  BR_8B27                    ; A == $D0
2100   8AD3             
2101   8AD3 A5 78 95        LDA  (USINGF)                   ; USING F/F (format, decimal, comma, etc.)
2102   8AD6 B7 00           CPI  A,$00                      ; 
2103   8AD8 89 1D           BZR  BR_8AF7                    ; A <> $00
2104   8ADA             
2105   8ADA B5 10           LDI  A,$10                      ; 
2106   8ADC AE 78 94        STA  (STR_BUF_PTR_L)            ; 
2107   8ADF FD 98           PSH  Y                          ; 
2108   8AE1 BE D9 CF        SJP  (BCMD_STR)                 ; 
2109   8AE4 FD 1A           POP  Y                          ; 
2110   8AE6 6C 00           CPI  UH,$00                     ; 
2111   8AE8 99 25           BZR  BR_8AC5                    ; A <> $00
2112   8AEA             
2113   8AEA A5 7A 01        LDA  (ARX + $01)                ; 
2114   8AED B7 00           CPI  A,$00                      ; 
2115   8AEF 89 04           BZR  BR_8AF5                    ; A <> $00
2116   8AF1             
2117   8AF1 EF 78 8F 01     ADI  (OUTBUF_PTR),$01           ; $788F (pp) = (pp) + n (ME1)
2118   8AF5             
2119   8AF5             BR_8AF5:
2120   8AF5 8E 30           BCH  BR_8B27                    ; $8B27
2121   8AF7             
2122   8AF7             BR_8AF7:
2123   8AF7 FD 98           PSH  Y                          ; -1 hack as target calc 1 off
2124   8AF9 D2              VEJ  (D2) \                     ; If AR-X contains an integer value, convert it with (10) (DD2D) according to D2.  
2124   8AFA             
2125   8AFA 00                  ABRF(BR_8AFC-1) \ ABYT($80) ; If AR-X contains CSI, continue with Distance Address according to D1.
2125   8AFB 80          
2126   8AFC             
2127   8AFC             BR_8AFC:
2128   8AFC CD 96           VMJ  ($96)                      ; Format AR-X with Using and transfer to Output buffer
2129   8AFE 14              LDA  YL                         ; 
2130   8AFF F9              REC                             ; 
2131   8B00 00              SBC  XL                         ; 
2132   8B01 2A              STA  UL                         ; 
2133   8B02             
2134   8B02             BR_8B02:
2135   8B02 45              LIN  X                          ; A = (X) then INC X
2136   8B03 B7 20           CPI  A,$20                      ; 
2137   8B05 89 05           BZR  BR_8B0C                    ; A <> $20
2138   8B07             
2139   8B07 88 07           LOP  UL,BR_8B02                 ; $8B02
2140   8B09 68 01           LDI  UH,$01                     ;
2141   8B0B E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2142   8B0C             
2143   8B0C             BR_8B0C:
2144   8B0C 46              DEC  X                          ; 
2145   8B0D A5 7A 01        LDA  (ARX + $01)                ; 
2146   8B10 B7 80           CPI  A,$80                      ; 
2147   8B12 8B 01           BZS  BR_8B15                    ;A == $80
2148   8B14             
2149   8B14 46              DEC  X                          ; 
2150   8B15             
2151   8B15             BR_8B15:
2152   8B15 14              LDA  YL                         ; 
2153   8B16 FB              SEC                             ; 
2154   8B17 DD              INC  A                          ; 
2155   8B18 00              SBC  XL                         ; 
2156   8B19 DD              INC  A                          ; 
2157   8B1A 2A              STA  UL                         ; 
2158   8B1B 58 7A           LDI  YH,HB(ARX)                 ; $7A
2159   8B1D 5A 05           LDI  YL,LB(ARX+5)               ; $05
2160   8B1F 84              LDA  XH                         ; 
2161   8B20 51              SIN  Y                          ; 
2162   8B21 04              LDA  XL                         ; 
2163   8B22 51              SIN  Y                          ; 
2164   8B23 24              LDA  UL                         ; 
2165   8B24 1E              STA  (Y)                        ; 
2166   8B25 FD 1A           POP  Y                          ; 
2167   8B27             
2168   8B27             BR_8B27:
2169   8B27 FD 98           PSH  Y                          ; 
2170   8B29 DC              VEJ  (DC)                       ; (DC) Load CSI from AR-X to X-Reg
2171   8B2A A5 78 97        LDA  (USING_CHR)                ; 
2172   8B2D B7 00           CPI  A,$00                      ; 
2173   8B2F 89 04           BZR  BR_8B35                    ; A <> $00
2174   8B31             
2175   8B31             BR_8B31:
2176   8B31 FD C8           PSH  A                          ; 
2177   8B33 8E 1D           BCH  BR_8B52                    ; $8B52
2178   8B35             
2179   8B35             BR_8B35:
2180   8B35 FD C8           PSH  A                          ; 
2181   8B37 A5 7A 04        LDA  (ARX + $04)                ; 
2182   8B3A B7 D0           CPI  A,$D0                      ; 
2183   8B3C 8B 06           BZS  BR_8B44                    ; A == $D0
2184   8B3E             
2185   8B3E FD 8A           POP  A                          ; 
2186   8B40 B5 00           LDI  A,$00                      ; 
2187   8B42 9E 13           BCH  BR_8B31                    ; $8B31
2188   8B44             
2189   8B44             BR_8B44:
2190   8B44 FD 8A           POP  A                          ; 
2191   8B46 26              CPA  UL                         ; 
2192   8B47 83 05           BCS  BR_8B4E                    ; $8B4E
2193   8B49             
2194   8B49 2A              STA  UL                         ; 
2195   8B4A B5 00           LDI  A,$00                      ; 
2196   8B4C 9E 1D           BCH  BR_8B31                    ; $8B31
2197   8B4E             
2198   8B4E             BR_8B4E:
2199   8B4E FB              SEC                             ; 
2200   8B4F 20              SBC  UL                         ; 
2201   8B50 FD C8           PSH  A                          ; 
2202   8B52             
2203   8B52             BR_8B52:
2204   8B52 CD 94           VMJ  ($94)                      ; (94) Transfers string whose address is in the X-Reg to the output buffer (*VMJ diss is wrong)
2205   8B54 FD 8A           POP  A                          ; 
2206   8B56 B7 00           CPI  A,$00                      ; 
2207   8B58 8B 0F           BZS  BR_8B69                    ; A == $00
2208   8B5A             
2209   8B5A 2A              STA  UL                         ; 
2210   8B5B B5 20           LDI  A,$20                      ; 
2211   8B5D 62              DEC  UL                         ; 
2212   8B5E 6E 50           CPI  UL,$50                     ; 
2213   8B60 83 07           BCS  BR_8B69                    ; UL >= $50
2214   8B62             
2215   8B62             BR_8B62:
2216   8B62 5E B0           CPI  YL,$B0                     ; 
2217   8B64 83 03           BCS  BR_8B69                    ; YL == $B0
2218   8B66             
2219   8B66 51              SIN  Y                          ; 
2220   8B67 88 07           LOP  UL,BR_8B62                 ; $8B62
2221   8B69             
2222   8B69             BR_8B69:
2223   8B69 14              LDA  YL                         ; 
2224   8B6A AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
2225   8B6D FD 1A           POP  Y                          ;
2226   8B6F 55              LIN  Y                          ; A = (Y) then INC Y
2227   8B70 FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
2228   8B74 B7 3B           CPI  A,$3B                      ; 
2229   8B76 9B D2           BZS  BR_8AA6                    ; A <> $3B
2230   8B78             
2231   8B78 B7 2C           CPI  A,$2C                      ; 
2232   8B7A 89 15           BZR  BR_8B91                    ; $8B91
2233   8B7C             
2234   8B7C B5 11           LDI  A,$11                      ; 
2235   8B7E FB              SEC                             ; 
2236   8B7F A1 7A 07        SBC  (ARX + $07)                ; 
2237   8B82 B7 11           CPI  A,$11                      ; 
2238   8B84 81 02           BCR  BR_8B88                    ; A < $11
2239   8B86             
2240   8B86 B5 01           LDI  A,$01                      ; 
2241   8B88             
2242   8B88             BR_8B88:
2243   8B88 F9              REC                             ; 
2244   8B89 A3 78 8F        ADC  (OUTBUF_PTR)               ; $788F
2245   8B8C AE 78 8F        STA  (OUTBUF_PTR)               ; $788F
2246   8B8F 9E D6           BCH  BR_8ABB                    ; $8ABB
2247   8B91             
2248   8B91             BR_8B91:
2249   8B91 56              DEC  Y                          ; 
2250   8B92 B7 3A           CPI  A,$3A                      ; 
2251   8B94 8B 08           BZS  BR_8B9E                    ; A <> $3A
2252   8B96             
2253   8B96 B7 0D           CPI  A,$0D                      ; 
2254   8B98 8B 04           BZS  BR_8B9E                    ; A <> $0D
2255   8B9A             
2256   8B9A 68 01           LDI  UH,$01                     ; 
2257   8B9C 8E 9A           BCH  JMP_8C38                   ; $8C38
2258   8B9E             
2259   8B9E             BR_8B9E:
2260   8B9E FD 98           PSH  Y                          ; 
2261   8BA0 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2262   8BA3 B7 19           CPI  A,$19                      ; 
2263   8BA5 81 03           BCR  BR_8BAA                    ; A < $19
2264   8BA7             
2265   8BA7 BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
2266   8BAA             
2267   8BAA             BR_8BAA:
2268   8BAA 18              STA  YH                         ; 
2269   8BAB A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2270   8BAE 1A              STA  YL                         ; 
2271   8BAF BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2272   8BB2 48 7B           LDI  XH,HB(OUT_BUF)             ; $7B
2273   8BB4 4A 60           LDI  XL,LB(OUT_BUF)             ; $60
2274   8BB6 A5 78 8F        LDA  (OUTBUF_PTR)               ; $788F 
2275   8BB9 F9              REC                             ; 
2276   8BBA B1 60           SBI  A,$60                      ; 
2277   8BBC 83 01           BCS  BR_8BBF                    ; $8BBF
2278   8BBE             
2279   8BBE DD              INC  A                          ; 
2280   8BBF             
2281   8BBF             BR_8BBF:
2282   8BBF 2A              STA  UL                         ; 
2283   8BC0             
2284   8BC0             BR_8BC0:
2285   8BC0 45              LIN  X                          ; 
2286   8BC1 FD 1E           STA  #(Y)                       ; 
2287   8BC3 54              INC  Y                          ; 
2288   8BC4 EF 77 4F 01     ADI  (STRING_VARS + $FF),$01    ; $774F in DISPLAY BUFFER, X cursor position
2289   8BC8 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2290   8BCB FD A7 77 D1     CPA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
2291   8BCF 81 2B           BCR  BR_8BFC                    ; $8BFC
2292   8BD1 8B 29           BZS  BR_8BFC                    ; $8BFC
2293   8BD3             
2294   8BD3 E9 77 4F 01     ANI  (STRING_VARS + $FF),$01    ; $774F in DISPLAY BUFFER, X cursor position
2295   8BD7 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2296   8BDB A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2297   8BDE B7 1A           CPI  A,$1A                      ; 
2298   8BE0 81 1A           BCR  BR_8BFC                    ; $8BFC
2299   8BE2             
2300   8BE2 6E 00           CPI  UL,$00                     ; 
2301   8BE4 8B 16           BZS  BR_8BFC                    ; $8BFC
2302   8BE6             
2303   8BE6 FD 88           PSH  X                          ; 
2304   8BE8 FD A8           PSH  U                          ; 
2305   8BEA BE 84 D7        SJP  (JMP_84D7)                 ; $84D7
2306   8BED A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2307   8BF0 18              STA  YH                         ; 
2308   8BF1 A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2309   8BF4 1A              STA  YL                         ; 
2310   8BF5 BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B
2311   8BF8 FD 2A           POP  U                          ; 
2312   8BFA FD 0A           POP  X                          ; 
2313   8BFC             
2314   8BFC             BR_8BFC:
2315   8BFC 88 3E           LOP  UL,BR_8BC0                 ; $8BC0
2316   8BFE FD 18           LDX  Y                          ; 
2317   8C00 46              DEC  X                          ; 
2318   8C01 FD 1A           POP  Y                          ; 
2319   8C03 56              DEC  Y                          ; 
2320   8C04 55              LIN  Y                          ; A = (Y) then INC Y
2321   8C05 B7 3B           CPI  A,$3B                      ; 
2322   8C07 8B 0E           BZS  BR_8C17                    ; $8C17
2323   8C09             
2324   8C09 B5 01           LDI  A,$01                      ; 
2325   8C0B A7 77 4F        CPA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2326   8C0E 8B 07           BZS  BR_8C17                    ; $8C17
2327   8C10             
2328   8C10 AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2329   8C13 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2330   8C17             
2331   8C17             BR_8C17:
2332   8C17 BE 88 BF        SJP  (JMP_88BF)                 ; $88BF
2333   8C1A 68 00           LDI  UH,$00                     ; 
2334   8C1C FD E9 77 D3     ANI  #(VIDEORAM + $07D3),$00    ; $77D3
2334   8C20 00 
2335   8C21 D8              VEJ  (D8)                       ; 
2336   8C22 89 05           BZR  BR_8C29                    ; $8C29
2337   8C24             
2338   8C24 B5 03           LDI  A,$03                      ; 
2339   8C26 AE 78 71        STA  (WAIT_CFG)                 ; 
2340   8C29             
2341   8C29             BR_8C29:
2342   8C29 A5 78 71        LDA  (WAIT_CFG)                 ; 
2343   8C2C B7 02           CPI  A,$02                      ; 
2344   8C2E 8B 0F           BZS  BR_8C3F                    ; $8C3F
2345   8C30             
2346   8C30 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2347   8C33 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2348   8C37 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2349   8C38             
2350   8C38             JMP_8C38:
2351   8C38 B5 0D           LDI  A,$0D                      ; 
2352   8C3A FD AE 77 D3     STA  #(VIDEORAM + $07D3)        ; $77D3
2353   8C3E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2354   8C3F             
2355   8C3F             BR_8C3F:
2356   8C3F A5 78 72        LDA  (WAIT_CTR_H)               ;
2357   8C42 28              STA  UH                         ; 
2358   8C43 A5 78 73        LDA  (WAIT_CTR_L)               ; 
2359   8C46 2A              STA  UL                         ; 
2360   8C47 CD AC           VMJ  ($AC)                      ; Time delay 15.625ms * number from U-Reg. BREAK is possible.
2361   8C49 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
2362   8C4A             ;% LB_xxxx END
2363   8C4A             ;------------------------------------------------------------------------------------------------------------
2364   8C4A             
2365   8C4A             
2366   8C4A             
2367   8C4A             ;------------------------------------------------------------------------------------------------------------
2368   8C4A             ; $8C4A CRTC_CSR_STRT10 - Set Cursor Start Raster register to $10
2369   8C4A             ; Called from: JMP_8A8B:$8A90
2370   8C4A             ; Arguments: 
2371   8C4A             ; Outputs: 
2372   8C4A             ; RegMod: 
2373   8C4A             ;------------------------------------------------------------------------------------------------------------
2374   8C4A             ;% LB_CRTC_CSR_STRT10 START
2375   8C4A             CRTC_CSR_STRT10:
2376   8C4A B5 0A           LDI  A,$0A                      ; 0000 1010b
2377   8C4C FD AE 78 00     STA  #(CRTCTRL)                 ; Cursor Start Raster
2378   8C50 B5 10           LDI  A,$10                      ;
2379   8C52 FD AE 78 01     STA  #(CRTCTRL + $01)           ; 0001 0000b
2380   8C56 9A              RTN                             ; Done
2381   8C57             ;% LB_CRTC_CSR_STRT10 START
2382   8C57             ;------------------------------------------------------------------------------------------------------------
2383   8C57             
2384   8C57             
2385   8C57             
2386   8C57             ;------------------------------------------------------------------------------------------------------------
2387   8C57             ; $8C57 xxxx - Something to do with reserve memory
2388   8C57             ; Called from: 
2389   8C57             ; Arguments: 
2390   8C57             ; Outputs: 
2391   8C57             ; RegMod: 
2392   8C57             ;------------------------------------------------------------------------------------------------------------
2393   8C57             ;% LB_xxxx START
2394   8C57             JMP_8C57:
2395   8C57 A5 78 80        LDA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
2396   8C5A B9 01           ANI  A,$01                      ; Keep Bit 0: The input buffer was temporarily stored.
2397   8C5C B7 01           CPI  A,$01                      ; A system message or a reserve text is shown in the display.  
2398   8C5E 8B 02           BZS  BR_8C62                    ; Bit 0 was set, branch
2399   8C60             
2400   8C60 F9              REC                             ; Reset Carry
2401   8C61 9A              RTN                             ; Done
2402   8C62             
2403   8C62             BR_8C62:
2404   8C62 CD 38           VMJ  ($38)                      ; Find reserve memory start address + 8, store in X-Reg. 
2405   8C64                                                 ; Sets C=0 if the 2nd reserve memory area is occupied
2406   8C64 68 02           LDI  UH,$02                     ; 
2407   8C66 6A 19           LDI  UL,$19                     ; U = $0219
2408   8C68 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2409   8C6C 18              STA  YH                         ; 
2410   8C6D 5A 01           LDI  YL,$01                     ; 
2411   8C6F BE 8D 6B        SJP  (JMP_8D6B)                 ; $8D6B - manipualtes screen
2412   8C72             
2413   8C72             BR_8C72:
2414   8C72 BE 8D 64        SJP  (CPY_X2Y)                  ; $8D64 - Copies UL bytes from X to Y
2415   8C75 FD 62           DEC  UH                         ; 
2416   8C77 83 07           BCS  BR_8C80                    ; $8C80 - branch if UH < 0
2417   8C79             
2418   8C79 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$01    ; $77D2 - text row, (pp) = (pp) + n (ME0)
2418   8C7D 01 
2419   8C7E FB              SEC                             ; Set Carry == failure?
2420   8C7F 9A              RTN                             ; Done
2421   8C80             
2422   8C80             BR_8C80:
2423   8C80 B5 20           LDI  A,$20                      ; SPACE?
2424   8C82 FD 1E           STA  #(Y)                       ; Y is current screen (cursor) address?
2425   8C84 54              INC  Y                          ; 
2426   8C85 6A 19           LDI  UL,$19                     ; 
2427   8C87 9E 17           BCH  BR_8C72                    ; $8C72
2428   8C89             ;% LB_xxxx END
2429   8C89             ;------------------------------------------------------------------------------------------------------------
2430   8C89             
2431   8C89             
2432   8C89             
2433   8C89             ;------------------------------------------------------------------------------------------------------------
2434   8C89             ; INPUT - Input numerical variable, text variable, text constant
2435   8C89             ; Called from: 
2436   8C89             ; Arguments: String;Var
2437   8C89             ; Outputs: 
2438   8C89             ; RegMod: 
2439   8C89             ;------------------------------------------------------------------------------------------------------------
2440   8C89             ;% LB_INPUT START
2441   8C89             INPUT:
2442   8C89 C2              VEJ  (C2) \ 
2442   8C8A             
2443   8C8A 23                  ACHR($23) \ ABRF(BR_8C8F)   ; Checks for $23 '#' char, if not found branch.
2443   8C8B 03          
2444   8C8C BA C8 FD        JMP  BCMD_CLEAR+8               ; $C8FD, exit if PRINT#, etc. 
2445   8C8F             
2446   8C8F             BR_8C8F:
2447   8C8F D8              VEJ  (D8)                       ; (D8) Check if program running. If so: Z=0.
2448   8C90 89 03           BZR  BR_8C95                    ; Z <> 0 so program is not running
2449   8C92             
2450   8C92 68 1A           LDI  UH,$1A                     ; Error 26: Error occurs when command cannot be executed in current mode 
2451   8C94 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2452   8C95             
2453   8C95             BR_8C95:
2454   8C95 C6              VEJ  (C6)                       ; (C6) Correct program pointer
2455   8C96 BE D0 34        SJP  (INBUF_CLR)                ; Clear the input buffer
2456   8C99 C2              VEJ  (C2) \ 
2456   8C9A             
2457   8C9A 22                  ACHR($22) \ ABRF(BR_8CFB)   ; Checks for $22 (quote) char. If not found branch.
2457   8C9B 5F          
2458   8C9C                                                 
2459   8C9C                                                 ; Quoted string handling
2460   8C9C CD 0C           VMJ  ($0C)                      ; (0C) Gets the length of a string
2461   8C9E FD 98           PSH  Y                          ; Y-Reg contains end marker address. 
2462   8CA0                                                 ; X-Reg contains the address of the 1st byte of the string. 
2463   8CA0                                                 ; AR-X contains "D0", address, length in 7A04 ff..
2464   8CA0 5A B0           LDI  YL,LB(IN_BUF)              ; Set Y yo point to input buffer
2465   8CA2 58 7B           LDI  YH,HB(IN_BUF)              ; $7BB0
2466   8CA4 FD C8           PSH  A                          ; 
2467   8CA6 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2468   8CA9 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2469   8CAD FD 8A           POP  A                          ; 
2470   8CAF EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position, (pp) = (pp) + n (ME0)
2471   8CB3 A5 7A 07        LDA  (ARX + $07)                ; $7A07 == length of string
2472   8CB6 2A              STA  UL                         ; 
2473   8CB7 BE D0 49        SJP  (UL_XREG2YREG)             ; $D049 - Transfers UL bytes from X-Reg to Y-Reg
2474   8CBA 14              LDA  YL                         ; 
2475   8CBB AE 78 8B        STA  (INBUFPTR_L)               ; 
2476   8CBE FD 1A           POP  Y                          ; 
2477   8CC0 C2              VEJ  (C2) \ 
2477   8CC1             
2478   8CC1 3B                  ACHR($3B) \ ABRF(BR_8CC7)   ; Checks for $3B ';' char. If not found branch.
2478   8CC2 04          
2479   8CC3 B5 40           LDI  A,$40                      ; 
2480   8CC5 8E 0A           BCH  BR_8CD1                    ; 
2481   8CC7             
2482   8CC7             BR_8CC7:
2483   8CC7 C4              VEJ  (C4) \ 
2483   8CC8             
2484   8CC8 2C                  ACHR($2C) \ ABRF(BR_8D15)   ; Checks for $2C ',' character in U-Reg . Branch if not found.
2484   8CC9 4B          
2485   8CCA             
2486   8CCA             BR_8CCA:
2487   8CCA B5 B0           LDI  A,$B0                      ; 
2488   8CCC AE 78 8B        STA  (INBUFPTR_L)               ; 
2489   8CCF B5 00           LDI  A,$00                      ; 
2490   8CD1             
2491   8CD1             BR_8CD1:
2492   8CD1 AE 78 80        STA  (DISPARAM)                 ; $7880 - Reset Display Parameter: determines display at READY
2493   8CD4 CE              VEJ  (CE) \ 
2493   8CD5             
2494   8CD5 58                  ABYT($58) \ ABRF($8D05)     ; Retrieve address of variable whose name is pointed to by Y-Reg, branch if error
2494   8CD6 2E          
2495   8CD7                                                 ; X-Reg contains return address
2496   8CD7                                                 ; Y-Reg points to next byte in main memory
2497   8CD7                                                 ; U-Reg contains the start address of the variable.
2498   8CD7                                                 ; AR-X may contain CSI or BCD value of searched var.
2499   8CD7             
2500   8CD7 F6              VEJ  (F6) \ AWRD(LASTVARADD_H)  ; Save U-Reg to RAM address
2500   8CD8 78 86       
2501   8CDA 44              INC  X                          ; 
2502   8CDB A5 7A 07        LDA  (ARX + $07)                ; Length of string
2503   8CDE 0E              STA  (X)                        ; 
2504   8CDF D4              VEJ  (D4) \ ABYT($A0)           ; Transfers pointers for the current processing status of the program in memory:
2504   8CE0 A0          
2505   8CE1                                                 ; A0=program, AC=Break, B2=Error
2506   8CE1 D4              VEJ  (D4) \ ABYT($AC)           ; Transfers pointers for the current processing status of the program in memory: 
2506   8CE2 AC          
2507   8CE3                                                 ; A0=program, AC=Break, B2=Error
2508   8CE3 BE EF 67        SJP  (PREPLCDOUT)               ; $EF67 - Clear LCD, calc # of chars still can be displayed
2509   8CE6 68 20           LDI  UH,$20                     ; 
2510   8CE8 C3 E0           VCS  ($E0)                      ; Gives an error message if UH is not "00".
2511   8CEA             
2512   8CEA             ;$8CEA - *** Does not seem to get here. Perhaps disassembly is wrong?
2513   8CEA EB 78 8A 50     ORI  (BREAKPARAM),$50           ; 
2514   8CEE A5 78 8B        LDA  (INBUFPTR_L)               ; 
2515   8CF1 1A              STA  YL                         ; 
2516   8CF2 58 7B           LDI  YH,$7B                     ; 
2517   8CF4 E9 7B 0E 9F     ANI  (CURS_CTRL),$9F            ; 
2518   8CF8 BA 8D 18        JMP  JMP_8D18                   ; $8D18
2519   8CFB             
2520   8CFB             BR_8CFB:
2521   8CFB FD C8           PSH  A                          ; 
2522   8CFD A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2523   8D00 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2524   8D04 FD 8A           POP  A                          ; 
2525   8D06 EF 77 4E 01     ADI  (STRING_VARS + $FE),$01    ; $774E in DISPLAY BUFFER, Y cursor position
2526   8D0A C6              VEJ  (C6)                       ; (C6) Correct program pointer
2527   8D0B B5 3F           LDI  A,$3F                      ; 
2528   8D0D AE 7B B0        STA  (IN_BUF)                   ; 
2529   8D10 9E 48           BCH  BR_8CCA                    ; $8CCA
2530   8D12 68 07           LDI  UH,$07                     ; 
2531   8D14 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
2532   8D15             
2533   8D15             BR_8D15:
2534   8D15 BA C9 E3        JMP  BCMD_DIM + $5B             ; $C9E3 
2535   8D18             
2536   8D18             JMP_8D18:
2537   8D18 BE E8 CA        SJP  (PRGMDISP)                 ; 
2538   8D1B E9 78 9D 00     ANI  (CURR_LINE_L),$00          ; (pp) = (pp) & n (ME0)
2539   8D1F E9 78 9C 00     ANI  (CURR_LINE_H),$00          ; 
2540   8D23 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ; 
2541   8D27 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; 
2542   8D2A BE E2 43        SJP  (WAIT4KB)                  ; 
2543   8D2D FD ED 77 F3     BII  #(VIDEORAM + $07F3),$01    ; 
2543   8D31 01 
2544   8D32 89 05           BZR  BR_8D39                    ; 
2545   8D34 FD EF 77 D2     ADI  #(VIDEORAM + $07D2),$FF    ; $77D2 - text row
2545   8D38 FF 
2546   8D39             
2547   8D39             BR_8D39:
2548   8D39 FD E9 77 F3     ANI  #(VIDEORAM + $07F3),$00    ; 
2548   8D3D 00 
2549   8D3E BA CA 92        JMP  $CA92                      ; $CA92 ***EDITOR + $12 
2550   8D41             
2551   8D41             
2552   8D41             
2553   8D41             ;------------------------------------------------------------------------------------------------------------
2554   8D41             ; $8D41 CLR_VID_RAM - Clears video RAM? 
2555   8D41             ; Called from: 
2556   8D41             ; Arguments: 
2557   8D41             ; Outputs: 
2558   8D41             ; RegMod: 
2559   8D41             ;------------------------------------------------------------------------------------------------------------
2560   8D41             ;% LB_CLR_VID_RAM START
2561   8D41             CLR_VID_RAM:
2562   8D41 68 07           LDI  UH,$07                     ; 
2563   8D43 6A CF           LDI  UL,$CF                     ; U == $07CF, # bytes to clear
2564   8D45 B5 00           LDI  A,$00                      ; Value to clear to
2565   8D47 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2566   8D4A             
2567   8D4A             BR_8D4A:
2568   8D4A BE 8D 5E        SJP  (CLR_VIDRAMPAGE)           ; Clear video RAM page
2569   8D4D             
2570   8D4D FD 62           DEC  UH                         ; U == $07CE
2571   8D4F 93 07           BCS  BR_8D4A                    ; $8D4A
2572   8D51             
2573   8D51 B5 01           LDI  A,$01                      ; 
2574   8D53 FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
2575   8D57 AE 77 4E        STA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position
2576   8D5A AE 77 4F        STA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2577   8D5D 9A              RTN                             ; Done
2578   8D5E             ;% LB_CLR_VID_RAM END   
2579   8D5E             ;------------------------------------------------------------------------------------------------------------
2580   8D5E             
2581   8D5E             
2582   8D5E             
2583   8D5E             ;------------------------------------------------------------------------------------------------------------
2584   8D5E             ; $8D5E CLR_VIDRAMPAGE - Clear Video RAM page
2585   8D5E             ; Called from: 
2586   8D5E             ; Arguments: A,Y
2587   8D5E             ; Outputs: 
2588   8D5E             ; RegMod: A,Y
2589   8D5E             ;------------------------------------------------------------------------------------------------------------
2590   8D5E             ;% LB_CLR_VIDRAM START
2591   8D5E             CLR_VIDRAMPAGE:
2592   8D5E FD 1E           STA  #(Y)                       ; 
2593   8D60 54              INC  Y                          ; 
2594   8D61 88 05           LOP  UL,CLR_VIDRAMPAGE          ; $8D5E
2595   8D63 9A              RTN                             ; Done
2596   8D64             ;% LB_xxxx END   
2597   8D64             ;------------------------------------------------------------------------------------------------------------
2598   8D64             
2599   8D64             
2600   8D64             
2601   8D64             ;------------------------------------------------------------------------------------------------------------
2602   8D64             ; $8D64 CPY_X2Y - Copies UL bytes from X to Y
2603   8D64             ; Called from: 
2604   8D64             ; Arguments: X,Y,UL
2605   8D64             ; Outputs: 
2606   8D64             ; RegMod: X,Y,UL
2607   8D64             ;------------------------------------------------------------------------------------------------------------
2608   8D64             ;% LB_CPY_X2Y START
2609   8D64             CPY_X2Y:
2610   8D64 45              LIN  X                          ; A = (X) then INC X
2611   8D65 FD 1E           STA  #(Y)                       ; 
2612   8D67 54              INC  Y                          ; 
2613   8D68 88 06           LOP  UL,CPY_X2Y                 ; $8D64
2614   8D6A 9A              RTN                             ; Done
2615   8D6B             ;% LB_CPY_X2Y END   
2616   8D6B             ;------------------------------------------------------------------------------------------------------------
2617   8D6B             
2618   8D6B             
2619   8D6B             
2620   8D6B             ;------------------------------------------------------------------------------------------------------------
2621   8D6B             ; $8D6B xxxx - Sets Y-reg to point to char under curosr?
2622   8D6B             ; Called from: 
2623   8D6B             ; Arguments: Y = text row, X = 
2624   8D6B             ; Outputs: Y-reg points to char under curosr?
2625   8D6B             ; RegMod: Y
2626   8D6B             ;------------------------------------------------------------------------------------------------------------
2627   8D6B             ;% LB_xxxx START
2628   8D6B             JMP_8D6B:
2629   8D6B FD C8           PSH  A                          ; 
2630   8D6D FD 88           PSH  X                          ; 
2631   8D6F FD A8           PSH  U                          ; Save registers
2632   8D71             
2633   8D71 FD 18           LDX  Y                          ; 
2634   8D73 FD 42           DEC  XH                         ; 
2635   8D75 42              DEC  XL                         ; 
2636   8D76 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM #$7000
2637   8D79             
2638   8D79 14              LDA  YL                         ; $00
2639   8D7A FB              SEC                             ; Set Carry Flag
2640   8D7B B1 50           SBI  A,$50                      ; A = A - N. Subract $50 from YL == $B1
2641   8D7D 1A              STA  YL                         ; Y == $70B0? (C still set here)
2642   8D7E 94              LDA  YH                         ; YH == $71
2643   8D7F B1 00           SBI  A,$00                      ; A = A - N
2644   8D81 18              STA  YH                         ; Y == $71B1?
2645   8D82             
2646   8D82 4C 19           CPI  XH,$19                     ; 
2647   8D84 83 1D           BCS  BR_8DA3                    ; XH >= $19 Line 25d? Exit
2648   8D86 4E 50           CPI  XL,$50                     ; 
2649   8D88 83 19           BCS  BR_8DA3                    ; XL >= $50 Col 80d? Exit
2650   8D8A             
2651   8D8A 84              LDA  XH                         ; A == row#?
2652   8D8B 2A              STA  UL                         ; 
2653   8D8C FD A5 77 D1     LDA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $28==40col
2654   8D90 B7 28           CPI  A,$28                      ; 
2655   8D92 89 01           BZR  BR_8D95                    ; A <> $28, if not 40col skip
2656   8D94 60              INC  UL                         ; 
2657   8D95             
2658   8D95             BR_8D95:
2659   8D95 FD DA           ADR  Y                          ; Y = Y + A + Carry. Increase Y by one row
2660   8D97 88 04           LOP  UL,BR_8D95                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
2661   8D99                                                 ; U is # rows, loops through all rows?
2662   8D99 04              LDA  XL                         ; # col?
2663   8D9A FD DA           ADR  Y                          ; Y = Y + A + Carry
2664   8D9C             
2665   8D9C             BR_89DC:
2666   8D9C FD 2A           POP  U                          ; 
2667   8D9E FD 0A           POP  X                          ; 
2668   8DA0 FD 8A           POP  A                          ; 
2669   8DA2 9A              RTN                             ; Done
2670   8DA3             
2671   8DA3             BR_8DA3:
2672   8DA3 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2673   8DA6 9E 0C           BCH  BR_89DC                    ; $8D9C
2674   8DA8             ;% LB_xxxx END
2675   8DA8             ;------------------------------------------------------------------------------------------------------------
2676   8DA8             
2677   8DA8             
2678   8DA8             
2679   8DA8             ;------------------------------------------------------------------------------------------------------------
2680   8DA8             ; $8DA8 - CRTC_INIT: Called by table init vector
2681   8DA8             ; Called from 
2682   8DA8             ; Arguments: 
2683   8DA8             ; Outputs: 
2684   8DA8             ; RegMod: 
2685   8DA8             ;------------------------------------------------------------------------------------------------------------
2686   8DA8             ;% LB_CRTC_INIT START
2687   8DA8             CRTC_INIT:
2688   8DA8 68 00           LDI  UH,$00                     ; X = $8EA1 from INIT, loop from $8EA1 to $8EB2
2689   8DAA 6A 11           LDI  UL,$11                     ; U = $0011
2690   8DAC             
2691   8DAC             BR_8DAC:
2692   8DAC A4              LDA  UH                         ; $74,$50,$5C,$35,$1C,$00,$19,$1A,$00,$0A,$68,$00,$70,$00,$00,$00,$00,$00
2693   8DAD FD AE 78 00     STA  #(CRTCTRL)                 ; $7800 - Register select mode?
2694   8DB1 45              LIN  X                          ; A = (X) then INC X. Copies from CONFIG_TBL to CRTC registers
2695   8DB2 FD AE 78 01     STA  #(CRTCTRL + $01)           ; $7801 - Write to register
2696   8DB6 FD 60           INC  UH                         ; 
2697   8DB8 88 0E           LOP  UL,BR_8DAC                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
2698   8DBA B5 50           LDI  A,$50                      ; 
2699   8DBC FD AE 77 D1     STA  #(VIDEORAM + $07D1)        ; $77D1 - 40/80 col mode. $50==80col, $19==40col
2700   8DC0 9A              RTN                             ; 
2701   8DC1             ;% LB_CRTC_INIT END
2702   8DC1             ;------------------------------------------------------------------------------------------------------------
2703   8DC1             
2704   8DC1             
2705   8DC1             
2706   8DC1             ;------------------------------------------------------------------------------------------------------------
2707   8DC1             ; $8DC1 - TBL_INIT: Called by table init vector
2708   8DC1             ; Called from 
2709   8DC1             ; Arguments: 
2710   8DC1             ; Outputs: 
2711   8DC1             ; RegMod: 
2712   8DC1             ;------------------------------------------------------------------------------------------------------------
2713   8DC1             ;% LB_TBL_INIT START
2714   8DC1             TBL_INIT: ; 
2715   8DC1 FD 88           PSH  X                          ; Save registers
2716   8DC3 FD 98           PSH  Y                          ; 
2717   8DC5 FD A8           PSH  U                          ; 
2718   8DC7 A5 E2 B7        LDA  (WAIT4KB + $74)            ; $E2B7 = $F4 (A01 ROM), $CC (A03/4 ROM)
2719   8DCA B7 CC           CPI  A,$CC                      ; Is this ROM A03/4?
2720   8DCC 89 02           BZR  BR_8DD0                    ; If A <> $CC, i.e. A01 ROM
2721   8DCE 8E 33           BCH  BR_8E03                    ; If A = $CC
2722   8DD0             
2723   8DD0             BR_8DD0:                            ; A01 ROM Init
2724   8DD0 4A 1A           LDI  XL,$1A                     ; Length of text                    
2725   8DD2 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info 
2726   8DD4 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2727   8DD6 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2728   8DD9 BE E6 69        SJP  (BCMD_BEEP_STD)            ; Emit standard beep
2729   8DDC 8E 0C           BCH  BR_8DEA                    ;
2730   8DDE             
2731   8DDE             BR_8DDE:
2732   8DDE 4A 1A           LDI  XL,$1A                     ; Length of text
2733   8DE0 68 93           LDI  UH,HB(IWS_SPLASH)          ; $93 - Prints IWS contact info
2734   8DE2 6A 6D           LDI  UL,LB(IWS_SPLASH)          ; $6D
2735   8DE4 BE ED 3B        SJP  (TEXTUREG_XL)              ; $ED38 - Outputs text from U-Reg. XL = number of characters
2736   8DE7 BE E6 69        SJP  (BCMD_BEEP_STD)            ; Emit standard beep
2737   8DEA             
2738   8DEA             BR_8DEA:
2739   8DEA BE E2 43        SJP  (WAIT4KB)                  ; Waiting for character input from keyboard. Accumulator=character
2740   8DED B7 0E           CPI  A,$0E                      ; $0E is not a key
2741   8DEF 8B 03           BZS  BR_8DF4                    ; If A==$0E
2742   8DF1 BA 8D F8        JMP  BR_8DF8                    ; If A<>$0E
2743   8DF4             
2744   8DF4             BR_8DF4:
2745   8DF4 91 18           BCR  BR_8DDE                    ; If A<$0E loop back to character output, don't think this will ever be true
2746   8DF6 8E 02           BCH  BR_8DFA                    ; To exit
2747   8DF8             
2748   8DF8             BR_8DF8:
2749   8DF8 93 1C           BCS  BR_8DDE                    ; If A>$0E loop back to character output
2750   8DFA             
2751   8DFA             BR_8DFA:
2752   8DFA FD 2A           POP  U                          ; restore registers
2753   8DFC FD 1A           POP  Y                          ; 
2754   8DFE FD 0A           POP  X                          ; 
2755   8E00 BA 92 D6        JMP  ERR_27_EXIT                ; Exit where output error $1B from UH
2756   8E03             
2757   8E03             
2758   8E03             BR_8E03:                            ; ROM A03/4 Init path
2759   8E03 B5 00           LDI  A,$00                      ;
2760   8E05 AE 78 5D        STA  (KATAFLAGS)                ; Turn off Katakana mode?
2761   8E08 FD AE D4 00     STA  #($D400)                   ; Some HW register on IWS board?
2762   8E0C FD AE 77 F4     STA  #(VIDEORAM + $07F4)        ; $77F4
2763   8E10 BE 8D 41        SJP  (CLR_VID_RAM)              ; Clears video RAM and some set up
2764   8E13             
2765   8E13 B5 0F           LDI  A,$0F                      ;
2766   8E15 BE 90 6A        SJP  (COLOR_FILL)               ; $906A Fills screen with color $0F
2767   8E18             
2768   8E18 B5 00           LDI  A,$00                      ;
2769   8E1A BE 91 1A        SJP  (CLR_GRPH_RAM)             ; Clears some unknown RAM at #$3000
2770   8E1D             
2771   8E1D B5 55           LDI  A,$55                      ; 
2772   8E1F AE 79 D5        STA  (KYREPEAT)                 ; $79D5 Key repeat flag
2773   8E22 B5 01           LDI  A,$01                      ; 
2774   8E24 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
2775   8E28 48 8E           LDI  XH,HB(CONFIG_TBL + $12)    ; $8EA1
2776   8E2A 4A A1           LDI  XL,LB((CONFIG_TBL) + $12)  ; 
2777   8E2C BE 8D A8        SJP  (CRTC_INIT)                ; Initializes CRTC
2778   8E2F             
2779   8E2F B5 80           LDI  A,$80                      ; 
2780   8E31 FD AE 77 DA     STA  #(VIDEORAM + $07DA)        ; $77DA
2781   8E35 B5 07           LDI  A,$07                      ; 
2782   8E37 FD AE 77 DB     STA  #(VIDEORAM + $07DB)        ; $77DB
2783   8E3B             
2784   8E3B E9 79 D4 00     ANI  (KB_BYPASS),$00            ; $79D4 
2785   8E3F B5 81           LDI  A,HB(XCHR_INPUT)           ; $81 - Address of exernal character input routine (H)
2786   8E41 AE 78 5B        STA  (XCHRINPT_H)               ; $785B - External character input vector (H)
2787   8E44 B5 9E           LDI  A,LB(XCHR_INPUT)           ; $9E - Address of exernal character input routine (L)
2788   8E46 AE 78 5C        STA  (XCHRINPT_L)               ; $785C - External character input vector (L)
2789   8E49             
2790   8E49 FD E9 77 D7     ANI  #(VIDEORAM + $07D7),$00    ; $77D7
2790   8E4D 00 
2791   8E4E FD E9 77 D8     ANI  #(VIDEORAM + $07D8),$00    ; $77D8
2791   8E52 00 
2792   8E53             
2793   8E53 B5 55           LDI  A,$55                      ;
2794   8E55 AE 79 D4        STA  (KB_BYPASS) ; $79D4        ; Enable KB bypass
2795   8E58 FD 2A           POP  U                          ; restore registers
2796   8E5A FD 1A           POP  Y                          ; 
2797   8E5C FD 0A           POP  X                          ; 
2798   8E5E 9A              RTN                             ; Done
2799   8E5F             ;% LB_TBL_INIT END
2800   8E5F             ;------------------------------------------------------------------------------------------------------------
2801   8E5F             
2802   8E5F             
2803   8E5F             
2804   8E5F             ;------------------------------------------------------------------------------------------------------------
2805   8E5F             ; $8E5F - Y2_VIDRAM: Reset Y to point to Video RAM -> $7000
2806   8E5F             ; Called from: $84E6, $8D47, $8D76, $8DA3, $8E5F, $8E86
2807   8E5F             ; Arguments: 
2808   8E5F             ; Outputs: 
2809   8E5F             ; RegMod: 
2810   8E5F             ;------------------------------------------------------------------------------------------------------------
2811   8E5F             ;% LB_Y2_VIDRAM START
2812   8E5F             Y2_VIDRAM: 
2813   8E5F 58 70           LDI  YH,HB(VIDEORAM)            ; $70  - video RAM
2814   8E61 5A 00           LDI  YL,LB(VIDEORAM)            ; $00 
2815   8E63 9A              RTN
2816   8E64             ;% LB_Y2_VIDRAM END
2817   8E64             ;------------------------------------------------------------------------------------------------------------
2818   8E64             
2819   8E64             
2820   8E64             
2821   8E64             ;------------------------------------------------------------------------------------------------------------
2822   8E64             ; $8E64 CL_SCR - CLear SCReen 
2823   8E64             ; Called from 
2824   8E64             ; Arguments: 
2825   8E64             ; Outputs: 
2826   8E64             ; RegMod: 
2827   8E64             ;------------------------------------------------------------------------------------------------------------
2828   8E64             ;% LB_CL_SCR START
2829   8E64             CL_SCR:
2830   8E64 FD 98           PSH  Y                          ; 
2831   8E66 BE 8E 86        SJP  (VID2CLR)                  ; $8E86 - Sets Color RAM address based on video RAM?
2832   8E69 B5 00           LDI  A,$00                      ;
2833   8E6B 8E 0B           BCH  BR_8E78                    ; $8E78
2834   8E6D             
2835   8E6D             BR_8E6B:                            ; Dead code?
2836   8E6D FD 98           PSH  Y                          ;
2837   8E6F BE 8E 86        SJP  (VID2CLR)                  ; $8E86 - Sets Color RAM address based on video RAM?
2838   8E72 F9              REC                             ; REset Carry
2839   8E73 B3 08           ADI  A,$08                      ; A = A + $08
2840   8E75 18              STA  YH                         ; 
2841   8E76 B5 F0           LDI  A,$F0                      ; 
2842   8E78             
2843   8E78             BR_8E78:
2844   8E78 68 07           LDI  UH,$07                     ; Size of Video RAM?
2845   8E7A 6A FF           LDI  UL,$FF                     ; U == $07FF
2846   8E7C             
2847   8E7C             BR_8E7C:
2848   8E7C BE 8D 5E        SJP  (CLR_VIDRAMPAGE)           ; $8D5E
2849   8E7F FD 62           DEC  UH                         ; 
2850   8E81 93 07           BCS  BR_8E7C                    ; $8E7C
2851   8E83 FD 1A           POP  Y                          ;
2852   8E85 9A              RTN                             ;
2853   8E86             ;% LB_CL_SCR END
2854   8E86             ;------------------------------------------------------------------------------------------------------------
2855   8E86             
2856   8E86             
2857   8E86             
2858   8E86             ;------------------------------------------------------------------------------------------------------------
2859   8E86             ; $8E86 VID2CLR - Sets Color RAM address based on video RAM?
2860   8E86             ; Called from: CL_SCR:$8E66, CL_SCR:$8E6F
2861   8E86             ; Arguments: 
2862   8E86             ; Outputs: 
2863   8E86             ; RegMod: 
2864   8E86             ;------------------------------------------------------------------------------------------------------------
2865   8E86             ;% LB_VID2CLR START
2866   8E86             VID2CLR:
2867   8E86 BE 8E 5F        SJP  (Y2_VIDRAM)                ; $8E5F - Sets Yreg to point to Video RAM
2868   8E89 94              LDA  YH                         ; A = $70
2869   8E8A F1              AEX                             ; A = $07, High nibble & low nibble swapped
2870   8E8B DF              DEC  A                          ; A = $06
2871   8E8C F1              AEX                             ; A = $60, Accumulator High nibble & low nibble swapped
2872   8E8D 18              STA  YH                         ; Y = $6000, Color RAM
2873   8E8E 9A              RTN                             ; Done
2874   8E8F             ;% LB_VID2CLR END
2875   8E8F             ;------------------------------------------------------------------------------------------------------------
2876   8E8F             
2877   8E8F             
2878   8E8F             
2879   8E8F             ;------------------------------------------------------------------------------------------------------------
2880   8E8F             ; $8E8F ~ $8EEA - Pair of bytes ,address?
2881   8E8F             ; Called from: JMP_843B:$8472, JMP_843B:$8474, BR_8604:$86A3, BR_8604:$86A5, TBL_INIT:$8E28, TBL_INIT:$8E2A
2882   8E8F             ; Arguments: 
2883   8E8F             ; Outputs: 
2884   8E8F             ; RegMod: 
2885   8E8F             ;------------------------------------------------------------------------------------------------------------
2886   8E8F             ;% LB_xxxx START
2887   8E8F             CONFIG_TBL: ; 8E8F
2888   8E8F 3B 28 30 74     .BYTE  $3B,$28,$30,$74,$1C,$00,$19,$1A
2888   8E93 1C 00 19 1A 
2889   8E97 00 0A 68 00     .BYTE  $00,$0A,$68,$00,$70,$00,$00,$00
2889   8E9B 70 00 00 00 
2890   8E9F 00 00 74 50     .BYTE  $00,$00,$74,$50,$5C,$35,$1C,$00
2890   8EA3 5C 35 1C 00 
2891   8EA7 19 1A 00 0A     .BYTE  $19,$1A,$00,$0A,$68,$00,$70,$00
2891   8EAB 68 00 70 00 
2892   8EAF 00 00 00 00     .BYTE  $00,$00,$00,$00,$52,$55,$4E,$50
2892   8EB3 52 55 4E 50 
2893   8EB7 52 4F 52 45     .BYTE  $52,$4F,$52,$45,$53,$45,$52,$56
2893   8EBB 53 45 52 56 
2894   8EBF 45 20 45 42     .BYTE  $45,$20,$45,$42,$45,$4E,$45,$3A
2894   8EC3 45 4E 45 3A 
2895   8EC7 28 43 29 20     .BYTE  $28,$43,$29,$20,$62,$79,$20,$49
2895   8ECB 62 79 20 49 
2896   8ECF 6E 67 2E 42     .BYTE  $6E,$67,$2E,$42,$75,$65,$72,$6F
2896   8ED3 75 65 72 6F 
2897   8ED7 20 57 2E 53     .BYTE  $20,$57,$2E,$53,$70,$65,$69,$64
2897   8EDB 70 65 69 64 
2898   8EDF 65 6C           .BYTE  $65,$6C
2899   8EE1             ;% LB_xxxx END
2900   8EE1             ;------------------------------------------------------------------------------------------------------------
2901   8EE1             
2902   8EE1             
2903   8EE1             
2904   8EE1             ;------------------------------------------------------------------------------------------------------------
2905   8EE1             ; $8EE1 - MONITOR
2906   8EE1             ; Called from 
2907   8EE1             ; Arguments: 
2908   8EE1             ; Outputs: 
2909   8EE1             ; RegMod: 
2910   8EE1             ;------------------------------------------------------------------------------------------------------------
2911   8EE1             ;% LB_MONITOR START
2912   8EE1             MONITOR:
2913   8EE1 BA 92 D6        JMP ERR_27_EXIT                    ; $92D6
2914   8EE4             ;% LB_MONITOR END
2915   8EE4             ;------------------------------------------------------------------------------------------------------------
2916   8EE4             
2917   8EE4             
2918   8EE4             
2919   8EE4             ;------------------------------------------------------------------------------------------------------------
2920   8EE4             ; $8EE4 VCURSOR - This function specifies the current vertical cursor position
2921   8EE4             ; Called from 
2922   8EE4             ; Arguments: 
2923   8EE4             ; Outputs: 
2924   8EE4             ; RegMod: 
2925   8EE4             ;------------------------------------------------------------------------------------------------------------
2926   8EE4             ;% LB_VCURSOR START
2927   8EE4             VCURSOR:
2928   8EE4 A5 77 4E        LDA  (STRING_VARS + $FE)        ; $774E in DISPLAY BUFFER, Y cursor position 
2929   8EE7 DF              DEC  A                          ; 
2930   8EE8 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2931   8EEB             ;% LB_VCURSOR END
2932   8EEB             ;------------------------------------------------------------------------------------------------------------
2933   8EEB             
2934   8EEB             
2935   8EEB             
2936   8EEB             ;------------------------------------------------------------------------------------------------------------
2937   8EEB             ; $8EEB VPCURSOR - Specifies the vertical light pen cursor position.
2938   8EEB             ; Called from: 
2939   8EEB             ; Arguments: 
2940   8EEB             ; Outputs: 
2941   8EEB             ; RegMod: 
2942   8EEB             ;------------------------------------------------------------------------------------------------------------
2943   8EEB             ;% LB_VPCURSOR START
2944   8EEB             VPCURSOR: ; 
2945   8EEB B5 10           LDI  A,$10                      ; 
2946   8EED FD AE 78 00     STA  #(CRTCTRL)                 ; #$7800 Light Pen H(V) register
2947   8EF1 FD A5 78 01     LDA  #(CRTCTRL + $01)           ; #$7801
2948   8EF5 FD AE 77 F6     STA  #(VIDEORAM + $07F6)        ; #$77F6 Light pen vertical cursor position?
2949   8EF9 DF              DEC  A                          ; 
2950   8EFA BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2951   8EFD             ;% LB_VPCURSOR END
2952   8EFD             ;------------------------------------------------------------------------------------------------------------
2953   8EFD             
2954   8EFD             
2955   8EFD             
2956   8EFD             ;------------------------------------------------------------------------------------------------------------
2957   8EFD             ; $8EFD - HCURSOR: This function specifies the current horizontal cursor position
2958   8EFD             ; Usage: CURSOR HCURSOR*+ 10,0
2959   8EFD             ; Called from: 
2960   8EFD             ; Arguments:  
2961   8EFD             ; Outputs: 
2962   8EFD             ; RegMod: 
2963   8EFD             ;------------------------------------------------------------------------------------------------------------
2964   8EFD             ;% LB_HCURSOR START
2965   8EFD             HCURSOR:
2966   8EFD A5 77 4F        LDA  (STRING_VARS + $FF)        ; $774F in DISPLAY BUFFER, X cursor position
2967   8F00 DF              DEC  A                          ; 
2968   8F01 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2969   8F04             ;% LB_HCURSOR END
2970   8F04             ;------------------------------------------------------------------------------------------------------------
2971   8F04             
2972   8F04             
2973   8F04             
2974   8F04             ;------------------------------------------------------------------------------------------------------------
2975   8F04             ; $8F04 - HPCURSOR: Specifies the horizontal light pen cursor position
2976   8F04             ; Called from 
2977   8F04             ; Arguments: 
2978   8F04             ; Outputs: A, XL, Y
2979   8F04             ; RegMod: 
2980   8F04             ;------------------------------------------------------------------------------------------------------------
2981   8F04             ;% LB_HPCURSOR START
2982   8F04             HPCURSOR:
2983   8F04 00              SBC  XL                         ; A = A - XL. Subtract with Carry
2984   8F05 11              SBC  (Y)                        ; A = A - (Y). Subtract with Carry  (ME0)    
2985   8F06 FD AE 78 00     STA  #(CRTCTRL)                 ; #$7800
2986   8F0A FD A5 78 01     LDA  #(CRTCTRL + $01)           ; #$7801
2987   8F0E FD AE 77 F5     STA  #(VIDEORAM + $07F5)        ; #$77F5 Light pen horizontal cursor position
2988   8F12 DF              DEC  A                          ;
2989   8F13 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
2990   8F16             ;% LB_HPCURSOR END
2991   8F16             ;------------------------------------------------------------------------------------------------------------
2992   8F16             
2993   8F16             
2994   8F16             
2995   8F16             ;------------------------------------------------------------------------------------------------------------
2996   8F16             ; $8F16 LIST - 
2997   8F16             ; USAGE: 
2998   8F16             ; Called from: 
2999   8F16             ; Arguments: Y - Y-Reg points to address of 1st command to be processed in program line
3000   8F16             ; Outputs: 
3001   8F16             ; RegMod: 
3002   8F16             ;------------------------------------------------------------------------------------------------------------
3003   8F16             ;% LB_LIST START
3004   8F16             LIST:
3005   8F16 A5 76 4F        LDA  (DISP_BUFF + $4F)          ; $764F
3006   8F19 B9 07           ANI  A,$07                      ; Keep bits 0,1,2
3007   8F1B BB 20           ORI  A,$20                      ; Set bit 5
3008   8F1D AE 76 4F        STA  (DISP_BUFF + $4F)          ; 
3009   8F20 15              LDA  (Y)                        ; Y-Reg points to address of 1st command to be processed in program line
3010   8F21 B7 0D           CPI  A,$0D                      ; CR = EOL
3011   8F23 89 02           BZR  BR_8F27                    ; A <> $0D, if not CR then look for secret PV code
3012   8F25 8E 1F           BCH  BR_8F46                    ; A == $0D, go on to LIST as normal
3013   8F27             
3014   8F27             BR_8F27:
3015   8F27 B7 50           CPI  A,$50                      ; 'P'
3016   8F29 89 08           BZR  BR_8F33                    ; A <> $50
3017   8F2B             
3018   8F2B 54              INC  Y                          ; 
3019   8F2C 15              LDA  (Y)                        ; Next command to be processed
3020   8F2D B7 0D           CPI  A,$0D                      ; CR = EOL
3021   8F2F 89 02           BZR  BR_8F33                    ; A <> $0D
3022   8F31 8E 21           BCH  BR_8F54                    ; A == $0D
3023   8F33             
3024   8F33             BR_8F33:
3025   8F33 B7 56           CPI  A,$56                      ; 'V'
3026   8F35 89 09           BZR  BR_8F40                    ; A <> $56
3027   8F37             
3028   8F37 54              INC  Y                          ; 
3029   8F38 15              LDA  (Y)                        ; Next command to be processed
3030   8F39 B7 0D           CPI  A,$0D                      ; CR = EOL
3031   8F3B 89 03           BZR  BR_8F40                    ; A <> $0D
3032   8F3D BA 92 D6        JMP  ERR_27_EXIT                ; A == $0D
3033   8F40             
3034   8F40             BR_8F40:
3035   8F40 BA C9 6F        JMP  BCMD_LIST + 1              ; $C96F
3036   8F43             
3037   8F43             
3038   8F43             JMP_8F43: ; VLISTALL from TXTADDR_TBL
3039   8F43 BA 80 00        JMP  B_TBL_8000                 ; $8000 - seems like a hack to take up bytes
3040   8F46             
3041   8F46             
3042   8F46             BR_8F46:
3043   8F46 BE 90 8E        SJP  (LIST_OK)                  ; $908E - is Listing OK? RET back here if YES.
3044   8F49 CC              VEJ  (CC) \ ABYTL(ROM_ST_H)     ; $7861 (CC) Loads X-Reg with address from memory
3044   8F4A 61          
3045   8F4B B5 FF           LDI  A,$FF                      ; 
3046   8F4D 86              CPA  XH                         ; 
3047   8F4E 89 04           BZR  BR_8F54                    ; A <> XH
3048   8F50             
3049   8F50 CC              VEJ  (CC) \ ABYTL(BASPRG_ST_H)  ; $7865 (CC) Loads X-Reg with address from memory
3049   8F51 65          
3050   8F52 8E 02           BCH  BR_8F56                    ; $8F56
3051   8F54             
3052   8F54             BR_8F54:
3053   8F54 CC              VEJ  (CC) \ ABYTL(BASPRG_EDT_H) ; $7869 (CC) Loads X-Reg with address from memory
3053   8F55 69          
3054   8F56             
3055   8F56             BR_8F56:
3056   8F56 05              LDA  (X)                        ; A == 1st byte of BASIC program
3057   8F57 B7 FF           CPI  A,$FF                      ; 
3058   8F59 89 01           BZR  BR_8F5C                    ; A <> $FF (a program is in memory?)
3059   8F5B E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3060   8F5C             
3061   8F5C             BR_8F5C:
3062   8F5C B5 55           LDI  A,$55                      ; 
3063   8F5E FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; $77D9 - BASIC program resident?
3064   8F62 A5 78 71        LDA  (WAIT_CFG)                 ; WAIT setting
3065   8F65 B7 00           CPI  A,$00                      ; 
3066   8F67 89 0D           BZR  BR_8F76                    ; A <> $00
3067   8F69 B5 02           LDI  A,$02                      ; A == $00 so set it to $02
3068   8F6B AE 78 71        STA  (WAIT_CFG)                 ; WAIT setting
3069   8F6E B5 00           LDI  A,$00                      ; 
3070   8F70 AE 78 72        STA  (WAIT_CTR_H)               ; WAIT time counter (H)
3071   8F73 AE 78 73        STA  (WAIT_CTR_L)               ; WAIT time counter (L)
3072   8F76             
3073   8F76             BR_8F76:
3074   8F76 B5 03           LDI  A,$03                      ; 
3075   8F78 FD CA           ADR  X                          ; X = X + A + Carry
3076   8F7A CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
3076   8F7B A6          
3077   8F7C             
3078   8F7C             BR_8F7C:
3079   8F7C 46              DEC  X                          ; 
3080   8F7D 46              DEC  X                          ; 
3081   8F7E BE D2 D0        SJP  (XFRLINE2INBUF)            ; $D2D0 - Transfer line pointed to by X-Reg to Input Buffer
3082   8F81 B5 14           LDI  A,$14                      ; Bit 0: The input buffer was temporarily stored. 
3083   8F83                                                 ; A system message or a reserve text is shown in the display.
3084   8F83                                                 ; Bit 6: The display program shows from (Y-Reg)
3085   8F83 AE 78 80        STA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
3086   8F86 BE E8 CA        SJP  (PRGMDISP)                 ; Display program.
3087   8F89 B5 02           LDI  A,$02                      ; 
3088   8F8B FD AE F0 0B     STA  #(PC1500_IF_REG)           ; #$F00B - Set at the rising edge of PB7 input (BREAK)
3089   8F8F BE 81 9E        SJP  (XCHR_INPUT)               ; $819E - Check for input from external char routine
3090   8F92 F4              VEJ  (F4) \ AWRD(WAIT_CTR_H)    ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3090   8F93 78 72       
3091   8F95             
3092   8F95             BR_8F95:
3093   8F95 FD A8           PSH  U                          ; 
3094   8F97             
3095   8F97             BR_8F97:
3096   8F97 38              NOP                             ;
3097   8F98 38              NOP                             ;
3098   8F99 88 04           LOP  UL,BR_8F97                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
3099   8F9B FD 2A           POP  U                          ;
3100   8F9D 88 0A           LOP  UL,BR_8F95                 ; UL = UL - 1, loop back 'e' if Borrow Flag not set
3101   8F9F 6C 00           CPI  UH,$00                     ; 
3102   8FA1 8B 04           BZS  BR_8FA7                    ; UH == $00
3103   8FA3 FD 62           DEC  UH                         ; 
3104   8FA5 9E 12           BCH  BR_8F95                    ; $8F95
3105   8FA7             
3106   8FA7             BR_8FA7:
3107   8FA7 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
3108   8FAA B7 20           CPI  A,$20                      ; Space
3109   8FAC 89 02           BZR  BR_8FB0                    ; A <> $20
3110   8FAE 9E 09           BCH  BR_8FA7                    ; $8FA7
3111   8FB0             
3112   8FB0             BR_8FB0:
3113   8FB0 BE E4 2C        SJP  (KEY2ASCII)                ; Return ASCII code of key pressed in Accumulator. If no key: C=1.
3114   8FB3 B7 0B           CPI  A,$0B                      ; A <> $0B
3115   8FB5 89 08           BZR  BR_8FBF                    ; $8FBF
3116   8FB7 B5 99           LDI  A,$99                      ; 
3117   8FB9 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; BASIC Program resident?
3118   8FBD 8E 51           BCH  BR_9010                    ; $9010
3119   8FBF             
3120   8FBF             BR_8FBF:
3121   8FBF FD A5 F0 0A     LDA  #(PC1500_MSK_REG)          ; 
3122   8FC3 B9 20           ANI  A,$20                      ; Clear all but Bit 5, PB7 (BREAK)
3123   8FC5 B7 20           CPI  A,$20                      ; Did PB7 generate int?
3124   8FC7 89 0E           BZR  BR_8FD7                    ; A <> $20
3125   8FC9 B5 00           LDI  A,$00                      ; 
3126   8FCB AE 78 B5        STA  (ERR_LINE_L)               ; 
3127   8FCE FD E9 77 DF     ANI  #(VIDEORAM + $07DF),$00    ; Clear unknown register
3127   8FD2 00 
3128   8FD3 BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
3129   8FD6 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3130   8FD7             
3131   8FD7             BR_8FD7:
3132   8FD7 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
3133   8FDB DD              INC  A                          ; 
3134   8FDC FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
3135   8FE0 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6 (CC) Loads X-Reg with address from memory
3135   8FE1 A6          
3136   8FE2 44              INC  X                          ; 
3137   8FE3 44              INC  X                          ; 
3138   8FE4 05              LDA  (X)                        ; 
3139   8FE5 FD CA           ADR  X                          ; 
3140   8FE7 44              INC  X                          ; 
3141   8FE8 47              LDE  X                          ; A = (X) then X = X - 1
3142   8FE9 B7 FF           CPI  A,$FF                      ; 
3143   8FEB 89 02           BZR  BR_8FEF                    ; A <> $FF
3144   8FED 8E 21           BCH  BR_9010                    ; $9010
3145   8FEF             
3146   8FEF             BR_8FEF:
3147   8FEF CA              VEJ  (CA) \ ABYTL(SRCH_ADD_H)   ; $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
3147   8FF0 A6          
3148   8FF1 B5 04           LDI  A,$04                      ; 
3149   8FF3 FD CA           ADR  X                          ; 
3150   8FF5 FD 5A           STX  Y                          ; 
3151   8FF7 FD A5 77 D9     LDA  #(VIDEORAM + $07D9)        ; BASIC Program resident?
3152   8FFB B7 55           CPI  A,$55                      ; $55 means program resident?
3153   8FFD 89 0F           BZR  BR_900E                    ; A <> $55
3154   8FFF B5 00           LDI  A,$00                      ; 
3155   9001 FD AE 77 D9     STA  #(VIDEORAM + $07D9)        ; 
3156   9005 FD A5 77 D2     LDA  #(VIDEORAM + $07D2)        ; $77D2 - text row
3157   9009 DF              DEC  A                          ; 
3158   900A FD AE 77 D2     STA  #(VIDEORAM + $07D2)        ; $77D2 - text row
3159   900E              
3160   900E             BR_900E:
3161   900E 9E 94           BCH  BR_8F7C                    ; $8F7C
3162   9010             
3163   9010             BR_9010:
3164   9010 CC              VEJ  (CC) \ ABYTL(SRCH_ADD_H)   ; $78A6 (CC) Loads X-Reg with address from memory
3164   9011 A6          
3165   9012 B5 04           LDI  A,$04                      ; 
3166   9014 FD CA           ADR  X                          ; X = X + A + Carry
3167   9016 FD 5A           STX  Y                          ; 
3168   9018 CA              VEJ  (CA) \ ABYTL(ERR_ADD_H)    ; $78A6 Transfer 16-bit value from X-Reg to memory page 7BXX
3168   9019 B2          
3169   901A B5 01           LDI  A,$01                      ; 
3170   901C AE 78 B5        STA  (ERR_LINE_L)               ; 
3171   901F BE DC 32        SJP  ($DC32)                    ; Stores 8 bytes from address X-Reg to AR-X.
3172   9022 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3173   9023             ;% LB_LIST END
3174   9023             ;------------------------------------------------------------------------------------------------------------
3175   9023             
3176   9023             
3177   9023             
3178   9023             ;------------------------------------------------------------------------------------------------------------
3179   9023             ; $9023 BACKGR - Changes background color
3180   9023             ; Usage: BACKGR BG color,Chr color 
3181   9023             ; Called from 
3182   9023             ; Arguments: Color parameters: 0=Black 1=Blue 2=Green 3=Healing blue 4-Red 5=Violet 6=Yellow 7:white
3183   9023             ; Outputs: 
3184   9023             ; RegMod: 
3185   9023             ;------------------------------------------------------------------------------------------------------------
3186   9023             ;% LB_BACKGR START
3187   9023             BACKGR:
3188   9023 DE              VEJ  (DE) \ ABRF(BR_9081)       ; (DE) Calculate formula Y-Reg points to, save result in AR-X. 
3188   9024 5C          
3189   9025                                                 ; Branch on error
3190   9025 D0              VEJ  (D0) \                     ; First argument. (D0) Convert AR-X to Int save to U-Reg,
3190   9026             
3191   9026 10                   ABYT($10) \ ABRF(BR_9081)  ;  D1 range check (25), if exceeded branch
3191   9027 59          
3192   9028 B7 10           CPI  A,$10                      ;
3193   902A 81 03           BCR  BR_902F                    ; If A < $10
3194   902C 68 13           LDI  UH,$13                     ; If A == 10
3195   902E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3196   902F             
3197   902F             BR_902F:
3198   902F 24              LDA  UL                         ; U result of VEJ(D0) above
3199   9030 F1              AEX                             ; Accumulator High nibble & low nibble swapped
3200   9031 FD AE 77 DD     STA  #(VIDEORAM + $7DD)         ; $77DD - Background color register
3201   9035 C0              VEJ  (C0)                       ; (C0) Load next character / token to U-Reg
3202   9036 6E 0D           CPI  UL,$0D                     ; CR, i.e. EOL
3203   9038 89 0B           BZR  BR_9045                    ; A <> $0D then we check for second argument
3204   903A             
3205   903A FD A5 77 DD     LDA  #(VIDEORAM + $7DD)         ; $77DD - Background color register
3206   903E B7 0A           CPI  A,$0A                      ; Not sure why the CPI ORI combo accomplish
3207   9040 BB 0F           ORI  A,$0F                      ; 
3208   9042 2A              STA  UL                         ; 
3209   9043 8E 20           BCH  BR_9065                    ; $9065 - Color fill then exit
3210   9045             
3211   9045             BR_9045:
3212   9045 B7 2C           CPI  A,$2C                      ; ','
3213   9047 89 1B           BZR  BR_9064                    ; A <> $2C, error exit
3214   9049             
3215   9049 DE              VEJ  (DE) \ ABRF(BR_9081)       ; (DE) Calculate formula Y-Reg points to, save result in AR-X. 
3215   904A 36          
3216   904B                                                 ; Branch on error
3217   904B D0              VEJ  (D0) \                     ; (D0) Convert AR-X to Integer save to U-Reg. D1 range check, 
3217   904C             
3218   904C 10                  ABYT($10) \ ABRF(BR_9081)   ; if exceeded branch
3218   904D 33          
3219   904E B7 10           CPI  A,$10                      ; 
3220   9050 81 03           BCR  BR_9055                    ; A < $10
3221   9052             
3222   9052 68 13           LDI  UH,$13                     ; 
3223   9054 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3224   9055             
3225   9055             BR_9055:
3226   9055 FD AE 77 DE     STA  #(VIDEORAM + $07DE)        ; $77DE Character color
3227   9059 FD AB 77 DD     ORA  #(VIDEORAM + $07DD)        ; $77DD Background color
3228   905D 2A              STA  UL                         ; 
3229   905E FD AE 77 DC     STA  #(VIDEORAM + $07DC)        ; $77DC - combined FG | BG colors?
3230   9062 8E 01           BCH  BR_9065                    ; $9065 - Back to BASIC
3231   9064             
3232   9064             BR_9064:
3233   9064 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3234   9065             
3235   9065             BR_9065:
3236   9065 24              LDA  UL                         ;
3237   9066 BE 90 6A        SJP  (COLOR_FILL)               ; $906A
3238   9069 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3239   906A             ;------------------------------------------------------------------------------------------------------------
3240   906A             
3241   906A             
3242   906A             
3243   906A             ;------------------------------------------------------------------------------------------------------------
3244   906A             ; $906A COLOR_FILL - Fills Color RAM with value passed in A
3245   906A             ; Called from: TBL_INIT:8E15, BACKGR:9066
3246   906A             ; Arguments: A, color to fill
3247   906A             ; Outputs: 
3248   906A             ; RegMod: 
3249   906A             ;------------------------------------------------------------------------------------------------------------
3250   906A             ;% LB_COLOR_FILL START
3251   906A             COLOR_FILL:
3252   906A 48 60           LDI  XH,$60                     ; IWS $6000~$67FF color RAM
3253   906C 4A 00           LDI  XL,$00                     ; 
3254   906E 68 07           LDI  UH,$07                     ; Loop counter, U == $07D0
3255   9070 6A D0           LDI  UL,$D0                     ; $6000~$67D0
3256   9072             
3257   9072             BR_9072:
3258   9072 FD 0E           STA  #(X)                       ; Store color in A to Color RAM
3259   9074 44              INC  X                          ; Inc address pointer
3260   9075 66              DEC  U                          ; Dec counter
3261   9076 6C 00           CPI  UH,$00                     ; 
3262   9078 89 05           BZR  BR_907F                    ; If UH <> $00. HB of count
3263   907A 6E 00           CPI  UL,$00                     ; 
3264   907C 89 01           BZR  BR_907F                    ; If UL <> $00. LB of count
3265   907E 9A              RTN                             ; Done
3266   907F             
3267   907F             BR_907F:
3268   907F 9E 0F           BCH  BR_9072                    ; $9072
3269   9081             
3270   9081             BR_9081:
3271   9081 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3272   9082             ;% LB_COLOR_FILL END
3273   9082             ;------------------------------------------------------------------------------------------------------------
3274   9082             
3275   9082             
3276   9082             
3277   9082             ;------------------------------------------------------------------------------------------------------------
3278   9082             ; $9082 ERN - function, returns the error number that occurred last
3279   9082             ; Usage: ERN
3280   9082             ; Called from: 
3281   9082             ; Arguments: 
3282   9082             ; Outputs: 
3283   9082             ; RegMod: A
3284   9082             ;------------------------------------------------------------------------------------------------------------
3285   9082             ;% LB_ERN START
3286   9082             ERN:
3287   9082 A5 78 9B        LDA  (ERL)                      ;
3288   9085 BA D9 E4        JMP  BCMD_LEN + $0D             ; $D9E4
3289   9088             ;% LB_ERN END
3290   9088             ;------------------------------------------------------------------------------------------------------------
3291   9088             
3292   9088             
3293   9088             
3294   9088             ;------------------------------------------------------------------------------------------------------------
3295   9088             ; $9088 - ERL: function, returns the line number in which the last error occurred
3296   9088             ; Usage: ERL
3297   9088             ; Called from: 
3298   9088             ; Arguments: 
3299   9088             ; Outputs: 
3300   9088             ; RegMod: 
3301   9088             ;------------------------------------------------------------------------------------------------------------
3302   9088             ;% LB_ERL START
3303   9088             IWS_ERL:
3304   9088 F4              VEJ  (F4) \ AWRD(ERR_LINE_H)    ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3304   9089 78 B4       
3305   908B BA DA 6C        JMP  BCMD_MEM + $0F             ; $DA6C
3306   908E             ;% LB_ERL END
3307   908E             ;------------------------------------------------------------------------------------------------------------
3308   908E             
3309   908E             
3310   908E             
3311   908E             ;------------------------------------------------------------------------------------------------------------
3312   908E             ; $908E LIST_OK - Finds start of program in ROM or RAM?
3313   908E             ; Called from: BR_8F46 (program LIST support)
3314   908E             ; Arguments: 
3315   908E             ; Outputs: Returns if LIST OK, else return to interpretor.
3316   908E             ; RegMod: A, X
3317   908E             ;------------------------------------------------------------------------------------------------------------
3318   908E             ;% LB_xxxx START
3319   908E             LIST_OK:
3320   908E A5 78 60        LDA  (ST_ROM_MOD)               ; $7860 - Start of ROM in module (H)
3321   9091 08              STA  XH                         ; 
3322   9092 B7 FF           CPI  A,$FF                      ; 
3323   9094 89 04           BZR  BR_909A                    ; Branch if A <> $FF, i.e. ROM module present.
3324   9096             
3325   9096 A5 78 63        LDA  (RAM_ST_H)                 ; $7863 - Start of RAM pointer (H)
3326   9099 08              STA  XH                         ; 
3327   909A             
3328   909A             BR_909A:
3329   909A 4A 00           LDI  XL,$00                     ; XH is either HB or start of RAM or ROM
3330   909C 05              LDA  (X)                        ; A = (X)  (ME0)
3331   909D B7 55           CPI  A,$55                      ; Looking for start of BASIC table / header?
3332   909F 89 08           BZR  BR_90A9                    ; Branch if A <> $55
3333   90A1             
3334   90A1 4A 07           LDI  XL,$07                     ; BYTE 7 - 0xFF Prevent LIST, 0x00 allow list
3335   90A3 05              LDA  (X)                        ; A = (X)  (ME0)
3336   90A4 B7 00           CPI  A,$00                      ; Allow listing or not
3337   90A6 89 01           BZR  BR_90A9                    ; Branch if A <> $00
3338   90A8             
3339   90A8 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3340   90A9             
3341   90A9             BR_90A9:
3342   90A9 9A              RTN                             ; Done
3343   90AA             ;% LB_xxxx END
3344   90AA             ;------------------------------------------------------------------------------------------------------------
3345   90AA             
3346   90AA             
3347   90AA             
3348   90AA             ;------------------------------------------------------------------------------------------------------------
3349   90AA             ; $90AA SLEEP - Turns off computer without initializing the printer when turning it back on.
3350   90AA             ; Called from: 
3351   90AA             ; Arguments: YH
3352   90AA             ; Outputs: 
3353   90AA             ; RegMod: A
3354   90AA             ;------------------------------------------------------------------------------------------------------------
3355   90AA             ;% LB_SLEEP START
3356   90AA             SLEEP:
3357   90AA 94              LDA  YH                         ; Y-Reg points to next command to interpret
3358   90AB B7 7B           CPI  A,$7B                      ;
3359   90AD 8B 04           BZS  BR_90B3                    ; A == $7B, skip sleep if YH = $7B. Why?
3360   90AF             
3361   90AF BE E3 3F        SJP  (AUTO_OFF)                 ; Power down
3362   90B2 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3363   90B3             
3364   90B3             BR_90B3: 
3365   90B3 AA 78 4F        LDI  S,(CPU_STACK + $4F)        ; Load stack pointer
3366   90B6 BE CF CC        SJP  (INITSYSADDR)              ; ($CFCC) Init Sys Addr, turn off trace
3367   90B9 BE D0 2B        SJP  (INBUF_CLRINIT)            ; $D02B Clear IN_BUF w/$0D
3368   90BC B5 3E           LDI  A,$3E                      ; 
3369   90BE 1E              STA  (Y)                        ; Store A in address pointed to by Y
3370   90BF E9 78 8A EF     ANI  (BREAKPARAM),$EF           ; Clears Bit 4 (pp) = (pp) & n (ME0)
3371   90C3 E9 76 4E FE     ANI  (DISP_BUFF + $4E),$FE      ; Clears Bit 0
3372   90C7 B5 00           LDI  A,$00                      ; Reset Display Parameter
3373   90C9 AE 78 80        STA  (DISPARAM)                 ; $7880 - Display Parameter: determines display at READY
3374   90CC AE 78 9C        STA  (CURR_LINE_H)              ; Current line number (H)
3375   90CF AE 78 9D        STA  (CURR_LINE_L)              ; Current line number (L)
3376   90D2 BE E8 CA        SJP  (PRGMDISP)                 ; Display program.
3377   90D5 48 CA           LDI  XH,HB(EDITOR+$12)          ; $CA Sets address to return to?
3378   90D7 4A 92           LDI  XL,LB(EDITOR+$12)          ; $92
3379   90D9 FD 88           PSH  X                          ;
3380   90DB BA E3 3F        JMP  AUTO_OFF                   ; $E33F
3381   90DE             ;% LB_SLEEP END
3382   90DE             ;------------------------------------------------------------------------------------------------------------
3383   90DE             
3384   90DE             
3385   90DE             
3386   90DE             ;------------------------------------------------------------------------------------------------------------
3387   90DE             ; $90DE KEY_REPEAT_ON - If keyboard bypass set repeat key flag?
3388   90DE             ; Called from: XCHR_INPUT:$823E
3389   90DE             ; Arguments: 
3390   90DE             ; Outputs: 
3391   90DE             ; RegMod: 
3392   90DE             ;------------------------------------------------------------------------------------------------------------
3393   90DE             ;% LB_KEY_REPEAT_ON START
3394   90DE             KEY_REPEAT_ON:
3395   90DE FD C8           PSH  A                          ; 
3396   90E0 A5 79 D5        LDA  (KYREPEAT)                 ; $79D5 - Key repeat flag
3397   90E3 B7 55           CPI  A,$55                      ; Check for $55 bypass flag
3398   90E5 89 07           BZR  BR_90EE                    ; A <> $55 . If not, skip
3399   90E7             
3400   90E7 FD 8A           POP  A                          ; If repeat turned on
3401   90E9 EB 7B 0E 40     ORI  (CURS_CTRL),$40            ; $7B0E - Cursor Control Parameter, sets key repeat flag
3402   90ED 9A              RTN                             ;
3403   90EE             
3404   90EE             BR_90EE:
3405   90EE FD 8A           POP  A                          ; 
3406   90F0 9A              RTN                             ; Done
3407   90F1             ;% LB_KEY_REPEAT_ON END
3408   90F1             ;------------------------------------------------------------------------------------------------------------
3409   90F1             
3410   90F1             
3411   90F1             
3412   90F1             ;------------------------------------------------------------------------------------------------------------
3413   90F1             ; $90F1 REPKEY - Autorepeat of the keyboard is turned on or off.
3414   90F1             ; Called from:
3415   90F1             ; Arguments: ON, OFF
3416   90F1             ; Outputs: 
3417   90F1             ; RegMod: 
3418   90F1             ;------------------------------------------------------------------------------------------------------------
3419   90F1             ;% LB_REPKEY START
3420   90F1             REPKEY:
3421   90F1 C2              VEJ  (C2) \ 
3421   90F2             
3422   90F2 F1 9C               AWRD($F19C) \ ABRF(BR_90FB) ; Checks for 'ON' token. If not found, branch. BCMD_LOG ($F165+?) \ $90FB
3422   90F4 06          
3423   90F5 B5 55           LDI  A,$55                      ; 
3424   90F7             
3425   90F7             BR_90F7:
3426   90F7 AE 79 D5        STA  (KYREPEAT)                 ; $79D5 Key repeat flag
3427   90FA E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3428   90FB             
3429   90FB             BR_90FB:
3430   90FB 56              DEC  Y                          ;
3431   90FC 56              DEC  Y                          ;
3432   90FD C2              VEJ  (C2) \ 
3432   90FE             
3433   90FE F1 9E               AWRD($F19E) \ ABRF(BR_9105) ; Checks for 'OFF" token. If not found branch. DIVISION ($F084) \ $9105
3433   9100 04          
3434   9101 B5 00           LDI  A,$00                      ;
3435   9103 9E 0E           BCH  BR_90F7                    ; $90F7
3436   9105             
3437   9105             BR_9105:
3438   9105 54              INC  Y                          ; 
3439   9106 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3440   9107             ;% LB_REPKEY END
3441   9107             ;------------------------------------------------------------------------------------------------------------
3442   9107             
3443   9107             
3444   9107             
3445   9107             ;------------------------------------------------------------------------------------------------------------
3446   9107             ; GCLS - Display custom graphics character on whole screen. You can define your own characters from 
3447   9107             ;        address &5000. A character is represented by a dot matrix of 10x8 dots.
3448   9107             ; Usage: GCLS Num.Exp
3449   9107             ; Called from: 
3450   9107             ; Arguments: Num.Exp (graphics layer)
3451   9107             ; Outputs: 
3452   9107             ; RegMod: 
3453   9107             ;------------------------------------------------------------------------------------------------------------
3454   9107             ;% LB_GCLS START
3455   9107             GCLS:
3456   9107 15              LDA  (Y)                        ; Y is first token/char in line to be processed
3457   9108 B7 0D           CPI  A,$0D                      ; CR, i.e. EOL?
3458   910A 89 04           BZR  BR_9110                    ; A <> $0D
3459   910C             
3460   910C B5 00           LDI  A,$00                      ; 
3461   910E 8E 06           BCH  BR_9116                    ; IF EOL was found
3462   9110             
3463   9110             BR_9110:
3464   9110 DE              VEJ  (DE) \ ABRF(BR_914B)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3464   9111 39          
3465   9112 D0              VEJ  (D0) \ 
3465   9113             
3466   9113 10                  ABYT($10) \ ABRF(BR_914B)   ; (D0) Convert AR-X to Int & load in U-Reg. Range check by D1 (25), if exceeded branch
3466   9114 36          
3467   9115 24              LDA  UL                         ;
3468   9116             
3469   9116             BR_9116:
3470   9116 BE 91 1A        SJP  (CLR_GRPH_RAM)             ; $911A
3471   9119 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3472   911A             ;% LB_GCLS END
3473   911A             ;------------------------------------------------------------------------------------------------------------
3474   911A             
3475   911A             
3476   911A             
3477   911A             ;------------------------------------------------------------------------------------------------------------
3478   911A             ; $911A CLR_GRPH_RAM - Clears Graphics RAM
3479   911A             ; Called from: 
3480   911A             ; Arguments: 
3481   911A             ; Outputs: 
3482   911A             ; RegMod: 
3483   911A             ;------------------------------------------------------------------------------------------------------------
3484   911A             ;% LB_CLR_GRPH_RAM START
3485   911A             CLR_GRPH_RAM:
3486   911A B5 55           LDI  A,$55                      ; 
3487   911C FD AE 30 00     STA  #($3000)                   ; *** Check for graphics RAM
3488   9120 FD A7 30 00     CPA  #($3000)                   ; ***
3489   9124 89 08           BZR  BR_912E                    ; If A <> $55 then #($3000) does not exist. Option?
3490   9126             
3491   9126 68 07           LDI  UH,$07                     ; Next 4 lines don't seem to do anything
3492   9128 6A D0           LDI  UL,$D0                     ; Loop counter
3493   912A 48 68           LDI  XH,HB(GRAPHRAM)            ; $68 - HB Graphics RAM
3494   912C 4A 00           LDI  XL,LB(GRAPHRAM)            ; $00 - LB Graphics RAM
3495   912E             
3496   912E             BR_912E:
3497   912E B5 00           LDI  A,$00                      ; 
3498   9130 FD AE 30 00     STA  #($3000)                   ; ***
3499   9134 68 3E           LDI  UH,$3E                     ; Why set U,X again after just set above?
3500   9136 6A 81           LDI  UL,$81                     ; U = $3E81
3501   9138 48 30           LDI  XH,$30                     ; X = $3000
3502   913A 4A 00           LDI  XL,$00                     ; 
3503   913C             
3504   913C             BR_913C:
3505   913C FD 0E           STA  #(X)                       ; Zeros out some RAM?? Graphics RAM mirrored at ME1 $3000?
3506   913E 44              INC  X                          ;
3507   913F 66              DEC  U                          ; 
3508   9140 6C 00           CPI  UH,$00                     ;
3509   9142 89 05           BZR  BR_9149                    ; UH <> $00
3510   9144             
3511   9144 6E 00           CPI  UL,$00                     ; 
3512   9146 89 01           BZR  BR_9149                    ; UL <> $00
3513   9148             
3514   9148 9A              RTN                             ; Done
3515   9149             
3516   9149             BR_9149:
3517   9149 9E 0F           BCH  BR_913C                    ; $913C
3518   914B             
3519   914B             BR_914B:
3520   914B E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3521   914C             ;% LB_CLR_GRPH_RAM END
3522   914C             ;------------------------------------------------------------------------------------------------------------
3523   914C             
3524   914C             
3525   914C             
3526   914C             ;------------------------------------------------------------------------------------------------------------
3527   914C             ; $914C DEC - 
3528   914C             ; Called from: 
3529   914C             ; Arguments: 
3530   914C             ; Outputs: 
3531   914C             ; RegMod: 
3532   914C             ;------------------------------------------------------------------------------------------------------------
3533   914C             ;% LB_DEC START
3534   914C             DEC:
3535   914C BA 92 D6        JMP  ERR_27_EXIT                   ; Jumps to an exit
3536   914F             ;% LB_END 
3537   914F             ;------------------------------------------------------------------------------------------------------------
3538   914F             
3539   914F             
3540   914F             
3541   914F             ;------------------------------------------------------------------------------------------------------------
3542   914F             ; $914F GVCURSOR, GVPRINT, COLORV, EDIT, REPROG, TESTV, ***DOES NOTHING!
3543   914F             ; GVPRINT prints your defined characters at a specific position on the screen.
3544   914F             ; GVPRINT &6A00,4,1 From address &6A00, 4 characters are written that were defined at &5010
3545   914F             ; Called from: 
3546   914F             ; Arguments: 
3547   914F             ; Outputs: 
3548   914F             ; RegMod: 
3549   914F             ;------------------------------------------------------------------------------------------------------------
3550   914F             ;% LB_GVCURSOR START
3551   914F             GVCURSOR:
3552   914F E2              VEJ  (E2)                       ; (E2) - Return to BASIC interpreter: Y-Reg points to command or line end
3553   9150             ;% LB_GVCURSOR END
3554   9150             ;------------------------------------------------------------------------------------------------------------
3555   9150             
3556   9150             
3557   9150             
3558   9150             ;------------------------------------------------------------------------------------------------------------
3559   9150             ; $9150 KEYRAM - Poke a SJP into RAM as vector to KB input in ROM
3560   9150             ; Called from: XCHR_INPUT:$823B
3561   9150             ; Arguments: 
3562   9150             ; Outputs: 
3563   9150             ; RegMod: 
3564   9150             ;------------------------------------------------------------------------------------------------------------
3565   9150             ;% LB_KEYRAM START
3566   9150             KEYRAM:
3567   9150 A5 79 D6        LDA  ($79D6)                    ; *** unused section of PC-1500 used as flag for?
3568   9153 B7 55           CPI  A,$55                      ; *** another mystery bypass
3569   9155 89 02           BZR  BR_9159                    ; A <> $55
3570   9157 8E 1D           BCH  BR_9176                    ; $9176
3571   9159             
3572   9159             BR_9159:
3573   9159 B5 BE           LDI  A,$BE                      ; POKES 'SJP $E267' into CE-158 registers to use as jump vector in ME0
3574   915B                                                 ; $E267 - Entering a Character Using the Keyboard 
3575   915B AE 78 50        STA  (OUTSTAT_REG)              ; $7850 CE-158 OUTSTAT value (handshaking)
3576   915E B5 E2           LDI  A,$E2                      ; $E267 in WAIT4KB ($E243)
3577   9160 AE 78 51        STA  (CONSOLE_REG)              ; $7851 CE-158 OUTSTAT value (handshaking)
3578   9163 B5 67           LDI  A,$67                      ; 
3579   9165 AE 78 52        STA  (CONSOLE2)                 ; $7852 CE-158 Console 1 (//)
3580   9168             
3581   9168             BR_9168:
3582   9168 B5 9A           LDI  A,$9A                      ; POKEs 'RTN' in two addresses. 
3583   916A AE 78 53        STA  (CE158_UNDEF1)             ; $7853
3584   916D B5 9A           LDI  A,$9A                      ;
3585   916F AE 78 54        STA  (CE158_UNDEF2)             ; $7854
3586   9172 BE 78 50        SJP  (OUTSTAT_REG)              ; Calls the code just poked in
3587   9175 9A              RTN                             ; Done
3588   9176             
3589   9176             BR_9176:
3590   9176 B5 BE           LDI  A,$BE                      ; POKEs 'SJP something' 
3591   9178 AE 78 50        STA  (OUTSTAT_REG)              ; &7850
3592   917B A5 78 56        LDA  (ZONE_REG)                 ; $7856
3593   917E AE 78 51        STA  (CONSOLE_REG)              ; $7851
3594   9181 A5 78 57        LDA  (SETDEV_REG)               ; $7857
3595   9184 AE 78 52        STA  (CONSOLE2)                 ; $7852
3596   9187 9E 21           BCH  BR_9168                    ; $9168
3597   9189             ;% LB_KEYRAM END
3598   9189             ;------------------------------------------------------------------------------------------------------------
3599   9189             
3600   9189             
3601   9189             
3602   9189             ;------------------------------------------------------------------------------------------------------------
3603   9189             ; $9189 xxxx - Scroll screen?
3604   9189             ; Called from 
3605   9189             ; Arguments: 
3606   9189             ; Outputs: 
3607   9189             ; RegMod: 
3608   9189             ;------------------------------------------------------------------------------------------------------------
3609   9189             ;% LB_xxxx START
3610   9189             JMP_9189:
3611   9189 48 77           LDI  XH,HB(VIDEORAM + $77F)     ; $777F IWS Video RAM area
3612   918B 4A 7F           LDI  XL,LB(VIDEORAM + $77F)     ; 
3613   918D 58 77           LDI  YH,HB(VIDEORAM + $7CF)     ; $77CF IWS Video RAM area
3614   918F 5A CF           LDI  YL,LB(VIDEORAM + $7CF)     ; 
3615   9191 68 07           LDI  UH,$07                     ; Loop counter?
3616   9193 6A 80           LDI  UL,$80                     ; U == $0780
3617   9195             
3618   9195             BR_9195:
3619   9195 FD 05           LDA  #(X)                       ; Moves block of video RAM
3620   9197 FD 1E           STA  #(Y)                       ; 
3621   9199 46              DEC  X                          ; 
3622   919A 56              DEC  Y                          ; 
3623   919B 66              DEC  U                          ; 
3624   919C 6C 00           CPI  UH,$00                     ; 
3625   919E 89 05           BZR  BR_91A5                    ; UH <> $00
3626   91A0             
3627   91A0 6E 00           CPI  UL,$00                     ; 
3628   91A2 89 01           BZR  BR_91A5                    ; UL <> $00
3629   91A4 9A              RTN                             ; 
3630   91A5             
3631   91A5             BR_91A5:
3632   91A5 9E 12           BCH  BR_9195                    ; $9195
3633   91A7             ;% LB_xxxx END
3634   91A7             ;------------------------------------------------------------------------------------------------------------
3635   91A7             
3636   91A7             
3637   91A7             
3638   91A7             ;------------------------------------------------------------------------------------------------------------
3639   91A7             ; $91A7 PRINT - Sharp Syntax
3640   91A7             ; Called from 
3641   91A7             ; Arguments: 
3642   91A7             ; Outputs: 
3643   91A7             ; RegMod: 
3644   91A7             ;------------------------------------------------------------------------------------------------------------
3645   91A7             ;% LB_PRINT START
3646   91A7             PRINT:
3647   91A7 C2              VEJ  (C2) \ 
3647   91A8             
3648   91A8 23                  ACHR($23) \ ABRF(BR_91B1)   ; Checks for '#' $23 char. If not found branch.
3648   91A9 07          
3649   91AA C2              VEJ  (C2) \ 
3649   91AB             
3650   91AB 2D                  ACHR($2D) \ ABRF(BR_91BB)   ; Checks for '-' $2D char. If not found branch.
3650   91AC 0E          
3651   91AD C6              VEJ  (C6)                       ; (C6) Correct program pointer
3652   91AE BA E4 EE        JMP  BCMD_PRINT + $03           ; $E4EE 
3653   91B1             
3654   91B1             BR_91B1:
3655   91B1 C6              VEJ  (C6)                       ; (C6) Correct program pointer
3656   91B2 D8              VEJ  (D8)                       ; (D8) Checks calculator mode
3657   91B3 89 03           BZR  BR_91B8                    ; Z <> $00 so program is not running
3658   91B5             
3659   91B5 BA E4 EB        JMP  BCMD_PRINT                 ; $E4EB
3660   91B8             
3661   91B8             BR_91B8:
3662   91B8 BA 8A 8B        JMP  JMP_8A8B                   ; Something to do with PRINT USING?
3663   91BB             
3664   91BB             BR_91BB:
3665   91BB C6              VEJ  (C6)                       ; (C6) Correct program pointer
3666   91BC DE              VEJ  (DE) \ ABRF(BR_91D2)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3666   91BD 14          
3667   91BE D0              VEJ  (D0) \ 
3667   91BF             
3668   91BF 80                  ABYT($80) \ ABRF(BR_91D2)   ; (D0) Convert AR-X to Integer & load in U-Reg. Range check by D1, if exceeded branch
3668   91C0 11          
3669   91C1 F4              VEJ  (F4) \ AWRD(BR_8803)       ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX
3669   91C2 88 03       
3670   91C4 6C 44           CPI  UH,$44                     ; 
3671   91C6 89 07           BZR  BR_91CF                    ; UH <> $44
3672   91C8             
3673   91C8 6E 49           CPI  UL,$49                     ; 
3674   91CA 89 03           BZR  BR_91CF                    ; UL <> $49
3675   91CC             
3676   91CC BA 88 F7        JMP  $88F7                      ; ***bug? seems to jump to middle of line
3677   91CF             
3678   91CF             BR_91CF:
3679   91CF 68 1B           LDI  UH,$1B                     ; 
3680   91D1 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3681   91D2             
3682   91D2             BR_91D2:
3683   91D2 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3684   91D3             ;% LB_PRINT END
3685   91D3             ;------------------------------------------------------------------------------------------------------------
3686   91D3             
3687   91D3             
3688   91D3             
3689   91D3             ;------------------------------------------------------------------------------------------------------------
3690   91D3             ; $91D3 MODE - module box MB4, MB8, turns corresponding module on and off.
3691   91D3             ; Called from: 
3692   91D3             ; Arguments: (Param.),  (Param.) M1, M2, Mn
3693   91D3             ; Outputs: 
3694   91D3             ; RegMod: 
3695   91D3             ;------------------------------------------------------------------------------------------------------------
3696   91D3             ;% LB_MODE START
3697   91D3             MODE:
3698   91D3 FD E9 77 E0     ANI  #(VIDEORAM + $07E0),$00    ; $77E0
3698   91D7 00 
3699   91D8             
3700   91D8             BR_91D8:
3701   91D8 C2              VEJ  (C2) \ 
3701   91D9             
3702   91D9 4D                  ACHR($4D) \ ABRF(BR_9219)   ; Checks for $4D 'M' char. If found, a branch.
3702   91DA 3E          
3703   91DB BE 91 EF        SJP  (BR_91EF)                  ; $91EF
3704   91DE 15              LDA  (Y)                        ; 
3705   91DF B7 2C           CPI  A,$2C                      ; 
3706   91E1 89 03           BZR  BR_91E6                    ; A <> $2C
3707   91E3             
3708   91E3 54              INC  Y                          ; 
3709   91E4 9E 0E           BCH  BR_91D8                    ; $91D8
3710   91E6             
3711   91E6             BR_91E6:
3712   91E6 FD A5 77 E0     LDA  #(VIDEORAM + $07E0)        ; 
3713   91EA FD AE D8 00     STA  #($D800)                   ; ***IWS??
3714   91EE E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3715   91EF             
3716   91EF             
3717   91EF             ;  Embedded subroutine START
3718   91EF             BR_91EF:
3719   91EF DE              VEJ  (DE) \ ABRF(BR_9218)       ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X., if error branch
3719   91F0 27          
3720   91F1 D0              VEJ  (D0) \ 
3720   91F2             
3721   91F2 10                  ABYT($10) \ ABRF(BR_9218)   ; (D0) Convert AR-X to Integer & load in U-Reg. Area check by D1, if exceeded branch
3721   91F3 24          
3722   91F4 6C 01           CPI  UH,$01                     ; 
3723   91F6 81 03           BCR  BR_91FB                    ; UH < $01
3724   91F8             
3725   91F8 68 13           LDI  UH,$13                     ; 
3726   91FA E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3727   91FB             
3728   91FB             BR_91FB:
3729   91FB 6E 09           CPI  UL,$09                     ; 
3730   91FD 89 03           BZR  BR_9202                    ; UL <> $09
3731   91FF             
3732   91FF 68 13           LDI  UH,$13                     ; 
3733   9201 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3734   9202             
3735   9202             BR_9202: 
3736   9202 6E 00           CPI  UL,$00                     ; 
3737   9204 89 02           BZR  BR_9208                    ; UL <> $00
3738   9206             
3739   9206 6A 09           LDI  UL,$09                     ; 
3740   9208             
3741   9208             BR_9208:
3742   9208 62              DEC  UL                         ; 
3743   9209 B5 00           LDI  A,$00                      ; 
3744   920B FB              SEC                             ; 
3745   920C             
3746   920C             BR_920C:
3747   920C DB              ROL                             ; 
3748   920D 88 03           LOP  UL,BR_920C                 ; $920C
3749   920F FD AB 77 E0     ORA  #(VIDEORAM + $07E0)        ; $77E0
3750   9213 FD AE 77 E0     STA  #(VIDEORAM + $07E0)        ; 
3751   9217 9A              RTN
3752   9218             
3753   9218             BR_9218:
3754   9218 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3755   9219             ; Embedded subroutine END
3756   9219             
3757   9219             
3758   9219             BR_9219:
3759   9219 56              DEC  Y                          ; 
3760   921A 15              LDA  (Y)                        ; 
3761   921B CD 04           VMJ  ($04) \ ABRF(BR_921F)      ; (04) Checks whether end of command sequence or end of line
3761   921D 01          
3762   921E E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
3763   921F             
3764   921F             BR_921F:
3765   921F B7 22           CPI  A,$22                      ; 
3766   9221 89 02           BZR  BR_9225                    ; A <> $22
3767   9223 9E 4D           BCH  BR_91D8                    ; $91D8
3768   9225             
3769   9225             BR_9225:
3770   9225 C2              VEJ  (C2) \ 
3770   9226             
3771   9226 53                  ACHR($53) \ ABRF(BR_9232)   ; Checks for $53 char. If found, a branch.
3771   9227 0A          
3772   9228 DE              VEJ  (DE) \ ABRF($9233)         ; (DE) Calculates formula pointed to by Y-Reg, passes the result to AR-X. 
3772   9229 09          
3773   922A D0              VEJ  (D0) \ 
3773   922B             
3774   922B 08                  ABYT($08) \ ABRF(BR_9233)   ; (D0) Convert AR-X to Integer & load in U-Reg. Area check by D1, if exceeded branch
3774   922C 06          
3775   922D 24              LDA  UL                         ; 
3776   922E FD CC           ATP                             ; 
3777   9230 9E 5A           BCH  BR_91D8                    ; $91D8
3778   9232             
3779   9232             BR_9232:
3780   9232 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3781   9233             
3782   9233             BR_9233:
3783   9233 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
3784   9234             ;% LB_MODE END
3785   9234             ;------------------------------------------------------------------------------------------------------------
3786   9234             
3787   9234             
3788   9234             
3789   9234             ;------------------------------------------------------------------------------------------------------------
3790   9234             ; $9234 SAVE - SAVE file, data
3791   9234             ; Called from: 
3792   9234             ; Arguments: C, CM, Q, QM
3793   9234             ; Outputs: 
3794   9234             ; RegMod: 
3795   9234             ;------------------------------------------------------------------------------------------------------------
3796   9234             ;% LB_SAVE START
3797   9234             SAVE:
3798   9234 15              LDA  (Y)                        ; Y is next token/char to process in line
3799   9235 54              INC  Y                          ; INC Y
3800   9236 CD 34           VMJ  ($34) \ ABYT($04) \        ; (34) Syntax check and multiple branching
3800   9238 04          
3800   9239             
3801   9239 43                  ABYT($43) \ ABRF(DO_SAVE) \ ; If A==$43 'C' branch to DO_SAVE
3801   923A 3C          
3801   923B             
3802   923B 46                  ABYT($46) \ ABRF(BR_9287) \ ; If A==$46 'F' branch to BR_9287
3802   923C 4A          
3802   923D             
3803   923D 51                  ABYT($51) \ ABRF(BR_9297) \ ; If A==$51 'Q' branch to BR_9297
3803   923E 58          
3803   923F             
3804   923F 44                  ABYT($44) \ ABRF(BR_929A) \ ; If A==$44 'D' branch to BR_929A
3804   9240 59          
3804   9241             
3805   9241 52                  ABYT($52) \ ABRF(BR_92B2)   ; If A==$52 'R' branch to BR_92B2
3805   9242 6F          
3806   9243 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
3807   9244             ;% LB_SAVE END
3808   9244             ;------------------------------------------------------------------------------------------------------------
3809   9244             
3810   9244             
3811   9244             
3812   9244             ;------------------------------------------------------------------------------------------------------------
3813   9244             ; $9244 LOAD - Load file or data
3814   9244             ; Called from:
3815   9244             ; Arguments: C or CM, or Q or QM
3816   9244             ; Outputs: 
3817   9244             ; RegMod: 
3818   9244             ;------------------------------------------------------------------------------------------------------------
3819   9244             ;% LB_LOAD START
3820   9244             LOAD:
3821   9244 15               LDA  (Y)                       ; Y is next token/char to process in line
3822   9245 54               INC  Y                         ; INC Y
3823   9246 CD 34            VMJ  ($34) \ ABYT($04) \       ; (34) Syntax check and multiple branching
3823   9248 04          
3823   9249             
3824   9249 43                  ABYT($43) \ ABRF(BR_9254) \ ; If A==$43 'C' branch to BR_9254
3824   924A 09          
3824   924B             
3825   924B 46                  ABYT($46) \ ABRF(BR_9264) \ ; If A==$46 'F' branch to BR_9264
3825   924C 17          
3825   924D             
3826   924D 51                  ABYT($51) \ ABRF(BR_9274) \ ; If A==$51 'Q' branch to BR_9274 
3826   924E 25          
3826   924F             
3827   924F 44                  ABYT($44) \ ABRF(BR_92A6) \ ; If A==$44 'D' branch to BR_92A6
3827   9250 55          
3827   9251             
3828   9251 52                  ABYT($52) \ ABRF(BR_92BE)   ; If A==$52 'R' branch to BR_92BE
3828   9252 6B          
3829   9253 E4               VEJ  (E4)                      ; (E4) Output Error 1 and return to the editor
3830   9254             
3831   9254             BR_9254:
3832   9254 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX ***CMT_PNAME $B800 CMT Periph name
3832   9255 B8 02       
3833   9257 6C 43           CPI  UH,$43                     ; 
3834   9259 89 07           BZR  BR_9262                    ; UH <> $43 'C'
3835   925B             
3836   925B 6E 4D           CPI  UL,$4D                     ; 
3837   925D 89 03           BZR  BR_9262                    ; UL <> $4D 'M'
3838   925F             
3839   925F BA B8 F9        JMP  CLOAD_150                  ; $B8F9 
3840   9262             
3841   9262             BR_9262:
3842   9262 8E 72           BCH  ERR_27_EXIT                   ; $92D6
3843   9264             
3844   9264             BR_9264:
3845   9264 F4              VEJ  (F4) \ AWRD($A805)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX *** PRINT_150 $A781
3845   9265 A8 05       
3846   9267 6C 4C           CPI  UH,$4C                     ;
3847   9269 89 07           BZR  BR_9272                    ; UH <> $4C L'
3848   926B             
3849   926B 6E 32           CPI  UL,$32                     ;
3850   926D 89 03           BZR  BR_9272                    ; UL <> $32 '2'
3851   926F             
3852   926F BA AD BB        JMP  GRAPH + $E8                ; $ADBB (CE150)
3853   9272             
3854   9272             BR_9272:
3855   9272 8E 62           BCH  ERR_27_EXIT                ; $92D6
3856   9274             
3857   9274             BR_9274:
3858   9274 BA 92 D6        JMP  ERR_27_EXIT                ; $92D6
3859   9277             ;% LB_LOAD END
3860   9277             ;------------------------------------------------------------------------------------------------------------
3861   9277             
3862   9277             
3863   9277             
3864   9277             
3865   9277             ;------------------------------------------------------------------------------------------------------------
3866   9277             ; $9277 DO_SAVE - Futher interrogates SAVE arguments
3867   9277             ; Called from: SAVE:$9239
3868   9277             ; Arguments: 
3869   9277             ; Outputs: 
3870   9277             ; RegMod: 
3871   9277             ;------------------------------------------------------------------------------------------------------------
3872   9277             ;% LB_xxxx START
3873   9277             DO_SAVE:
3874   9277 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX ***CMT Perips name $B800
3874   9278 B8 02       
3875   927A 6C 43           CPI  UH,$43                     ; 
3876   927C 89 07           BZR  BR_9285                    ; If UH <> $43 'C'
3877   927E             
3878   927E 6E 4D           CPI  UL,$4D                     ; 
3879   9280 89 03           BZR  BR_9285                    ; If UL <> $4D 'M'
3880   9282             
3881   9282 BA B8 A6        JMP  CSAVE_150                  ; $B8A6
3882   9285             
3883   9285             BR_9285:
3884   9285 8E 4F           BCH  ERR_27_EXIT                ; $92D6
3885   9287             ;% LB_xxxx END
3886   9287             ;------------------------------------------------------------------------------------------------------------
3887   9287             
3888   9287             
3889   9287             
3890   9287             ;------------------------------------------------------------------------------------------------------------
3891   9287             ; $9287 xxxx - CE-150 related
3892   9287             ; Called from:
3893   9287             ; Arguments: 
3894   9287             ; Outputs: 
3895   9287             ; RegMod: 
3896   9287             ;------------------------------------------------------------------------------------------------------------
3897   9287             ;% LB_xxxx START
3898   9287             BR_9287:
3899   9287 F4              VEJ  (F4) \ AWRD($A805)         ; (F4) Transfer 16-bit value from X-Reg to memory page 78XX *** PRINT_150 $A781
3899   9288 A8 05       
3900   928A 6C 4C           CPI  UH,$4C                     ; 
3901   928C 89 07           BZR  BR_9295                    ; If UH <> $4C 'L'
3902   928E             
3903   928E 6E 32           CPI  UL,$32                     ;
3904   9290 89 03           BZR  BR_9295                    ; If UL <> $32 '2'
3905   9292             
3906   9292 BA AB 8F        JMP  PENUPDOWN + $AC            ; $AB8F CE150 
3907   9295             
3908   9295             BR_9295:
3909   9295 8E 3F           BCH  ERR_27_EXIT                ; $92D6
3910   9297             
3911   9297             BR_9297:
3912   9297 BA 92 D6        JMP  ERR_27_EXIT                ; $92D6
3913   929A             ;% LB_xxxx END
3914   929A             ;------------------------------------------------------------------------------------------------------------
3915   929A             
3916   929A             
3917   929A             
3918   929A             ;------------------------------------------------------------------------------------------------------------
3919   929A             ; $929A xxxx - CE-150 related
3920   929A             ; Called from:
3921   929A             ; Arguments: 
3922   929A             ; Outputs: 
3923   929A             ; RegMod: 
3924   929A             ;------------------------------------------------------------------------------------------------------------
3925   929A             ;% LB_xxxx START
3926   929A             BR_929A:
3927   929A F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 
3927   929B A8 03       
3928   929D                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
3929   929D 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3930   929F 89 03           BZR  BR_92A4                    ; UH <> $44 'D'
3931   92A1 BA A8 F4        JMP  MOTDRV + $17               ; $A8F4 CE150 
3932   92A4             
3933   92A4             BR_92A4:
3934   92A4 8E 30           BCH  ERR_27_EXIT                ; $92D6
3935   92A6             ;% LB_xxxx END
3936   92A6             ;------------------------------------------------------------------------------------------------------------
3937   92A6             
3938   92A6             
3939   92A6             
3940   92A6             ;------------------------------------------------------------------------------------------------------------
3941   92A6             ; $92A6 xxxx - CE-150 related
3942   92A6             ; Called from: LOAD:$924F
3943   92A6             ; Arguments: 
3944   92A6             ; Outputs: 
3945   92A6             ; RegMod: 
3946   92A6             ;------------------------------------------------------------------------------------------------------------
3947   92A6             ;% LB_xxxx START
3948   92A6             BR_92A6:
3949   92A6 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 
3949   92A7 A8 03       
3950   92A9                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
3951   92A9 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3952   92AB 89 03           BZR  BR_92B0                    ; If A <> $44 'D'
3953   92AD BA A8 F1        JMP PRINT_150 + $170            ; $A8F1 CE150
3954   92B0             
3955   92B0             BR_92B0:
3956   92B0 8E 24           BCH  ERR_27_EXIT                ; $92D6 - Error exit
3957   92B2             ;% LB_xxxx END
3958   92B2             ;------------------------------------------------------------------------------------------------------------
3959   92B2             
3960   92B2             
3961   92B2             
3962   92B2             ;------------------------------------------------------------------------------------------------------------
3963   92B2             ; $92B2 xxxx - CE-150 related
3964   92B2             ; Called from: SAVE:$9241
3965   92B2             ; Arguments: 
3966   92B2             ; Outputs: 
3967   92B2             ; RegMod: 
3968   92B2             ;------------------------------------------------------------------------------------------------------------
3969   92B2             ;% LB_xxxx START
3970   92B2             BR_92B2:
3971   92B2 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803
3971   92B3 A8 03       
3972   92B5                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
3973   92B5 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3974   92B7 89 03           BZR  BR_92BC                    ; If A <> $44 'D'
3975   92B9 BA A8 EE        JMP  MOTDRV + $11               ; $A8EE CE150
3976   92BC             
3977   92BC             BR_92BC:
3978   92BC 8E 18           BCH  ERR_27_EXIT                ; $92D6 - Error exit
3979   92BE             ;% LB_xxxx END
3980   92BE             ;------------------------------------------------------------------------------------------------------------
3981   92BE             
3982   92BE             
3983   92BE             
3984   92BE             ;------------------------------------------------------------------------------------------------------------
3985   92BE             ; $92BE xxxx - CE-150 related
3986   92BE             ; Called from: LOAD:$9251
3987   92BE             ; Arguments: 
3988   92BE             ; Outputs: 
3989   92BE             ; RegMod: 
3990   92BE             ;------------------------------------------------------------------------------------------------------------
3991   92BE             ;% LB_xxxx START
3992   92BE             BR_92BE:
3993   92BE F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803
3993   92BF A8 03       
3994   92C1                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
3995   92C1 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
3996   92C3 89 03           BZR  BR_92C8                    ; If A <> $44 'D'
3997   92C5 BA A8 EB        JMP  MOTDRV + $0E               ; $A8EB CE150
3998   92C8             
3999   92C8             BR_92C8:
4000   92C8 8E 0C           BCH  ERR_27_EXIT                ; $92D6 - skips past duplicated code
4001   92CA F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803
4001   92CB A8 03       
4002   92CD                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
4003   92CD 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
4004   92CF 89 03           BZR  BR_92D4                    ; If A <> $44 'D'
4005   92D1 BA A8 E8        JMP  MOTDRV + $0B               ; $A8E8 CE150
4006   92D4             
4007   92D4             BR_92D4:
4008   92D4                 ;BCH  ERR_27_EXIT               ; $92D6  - Error exit
4009   92D4 9E 00           .BYTE $9E,$00                   ; asessembler calcualtes  wrong direction on 0 lenght branch
4010   92D6             ;% LB_xxxx END
4011   92D6             ;------------------------------------------------------------------------------------------------------------
4012   92D6             
4013   92D6             
4014   92D6             
4015   92D6             ;------------------------------------------------------------------------------------------------------------
4016   92D6             ; $92BE ERR_27_EXIT - Returns to BASIC with error code 27
4017   92D6             ; Called from:
4018   92D6             ; Arguments: 
4019   92D6             ; Outputs: 
4020   92D6             ; RegMod: UH
4021   92D6             ;------------------------------------------------------------------------------------------------------------
4022   92D6             ;% LB_ERR_27_EXIT START
4023   92D6             ERR_27_EXIT:
4024   92D6 68 1B           LDI  UH,$1B                     ; 
4025   92D8 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
4026   92D9             ;% LB_ERR_27_EXIT END
4027   92D9             ;------------------------------------------------------------------------------------------------------------
4028   92D9             
4029   92D9             
4030   92D9             
4031   92D9             ;------------------------------------------------------------------------------------------------------------
4032   92D9             ; $92D9 VERIFYQ - Compares cassette with memory (not implemented)
4033   92D9             ; Called from:
4034   92D9             ; Arguments: (expression)
4035   92D9             ; Outputs: 
4036   92D9             ; RegMod: 
4037   92D9             ;------------------------------------------------------------------------------------------------------------
4038   92D9             ;% LB_VERIFYQ START
4039   92D9             VERIFYQ:
4040   92D9 BA 92 D6        JMP  ERR_27_EXIT                   ; $92D6
4041   92DC             ;% LB_VERIFYQ END
4042   92DC             ;------------------------------------------------------------------------------------------------------------
4043   92DC             
4044   92DC             
4045   92DC             
4046   92DC             ;------------------------------------------------------------------------------------------------------------
4047   92DC             ; $92DC CHAIN - Loads a BASIC program under program control and starts it from the specified line
4048   92DC             ; Called from: 
4049   92DC             ; Arguments: 
4050   92DC             ; Outputs: 
4051   92DC             ; RegMod: 
4052   92DC             ;------------------------------------------------------------------------------------------------------------
4053   92DC             ;% LB_CHAIN START
4054   92DC             CHAIN:
4055   92DC 55              LIN  Y                          ; A = (Y) then INC Y
4056   92DD CD 34           VMJ  ($34) \ ABYT($01) \        ; (34) Syntax check and multiple branching
4056   92DF 01          
4056   92E0             
4057   92E0 43                  ABYT($43) \ ABRF(BR_92F5) \ ; If A==$43 'C' branch to BR_92F5
4057   92E1 13          
4057   92E2             
4058   92E2 51                  ABYT($51) \ ABRF(BR_9305)   ; If A==$51 'Q' branch to BR_9305
4058   92E3 21          
4059   92E4 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
4059   92E5 B8 02       
4060   92E7                                                 ; 3rd byte of CMT Periph name
4061   92E7 6C 43           CPI  UH,$43                     ; 'C'
4062   92E9 89 08           BZR  BR_92F3                    ; If UH <> $43
4063   92EB             
4064   92EB 6E 4D           CPI  UL,$4D                     ; 'M'
4065   92ED 89 04           BZR  BR_92F3                    ; If UL <> $4D
4066   92EF             
4067   92EF 56              DEC  Y                          ; 
4068   92F0 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
4069   92F3             
4070   92F3             BR_92F3:
4071   92F3 9E 1F           BCH  ERR_27_EXIT                ; $92D6
4072   92F5             
4073   92F5             BR_92F5:
4074   92F5 F4              VEJ  (F4) \ AWRD($B802)         ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
4074   92F6 B8 02       
4075   92F8                                                 ;  3rd byte of Periph name $B800
4076   92F8 6C 43           CPI  UH,$43                     ; 'C'
4077   92FA 89 07           BZR  BR_9303                    ; If UH <> $43
4078   92FC             
4079   92FC 6E 4D           CPI  UL,$4D                     ; 'M'
4080   92FE 89 03           BZR  BR_9303                    ; If UH <> $4D
4081   9300             
4082   9300 BA BB 6A        JMP  CHAIN_150                  ; $BB6A
4083   9303             
4084   9303             BR_9303:
4085   9303 9E 2F           BCH  ERR_27_EXIT                ; $92D6
4086   9305             
4087   9305             BR_9305:
4088   9305 BA 92 D6        JMP  ERR_27_EXIT                ; $92D6
4089   9308             ;% LB_CHAIN END
4090   9308             ;------------------------------------------------------------------------------------------------------------
4091   9308             
4092   9308             
4093   9308             
4094   9308             ;------------------------------------------------------------------------------------------------------------
4095   9308             ; KEY - Allows you to switch on a keyboard e.g. CE-153 or an optional large keyboard
4096   9308             ; KEY BEEP - Turn keep beep on or off
4097   9308             ; Usage: KEY ON(OFF) or KEY BEEP ON(OFF)
4098   9308             ; Called from:
4099   9308             ; Arguments: 
4100   9308             ; Outputs: 
4101   9308             ; RegMod: 
4102   9308             ;------------------------------------------------------------------------------------------------------------
4103   9308             ;% LB_KEY START
4104   9308             KEY:
4105   9308 C2              VEJ  (C2) \ 
4105   9309             
4106   9309 F1 82               AWRD($F182) \ ABRF(BR_9323) ; Checks for 'BEEP' token. If not found branch.
4106   930B 17          
4107   930C C2              VEJ  (C2) \ 
4107   930D             
4108   930D F1 9C               AWRD($F19C) \ ABRF(BR_9317) ; Checks for 'ON' token. If not found branch.
4108   930F 07          
4109   9310 B5 55           LDI  A,$55                      ; Set External KB flag
4110   9312 FD AE 77 E2     STA  #(VIDEORAM + $07E2)        ; $77E2  - External KB flag
4111   9316 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
4112   9317             
4113   9317             BR_9317:
4114   9317 C6              VEJ  (C6)                       ; (C6) Correct program pointer
4115   9318 C2              VEJ  (C2) \ 
4115   9319             
4116   9319 F1 9E               AWRD($F19E) \ ABRF(BR_9322) ; Checks for 'OFF' token. If not found branch.
4116   931B 06          
4117   931C FD E9 77 E2     ANI  #(VIDEORAM + $07E2),$00    ; External KB flag
4117   9320 00 
4118   9321 E2              VEJ  (E2)                       ; (E2) - BASIC interpreter: Y-Reg points to command or line end
4119   9322             
4120   9322             BR_9322:
4121   9322 E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
4122   9323             
4123   9323             BR_9323:
4124   9323 C6              VEJ  (C6)                       ; (C6) Correct program pointer
4125   9324 C2              VEJ  (C2) \ 
4125   9325             
4126   9325 F1 9C               AWRD($F19C) \ ABRF(BR_9339) ; Checks for 'ON' token. If not found branch.
4126   9327 11          
4127   9328 F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 
4127   9329 A8 03       
4128   932B                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
4129   932B 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
4130   932D 89 07           BZR  BR_9336                    ; If UH <> $44 'D'
4131   932F             
4132   932F 6E 49           CPI  UL,$49                     ;
4133   9331 89 03           BZR  BR_9336                    ; If UL <> $49 'I'
4134   9333             
4135   9333 BA A8 FD        JMP  MOTDRV + $20               ; $A8FD
4136   9336             
4137   9336             BR_9336:
4138   9336 68 1B           LDI  UH,$1B                     ; 
4139   9338 E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
4140   9339             
4141   9339             BR_9339:
4142   9339 C6              VEJ  (C6)                       ; (C6) Correct program pointer
4143   933A C2              VEJ  (C2) \ 
4143   933B             
4144   933B F1 9E               AWRD($F19E) \ ABRF(BR_934F) ; Checks for 'OFF' token. If not found branch.
4144   933D 11          
4145   933E F4              VEJ  (F4) \ AWRD($A803)         ; (PRINT_150+$82) $A803 
4145   933F A8 03       
4146   9341                                                 ; (F4) Loads U-Reg with 16-bit value from address of data bytes (D1 D2).
4147   9341 6C 44           CPI  UH,$44                     ; Checking version of CE-150 ROM or presence of CE-150?
4148   9343 89 07           BZR  BR_934C                    ; If UH <> $44 'D'
4149   9345             
4150   9345 6E 49           CPI  UL,$49                     ; 
4151   9347 89 03           BZR  BR_934C                    ; If UL <> $49 'I'
4152   9349             
4153   9349 BA A8 FA        JMP  MOTDRV + $1D               ; $A8FA
4154   934C             
4155   934C             BR_934C: 
4156   934C 68 1B           LDI  UH,$1B                     ; 
4157   934E E0              VEJ  (E0)                       ; (E0) Returns error message if UH is not 00
4158   934F             
4159   934F             BR_934F:
4160   934F E4              VEJ  (E4)                       ; (E4) Output Error 1 and return to the editor
4161   9350             ;% LB_KEY END
4162   9350             ;------------------------------------------------------------------------------------------------------------
4163   9350             
4164   9350             
4165   9350             
4166   9350             ;------------------------------------------------------------------------------------------------------------
4167   9350             ; $9350 TRACE_IWS - Jumps to stored vector if flag set
4168   9350             ; Usage: 
4169   9350             ; Called from:
4170   9350             ; Arguments: 
4171   9350             ; Outputs: 
4172   9350             ; RegMod: 
4173   9350             ;------------------------------------------------------------------------------------------------------------
4174   9350             ;% LB_xxxx START
4175   9350             TRACE_IWS:                          ; Jumped to from TXTADDR_TBL and BASIC table
4176   9350 FD C8           PSH  A                          ; 
4177   9352 FD A5 77 F0     LDA  #(VIDEORAM + $07F0)        ; $77F0 - Unknown flag
4178   9356 B7 55           CPI  A,$55                      ; 
4179   9358 89 0E           BZR  BR_9368                    ; A <> $55
4180   935A             
4181   935A FD A5 77 F1     LDA  #(VIDEORAM + $07F1)        ; $77F1 - Unknown jump vector HB
4182   935E 08              STA  XH                         ; 
4183   935F FD A5 77 F2     LDA  #(VIDEORAM + $07F2)        ; $77F2 - Unknown jump vector LB
4184   9363 0A              STA  XL                         ; 
4185   9364 FD 8A           POP  A                          ; 
4186   9366 FD 5E           STX  P                          ; Store X to Program Counter. a.k.a. JUMP
4187   9368             
4188   9368             BR_9368:
4189   9368 FD 8A           POP  A                          ; 
4190   936A BA C4 AF        JMP  TRCROUTINE                 ; $C4AF
4191   936D             ;% LB_xxxx END
4192   936D             ;------------------------------------------------------------------------------------------------------------
4193   936D             
4194   936D             
4195   936D             
4196   936D             ;------------------------------------------------------------------------------------------------------------
4197   936D             ; $936D-$9394 - IWS Splash screen text
4198   936D             ;------------------------------------------------------------------------------------------------------------
4199   936D             ;% LB_IWS_SPLASH START
4200   936D             IWS_SPLASH:
4201   936D 54 45 4C 2E     .TEXT  "TEL. 071"
4201   9371 20 30 37 31 
4202   9375 36 31 2F 37     .TEXT  "61/79021"
4202   9379 39 30 32 31 
4203   937D 20 61 6E 72     .TEXT  " anrufen"
4203   9381 75 66 65 6E 
4204   9385 20 21 48 4F     .TEXT  " !HO V.1"
4204   9389 20 56 2E 31 
4205   938D 2E 30 20 38     .TEXT  ".0 859  "
4205   9391 35 39 20 20 
4206   9395             ;% LB_IWS_SPLASH END
4207   9395             ;------------------------------------------------------------------------------------------------------------
4208   9395             
4209   9395             
4210   9395             
4211   9395             ;------------------------------------------------------------------------------------------------------------
4212   9395             ; $9395 - $93FF Filler
4213   9395             ;------------------------------------------------------------------------------------------------------------
4214   9395             ;% LB_IWS_xxxx START
4215   9395             FILLER_9395: ;$9395
4216   9395 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4216   9399 00 00 00 00 
4217   939D 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4217   93A1 00 00 00 00 
4218   93A5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4218   93A9 00 00 00 00 
4219   93AD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4219   93B1 00 00 00 00 
4220   93B5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4220   93B9 00 00 00 00 
4221   93BD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4221   93C1 00 00 00 00 
4222   93C5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4222   93C9 00 00 00 00 
4223   93CD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4223   93D1 00 00 00 00 
4224   93D5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4224   93D9 00 00 00 00 
4225   93DD 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4225   93E1 00 00 00 00 
4226   93E5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4226   93E9 00 00 00 00 
4227   93ED 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4227   93F1 00 00 00 00 
4228   93F5 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4228   93F9 00 00 00 00 
4229   93FD 00 00 00        .BYTE  $00,$00,$00
4230   9400             ;% LB_IWS_xxxx END
4231   9400             ;------------------------------------------------------------------------------------------------------------
4232   9400             
4233   9400             
4234   9400             ;------------------------------------------------------------------------------------------------------------
4235   9400             ; $9400 TXTADDR_TBL - Not sure what it is used for
4236   9400             ; last character of name has bit 7 set. Use macro EOW to accomplish this.
4237   9400             ; $9400 - $9F80
4238   9400             ;------------------------------------------------------------------------------------------------------------
4239   9400             ;% LB_TXTADDR_TBL START
4240   9400             TXTADDR_TBL:
4241   9400             ;         NAME              BIT 7 SET      ADDRESS
4242   9400 56 4C 49 53     .TEXT "VLIS"         \  EOW('T')  \  .WORD $8000
4242   9404 D4          
4242   9405 80 00       
4243   9407 4F 50 4E 43     .TEXT "OPNCR"        \  EOW('T')  \  .WORD $0040
4243   940B 52 
4243   940C D4          
4243   940D 00 40       
4244   940F 54 45 53 54     .TEXT "TESTEN"       \  EOW('D')  \  .WORD $0004
4244   9413 45 4E 
4244   9415 C4          
4244   9416 00 04       
4245   9418 43 48 41 4E     .TEXT "CHANGETOKE"   \  EOW('N')  \  .WORD $001C
4245   941C 47 45 54 4F 
4245   9420 4B 45 
4245   9422 CE          
4245   9423 00 1C       
4246   9425 53 45 41 52     .TEXT "SEARCHENTE"   \  EOW('R')  \  .WORD $0020
4246   9429 43 48 45 4E 
4246   942D 54 45 
4246   942F D2          
4246   9430 00 20       
4247   9432 4D 41 4B 45     .TEXT "MAKEPARAME"   \  EOW('T')  \  .WORD $002E
4247   9436 50 41 52 41 
4247   943A 4D 45 
4247   943C D4          
4247   943D 00 2E       
4248   943F 4D 45 48 52     .TEXT "MEHRFACHVE"   \  EOW('R')  \  .WORD $0034
4248   9443 46 41 43 48 
4248   9447 56 45 
4248   9449 D2          
4248   944A 00 34       
4249   944C 4C 44 58 52     .TEXT "LDXRESERVE"   \  EOW('S')  \  .WORD $0038
4249   9450 45 53 45 52 
4249   9454 56 45 
4249   9456 D3          
4249   9457 00 38       
4250   9459 52 53 48 49     .TEXT "RSHIFT7BY"    \  EOW('T')  \  .WORD $0074
4250   945D 46 54 37 42 
4250   9461 59 
4250   9462 D4          
4250   9463 00 74       
4251   9465 4D 4F 56 45     .TEXT "MOVESTROUT"   \  EOW('P')  \  .WORD $0094
4251   9469 53 54 52 4F 
4251   946D 55 54 
4251   946F D0          
4251   9470 00 94       
4252   9472 44 49 53 50     .TEXT "DISPLAYTEX"   \  EOW('T')  \  .WORD $0092
4252   9476 4C 41 59 54 
4252   947A 45 58 
4252   947C D4          
4252   947D 00 92       
4253   947F 4D 41 4B 45     .TEXT "MAKEUSIN"     \  EOW('G')  \  .WORD $0096
4253   9483 55 53 49 4E 
4253   9487 C7          
4253   9488 00 96       
4254   948A 57 41 52 54     .TEXT "WARTEULAN"    \  EOW('G')  \  .WORD $00AC
4254   948E 45 55 4C 41 
4254   9492 4E 
4254   9493 C7          
4254   9494 00 AC       
4255   9496 4C 44 55 5A     .TEXT "LDUZEICHE"    \  EOW('N')  \  .WORD $00C0
4255   949A 45 49 43 48 
4255   949E 45 
4255   949F CE          
4255   94A0 00 C0       
4256   94A2 54 45 53 54     .TEXT "TESTTOKZE"    \  EOW('I')  \  .WORD $00C2
4256   94A6 54 4F 4B 5A 
4256   94AA 45 
4256   94AB C9          
4256   94AC 00 C2       
4257   94AE 54 45 53 54     .TEXT "TESTUTOKZ"    \  EOW('E')  \  .WORD $00C4
4257   94B2 55 54 4F 4B 
4257   94B6 5A 
4257   94B7 C5          
4257   94B8 00 C4       
4258   94BA 44 45 43 59     .TEXT "DECYTOKZE"    \  EOW('I')  \  .WORD $00C6
4258   94BE 54 4F 4B 5A 
4258   94C2 45 
4258   94C3 C9          
4258   94C4 00 C6       
4259   94C6 4E 4F 45 4E     .TEXT "NOENDTES"     \  EOW('T')  \  .WORD $00C8
4259   94CA 44 54 45 53 
4259   94CE D4          
4259   94CF 00 C8       
4260   94D1 4C 41 44 45     .TEXT "LADE78NN"     \  EOW('X')  \  .WORD $00CA
4260   94D5 37 38 4E 4E 
4260   94D9 D8          
4260   94DA 00 CA       
4261   94DC 4C 41 44 45     .TEXT "LADEXAUS7"    \  EOW('8')  \  .WORD $00CC
4261   94E0 58 41 55 53 
4261   94E4 37 
4261   94E5 B8          
4261   94E6 00 CC       
4262   94E8 41 52 49 54     .TEXT "ARITMETI"     \  EOW('K')  \  .WORD $00D0
4262   94EC 4D 45 54 49 
4262   94F0 CB          
4262   94F1 00 D0       
4263   94F3 54 45 53 54     .TEXT "TESTSTRNU"    \  EOW('M')  \  .WORD $00D2
4263   94F7 53 54 52 4E 
4263   94FB 55 
4263   94FC CD          
4263   94FD 00 D2       
4264   94FF 54 45 53 54     .TEXT "TESTBASICRU"  \  EOW('N')  \  .WORD $00D8
4264   9503 42 41 53 49 
4264   9507 43 52 55 
4264   950A CE          
4264   950B 00 D8       
4265   950D 53 54 52 49     .TEXT "STRINGINF"    \  EOW('O')  \  .WORD $00DC
4265   9511 4E 47 49 4E 
4265   9515 46 
4265   9516 CF          
4265   9517 00 DC       
4266   9519 41 55 53 44     .TEXT "AUSDRUC"      \  EOW('K')  \  .WORD $00DE
4266   951D 52 55 43 
4266   9520 CB          
4266   9521 00 DE       
4267   9523 45 52 52 4F     .TEXT "ERRO"         \  EOW('R')  \  .WORD $00E0
4267   9527 D2          
4267   9528 00 E0       
4268   952A 49 4E 54 45     .TEXT "INTERPRETE"   \  EOW('R')  \  .WORD $00E2
4268   952E 52 50 52 45 
4268   9532 54 45 
4268   9534 D2          
4268   9535 00 E2       
4269   9537 45 52 52 4F     .TEXT "ERROR"        \  EOW('1')  \  .WORD $00E4
4269   953B 52 
4269   953C B1          
4269   953D 00 E4       
4270   953F 43 4C 45 41     .TEXT "CLEARLC"      \  EOW('D')  \  .WORD $00F2
4270   9543 52 4C 43 
4270   9546 C4          
4270   9547 00 F2       
4271   9549 4C 41 44 45     .TEXT "LADEUAUSNNN"  \  EOW('N')  \  .WORD $00F4
4271   954D 55 41 55 53 
4271   9551 4E 4E 4E 
4271   9554 CE          
4271   9555 00 F4       
4272   9557 54 45 53 54     .TEXT "TESTKE"       \  EOW('Y')  \  .WORD $E42C
4272   955B 4B 45 
4272   955D D9          
4272   955E E4 2C       
4273   9560 53 54 4F 52     .TEXT "STORESTRIN"   \  EOW('G')  \  .WORD $DFB4
4273   9564 45 53 54 52 
4273   9568 49 4E 
4273   956A C7          
4273   956B DF B4       
4274   956D 53 54 4F 52     .TEXT "STOREINDST"   \  EOW('R')  \  .WORD $DFC5
4274   9571 45 49 4E 44 
4274   9575 53 54 
4274   9577 D2          
4274   9578 DF C5       
4275   957A 46 41 52 42     .TEXT "FARBRA"       \  EOW('M')  \  .WORD $6000
4275   957E 52 41 
4275   9580 CD          
4275   9581 60 00       
4276   9583 47 52 41 50     .TEXT "GRAPHIKRA"    \  EOW('M')  \  .WORD $3000
4276   9587 48 49 4B 52 
4276   958B 41 
4276   958C CD          
4276   958D 30 00       
4277   958F 56 49 44 45     .TEXT "VIDEORA"      \  EOW('M')  \  .WORD $7000
4277   9593 4F 52 41 
4277   9596 CD          
4277   9597 70 00       
4278   9599 56 49 44 45     .TEXT "VIDEOPROZE"   \  EOW('S')  \  .WORD $7800
4278   959D 4F 50 52 4F 
4278   95A1 5A 45 
4278   95A3 D3          
4278   95A4 78 00       
4279   95A6 42 41 53 49     .TEXT "BASICEND"     \  EOW('H')  \  .WORD $7867
4279   95AA 43 45 4E 44 
4279   95AE C8          
4279   95AF 78 67       
4280   95B1 42 41 53 49     .TEXT "BASICEND"     \  EOW('L')  \  .WORD $7868
4280   95B5 43 45 4E 44 
4280   95B9 CC          
4280   95BA 78 68       
4281   95BC 42 41 53 49     .TEXT "BASICANF"     \  EOW('H')  \  .WORD $7865
4281   95C0 43 41 4E 46 
4281   95C4 C8          
4281   95C5 78 65       
4282   95C7 42 41 53 49     .TEXT "BASICANF"     \  EOW('L')  \  .WORD $7866
4282   95CB 43 41 4E 46 
4282   95CF CC          
4282   95D0 78 66       
4283   95D2 53 54 41 54     .TEXT "STATUS"       \  EOW('H')  \  .WORD $764E
4283   95D6 55 53 
4283   95D8 C8          
4283   95D9 76 4E       
4284   95DB 53 54 41 54     .TEXT "STATUS"       \  EOW('L')  \  .WORD $764F
4284   95DF 55 53 
4284   95E1 CC          
4284   95E2 76 4F       
4285   95E4 49 4E 50 55     .TEXT "INPUTBUFFE"   \  EOW('R')  \  .WORD $7BB0
4285   95E8 54 42 55 46 
4285   95EC 46 45 
4285   95EE D2          
4285   95EF 7B B0       
4286   95F1 54 41 53 54     .TEXT "TASTUMLEI"    \  EOW('T')  \  .WORD $79D4
4286   95F5 55 4D 4C 45 
4286   95F9 49 
4286   95FA D4          
4286   95FB 79 D4       
4287   95FD 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('H')  \  .WORD $785B
4287   9601 55 4D 50 4F 
4287   9605 49 
4287   9606 C8          
4287   9607 78 5B       
4288   9609 54 41 53 54     .TEXT "TASTUMPOI"    \  EOW('L')  \  .WORD $785C
4288   960D 55 4D 50 4F 
4288   9611 49 
4288   9612 CC          
4288   9613 78 5C       
4289   9615 57 41 49 54     .TEXT "WAITY"        \  EOW('N')  \  .WORD $7871
4289   9619 59 
4289   961A CE          
4289   961B 78 71       
4290   961D 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('H')  \  .WORD $7872
4290   9621 43 4F 55 4E 
4290   9625 54 
4290   9626 C8          
4290   9627 78 72       
4291   9629 57 41 49 54     .TEXT "WAITCOUNT"    \  EOW('L')  \  .WORD $7873
4291   962D 43 4F 55 4E 
4291   9631 54 
4291   9632 CC          
4291   9633 78 73       
4292   9635 42 4C 49 4E     .TEXT "BLINKFLA"     \  EOW('G')  \  .WORD $787C
4292   9639 4B 46 4C 41 
4292   963D C7          
4292   963E 78 7C       
4293   9640 4F 55 54 50     .TEXT "OUTPBUFFP"    \  EOW('O')  \  .WORD $788F
4293   9644 42 55 46 46 
4293   9648 50 
4293   9649 CF          
4293   964A 78 8F       
4294   964C 53 54 52 49     .TEXT "STRIBUFFP"    \  EOW('O')  \  .WORD $7894
4294   9650 42 55 46 46 
4294   9654 50 
4294   9655 CF          
4294   9656 78 94       
4295   9658 55 53 49 4E     .TEXT "USINGFORMA"   \  EOW('T')  \  .WORD $7895
4295   965C 47 46 4F 52 
4295   9660 4D 41 
4295   9662 D4          
4295   9663 78 95       
4296   9665 55 53 49 4E     .TEXT "USINGLAEN"    \  EOW('G')  \  .WORD $7896
4296   9669 47 4C 41 45 
4296   966D 4E 
4296   966E C7          
4296   966F 78 96       
4297   9671 55 53 49 4E     .TEXT "USINGSTRIN"   \  EOW('G')  \  .WORD $7897
4297   9675 47 53 54 52 
4297   9679 49 4E 
4297   967B C7          
4297   967C 78 97       
4298   967E 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('H')  \  .WORD $78A6
4298   9682 43 48 41 44 
4298   9686 52 
4298   9687 C8          
4298   9688 78 A6       
4299   968A 53 45 41 52     .TEXT "SEARCHADR"    \  EOW('L')  \  .WORD $78A7
4299   968E 43 48 41 44 
4299   9692 52 
4299   9693 CC          
4299   9694 78 A7       
4300   9696 4D 4F 44 55     .TEXT "MODULS"       \  EOW('W')  \  .WORD $D800
4300   969A 4C 53 
4300   969C D7          
4300   969D D8 00       
4301   969F 4D 4F 44 55     .TEXT "MODU"         \  EOW('L')  \  .WORD $77E0
4301   96A3 CC          
4301   96A4 77 E0       
4302   96A6 4B 45 59 42     .TEXT "KEYBEE"       \  EOW('P')  \  .WORD $77E2
4302   96AA 45 45 
4302   96AC D0          
4302   96AD 77 E2       
4303   96AF 4C 52 45 43     .TEXT "LREC"         \  EOW('L')  \  .WORD $77D1
4303   96B3 CC          
4303   96B4 77 D1       
4304   96B6 55 50           .TEXT "UP"           \  EOW('L')  \  .WORD $77D2
4304   96B8 CC          
4304   96B9 77 D2       
4305   96BB 49 4E           .TEXT "IN"           \  EOW('P')  \  .WORD $77D3
4305   96BD D0          
4305   96BE 77 D3       
4306   96C0 43 55 52        .TEXT "CUR"          \  EOW('H')  \  .WORD $77D4
4306   96C3 C8          
4306   96C4 77 D4       
4307   96C6 43 55 52        .TEXT "CUR"          \  EOW('L')  \  .WORD $77D5
4307   96C9 CC          
4307   96CA 77 D5       
4308   96CC 43 55 52 50     .TEXT "CURP"         \  EOW('1')  \  .WORD $77D6
4308   96D0 B1          
4308   96D1 77 D6       
4309   96D3 4D 4F 4D 45     .TEXT "MOMENTVCU"    \  EOW('R')  \  .WORD $774E
4309   96D7 4E 54 56 43 
4309   96DB 55 
4309   96DC D2          
4309   96DD 77 4E       
4310   96DF 4D 4F 4D 45     .TEXT "MOMENTHCU"    \  EOW('R')  \  .WORD $774F
4310   96E3 4E 54 48 43 
4310   96E7 55 
4310   96E8 D2          
4310   96E9 77 4F       
4311   96EB 4B 4F 4D        .TEXT "KOM"          \  EOW('P')  \  .WORD $77D7
4311   96EE D0          
4311   96EF 77 D7       
4312   96F1 49 4E 50        .TEXT "INP"          \  EOW('P')  \  .WORD $77D8
4312   96F4 D0          
4312   96F5 77 D8       
4313   96F7 56 41 52 49     .TEXT "VARIABL"      \  EOW('E')  \  .WORD $77D9
4313   96FB 41 42 4C 
4313   96FE C5          
4313   96FF 77 D9       
4314   9701 43 55 52 53     .TEXT "CURSORAR"     \  EOW('T')  \  .WORD $77DA
4314   9705 4F 52 41 52 
4314   9709 D4          
4314   970A 77 DA       
4315   970C 43 55 52 53     .TEXT "CURSORART"    \  EOW('L')  \  .WORD $77DB
4315   9710 4F 52 41 52 
4315   9714 54 
4315   9715 CC          
4315   9716 77 DB       
4316   9718 46 41 52 42     .TEXT "FARB"         \  EOW('E')  \  .WORD $77DC
4316   971C C5          
4316   971D 77 DC       
4317   971F 48 49 4E 54     .TEXT "HINTERG"      \  EOW('R')  \  .WORD $77DD
4317   9723 45 52 47 
4317   9726 D2          
4317   9727 77 DD       
4318   9729 5A 45 49 43     .TEXT "ZEICHFARB"    \  EOW('E')  \  .WORD $77DE
4318   972D 48 46 41 52 
4318   9731 42 
4318   9732 C5          
4318   9733 77 DE       
4319   9735 56 41 52        .TEXT "VAR"          \  EOW('2')  \  .WORD $77DF
4319   9738 B2          
4319   9739 77 DF       
4320   973B 55 53 52 54     .TEXT "USRT"         \  EOW('R')  \  .WORD $77F0
4320   973F D2          
4320   9740 77 F0       
4321   9742 55 53 52 54     .TEXT "USRTR"        \  EOW('1')  \  .WORD $77F1
4321   9746 52 
4321   9747 B1          
4321   9748 77 F1       
4322   974A 55 53 52 54     .TEXT "USRTR"        \  EOW('2')  \  .WORD $77F2
4322   974E 52 
4322   974F B2          
4322   9750 77 F2       
4323   9752 50 52 49 4E     .TEXT "PRINTFLA"     \  EOW('G')  \  .WORD $77F3
4323   9756 54 46 4C 41 
4323   975A C7          
4323   975B 77 F3       
4324   975D 49 4E 46 4F     .TEXT "INFOR"        \  EOW('M')  \  .WORD $77F4
4324   9761 52 
4324   9762 CD          
4324   9763 77 F4       
4325   9765 49 4E 50 46     .TEXT "INPFLA"       \  EOW('G')  \  .WORD $77E1
4325   9769 4C 41 
4325   976B C7          
4325   976C 77 E1       
4326   976E 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('1')  \  .WORD $F0DD
4326   9772 4E 30 
4326   9774 B1          
4326   9775 F0 DD       
4327   9777 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('2')  \  .WORD $F0DE
4327   977B 4E 30 
4327   977D B2          
4327   977E F0 DE       
4328   9780 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('3')  \  .WORD $F0DF
4328   9784 4E 30 
4328   9786 B3          
4328   9787 F0 DF       
4329   9789 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('4')  \  .WORD $F088
4329   978D 4E 30 
4329   978F B4          
4329   9790 F0 88       
4330   9792 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('5')  \  .WORD $F0EB
4330   9796 4E 30 
4330   9798 B5          
4330   9799 F0 EB       
4331   979B 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('6')  \  .WORD $F0B1
4331   979F 4E 30 
4331   97A1 B6          
4331   97A2 F0 B1       
4332   97A4 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('7')  \  .WORD $F084
4332   97A8 4E 30 
4332   97AA B7          
4332   97AB F0 84       
4333   97AD 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('8')  \  .WORD $F0E0
4333   97B1 4E 30 
4333   97B3 B8          
4333   97B4 F0 E0       
4334   97B6 54 4F 4B 45     .TEXT "TOKEN0"       \  EOW('9')  \  .WORD $F070
4334   97BA 4E 30 
4334   97BC B9          
4334   97BD F0 70       
4335   97BF 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('0')  \  .WORD $F0C7
4335   97C3 4E 31 
4335   97C5 B0          
4335   97C6 F0 C7       
4336   97C8 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('1')  \  .WORD $F053
4336   97CC 4E 31 
4336   97CE B1          
4336   97CF F0 53       
4337   97D1 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('2')  \  .WORD $F052
4337   97D5 4E 31 
4337   97D7 B2          
4337   97D8 F0 52       
4338   97DA 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('3')  \  .WORD $F0E1
4338   97DE 4E 31 
4338   97E0 B3          
4338   97E1 F0 E1       
4339   97E3 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('4')  \  .WORD $F0E8
4339   97E7 4E 31 
4339   97E9 B4          
4339   97EA F0 E8       
4340   97EC 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('5')  \  .WORD $F0E9
4340   97F0 4E 31 
4340   97F2 B5          
4340   97F3 F0 E9       
4341   97F5 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('6')  \  .WORD $F054
4341   97F9 4E 31 
4341   97FB B6          
4341   97FC F0 54       
4342   97FE 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('7')  \  .WORD $F055
4342   9802 4E 31 
4342   9804 B7          
4342   9805 F0 55       
4343   9807 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('8')  \  .WORD $F071
4343   980B 4E 31 
4343   980D B8          
4343   980E F0 71       
4344   9810 54 4F 4B 45     .TEXT "TOKEN1"       \  EOW('9')  \  .WORD $F091
4344   9814 4E 31 
4344   9816 B9          
4344   9817 F0 91       
4345   9819 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('0')  \  .WORD $F0E2
4345   981D 4E 32 
4345   981F B0          
4345   9820 F0 E2       
4346   9822 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('1')  \  .WORD $F0B2
4346   9826 4E 32 
4346   9828 B1          
4346   9829 F0 B2       
4347   982B 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('2')  \  .WORD $F090
4347   982F 4E 32 
4347   9831 B2          
4347   9832 F0 90       
4348   9834 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('3')  \  .WORD $F080
4348   9838 4E 32 
4348   983A B3          
4348   983B F0 80       
4349   983D 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('4')  \  .WORD $F0E4
4349   9841 4E 32 
4349   9843 B4          
4349   9844 F0 E4       
4350   9846 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('5')  \  .WORD $F097
4350   984A 4E 32 
4350   984C B5          
4350   984D F0 97       
4351   984F 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('6')  \  .WORD $F0C3
4351   9853 4E 32 
4351   9855 B6          
4351   9856 F0 C3       
4352   9858 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('7')  \  .WORD $F0C5
4352   985C 4E 32 
4352   985E B7          
4352   985F F0 C5       
4353   9861 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('8')  \  .WORD $F081
4353   9865 4E 32 
4353   9867 B8          
4353   9868 F0 81       
4354   986A 54 4F 4B 45     .TEXT "TOKEN2"       \  EOW('9')  \  .WORD $F0E7
4354   986E 4E 32 
4354   9870 B9          
4354   9871 F0 E7       
4355   9873 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('0')  \  .WORD $F0EA
4355   9877 4E 33 
4355   9879 B0          
4355   987A F0 EA       
4356   987C 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('1')  \  .WORD $F056
4356   9880 4E 33 
4356   9882 B1          
4356   9883 F0 56       
4357   9885 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('2')  \  .WORD $F050
4357   9889 4E 33 
4357   988B B2          
4357   988C F0 50       
4358   988E 54 4F 4B 45     .TEXT "TOKEN3"       \  EOW('3')  \  .WORD $F083
4358   9892 4E 33 
4358   9894 B3          
4358   9895 F0 83       
4359   9897 54              .TEXT "T"            \  EOW('B')  \  .WORD $8055
4359   9898 C2          
4359   9899 80 55       
4360   989B 54              .TEXT "T"            \  EOW('C')  \  .WORD $8060
4360   989C C3          
4360   989D 80 60       
4361   989F 54              .TEXT "T"            \  EOW('D')  \  .WORD $8094
4361   98A0 C4          
4361   98A1 80 94       
4362   98A3 54              .TEXT "T"            \  EOW('E')  \  .WORD $80A4
4362   98A4 C5          
4362   98A5 80 A4       
4363   98A7 54              .TEXT "T"            \  EOW('G')  \  .WORD $80BD
4363   98A8 C7          
4363   98A9 80 BD       
4364   98AB 54              .TEXT "T"            \  EOW('H')  \  .WORD $80DF
4364   98AC C8          
4364   98AD 80 DF       
4365   98AF 54              .TEXT "T"            \  EOW('I')  \  .WORD $8101
4365   98B0 C9          
4365   98B1 81 01       
4366   98B3 54              .TEXT "T"            \  EOW('K')  \  .WORD $810B
4366   98B4 CB          
4366   98B5 81 0B       
4367   98B7 54              .TEXT "T"            \  EOW('L')  \  .WORD $8113
4367   98B8 CC          
4367   98B9 81 13       
4368   98BB 54              .TEXT "T"            \  EOW('M')  \  .WORD $8125
4368   98BC CD          
4368   98BD 81 25       
4369   98BF 54              .TEXT "T"            \  EOW('P')  \  .WORD $813A
4369   98C0 D0          
4369   98C1 81 3A       
4370   98C3 54              .TEXT "T"            \  EOW('R')  \  .WORD $8144
4370   98C4 D2          
4370   98C5 81 44       
4371   98C7 54              .TEXT "T"            \  EOW('S')  \  .WORD $815A
4371   98C8 D3          
4371   98C9 81 5A       
4372   98CB 54              .TEXT "T"            \  EOW('T')  \  .WORD $816D
4372   98CC D4          
4372   98CD 81 6D       
4373   98CF 54              .TEXT "T"            \  EOW('V')  \  .WORD $8177
4373   98D0 D6          
4373   98D1 81 77       
4374   98D3 41 4E 46 41     .TEXT "ANFAN"        \  EOW('G')  \  .WORD $819E
4374   98D7 4E 
4374   98D8 C7          
4374   98D9 81 9E       
4375   98DB 41 4E 46        .TEXT "ANF"          \  EOW('1')  \  .WORD $81F4
4375   98DE B1          
4375   98DF 81 F4       
4376   98E1 4B 45           .TEXT "KE"           \  EOW('Y')  \  .WORD $822F
4376   98E3 D9          
4376   98E4 82 2F       
4377   98E6 4D 4F 44 45     .TEXT "MODE"         \  EOW('T')  \  .WORD $836B
4377   98EA D4          
4377   98EB 83 6B       
4378   98ED 41 4C 54 45     .TEXT "ALTE"         \  EOW('R')  \  .WORD $8381
4378   98F1 D2          
4378   98F2 83 81       
4379   98F4 42 41 53 49     .TEXT "BASI"         \  EOW('C')  \  .WORD $83BB
4379   98F8 C3          
4379   98F9 83 BB       
4380   98FB 4E 45 58 54     .TEXT "NEXT"         \  EOW('L')  \  .WORD $83C6
4380   98FF CC          
4380   9900 83 C6       
4381   9902 4E 45 58 54     .TEXT "NEXT"         \  EOW('0')  \  .WORD $83F0
4381   9906 B0          
4381   9907 83 F0       
4382   9909 4E 45 58 54     .TEXT "NEXT"         \  EOW('E')  \  .WORD $8417
4382   990D C5          
4382   990E 84 17       
4383   9910 45 4E 54 45     .TEXT "ENTE"         \  EOW('R')  \  .WORD $8419
4383   9914 D2          
4383   9915 84 19       
4384   9917 4E 45 58 54     .TEXT "NEXT"         \  EOW('C')  \  .WORD $841F
4384   991B C3          
4384   991C 84 1F       
4385   991E 4E 45 58 54     .TEXT "NEXT"         \  EOW('D')  \  .WORD $842D
4385   9922 C4          
4385   9923 84 2D       
4386   9925 4E 45 58 54     .TEXT "NEXT"         \  EOW('2')  \  .WORD $843B
4386   9929 B2          
4386   992A 84 3B       
4387   992C 4D 4F 44 55     .TEXT "MODU"         \  EOW('S')  \  .WORD $8456
4387   9930 D3          
4387   9931 84 56       
4388   9933 4D 4F 44        .TEXT "MOD"          \  EOW('1')  \  .WORD $8466
4388   9936 B1          
4388   9937 84 66       
4389   9939 52 50 4D 4F     .TEXT "RPMOD"        \  EOW('E')  \  .WORD $84BB
4389   993D 44 
4389   993E C5          
4389   993F 84 BB       
4390   9941 4D 4F 44        .TEXT "MOD"          \  EOW('C')  \  .WORD $84C5
4390   9944 C3          
4390   9945 84 C5       
4391   9947 4D 4F 44 45     .TEXT "MODEN"        \  EOW('D')  \  .WORD $84D4
4391   994B 4E 
4391   994C C4          
4391   994D 84 D4       
4392   994F 53 43 52 4F     .TEXT "SCROL"        \  EOW('L')  \  .WORD $84D7
4392   9953 4C 
4392   9954 CC          
4392   9955 84 D7       
4393   9957 53 43 52        .TEXT "SCR"          \  EOW('1')  \  .WORD $84E6
4393   995A B1          
4393   995B 84 E6       
4394   995D 53 43 52        .TEXT "SCR"          \  EOW('2')  \  .WORD $84FD
4394   9960 B2          
4394   9961 84 FD       
4395   9963 53 43 52 4F     .TEXT "SCROL"        \  EOW('1')  \  .WORD $8501
4395   9967 4C 
4395   9968 B1          
4395   9969 85 01       
4396   996B 53 43 52 4F     .TEXT "SCRO"         \  EOW('2')  \  .WORD $8511
4396   996F B2          
4396   9970 85 11       
4397   9972 53 43 52 45     .TEXT "SCREN"        \  EOW('D')  \  .WORD $8524
4397   9976 4E 
4397   9977 C4          
4397   9978 85 24       
4398   997A 44 45 43 4F     .TEXT "DECOD"        \  EOW('E')  \  .WORD $852C
4398   997E 44 
4398   997F C5          
4398   9980 85 2C       
4399   9982 44 45 43 4F     .TEXT "DECOD"        \  EOW('1')  \  .WORD $8535
4399   9986 44 
4399   9987 B1          
4399   9988 85 35       
4400   998A 44 45 43 4F     .TEXT "DECOD1"       \  EOW('A')  \  .WORD $8556
4400   998E 44 31 
4400   9990 C1          
4400   9991 85 56       
4401   9993 44 45 43 4F     .TEXT "DECOD"        \  EOW('2')  \  .WORD $8576
4401   9997 44 
4401   9998 B2          
4401   9999 85 76       
4402   999B 44 45 43 4F     .TEXT "DECOD"        \  EOW('3')  \  .WORD $857A
4402   999F 44 
4402   99A0 B3          
4402   99A1 85 7A       
4403   99A3 44 43 44        .TEXT "DCD"          \  EOW('3')  \  .WORD $8595
4403   99A6 B3          
4403   99A7 85 95       
4404   99A9 54 52 55 4E     .TEXT "TRUN"         \  EOW('K')  \  .WORD $85B6
4404   99AD CB          
4404   99AE 85 B6       
4405   99B0 4E 4F 43 4F     .TEXT "NOCOD"        \  EOW('E')  \  .WORD $85BB
4405   99B4 44 
4405   99B5 C5          
4405   99B6 85 BB       
4406   99B8 4E 43           .TEXT "NC"           \  EOW('D')  \  .WORD $85F0
4406   99BA C4          
4406   99BB 85 F0       
4407   99BD 54 52 45 4E     .TEXT "TREN"         \  EOW('N')  \  .WORD $8604
4407   99C1 CE          
4407   99C2 86 04       
4408   99C4 54 52 45 4E     .TEXT "TRENRE"       \  EOW('T')  \  .WORD $860D
4408   99C8 52 45 
4408   99CA D4          
4408   99CB 86 0D       
4409   99CD 54 52 45 4E     .TEXT "TREN"         \  EOW('E')  \  .WORD $8643
4409   99D1 C5          
4409   99D2 86 43       
4410   99D4 54 52 45 4E     .TEXT "TREN"         \  EOW('1')  \  .WORD $8646
4410   99D8 B1          
4410   99D9 86 46       
4411   99DB 54 52 55 4E     .TEXT "TRUN"         \  EOW('C')  \  .WORD $8656
4411   99DF C3          
4411   99E0 86 56       
4412   99E2 43 55 52 53     .TEXT "CURSO"        \  EOW('R')  \  .WORD $8663
4412   99E6 4F 
4412   99E7 D2          
4412   99E8 86 63       
4413   99EA 54 4F           .TEXT "TO"           \  EOW('F')  \  .WORD $86E4
4413   99EC C6          
4413   99ED 86 E4       
4414   99EF 45 4F           .TEXT "EO"           \  EOW('F')  \  .WORD $86FA
4414   99F1 C6          
4414   99F2 86 FA       
4415   99F4 4F 42           .TEXT "OB"           \  EOW('F')  \  .WORD $8721
4415   99F6 C6          
4415   99F7 87 21       
4416   99F9 4F 55 42 46     .TEXT "OUBF"         \  EOW('1')  \  .WORD $8752
4416   99FD B1          
4416   99FE 87 52       
4417   9A00 4F 55 42 46     .TEXT "OUBF"         \  EOW('0')  \  .WORD $878B
4417   9A04 B0          
4417   9A05 87 8B       
4418   9A07 4F 55 42 46     .TEXT "OUBF"         \  EOW('2')  \  .WORD $8799
4418   9A0B B2          
4418   9A0C 87 99       
4419   9A0E 4F 55 42 46     .TEXT "OUBF"         \  EOW('3')  \  .WORD $879D
4419   9A12 B3          
4419   9A13 87 9D       
4420   9A15 4F 55 42 46     .TEXT "OUBF"         \  EOW('4')  \  .WORD $87A5
4420   9A19 B4          
4420   9A1A 87 A5       
4421   9A1C 4F 42 46        .TEXT "OBF"          \  EOW('5')  \  .WORD $87BB
4421   9A1F B5          
4421   9A20 87 BB       
4422   9A22 53 54 45        .TEXT "STE"          \  EOW('P')  \  .WORD $87CC
4422   9A25 D0          
4422   9A26 87 CC       
4423   9A28 4C 45 4E 47     .TEXT "LENGT"        \  EOW('H')  \  .WORD $87D4
4423   9A2C 54 
4423   9A2D C8          
4423   9A2E 87 D4       
4424   9A30 4F 56 45 52     .TEXT "OVERF"        \  EOW('L')  \  .WORD $87E7
4424   9A34 46 
4424   9A35 CC          
4424   9A36 87 E7       
4425   9A38 4F 56 46 4C     .TEXT "OVFL"         \  EOW('0')  \  .WORD $87FD
4425   9A3C B0          
4425   9A3D 87 FD       
4426   9A3F 4F 56 46        .TEXT "OVF"          \  EOW('0')  \  .WORD $882D
4426   9A42 B0          
4426   9A43 88 2D       
4427   9A45 4F 56 46        .TEXT "OVF"          \  EOW('1')  \  .WORD $8839
4427   9A48 B1          
4427   9A49 88 39       
4428   9A4B 4F 56 46        .TEXT "OVF"          \  EOW('2')  \  .WORD $883D
4428   9A4E B2          
4428   9A4F 88 3D       
4429   9A51 4F 55 54 53     .TEXT "OUTSC"        \  EOW('R')  \  .WORD $8854
4429   9A55 43 
4429   9A56 D2          
4429   9A57 88 54       
4430   9A59 4F 55 54 53     .TEXT "OUTSC"        \  EOW('1')  \  .WORD $885D
4430   9A5D 43 
4430   9A5E B1          
4430   9A5F 88 5D       
4431   9A61 4F 55 54 53     .TEXT "OUTSC"        \  EOW('2')  \  .WORD $8865
4431   9A65 43 
4431   9A66 B2          
4431   9A67 88 65       
4432   9A69 4F 55 54 53     .TEXT "OUTSC"        \  EOW('E')  \  .WORD $88AE
4432   9A6D 43 
4432   9A6E C5          
4432   9A6F 88 AE       
4433   9A71 44 43 55        .TEXT "DCU"          \  EOW('V')  \  .WORD $88B5
4433   9A74 D6          
4433   9A75 88 B5       
4434   9A77 4F 42 54 55     .TEXT "OBTUP"        \  EOW('L')  \  .WORD $88BF
4434   9A7B 50 
4434   9A7C CC          
4434   9A7D 88 BF       
4435   9A7F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('0')  \  .WORD $88CC
4435   9A83 50 
4435   9A84 B0          
4435   9A85 88 CC       
4436   9A87 4F 42 54 55     .TEXT "OBTUP"        \  EOW('1')  \  .WORD $88DA
4436   9A8B 50 
4436   9A8C B1          
4436   9A8D 88 DA       
4437   9A8F 4F 42 54 55     .TEXT "OBTUP"        \  EOW('E')  \  .WORD $88E5
4437   9A93 50 
4437   9A94 C5          
4437   9A95 88 E5       
4438   9A97 55 4F           .TEXT "UO"           \  EOW('V')  \  .WORD $88EB
4438   9A99 D6          
4438   9A9A 88 EB       
4439   9A9C 52 50 4C 41     .TEXT "RPLAN"        \  EOW('E')  \  .WORD $88FD
4439   9AA0 4E 
4439   9AA1 C5          
4439   9AA2 88 FD       
4440   9AA4 52 45 53 4D     .TEXT "RESMO"        \  EOW('D')  \  .WORD $8929
4440   9AA8 4F 
4440   9AA9 C4          
4440   9AAA 89 29       
4441   9AAC 52 53 4D        .TEXT "RSM"          \  EOW('0')  \  .WORD $8940
4441   9AAF B0          
4441   9AB0 89 40       
4442   9AB2 52 53 4D        .TEXT "RSM"          \  EOW('1')  \  .WORD $894E
4442   9AB5 B1          
4442   9AB6 89 4E       
4443   9AB8 43 55 52 4F     .TEXT "CUROF"        \  EOW('F')  \  .WORD $8963
4443   9ABC 46 
4443   9ABD C6          
4443   9ABE 89 63       
4444   9AC0 56 43 4C        .TEXT "VCL"          \  EOW('S')  \  .WORD $8974
4444   9AC3 D3          
4444   9AC4 89 74       
4445   9AC6 48 45           .TEXT "HE"           \  EOW('X')  \  .WORD $8981
4445   9AC8 D8          
4445   9AC9 89 81       
4446   9ACB 56 48           .TEXT "VH"           \  EOW('1')  \  .WORD $898F
4446   9ACD B1          
4446   9ACE 89 8F       
4447   9AD0 56 48 41 53     .TEXT "VHAS"         \  EOW('C')  \  .WORD $89A1
4447   9AD4 C3          
4447   9AD5 89 A1       
4448   9AD7 56 48 41 53     .TEXT "VHAS"         \  EOW('1')  \  .WORD $89A9
4448   9ADB B1          
4448   9ADC 89 A9       
4449   9ADE 56 48 41 53     .TEXT "VHAS"         \  EOW('2')  \  .WORD $89B3
4449   9AE2 B2          
4449   9AE3 89 B3       
4450   9AE5 43 4F 4E 53     .TEXT "CONSOL"       \  EOW('E')  \  .WORD $89B5
4450   9AE9 4F 4C 
4450   9AEB C5          
4450   9AEC 89 B5       
4451   9AEE 56 53 49 5A     .TEXT "VSIZ"         \  EOW('1')  \  .WORD $8A27
4451   9AF2 B1          
4451   9AF3 8A 27       
4452   9AF5 44 49           .TEXT "DI"           \  EOW('P')  \  .WORD $8A38
4452   9AF7 D0          
4452   9AF8 8A 38       
4453   9AFA 56 53 49 5A     .TEXT "VSIZ"         \  EOW('F')  \  .WORD $8A46
4453   9AFE C6          
4453   9AFF 8A 46       
4454   9B01 56 53 49 5A     .TEXT "VSIZF"        \  EOW('A')  \  .WORD $8A48
4454   9B05 46 
4454   9B06 C1          
4454   9B07 8A 48       
4455   9B09 56 43 55 52     .TEXT "VCUR"         \  EOW('S')  \  .WORD $8A49
4455   9B0D D3          
4455   9B0E 8A 49       
4456   9B10 43 55 52 53     .TEXT "CURS1"        \  EOW('W')  \  .WORD $8A75
4456   9B14 31 
4456   9B15 D7          
4456   9B16 8A 75       
4457   9B18 43 55 52 53     .TEXT "CURS2"        \  EOW('W')  \  .WORD $8A7E
4457   9B1C 32 
4457   9B1D D7          
4457   9B1E 8A 7E       
4458   9B20 45 52 52 43     .TEXT "ERRCU"        \  EOW('R')  \  .WORD $8A88
4458   9B24 55 
4458   9B25 D2          
4458   9B26 8A 88       
4459   9B28 45 52 52 43     .TEXT "ERRCURSO"     \  EOW('R')  \  .WORD $8A8A
4459   9B2C 55 52 53 4F 
4459   9B30 D2          
4459   9B31 8A 8A       
4460   9B33 56 50 52 49     .TEXT "VPRIN"        \  EOW('T')  \  .WORD $8A8B
4460   9B37 4E 
4460   9B38 D4          
4460   9B39 8A 8B       
4461   9B3B 43 4C 4F        .TEXT "CLO"          \  EOW('B')  \  .WORD $8AA3
4461   9B3E C2          
4461   9B3F 8A A3       
4462   9B41 56 50 41        .TEXT "VPA"          \  EOW('N')  \  .WORD $8AA6
4462   9B44 CE          
4462   9B45 8A A6       
4463   9B47 56 50 41 4E     .TEXT "VPAN"         \  EOW('0')  \  .WORD $8AB6
4463   9B4B B0          
4463   9B4C 8A B6       
4464   9B4E 56 50 52        .TEXT "VPR"          \  EOW('0')  \  .WORD $8ABB
4464   9B51 B0          
4464   9B52 8A BB       
4465   9B54 50 52 46        .TEXT "PRF"          \  EOW('0')  \  .WORD $8AC5
4465   9B57 B0          
4465   9B58 8A C5       
4466   9B5A 56 50 52        .TEXT "VPR"          \  EOW('1')  \  .WORD $8AC8
4466   9B5D B1          
4466   9B5E 8A C8       
4467   9B60 55 53 49 4E     .TEXT "USIN"         \  EOW('G')  \  .WORD $8AF7
4467   9B64 C7          
4467   9B65 8A F7       
4468   9B67 55 53           .TEXT "US"           \  EOW('1')  \  .WORD $8B02
4468   9B69 B1          
4468   9B6A 8B 02       
4469   9B6C 55 53           .TEXT "US"           \  EOW('2')  \  .WORD $8B0C
4469   9B6E B2          
4469   9B6F 8B 0C       
4470   9B71 50 52 41 53     .TEXT "PRAS"         \  EOW('C')  \  .WORD $8B27
4470   9B75 C3          
4470   9B76 8B 27       
4471   9B78 50 52 53 43     .TEXT "PRSC"         \  EOW('0')  \  .WORD $8B31
4471   9B7C B0          
4471   9B7D 8B 31       
4472   9B7F 50 52 53 43     .TEXT "PRSC"         \  EOW('1')  \  .WORD $8B52
4472   9B83 B1          
4472   9B84 8B 52       
4473   9B86 50 52 53 43     .TEXT "PRSC"         \  EOW('2')  \  .WORD $8B62
4473   9B8A B2          
4473   9B8B 8B 62       
4474   9B8D 50 52 53 43     .TEXT "PRSC"         \  EOW('3')  \  .WORD $8B69
4474   9B91 B3          
4474   9B92 8B 69       
4475   9B94 56 50 52        .TEXT "VPR"          \  EOW('2')  \  .WORD $8B91
4475   9B97 B2          
4475   9B98 8B 91       
4476   9B9A 4F 55 54 42     .TEXT "OUTBU"        \  EOW('F')  \  .WORD $8B9E
4476   9B9E 55 
4476   9B9F C6          
4476   9BA0 8B 9E       
4477   9BA2 4F 42 46        .TEXT "OBF"          \  EOW('0')  \  .WORD $8BC0
4477   9BA5 B0          
4477   9BA6 8B C0       
4478   9BA8 4F 42 46        .TEXT "OBF"          \  EOW('1')  \  .WORD $8BFC
4478   9BAB B1          
4478   9BAC 8B FC       
4479   9BAE 50 52 54 45     .TEXT "PRTEN"        \  EOW('D')  \  .WORD $8C17
4479   9BB2 4E 
4479   9BB3 C4          
4479   9BB4 8C 17       
4480   9BB6 50 52 46 45     .TEXT "PRFEH"        \  EOW('L')  \  .WORD $8C38
4480   9BBA 48 
4480   9BBB CC          
4480   9BBC 8C 38       
4481   9BBE 57 41 49        .TEXT "WAI"          \  EOW('T')  \  .WORD $8C3F
4481   9BC1 D4          
4481   9BC2 8C 3F       
4482   9BC4 4E 4F 56        .TEXT "NOV"          \  EOW('C')  \  .WORD $8C4A
4482   9BC7 C3          
4482   9BC8 8C 4A       
4483   9BCA 4B 4F 4D        .TEXT "KOM"          \  EOW('L')  \  .WORD $8C57
4483   9BCD CC          
4483   9BCE 8C 57       
4484   9BD0 4B 4F 4D 4C     .TEXT "KOML"         \  EOW('1')  \  .WORD $8C72
4484   9BD4 B1          
4484   9BD5 8C 72       
4485   9BD7 49 4E 50 55     .TEXT "INPU"         \  EOW('T')  \  .WORD $8C89
4485   9BDB D4          
4485   9BDC 8C 89       
4486   9BDE 58 49 4E 50     .TEXT "XINP"         \  EOW('1')  \  .WORD $8C8F
4486   9BE2 B1          
4486   9BE3 8C 8F       
4487   9BE5 58 49 4E 50     .TEXT "XINP"         \  EOW('3')  \  .WORD $8CC7
4487   9BE9 B3          
4487   9BEA 8C C7       
4488   9BEC 58 49 4E 50     .TEXT "XINP"         \  EOW('6')  \  .WORD $8CCA
4488   9BF0 B6          
4488   9BF1 8C CA       
4489   9BF3 58 49 4E 50     .TEXT "XINP"         \  EOW('4')  \  .WORD $8CD1
4489   9BF7 B4          
4489   9BF8 8C D1       
4490   9BFA 58 49 4E 50     .TEXT "XINP"         \  EOW('2')  \  .WORD $8CFB
4490   9BFE B2          
4490   9BFF 8C FB       
4491   9C01 58 49 4E 50     .TEXT "XINP"         \  EOW('5')  \  .WORD $8D15
4491   9C05 B5          
4491   9C06 8D 15       
4492   9C08 45 44 49 54     .TEXT "EDITO"        \  EOW('R')  \  .WORD $8D18
4492   9C0C 4F 
4492   9C0D D2          
4492   9C0E 8D 18       
4493   9C10 43 4C 45 41     .TEXT "CLEARSC"      \  EOW('R')  \  .WORD $8D41
4493   9C14 52 53 43 
4493   9C17 D2          
4493   9C18 8D 41       
4494   9C1A 43 4C           .TEXT "CL"           \  EOW('1')  \  .WORD $8D4A
4494   9C1C B1          
4494   9C1D 8D 4A       
4495   9C1F 57 52 49 54     .TEXT "WRITE"        \  EOW('1')  \  .WORD $8D5E
4495   9C23 45 
4495   9C24 B1          
4495   9C25 8D 5E       
4496   9C27 57 52 49 54     .TEXT "WRITE"        \  EOW('2')  \  .WORD $8D64
4496   9C2B 45 
4496   9C2C B2          
4496   9C2D 8D 64       
4497   9C2F 4F 42 54 41     .TEXT "OBTAI"        \  EOW('N')  \  .WORD $8D6B
4497   9C33 49 
4497   9C34 CE          
4497   9C35 8D 6B       
4498   9C37 4F 42 54        .TEXT "OBT"          \  EOW('1')  \  .WORD $8D95
4498   9C3A B1          
4498   9C3B 8D 95       
4499   9C3D 4F 42 54        .TEXT "OBT"          \  EOW('2')  \  .WORD $8D99
4499   9C40 B2          
4499   9C41 8D 99       
4500   9C43 4F 42 54 45     .TEXT "OBTEN"        \  EOW('D')  \  .WORD $8D9C
4500   9C47 4E 
4500   9C48 C4          
4500   9C49 8D 9C       
4501   9C4B 4F 42 54        .TEXT "OBT"          \  EOW('F')  \  .WORD $8DA3
4501   9C4E C6          
4501   9C4F 8D A3       
4502   9C51 49 4E 49 54     .TEXT "INITIA"       \  EOW('L')  \  .WORD $8DA8
4502   9C55 49 41 
4502   9C57 CC          
4502   9C58 8D A8       
4503   9C5A 49 4E 49 54     .TEXT "INITIA"       \  EOW('1')  \  .WORD $8DAC
4503   9C5E 49 41 
4503   9C60 B1          
4503   9C61 8D AC       
4504   9C63 46 49 52 53     .TEXT "FIRS"         \  EOW('T')  \  .WORD $8DC1
4504   9C67 D4          
4504   9C68 8D C1       
4505   9C6A 57 41 52 54     .TEXT "WARTE"        \  EOW('V')  \  .WORD $8DD0
4505   9C6E 45 
4505   9C6F D6          
4505   9C70 8D D0       
4506   9C72 41 4E           .TEXT "AN"           \  EOW('Z')  \  .WORD $8DDE
4506   9C74 DA          
4506   9C75 8D DE       
4507   9C77 54 41           .TEXT "TA"           \  EOW('S')  \  .WORD $8DEA
4507   9C79 D3          
4507   9C7A 8D EA       
4508   9C7C 46 49 52 53     .TEXT "FIRST"        \  EOW('1')  \  .WORD $8E03
4508   9C80 54 
4508   9C81 B1          
4508   9C82 8E 03       
4509   9C84 53 54 52 54     .TEXT "STRTA"        \  EOW('D')  \  .WORD $8E5F
4509   9C88 41 
4509   9C89 C4          
4509   9C8A 8E 5F       
4510   9C8C 43 4C 53        .TEXT "CLS"          \  EOW('0')  \  .WORD $8E64
4510   9C8F B0          
4510   9C90 8E 64       
4511   9C92 43 4C 53        .TEXT "CLS"          \  EOW('1')  \  .WORD $8E6D
4511   9C95 B1          
4511   9C96 8E 6D       
4512   9C98 43 4C 53        .TEXT "CLS"          \  EOW('A')  \  .WORD $8E78
4512   9C9B C1          
4512   9C9C 8E 78       
4513   9C9E 43 4C 53 41     .TEXT "CLSA"         \  EOW('0')  \  .WORD $8E7C
4513   9CA2 B0          
4513   9CA3 8E 7C       
4514   9CA5 53 54 4F        .TEXT "STO"          \  EOW('R')  \  .WORD $8E86
4514   9CA8 D2          
4514   9CA9 8E 86       
4515   9CAB 44 41 54        .TEXT "DAT"          \  EOW('1')  \  .WORD $8E8F
4515   9CAE B1          
4515   9CAF 8E 8F       
4516   9CB1 44 41 54        .TEXT "DAT"          \  EOW('2')  \  .WORD $8EA1
4516   9CB4 B2          
4516   9CB5 8E A1       
4517   9CB7 4D 4F 44        .TEXT "MOD"          \  EOW('T')  \  .WORD $8EB3
4517   9CBA D4          
4517   9CBB 8E B3       
4518   9CBD 54 58 54        .TEXT "TXT"          \  EOW('5')  \  .WORD $8EC7
4518   9CC0 B5          
4518   9CC1 8E C7       
4519   9CC3 4D 4F 4E 49     .TEXT "MONITO"       \  EOW('R')  \  .WORD $8EE1
4519   9CC7 54 4F 
4519   9CC9 D2          
4519   9CCA 8E E1       
4520   9CCC 56 43 55 52     .TEXT "VCURSO"       \  EOW('R')  \  .WORD $8EE4
4520   9CD0 53 4F 
4520   9CD2 D2          
4520   9CD3 8E E4       
4521   9CD5 56 50 43 55     .TEXT "VPCURSO"      \  EOW('R')  \  .WORD $8EEB
4521   9CD9 52 53 4F 
4521   9CDC D2          
4521   9CDD 8E EB       
4522   9CDF 48 43 55 52     .TEXT "HCURSO"       \  EOW('R')  \  .WORD $8EFD
4522   9CE3 53 4F 
4522   9CE5 D2          
4522   9CE6 8E FD       
4523   9CE8 48 50 43 55     .TEXT "HPCURSO"      \  EOW('R')  \  .WORD $8F04
4523   9CEC 52 53 4F 
4523   9CEF D2          
4523   9CF0 8F 04       
4524   9CF2 4C 49 53        .TEXT "LIS"          \  EOW('T')  \  .WORD $8F16
4524   9CF5 D4          
4524   9CF6 8F 16       
4525   9CF8 56 4C 49 53     .TEXT "VLISTAL"      \  EOW('L')  \  .WORD $8F43
4525   9CFC 54 41 4C 
4525   9CFF CC          
4525   9D00 8F 43       
4526   9D02 4C 49 53 54     .TEXT "LISTAL"       \  EOW('L')  \  .WORD $8F46
4526   9D06 41 4C 
4526   9D08 CC          
4526   9D09 8F 46       
4527   9D0B 50 4C 49 53     .TEXT "PLISTAL"      \  EOW('L')  \  .WORD $8F54
4527   9D0F 54 41 4C 
4527   9D12 CC          
4527   9D13 8F 54       
4528   9D15 4C 49 53 54     .TEXT "LISTCR"       \  EOW('T')  \  .WORD $8F56
4528   9D19 43 52 
4528   9D1B D4          
4528   9D1C 8F 56       
4529   9D1E 4C 49 53 54     .TEXT "LISTSCROL"    \  EOW('L')  \  .WORD $8F76
4529   9D22 53 43 52 4F 
4529   9D26 4C 
4529   9D27 CC          
4529   9D28 8F 76       
4530   9D2A 4C 49 53 54     .TEXT "LISTLABE"     \  EOW('L')  \  .WORD $8F7C
4530   9D2E 4C 41 42 45 
4530   9D32 CC          
4530   9D33 8F 7C       
4531   9D35 48 4F 4C 44     .TEXT "HOLD"         \  EOW('1')  \  .WORD $8F95
4531   9D39 B1          
4531   9D3A 8F 95       
4532   9D3C 48 4F 4C 44     .TEXT "HOLD"         \  EOW('2')  \  .WORD $8F97
4532   9D40 B2          
4532   9D41 8F 97       
4533   9D43 57 41 52 54     .TEXT "WART"         \  EOW('E')  \  .WORD $8FA7
4533   9D47 C5          
4533   9D48 8F A7       
4534   9D4A 4C 49 53 54     .TEXT "LISTEDI"      \  EOW('T')  \  .WORD $9010
4534   9D4E 45 44 49 
4534   9D51 D4          
4534   9D52 90 10       
4535   9D54 42 41 43 4B     .TEXT "BACKG"        \  EOW('R')  \  .WORD $9023
4535   9D58 47 
4535   9D59 D2          
4535   9D5A 90 23       
4536   9D5C 42 41 43 4B     .TEXT "BACKGRS"      \  EOW('T')  \  .WORD $9065
4536   9D60 47 52 53 
4536   9D63 D4          
4536   9D64 90 65       
4537   9D66 42 41 43 4B     .TEXT "BACKGRB"      \  EOW('E')  \  .WORD $906A
4537   9D6A 47 52 42 
4537   9D6D C5          
4537   9D6E 90 6A       
4538   9D70 42 41 43 4B     .TEXT "BACKGRLADE"   \  EOW('N')  \  .WORD $9072
4538   9D74 47 52 4C 41 
4538   9D78 44 45 
4538   9D7A CE          
4538   9D7B 90 72       
4539   9D7D 45 52 52 42     .TEXT "ERRBACKG"     \  EOW('R')  \  .WORD $9081
4539   9D81 41 43 4B 47 
4539   9D85 D2          
4539   9D86 90 81       
4540   9D88 45 52           .TEXT "ER"           \  EOW('N')  \  .WORD $9082
4540   9D8A CE          
4540   9D8B 90 82       
4541   9D8D 45 52           .TEXT "ER"           \  EOW('L')  \  .WORD $9088
4541   9D8F CC          
4541   9D90 90 88       
4542   9D92 53 43 48 55     .TEXT "SCHUT"        \  EOW('Z')  \  .WORD $908E
4542   9D96 54 
4542   9D97 DA          
4542   9D98 90 8E       
4543   9D9A 53 4C 45 45     .TEXT "SLEE"         \  EOW('P')  \  .WORD $90AA
4543   9D9E D0          
4543   9D9F 90 AA       
4544   9DA1 52 45 50 5A     .TEXT "REPZE"        \  EOW('I')  \  .WORD $90DE
4544   9DA5 45 
4544   9DA6 C9          
4544   9DA7 90 DE       
4545   9DA9 52 45 50 4B     .TEXT "REPKE"        \  EOW('Y')  \  .WORD $90F1
4545   9DAD 45 
4545   9DAE D9          
4545   9DAF 90 F1       
4546   9DB1 4C 44 52 45     .TEXT "LDRE"         \  EOW('P')  \  .WORD $90F7
4546   9DB5 D0          
4546   9DB6 90 F7       
4547   9DB8 52 45 50 4F     .TEXT "REPOF"        \  EOW('F')  \  .WORD $90FB
4547   9DBC 46 
4547   9DBD C6          
4547   9DBE 90 FB       
4548   9DC0 45 52 52 52     .TEXT "ERRRE"        \  EOW('P')  \  .WORD $9105
4548   9DC4 45 
4548   9DC5 D0          
4548   9DC6 91 05       
4549   9DC8 47 43 4C        .TEXT "GCL"          \  EOW('S')  \  .WORD $9107
4549   9DCB D3          
4549   9DCC 91 07       
4550   9DCE 43 4C 45 41     .TEXT "CLEARG"       \  EOW('R')  \  .WORD $9116
4550   9DD2 52 47 
4550   9DD4 D2          
4550   9DD5 91 16       
4551   9DD7 43 4C 52 47     .TEXT "CLRGRAP"      \  EOW('H')  \  .WORD $911A
4551   9DDB 52 41 50 
4551   9DDE C8          
4551   9DDF 91 1A       
4552   9DE1 43 4C 52 47     .TEXT "CLRGS"        \  EOW('T')  \  .WORD $913C
4552   9DE5 53 
4552   9DE6 D4          
4552   9DE7 91 3C       
4553   9DE9 45 52 52 47     .TEXT "ERRGCL"       \  EOW('S')  \  .WORD $914B
4553   9DED 43 4C 
4553   9DEF D3          
4553   9DF0 91 4B       
4554   9DF2 44 45           .TEXT "DE"           \  EOW('Z')  \  .WORD $914C
4554   9DF4 DA          
4554   9DF5 91 4C       
4555   9DF7 54 45 53        .TEXT "TES"          \  EOW('T')  \  .WORD $914F
4555   9DFA D4          
4555   9DFB 91 4F       
4556   9DFD 43 4F 4C 4F     .TEXT "COLO"         \  EOW('R')  \  .WORD $914F
4556   9E01 D2          
4556   9E02 91 4F       
4557   9E04 45 44 49        .TEXT "EDI"          \  EOW('T')  \  .WORD $914F
4557   9E07 D4          
4557   9E08 91 4F       
4558   9E0A 47 43 55 52     .TEXT "GCURSO"       \  EOW('R')  \  .WORD $914F
4558   9E0E 53 4F 
4558   9E10 D2          
4558   9E11 91 4F       
4559   9E13 47 50 52 49     .TEXT "GPRIN"        \  EOW('T')  \  .WORD $914F
4559   9E17 4E 
4559   9E18 D4          
4559   9E19 91 4F       
4560   9E1B 52 45 50 52     .TEXT "REPRO"        \  EOW('G')  \  .WORD $914F
4560   9E1F 4F 
4560   9E20 C7          
4560   9E21 91 4F       
4561   9E23 4B 45 59 52     .TEXT "KEYRA"        \  EOW('M')  \  .WORD $9150
4561   9E27 41 
4561   9E28 CD          
4561   9E29 91 50       
4562   9E2B 53 45 54 50     .TEXT "SETP"         \  EOW('V')  \  .WORD $9168
4562   9E2F D6          
4562   9E30 91 68       
4563   9E32 4B 45 59 42     .TEXT "KEYBOUMLEI"   \  EOW('T')  \  .WORD $9176
4563   9E36 4F 55 4D 4C 
4563   9E3A 45 49 
4563   9E3C D4          
4563   9E3D 91 76       
4564   9E3F 53 43 52 4F     .TEXT "SCROLLMINU"   \  EOW('S')  \  .WORD $9189
4564   9E43 4C 4C 4D 49 
4564   9E47 4E 55 
4564   9E49 D3          
4564   9E4A 91 89       
4565   9E4C 43 4F 50        .TEXT "COP"          \  EOW('Y')  \  .WORD $9195
4565   9E4F D9          
4565   9E50 91 95       
4566   9E52 50 52 49 4E     .TEXT "PRIN"         \  EOW('T')  \  .WORD $91A7
4566   9E56 D4          
4566   9E57 91 A7       
4567   9E59 50 52 49 4E     .TEXT "PRINTNOKREU"  \  EOW('Z')  \  .WORD $91B1
4567   9E5D 54 4E 4F 4B 
4567   9E61 52 45 55 
4567   9E64 DA          
4567   9E65 91 B1       
4568   9E67 50 52 49 4E     .TEXT "PRINTDIS"     \  EOW('K')  \  .WORD $91BB
4568   9E6B 54 44 49 53 
4568   9E6F CB          
4568   9E70 91 BB       
4569   9E72 45 52 52 50     .TEXT "ERRPRK"       \  EOW('R')  \  .WORD $91D2
4569   9E76 52 4B 
4569   9E78 D2          
4569   9E79 91 D2       
4570   9E7B 4D 4F 44        .TEXT "MOD"          \  EOW('E')  \  .WORD $91D3
4570   9E7E C5          
4570   9E7F 91 D3       
4571   9E81 4D 4F 44 45     .TEXT "MODEC"        \  EOW('L')  \  .WORD $91D8
4571   9E85 43 
4571   9E86 CC          
4571   9E87 91 D8       
4572   9E89 53 55 42 4D     .TEXT "SUBM"         \  EOW('O')  \  .WORD $91EF
4572   9E8D CF          
4572   9E8E 91 EF       
4573   9E90 4D 4F 44 55     .TEXT "MODULBI"      \  EOW('T')  \  .WORD $920C
4573   9E94 4C 42 49 
4573   9E97 D4          
4573   9E98 92 0C       
4574   9E9A 4D 45 52        .TEXT "MER"          \  EOW('R')  \  .WORD $9218
4574   9E9D D2          
4574   9E9E 92 18       
4575   9EA0 53 50 45 45     .TEXT "SPEEDS"       \  EOW('W')  \  .WORD $9219
4575   9EA4 44 53 
4575   9EA6 D7          
4575   9EA7 92 19       
4576   9EA9 53 50 45 45     .TEXT "SPEED"        \  EOW('2')  \  .WORD $921F
4576   9EAD 44 
4576   9EAE B2          
4576   9EAF 92 1F       
4577   9EB1 53 45 52        .TEXT "SER"          \  EOW('R')  \  .WORD $9232
4577   9EB4 D2          
4577   9EB5 92 32       
4578   9EB7 53 45 52 52     .TEXT "SERR"         \  EOW('2')  \  .WORD $9233
4578   9EBB B2          
4578   9EBC 92 33       
4579   9EBE 53 41 56        .TEXT "SAV"          \  EOW('E')  \  .WORD $9234
4579   9EC1 C5          
4579   9EC2 92 34       
4580   9EC4 4C 4F 41        .TEXT "LOA"          \  EOW('D')  \  .WORD $9244
4580   9EC7 C4          
4580   9EC8 92 44       
4581   9ECA 4C 4F 41 44     .TEXT "LOAD"         \  EOW('C')  \  .WORD $9254
4581   9ECE C3          
4581   9ECF 92 54       
4582   9ED1 4C 4F 41 44     .TEXT "LOAD"         \  EOW('F')  \  .WORD $9264
4582   9ED5 C6          
4582   9ED6 92 64       
4583   9ED8 4C 4F 41 44     .TEXT "LOAD"         \  EOW('Q')  \  .WORD $9274
4583   9EDC D1          
4583   9EDD 92 74       
4584   9EDF 53 41 56 45     .TEXT "SAVE"         \  EOW('C')  \  .WORD $9277
4584   9EE3 C3          
4584   9EE4 92 77       
4585   9EE6 53 41 56 45     .TEXT "SAVE"         \  EOW('F')  \  .WORD $9287
4585   9EEA C6          
4585   9EEB 92 87       
4586   9EED 53 41 56 45     .TEXT "SAVE"         \  EOW('Q')  \  .WORD $9297
4586   9EF1 D1          
4586   9EF2 92 97       
4587   9EF4 53 41 56 45     .TEXT "SAVE"         \  EOW('D')  \  .WORD $929A
4587   9EF8 C4          
4587   9EF9 92 9A       
4588   9EFB 4C 4F 41 44     .TEXT "LOAD"         \  EOW('D')  \  .WORD $92A6
4588   9EFF C4          
4588   9F00 92 A6       
4589   9F02 53 41 56 45     .TEXT "SAVE"         \  EOW('R')  \  .WORD $92B2
4589   9F06 D2          
4589   9F07 92 B2       
4590   9F09 4C 4F 41 44     .TEXT "LOAD"         \  EOW('R')  \  .WORD $92BE
4590   9F0D D2          
4590   9F0E 92 BE       
4591   9F10 44 49           .TEXT "DI"           \  EOW('R')  \  .WORD $92CA
4591   9F12 D2          
4591   9F13 92 CA       
4592   9F15 4E 4F 44 45     .TEXT "NODER"        \  EOW('R')  \  .WORD $92D6
4592   9F19 52 
4592   9F1A D2          
4592   9F1B 92 D6       
4593   9F1D 56 45 52 49     .TEXT "VERI"         \  EOW('Q')  \  .WORD $92D9
4593   9F21 D1          
4593   9F22 92 D9       
4594   9F24 43 48 41 49     .TEXT "CHAI"         \  EOW('N')  \  .WORD $92DC
4594   9F28 CE          
4594   9F29 92 DC       
4595   9F2B 43 48 41 49     .TEXT "CHAI"         \  EOW('C')  \  .WORD $92F5
4595   9F2F C3          
4595   9F30 92 F5       
4596   9F32 43 48 41 49     .TEXT "CHAI"         \  EOW('Q')  \  .WORD $9305
4596   9F36 D1          
4596   9F37 93 05       
4597   9F39 4B 45 59 42     .TEXT "KEYBOAR"      \  EOW('D')  \  .WORD $9308
4597   9F3D 4F 41 52 
4597   9F40 C4          
4597   9F41 93 08       
4598   9F43 4B 42 45 45     .TEXT "KBEEOF"       \  EOW('F')  \  .WORD $9317
4598   9F47 4F 46 
4598   9F49 C6          
4598   9F4A 93 17       
4599   9F4C 4B 42 45 52     .TEXT "KBER"         \  EOW('R')  \  .WORD $9322
4599   9F50 D2          
4599   9F51 93 22       
4600   9F53 4B 54 41 53     .TEXT "KTAS"         \  EOW('T')  \  .WORD $9323
4600   9F57 D4          
4600   9F58 93 23       
4601   9F5A 4B 54 41 53     .TEXT "KTASOF"       \  EOW('F')  \  .WORD $9339
4601   9F5E 4F 46 
4601   9F60 C6          
4601   9F61 93 39       
4602   9F63 4B 54 41 45     .TEXT "KTAER"        \  EOW('R')  \  .WORD $934F
4602   9F67 52 
4602   9F68 D2          
4602   9F69 93 4F       
4603   9F6B 54 52 41 43     .TEXT "TRAC"         \  EOW('E')  \  .WORD $9350
4603   9F6F C5          
4603   9F70 93 50       
4604   9F72 54 45 4C 45     .TEXT "TELEFO"       \  EOW('N')  \  .WORD $936D
4604   9F76 46 4F 
4604   9F78 CE          
4604   9F79 93 6D       
4605   9F7B             ;% LB_TXTADDR_TBL END
4606   9F7B             ;------------------------------------------------------------------------------------------------------------
4607   9F7B             
4608   9F7B             
4609   9F7B             
4610   9F7B             ;------------------------------------------------------------------------------------------------------------
4611   9F7B             ; Unknown
4612   9F7B FF 00 C5 14     .BYTE $FF,$00,$C5,$14,$00,$51,$D5
4612   9F7F 00 51 D5 
4613   9F82             ;------------------------------------------------------------------------------------------------------------
4614   9F82             
4615   9F82             
4616   9F82             
4617   9F82             ;------------------------------------------------------------------------------------------------------------
4618   9F82             ; $9F82 - $9FFF Filler
4619   9F82             ;------------------------------------------------------------------------------------------------------------
4620   9F82             ;% LB_FILLER_9F82 START
4621   9F82             FILLER_9F82:
4622   9F82 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4622   9F86 00 00 00 00 
4623   9F8A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4623   9F8E 00 00 00 00 
4624   9F92 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4624   9F96 00 00 00 00 
4625   9F9A 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4625   9F9E 00 00 00 00 
4626   9FA2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4626   9FA6 00 00 00 00 
4627   9FAA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4627   9FAE 00 00 00 00 
4628   9FB2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4628   9FB6 00 00 00 00 
4629   9FBA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4629   9FBE 00 00 00 00 
4630   9FC2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4630   9FC6 00 00 00 00 
4631   9FCA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4631   9FCE 00 00 00 00 
4632   9FD2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4632   9FD6 00 00 00 00 
4633   9FDA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4633   9FDE 00 00 00 00 
4634   9FE2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4634   9FE6 00 00 00 00 
4635   9FEA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4635   9FEE 00 00 00 00 
4636   9FF2 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00,$00,$00
4636   9FF6 00 00 00 00 
4637   9FFA 00 00 00 00     .BYTE  $00,$00,$00,$00,$00,$00
4637   9FFE 00 00 
4638   A000             ;% LB_FILLER_9F82 END
4639   A000             ;------------------------------------------------------------------------------------------------------------
4640   A000             
4641   A000             .END
tasm: Number of errors = 0
